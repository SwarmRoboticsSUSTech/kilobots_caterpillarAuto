
build/bootldr.elf:     file format elf32-avr


Disassembly of section .text:

00007000 <__vectors>:
    7000:	0c 94 34 38 	jmp	0x7068	; 0x7068 <__ctors_end>
    7004:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7008:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    700c:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7010:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7014:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7018:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    701c:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7020:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7024:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7028:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    702c:	0c 94 b7 39 	jmp	0x736e	; 0x736e <__vector_11>
    7030:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7034:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7038:	0c 94 92 39 	jmp	0x7324	; 0x7324 <__vector_14>
    703c:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7040:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7044:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7048:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    704c:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7050:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7054:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7058:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    705c:	0c 94 d9 39 	jmp	0x73b2	; 0x73b2 <__vector_23>
    7060:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7064:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>

00007068 <__ctors_end>:
    7068:	11 24       	eor	r1, r1
    706a:	1f be       	out	0x3f, r1	; 63
    706c:	cf ef       	ldi	r28, 0xFF	; 255
    706e:	d8 e0       	ldi	r29, 0x08	; 8
    7070:	de bf       	out	0x3e, r29	; 62
    7072:	cd bf       	out	0x3d, r28	; 61

00007074 <__do_copy_data>:
    7074:	11 e0       	ldi	r17, 0x01	; 1
    7076:	a0 e0       	ldi	r26, 0x00	; 0
    7078:	b1 e0       	ldi	r27, 0x01	; 1
    707a:	e4 e4       	ldi	r30, 0x44	; 68
    707c:	f6 e7       	ldi	r31, 0x76	; 118
    707e:	02 c0       	rjmp	.+4      	; 0x7084 <__do_copy_data+0x10>
    7080:	05 90       	lpm	r0, Z+
    7082:	0d 92       	st	X+, r0
    7084:	a6 30       	cpi	r26, 0x06	; 6
    7086:	b1 07       	cpc	r27, r17
    7088:	d9 f7       	brne	.-10     	; 0x7080 <__do_copy_data+0xc>

0000708a <__do_clear_bss>:
    708a:	21 e0       	ldi	r18, 0x01	; 1
    708c:	a6 e0       	ldi	r26, 0x06	; 6
    708e:	b1 e0       	ldi	r27, 0x01	; 1
    7090:	01 c0       	rjmp	.+2      	; 0x7094 <.do_clear_bss_start>

00007092 <.do_clear_bss_loop>:
    7092:	1d 92       	st	X+, r1

00007094 <.do_clear_bss_start>:
    7094:	a6 3c       	cpi	r26, 0xC6	; 198
    7096:	b2 07       	cpc	r27, r18
    7098:	e1 f7       	brne	.-8      	; 0x7092 <.do_clear_bss_loop>
    709a:	0e 94 d3 3a 	call	0x75a6	; 0x75a6 <main>
    709e:	0c 94 20 3b 	jmp	0x7640	; 0x7640 <_exit>

000070a2 <__bad_interrupt>:
    70a2:	0c 94 00 38 	jmp	0x7000	; 0x7000 <__vectors>

000070a6 <message_rx>:
    MCUCR = (1<<IVCE);
    MCUCR = 0;
    asm volatile ("jmp 0x0000");
}

void message_rx(message_t *msg, distance_measurement_t *dist) {
    70a6:	fc 01       	movw	r30, r24
    if (msg->type == BOOTPGM_PAGE) {
    70a8:	81 85       	ldd	r24, Z+9	; 0x09
    70aa:	81 38       	cpi	r24, 0x81	; 129
    70ac:	79 f0       	breq	.+30     	; 0x70cc <message_rx+0x26>
            if (page_count == page_total)
                goto_program();
        }
        else
            set_color(RGB(0,0,1));
    } else if (msg->type == BOOTPGM_SIZE) {
    70ae:	82 38       	cpi	r24, 0x82	; 130
    70b0:	f1 f1       	breq	.+124    	; 0x712e <message_rx+0x88>
        page_total = msg->data[0];
        if (page_count == page_total)
            goto_program();
    } else if (msg->type == BOOT) {
    70b2:	80 38       	cpi	r24, 0x80	; 128
    70b4:	09 f4       	brne	.+2      	; 0x70b8 <message_rx+0x12>
    70b6:	43 c0       	rjmp	.+134    	; 0x713e <message_rx+0x98>
            asm volatile ("jmp 0x7000");
    } else {
        if (page_count == 0)
    70b8:	80 91 23 01 	lds	r24, 0x0123
    70bc:	81 11       	cpse	r24, r1
    70be:	05 c0       	rjmp	.+10     	; 0x70ca <message_rx+0x24>
uint16_t page_buffer[SPM_PAGESIZE/2+2];
bootmsg_t *bootmsg;
BF_create(page_table, 224);

void goto_program() {
    MCUCR = (1<<IVCE);
    70c0:	81 e0       	ldi	r24, 0x01	; 1
    70c2:	85 bf       	out	0x35, r24	; 53
    MCUCR = 0;
    70c4:	15 be       	out	0x35, r1	; 53
    asm volatile ("jmp 0x0000");
    70c6:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>
    70ca:	08 95       	ret
}

void message_rx(message_t *msg, distance_measurement_t *dist) {
    if (msg->type == BOOTPGM_PAGE) {
        bootmsg = (bootmsg_t*)msg->data;
    70cc:	f0 93 25 01 	sts	0x0125, r31
    70d0:	e0 93 24 01 	sts	0x0124, r30
        if (page_address != bootmsg->page_address) {
    70d4:	40 81       	ld	r20, Z
    70d6:	80 91 ad 01 	lds	r24, 0x01AD
    70da:	48 17       	cp	r20, r24
    70dc:	99 f1       	breq	.+102    	; 0x7144 <message_rx+0x9e>
            page_address = bootmsg->page_address;
    70de:	40 93 ad 01 	sts	0x01AD, r20
            page_byte_count = 0;
        }
        page_buffer[bootmsg->page_offset] = bootmsg->word1;
    70e2:	81 81       	ldd	r24, Z+1	; 0x01
    70e4:	90 e0       	ldi	r25, 0x00	; 0
    70e6:	22 81       	ldd	r18, Z+2	; 0x02
    70e8:	33 81       	ldd	r19, Z+3	; 0x03
    70ea:	dc 01       	movw	r26, r24
    70ec:	aa 0f       	add	r26, r26
    70ee:	bb 1f       	adc	r27, r27
    70f0:	a7 5d       	subi	r26, 0xD7	; 215
    70f2:	be 4f       	sbci	r27, 0xFE	; 254
    70f4:	2d 93       	st	X+, r18
    70f6:	3c 93       	st	X, r19
        page_buffer[bootmsg->page_offset+1] = bootmsg->word2;
    70f8:	24 81       	ldd	r18, Z+4	; 0x04
    70fa:	35 81       	ldd	r19, Z+5	; 0x05
    70fc:	dc 01       	movw	r26, r24
    70fe:	aa 0f       	add	r26, r26
    7100:	bb 1f       	adc	r27, r27
    7102:	a5 5d       	subi	r26, 0xD5	; 213
    7104:	be 4f       	sbci	r27, 0xFE	; 254
    7106:	2d 93       	st	X+, r18
    7108:	3c 93       	st	X, r19
        page_buffer[bootmsg->page_offset+2] = bootmsg->word3;
    710a:	26 81       	ldd	r18, Z+6	; 0x06
    710c:	37 81       	ldd	r19, Z+7	; 0x07
    710e:	fc 01       	movw	r30, r24
    7110:	ee 0f       	add	r30, r30
    7112:	ff 1f       	adc	r31, r31
    7114:	e3 5d       	subi	r30, 0xD3	; 211
    7116:	fe 4f       	sbci	r31, 0xFE	; 254
    7118:	31 83       	std	Z+1, r19	; 0x01
    711a:	20 83       	st	Z, r18
        page_byte_count += 6;
    711c:	86 e0       	ldi	r24, 0x06	; 6
    711e:	90 e0       	ldi	r25, 0x00	; 0
    7120:	90 93 28 01 	sts	0x0128, r25
    7124:	80 93 27 01 	sts	0x0127, r24
            page_count++;
            if (page_count == page_total)
                goto_program();
        }
        else
            set_color(RGB(0,0,1));
    7128:	80 e1       	ldi	r24, 0x10	; 16
    712a:	0c 94 93 39 	jmp	0x7326	; 0x7326 <set_color>
    } else if (msg->type == BOOTPGM_SIZE) {
        page_total = msg->data[0];
    712e:	80 81       	ld	r24, Z
    7130:	80 93 26 01 	sts	0x0126, r24
        if (page_count == page_total)
    7134:	90 91 23 01 	lds	r25, 0x0123
    7138:	89 17       	cp	r24, r25
    713a:	11 f2       	breq	.-124    	; 0x70c0 <message_rx+0x1a>
    713c:	08 95       	ret
            goto_program();
    } else if (msg->type == BOOT) {
            asm volatile ("jmp 0x7000");
    713e:	0c 94 00 38 	jmp	0x7000	; 0x7000 <__vectors>
    7142:	08 95       	ret
    7144:	80 91 27 01 	lds	r24, 0x0127
    7148:	90 91 28 01 	lds	r25, 0x0128
    714c:	06 96       	adiw	r24, 0x06	; 6
        bootmsg = (bootmsg_t*)msg->data;
        if (page_address != bootmsg->page_address) {
            page_address = bootmsg->page_address;
            page_byte_count = 0;
        }
        page_buffer[bootmsg->page_offset] = bootmsg->word1;
    714e:	21 81       	ldd	r18, Z+1	; 0x01
    7150:	30 e0       	ldi	r19, 0x00	; 0
    7152:	62 81       	ldd	r22, Z+2	; 0x02
    7154:	73 81       	ldd	r23, Z+3	; 0x03
    7156:	d9 01       	movw	r26, r18
    7158:	aa 0f       	add	r26, r26
    715a:	bb 1f       	adc	r27, r27
    715c:	a7 5d       	subi	r26, 0xD7	; 215
    715e:	be 4f       	sbci	r27, 0xFE	; 254
    7160:	6d 93       	st	X+, r22
    7162:	7c 93       	st	X, r23
        page_buffer[bootmsg->page_offset+1] = bootmsg->word2;
    7164:	64 81       	ldd	r22, Z+4	; 0x04
    7166:	75 81       	ldd	r23, Z+5	; 0x05
    7168:	d9 01       	movw	r26, r18
    716a:	aa 0f       	add	r26, r26
    716c:	bb 1f       	adc	r27, r27
    716e:	a5 5d       	subi	r26, 0xD5	; 213
    7170:	be 4f       	sbci	r27, 0xFE	; 254
    7172:	6d 93       	st	X+, r22
    7174:	7c 93       	st	X, r23
        page_buffer[bootmsg->page_offset+2] = bootmsg->word3;
    7176:	66 81       	ldd	r22, Z+6	; 0x06
    7178:	77 81       	ldd	r23, Z+7	; 0x07
    717a:	f9 01       	movw	r30, r18
    717c:	ee 0f       	add	r30, r30
    717e:	ff 1f       	adc	r31, r31
    7180:	e3 5d       	subi	r30, 0xD3	; 211
    7182:	fe 4f       	sbci	r31, 0xFE	; 254
    7184:	71 83       	std	Z+1, r23	; 0x01
    7186:	60 83       	st	Z, r22
        page_byte_count += 6;
    7188:	90 93 28 01 	sts	0x0128, r25
    718c:	80 93 27 01 	sts	0x0127, r24
        if (page_byte_count >= SPM_PAGESIZE && !BF_get(page_table, page_address)) {
    7190:	80 38       	cpi	r24, 0x80	; 128
    7192:	91 05       	cpc	r25, r1
    7194:	48 f2       	brcs	.-110    	; 0x7128 <message_rx+0x82>
    7196:	e4 2f       	mov	r30, r20
    7198:	e6 95       	lsr	r30
    719a:	e6 95       	lsr	r30
    719c:	e6 95       	lsr	r30
    719e:	f0 e0       	ldi	r31, 0x00	; 0
    71a0:	ea 5f       	subi	r30, 0xFA	; 250
    71a2:	fe 4f       	sbci	r31, 0xFE	; 254
    71a4:	80 81       	ld	r24, Z
    71a6:	90 e0       	ldi	r25, 0x00	; 0
    71a8:	24 2f       	mov	r18, r20
    71aa:	27 70       	andi	r18, 0x07	; 7
    71ac:	02 c0       	rjmp	.+4      	; 0x71b2 <message_rx+0x10c>
    71ae:	95 95       	asr	r25
    71b0:	87 95       	ror	r24
    71b2:	2a 95       	dec	r18
    71b4:	e2 f7       	brpl	.-8      	; 0x71ae <message_rx+0x108>
    71b6:	80 fd       	sbrc	r24, 0
    71b8:	b7 cf       	rjmp	.-146    	; 0x7128 <message_rx+0x82>
             * Write program page to flash.
             *
             * Taken from http://www.nongnu.org/avr-libc/user-manual/group__avr__boot.html
             */

            eeprom_busy_wait ();
    71ba:	f9 99       	sbic	0x1f, 1	; 31
    71bc:	fe cf       	rjmp	.-4      	; 0x71ba <message_rx+0x114>

            boot_page_erase(page_address*SPM_PAGESIZE);
    71be:	80 e8       	ldi	r24, 0x80	; 128
    71c0:	48 9f       	mul	r20, r24
    71c2:	a0 01       	movw	r20, r0
    71c4:	11 24       	eor	r1, r1
    71c6:	83 e0       	ldi	r24, 0x03	; 3
    71c8:	fa 01       	movw	r30, r20
    71ca:	80 93 57 00 	sts	0x0057, r24
    71ce:	e8 95       	spm
            boot_spm_busy_wait();
    71d0:	07 b6       	in	r0, 0x37	; 55
    71d2:	00 fc       	sbrc	r0, 0
    71d4:	fd cf       	rjmp	.-6      	; 0x71d0 <message_rx+0x12a>
    71d6:	a9 e2       	ldi	r26, 0x29	; 41
    71d8:	b1 e0       	ldi	r27, 0x01	; 1
    71da:	9a 01       	movw	r18, r20
    71dc:	29 52       	subi	r18, 0x29	; 41
    71de:	31 40       	sbci	r19, 0x01	; 1

            int i,j;
            for (i=0, j=0; i<SPM_PAGESIZE; i+=2, j++)
                boot_page_fill(page_address*SPM_PAGESIZE+i, page_buffer[j]);
    71e0:	61 e0       	ldi	r22, 0x01	; 1
    71e2:	f9 01       	movw	r30, r18
    71e4:	ea 0f       	add	r30, r26
    71e6:	fb 1f       	adc	r31, r27
    71e8:	8d 91       	ld	r24, X+
    71ea:	9d 91       	ld	r25, X+
    71ec:	0c 01       	movw	r0, r24
    71ee:	60 93 57 00 	sts	0x0057, r22
    71f2:	e8 95       	spm
    71f4:	11 24       	eor	r1, r1

            boot_page_erase(page_address*SPM_PAGESIZE);
            boot_spm_busy_wait();

            int i,j;
            for (i=0, j=0; i<SPM_PAGESIZE; i+=2, j++)
    71f6:	f1 e0       	ldi	r31, 0x01	; 1
    71f8:	a9 3a       	cpi	r26, 0xA9	; 169
    71fa:	bf 07       	cpc	r27, r31
    71fc:	91 f7       	brne	.-28     	; 0x71e2 <message_rx+0x13c>
                boot_page_fill(page_address*SPM_PAGESIZE+i, page_buffer[j]);

            boot_page_write(page_address*SPM_PAGESIZE);
    71fe:	85 e0       	ldi	r24, 0x05	; 5
    7200:	fa 01       	movw	r30, r20
    7202:	80 93 57 00 	sts	0x0057, r24
    7206:	e8 95       	spm
            boot_spm_busy_wait();
    7208:	07 b6       	in	r0, 0x37	; 55
    720a:	00 fc       	sbrc	r0, 0
    720c:	fd cf       	rjmp	.-6      	; 0x7208 <message_rx+0x162>

            boot_rww_enable ();
    720e:	81 e1       	ldi	r24, 0x11	; 17
    7210:	80 93 57 00 	sts	0x0057, r24
    7214:	e8 95       	spm

            set_color(RGB(0,3,0));
    7216:	8c e0       	ldi	r24, 0x0C	; 12
    7218:	0e 94 93 39 	call	0x7326	; 0x7326 <set_color>
            BF_set(page_table, page_address);
    721c:	80 91 ad 01 	lds	r24, 0x01AD
    7220:	e8 2f       	mov	r30, r24
    7222:	e6 95       	lsr	r30
    7224:	e6 95       	lsr	r30
    7226:	e6 95       	lsr	r30
    7228:	f0 e0       	ldi	r31, 0x00	; 0
    722a:	ea 5f       	subi	r30, 0xFA	; 250
    722c:	fe 4f       	sbci	r31, 0xFE	; 254
    722e:	28 2f       	mov	r18, r24
    7230:	27 70       	andi	r18, 0x07	; 7
    7232:	81 e0       	ldi	r24, 0x01	; 1
    7234:	90 e0       	ldi	r25, 0x00	; 0
    7236:	02 2e       	mov	r0, r18
    7238:	01 c0       	rjmp	.+2      	; 0x723c <message_rx+0x196>
    723a:	88 0f       	add	r24, r24
    723c:	0a 94       	dec	r0
    723e:	ea f7       	brpl	.-6      	; 0x723a <message_rx+0x194>
    7240:	90 81       	ld	r25, Z
    7242:	98 2b       	or	r25, r24
    7244:	90 83       	st	Z, r25
            page_count++;
    7246:	80 91 23 01 	lds	r24, 0x0123
    724a:	8f 5f       	subi	r24, 0xFF	; 255
    724c:	80 93 23 01 	sts	0x0123, r24
            if (page_count == page_total)
    7250:	90 91 26 01 	lds	r25, 0x0126
    7254:	89 17       	cp	r24, r25
    7256:	09 f4       	brne	.+2      	; 0x725a <message_rx+0x1b4>
    7258:	33 cf       	rjmp	.-410    	; 0x70c0 <message_rx+0x1a>
    725a:	08 95       	ret

0000725c <goto_program>:
uint16_t page_buffer[SPM_PAGESIZE/2+2];
bootmsg_t *bootmsg;
BF_create(page_table, 224);

void goto_program() {
    MCUCR = (1<<IVCE);
    725c:	81 e0       	ldi	r24, 0x01	; 1
    725e:	85 bf       	out	0x35, r24	; 53
    MCUCR = 0;
    7260:	15 be       	out	0x35, r1	; 53
    asm volatile ("jmp 0x0000");
    7262:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>
    7266:	08 95       	ret

00007268 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
    7268:	08 95       	ret

0000726a <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
    726a:	80 e0       	ldi	r24, 0x00	; 0
    726c:	90 e0       	ldi	r25, 0x00	; 0
    726e:	08 95       	ret

00007270 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
    7270:	08 95       	ret

00007272 <kilo_init>:
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
    cli();
    7272:	f8 94       	cli

    ports_off();
    7274:	14 b8       	out	0x04, r1	; 4
    7276:	17 b8       	out	0x07, r1	; 7
    7278:	1a b8       	out	0x0a, r1	; 10
    727a:	15 b8       	out	0x05, r1	; 5
    727c:	18 b8       	out	0x08, r1	; 8
    727e:	1b b8       	out	0x0b, r1	; 11
    ports_on();
    7280:	52 9a       	sbi	0x0a, 2	; 10
    7282:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
    7284:	14 bc       	out	0x24, r1	; 36
    7286:	85 e0       	ldi	r24, 0x05	; 5
    7288:	85 bd       	out	0x25, r24	; 37
    728a:	8f ef       	ldi	r24, 0xFF	; 255
    728c:	87 bd       	out	0x27, r24	; 39
    728e:	22 e0       	ldi	r18, 0x02	; 2
    7290:	20 93 6e 00 	sts	0x006E, r18
    rx_timer_setup();
    7294:	10 92 80 00 	sts	0x0080, r1
    7298:	10 92 81 00 	sts	0x0081, r1
    729c:	8f e8       	ldi	r24, 0x8F	; 143
    729e:	9b e0       	ldi	r25, 0x0B	; 11
    72a0:	90 93 89 00 	sts	0x0089, r25
    72a4:	80 93 88 00 	sts	0x0088, r24
    72a8:	20 93 6f 00 	sts	0x006F, r18
    motors_setup();
    72ac:	53 98       	cbi	0x0a, 3	; 10
    72ae:	23 98       	cbi	0x04, 3	; 4
    72b0:	81 ea       	ldi	r24, 0xA1	; 161
    72b2:	80 93 b0 00 	sts	0x00B0, r24
    72b6:	20 93 b1 00 	sts	0x00B1, r18
    72ba:	10 92 b4 00 	sts	0x00B4, r1
    72be:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
    72c2:	8b e0       	ldi	r24, 0x0B	; 11
    72c4:	80 bf       	out	0x30, r24	; 48
    72c6:	83 e0       	ldi	r24, 0x03	; 3
    72c8:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
    72cc:	86 e0       	ldi	r24, 0x06	; 6
    72ce:	80 93 7c 00 	sts	0x007C, r24
    72d2:	83 e8       	ldi	r24, 0x83	; 131
    72d4:	80 93 7a 00 	sts	0x007A, r24
    72d8:	80 91 7a 00 	lds	r24, 0x007A
    72dc:	80 64       	ori	r24, 0x40	; 64
    72de:	80 93 7a 00 	sts	0x007A, r24
    72e2:	80 91 7a 00 	lds	r24, 0x007A
    72e6:	86 fd       	sbrc	r24, 6
    72e8:	fc cf       	rjmp	.-8      	; 0x72e2 <kilo_init+0x70>
    adc_trigger_high_gain();
    72ea:	10 92 7c 00 	sts	0x007C, r1
    72ee:	83 ea       	ldi	r24, 0xA3	; 163
    72f0:	80 93 7a 00 	sts	0x007A, r24
    72f4:	81 e0       	ldi	r24, 0x01	; 1
    72f6:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
    72fa:	81 e0       	ldi	r24, 0x01	; 1
    72fc:	90 e0       	ldi	r25, 0x00	; 0
    72fe:	0e 94 18 3b 	call	0x7630	; 0x7630 <__eerd_byte_m328p>
    if (osccal != 0xFF)
    7302:	8f 3f       	cpi	r24, 0xFF	; 255
    7304:	11 f0       	breq	.+4      	; 0x730a <kilo_init+0x98>
        OSCCAL = osccal;
    7306:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
    730a:	10 92 b5 01 	sts	0x01B5, r1
    rx_leadingbit = 1;
    730e:	81 e0       	ldi	r24, 0x01	; 1
    7310:	80 93 ae 01 	sts	0x01AE, r24
    rx_leadingbyte = 1;
    7314:	80 93 b6 01 	sts	0x01B6, r24
    rx_byteindex = 0;
    7318:	10 92 b0 01 	sts	0x01B0, r1
    rx_bytevalue = 0;
    731c:	10 92 c5 01 	sts	0x01C5, r1
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
    7320:	78 94       	sei
    7322:	08 95       	ret

00007324 <__vector_14>:

static inline void process_message() {
    kilo_message_rx(&rx_msg, &rx_dist);
}

EMPTY_INTERRUPT(TIMER0_COMPA_vect)
    7324:	18 95       	reti

00007326 <set_color>:

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
    7326:	80 ff       	sbrs	r24, 0
    7328:	11 c0       	rjmp	.+34     	; 0x734c <set_color+0x26>
        DDRD |= (1<<5);
    732a:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
    732c:	81 ff       	sbrs	r24, 1
    732e:	11 c0       	rjmp	.+34     	; 0x7352 <set_color+0x2c>
        DDRD |= (1<<4);
    7330:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
    7332:	82 ff       	sbrs	r24, 2
    7334:	11 c0       	rjmp	.+34     	; 0x7358 <set_color+0x32>
        DDRC |= (1<<3);
    7336:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
    7338:	83 ff       	sbrs	r24, 3
    733a:	11 c0       	rjmp	.+34     	; 0x735e <set_color+0x38>
        DDRC |= (1<<2);
    733c:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
    733e:	84 ff       	sbrs	r24, 4
    7340:	11 c0       	rjmp	.+34     	; 0x7364 <set_color+0x3e>
        DDRC |= (1<<5);
    7342:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
    7344:	85 fd       	sbrc	r24, 5
    7346:	11 c0       	rjmp	.+34     	; 0x736a <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    7348:	3c 98       	cbi	0x07, 4	; 7
    734a:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    734c:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
    734e:	81 fd       	sbrc	r24, 1
    7350:	ef cf       	rjmp	.-34     	; 0x7330 <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    7352:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
    7354:	82 fd       	sbrc	r24, 2
    7356:	ef cf       	rjmp	.-34     	; 0x7336 <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    7358:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
    735a:	83 fd       	sbrc	r24, 3
    735c:	ef cf       	rjmp	.-34     	; 0x733c <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    735e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
    7360:	84 fd       	sbrc	r24, 4
    7362:	ef cf       	rjmp	.-34     	; 0x7342 <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    7364:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
    7366:	85 ff       	sbrs	r24, 5
    7368:	ef cf       	rjmp	.-34     	; 0x7348 <set_color+0x22>
        DDRC |= (1<<4);
    736a:	3c 9a       	sbi	0x07, 4	; 7
    736c:	08 95       	ret

0000736e <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
    736e:	1f 92       	push	r1
    7370:	0f 92       	push	r0
    7372:	0f b6       	in	r0, 0x3f	; 63
    7374:	0f 92       	push	r0
    7376:	11 24       	eor	r1, r1
    7378:	8f 93       	push	r24
    737a:	9f 93       	push	r25
    rx_timer_off();
    737c:	10 92 81 00 	sts	0x0081, r1
    7380:	10 92 85 00 	sts	0x0085, r1
    7384:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
    7388:	81 e0       	ldi	r24, 0x01	; 1
    738a:	80 93 ae 01 	sts	0x01AE, r24
    rx_leadingbyte = 1;
    738e:	80 93 b6 01 	sts	0x01B6, r24
    rx_busy = 0;
    7392:	10 92 b5 01 	sts	0x01B5, r1
    adc_trigger_high_gain();
    7396:	10 92 7c 00 	sts	0x007C, r1
    739a:	93 ea       	ldi	r25, 0xA3	; 163
    739c:	90 93 7a 00 	sts	0x007A, r25
    73a0:	80 93 7b 00 	sts	0x007B, r24
}
    73a4:	9f 91       	pop	r25
    73a6:	8f 91       	pop	r24
    73a8:	0f 90       	pop	r0
    73aa:	0f be       	out	0x3f, r0	; 63
    73ac:	0f 90       	pop	r0
    73ae:	1f 90       	pop	r1
    73b0:	18 95       	reti

000073b2 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
    73b2:	1f 92       	push	r1
    73b4:	0f 92       	push	r0
    73b6:	0f b6       	in	r0, 0x3f	; 63
    73b8:	0f 92       	push	r0
    73ba:	11 24       	eor	r1, r1
    73bc:	2f 93       	push	r18
    73be:	3f 93       	push	r19
    73c0:	4f 93       	push	r20
    73c2:	5f 93       	push	r21
    73c4:	6f 93       	push	r22
    73c6:	7f 93       	push	r23
    73c8:	8f 93       	push	r24
    73ca:	9f 93       	push	r25
    73cc:	af 93       	push	r26
    73ce:	bf 93       	push	r27
    73d0:	cf 93       	push	r28
    73d2:	df 93       	push	r29
    73d4:	ef 93       	push	r30
    73d6:	ff 93       	push	r31
    uint16_t timer = TCNT1;
    73d8:	20 91 84 00 	lds	r18, 0x0084
    73dc:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
    73e0:	41 e0       	ldi	r20, 0x01	; 1
    73e2:	40 93 b5 01 	sts	0x01B5, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
    73e6:	80 91 ae 01 	lds	r24, 0x01AE
    73ea:	88 23       	and	r24, r24
    73ec:	a9 f1       	breq	.+106    	; 0x7458 <__vector_23+0xa6>
        rx_timer_on();
    73ee:	10 92 85 00 	sts	0x0085, r1
    73f2:	10 92 84 00 	sts	0x0084, r1
    73f6:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
    73fa:	10 92 c5 01 	sts	0x01C5, r1
        rx_leadingbit = 0;
    73fe:	10 92 ae 01 	sts	0x01AE, r1
        if (rx_leadingbyte) {
    7402:	80 91 b6 01 	lds	r24, 0x01B6
    7406:	88 23       	and	r24, r24
    7408:	a1 f0       	breq	.+40     	; 0x7432 <__vector_23+0x80>
            adc_finish_conversion();
    740a:	80 91 7a 00 	lds	r24, 0x007A
    740e:	86 fd       	sbrc	r24, 6
    7410:	fc cf       	rjmp	.-8      	; 0x740a <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
    7412:	80 91 78 00 	lds	r24, 0x0078
    7416:	90 91 79 00 	lds	r25, 0x0079
    741a:	90 93 b4 01 	sts	0x01B4, r25
    741e:	80 93 b3 01 	sts	0x01B3, r24
            adc_trigger_low_gain();
    7422:	81 e0       	ldi	r24, 0x01	; 1
    7424:	80 93 7c 00 	sts	0x007C, r24
    7428:	93 ea       	ldi	r25, 0xA3	; 163
    742a:	90 93 7a 00 	sts	0x007A, r25
    742e:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
    7432:	ff 91       	pop	r31
    7434:	ef 91       	pop	r30
    7436:	df 91       	pop	r29
    7438:	cf 91       	pop	r28
    743a:	bf 91       	pop	r27
    743c:	af 91       	pop	r26
    743e:	9f 91       	pop	r25
    7440:	8f 91       	pop	r24
    7442:	7f 91       	pop	r23
    7444:	6f 91       	pop	r22
    7446:	5f 91       	pop	r21
    7448:	4f 91       	pop	r20
    744a:	3f 91       	pop	r19
    744c:	2f 91       	pop	r18
    744e:	0f 90       	pop	r0
    7450:	0f be       	out	0x3f, r0	; 63
    7452:	0f 90       	pop	r0
    7454:	1f 90       	pop	r1
    7456:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    7458:	c9 01       	movw	r24, r18
    745a:	87 58       	subi	r24, 0x87	; 135
    745c:	91 09       	sbc	r25, r1
    745e:	84 37       	cpi	r24, 0x74	; 116
    7460:	99 40       	sbci	r25, 0x09	; 9
    7462:	08 f0       	brcs	.+2      	; 0x7466 <__vector_23+0xb4>
    7464:	3f c0       	rjmp	.+126    	; 0x74e4 <__vector_23+0x132>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    7466:	26 58       	subi	r18, 0x86	; 134
    7468:	31 09       	sbc	r19, r1
    746a:	a4 ef       	ldi	r26, 0xF4	; 244
    746c:	b0 e0       	ldi	r27, 0x00	; 0
    746e:	0e 94 09 3b 	call	0x7612	; 0x7612 <__umulhisi3>
    7472:	aa 27       	eor	r26, r26
    7474:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
    7476:	88 30       	cpi	r24, 0x08	; 8
    7478:	08 f4       	brcc	.+2      	; 0x747c <__vector_23+0xca>
    747a:	6b c0       	rjmp	.+214    	; 0x7552 <__vector_23+0x1a0>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    747c:	40 93 ae 01 	sts	0x01AE, r20
                if (rx_leadingbyte) {
    7480:	80 91 b6 01 	lds	r24, 0x01B6
    7484:	81 11       	cpse	r24, r1
    7486:	42 c0       	rjmp	.+132    	; 0x750c <__vector_23+0x15a>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    7488:	80 91 b0 01 	lds	r24, 0x01B0
    748c:	e8 2f       	mov	r30, r24
    748e:	f0 e0       	ldi	r31, 0x00	; 0
    7490:	e9 54       	subi	r30, 0x49	; 73
    7492:	fe 4f       	sbci	r31, 0xFE	; 254
    7494:	90 91 c5 01 	lds	r25, 0x01C5
    7498:	90 83       	st	Z, r25
                    rx_byteindex++;
    749a:	8f 5f       	subi	r24, 0xFF	; 255
    749c:	80 93 b0 01 	sts	0x01B0, r24
                    if (rx_byteindex == sizeof(message_t)) {
    74a0:	8c 30       	cpi	r24, 0x0C	; 12
    74a2:	39 f6       	brne	.-114    	; 0x7432 <__vector_23+0x80>
                        rx_timer_off();
    74a4:	10 92 81 00 	sts	0x0081, r1
    74a8:	10 92 85 00 	sts	0x0085, r1
    74ac:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    74b0:	40 93 b6 01 	sts	0x01B6, r20
                        rx_busy = 0;
    74b4:	10 92 b5 01 	sts	0x01B5, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    74b8:	c0 91 c1 01 	lds	r28, 0x01C1
    74bc:	d0 91 c2 01 	lds	r29, 0x01C2
    74c0:	87 eb       	ldi	r24, 0xB7	; 183
    74c2:	91 e0       	ldi	r25, 0x01	; 1
    74c4:	0e 94 ba 3a 	call	0x7574	; 0x7574 <message_crc>
    74c8:	c8 17       	cp	r28, r24
    74ca:	d9 07       	cpc	r29, r25
    74cc:	09 f0       	breq	.+2      	; 0x74d0 <__vector_23+0x11e>
    74ce:	b1 cf       	rjmp	.-158    	; 0x7432 <__vector_23+0x80>
}

#else// BOOTLOADER

static inline void process_message() {
    kilo_message_rx(&rx_msg, &rx_dist);
    74d0:	e0 91 04 01 	lds	r30, 0x0104
    74d4:	f0 91 05 01 	lds	r31, 0x0105
    74d8:	61 eb       	ldi	r22, 0xB1	; 177
    74da:	71 e0       	ldi	r23, 0x01	; 1
    74dc:	87 eb       	ldi	r24, 0xB7	; 183
    74de:	91 e0       	ldi	r25, 0x01	; 1
    74e0:	09 95       	icall
    74e2:	a7 cf       	rjmp	.-178    	; 0x7432 <__vector_23+0x80>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    74e4:	10 92 81 00 	sts	0x0081, r1
    74e8:	10 92 85 00 	sts	0x0085, r1
    74ec:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    74f0:	40 93 ae 01 	sts	0x01AE, r20
            rx_leadingbyte = 1;
    74f4:	40 93 b6 01 	sts	0x01B6, r20
            rx_busy = 0;
    74f8:	10 92 b5 01 	sts	0x01B5, r1
            adc_trigger_high_gain();
    74fc:	10 92 7c 00 	sts	0x007C, r1
    7500:	83 ea       	ldi	r24, 0xA3	; 163
    7502:	80 93 7a 00 	sts	0x007A, r24
    7506:	40 93 7b 00 	sts	0x007B, r20
    750a:	93 cf       	rjmp	.-218    	; 0x7432 <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    750c:	80 91 7a 00 	lds	r24, 0x007A
    7510:	86 fd       	sbrc	r24, 6
    7512:	fc cf       	rjmp	.-8      	; 0x750c <__vector_23+0x15a>
                    rx_dist.low_gain = ADCW;
    7514:	80 91 78 00 	lds	r24, 0x0078
    7518:	90 91 79 00 	lds	r25, 0x0079
    751c:	90 93 b2 01 	sts	0x01B2, r25
    7520:	80 93 b1 01 	sts	0x01B1, r24
                    adc_trigger_high_gain();
    7524:	10 92 7c 00 	sts	0x007C, r1
    7528:	83 ea       	ldi	r24, 0xA3	; 163
    752a:	80 93 7a 00 	sts	0x007A, r24
    752e:	81 e0       	ldi	r24, 0x01	; 1
    7530:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    7534:	90 91 c5 01 	lds	r25, 0x01C5
    7538:	99 23       	and	r25, r25
    753a:	b9 f0       	breq	.+46     	; 0x756a <__vector_23+0x1b8>
                        rx_timer_off();
    753c:	10 92 81 00 	sts	0x0081, r1
    7540:	10 92 85 00 	sts	0x0085, r1
    7544:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    7548:	80 93 b6 01 	sts	0x01B6, r24
                        rx_busy = 0;
    754c:	10 92 b5 01 	sts	0x01B5, r1
    7550:	70 cf       	rjmp	.-288    	; 0x7432 <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    7552:	21 e0       	ldi	r18, 0x01	; 1
    7554:	30 e0       	ldi	r19, 0x00	; 0
    7556:	01 c0       	rjmp	.+2      	; 0x755a <__vector_23+0x1a8>
    7558:	22 0f       	add	r18, r18
    755a:	8a 95       	dec	r24
    755c:	ea f7       	brpl	.-6      	; 0x7558 <__vector_23+0x1a6>
    755e:	80 91 c5 01 	lds	r24, 0x01C5
    7562:	82 2b       	or	r24, r18
    7564:	80 93 c5 01 	sts	0x01C5, r24
    7568:	64 cf       	rjmp	.-312    	; 0x7432 <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    756a:	10 92 b6 01 	sts	0x01B6, r1
                        rx_byteindex = 0;
    756e:	10 92 b0 01 	sts	0x01B0, r1
    7572:	5f cf       	rjmp	.-322    	; 0x7432 <__vector_23+0x80>

00007574 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    7574:	fc 01       	movw	r30, r24
    7576:	2a e0       	ldi	r18, 0x0A	; 10
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    7578:	8f ef       	ldi	r24, 0xFF	; 255
    757a:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    757c:	31 91       	ld	r19, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    757e:	83 27       	eor	r24, r19
    7580:	08 2e       	mov	r0, r24
    7582:	82 95       	swap	r24
    7584:	80 7f       	andi	r24, 0xF0	; 240
    7586:	80 25       	eor	r24, r0
    7588:	09 2e       	mov	r0, r25
    758a:	98 2f       	mov	r25, r24
    758c:	82 95       	swap	r24
    758e:	8f 70       	andi	r24, 0x0F	; 15
    7590:	08 26       	eor	r0, r24
    7592:	86 95       	lsr	r24
    7594:	98 27       	eor	r25, r24
    7596:	89 27       	eor	r24, r25
    7598:	88 0f       	add	r24, r24
    759a:	88 0f       	add	r24, r24
    759c:	88 0f       	add	r24, r24
    759e:	80 25       	eor	r24, r0
    75a0:	21 50       	subi	r18, 0x01	; 1

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    75a2:	61 f7       	brne	.-40     	; 0x757c <message_crc+0x8>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    75a4:	08 95       	ret

000075a6 <main>:
            goto_program();
    }
}

int main() {
    cli();
    75a6:	f8 94       	cli
    // move interrupt vectors to bootloader interupts
    MCUCR = (1<<IVCE);
    75a8:	81 e0       	ldi	r24, 0x01	; 1
    75aa:	85 bf       	out	0x35, r24	; 53
    MCUCR = (1<<IVSEL);
    75ac:	82 e0       	ldi	r24, 0x02	; 2
    75ae:	85 bf       	out	0x35, r24	; 53
    75b0:	8c e1       	ldi	r24, 0x1C	; 28
    75b2:	e6 e0       	ldi	r30, 0x06	; 6
    75b4:	f1 e0       	ldi	r31, 0x01	; 1
    75b6:	df 01       	movw	r26, r30
    75b8:	1d 92       	st	X+, r1
    75ba:	8a 95       	dec	r24
    75bc:	e9 f7       	brne	.-6      	; 0x75b8 <main+0x12>
    // initalize variables
    BF_init(page_table);
    page_total = 220;
    75be:	8c ed       	ldi	r24, 0xDC	; 220
    75c0:	80 93 26 01 	sts	0x0126, r24
    page_count = 0;
    75c4:	10 92 23 01 	sts	0x0123, r1
    page_address = 0;
    75c8:	10 92 ad 01 	sts	0x01AD, r1
    page_byte_count = 0;
    75cc:	10 92 28 01 	sts	0x0128, r1
    75d0:	10 92 27 01 	sts	0x0127, r1
    sei();
    75d4:	78 94       	sei
    kilo_message_rx = message_rx;
    75d6:	83 e5       	ldi	r24, 0x53	; 83
    75d8:	98 e3       	ldi	r25, 0x38	; 56
    75da:	90 93 05 01 	sts	0x0105, r25
    75de:	80 93 04 01 	sts	0x0104, r24
    // initialize hardware
    kilo_init();
    75e2:	0e 94 39 39 	call	0x7272	; 0x7272 <kilo_init>

    // flash blue led
    while(1) {
        set_color(RGB(0,0,3));
    75e6:	80 e3       	ldi	r24, 0x30	; 48
    75e8:	0e 94 93 39 	call	0x7326	; 0x7326 <set_color>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    75ec:	8f e0       	ldi	r24, 0x0F	; 15
    75ee:	97 e2       	ldi	r25, 0x27	; 39
    75f0:	01 97       	sbiw	r24, 0x01	; 1
    75f2:	f1 f7       	brne	.-4      	; 0x75f0 <main+0x4a>
    75f4:	00 c0       	rjmp	.+0      	; 0x75f6 <main+0x50>
    75f6:	00 00       	nop
        _delay_ms(5);
        set_color(RGB(0,0,0));
    75f8:	80 e0       	ldi	r24, 0x00	; 0
    75fa:	0e 94 93 39 	call	0x7326	; 0x7326 <set_color>
    75fe:	9f ef       	ldi	r25, 0xFF	; 255
    7600:	a9 e6       	ldi	r26, 0x69	; 105
    7602:	b8 e1       	ldi	r27, 0x18	; 24
    7604:	91 50       	subi	r25, 0x01	; 1
    7606:	a0 40       	sbci	r26, 0x00	; 0
    7608:	b0 40       	sbci	r27, 0x00	; 0
    760a:	e1 f7       	brne	.-8      	; 0x7604 <main+0x5e>
    760c:	00 c0       	rjmp	.+0      	; 0x760e <main+0x68>
    760e:	00 00       	nop
    7610:	ea cf       	rjmp	.-44     	; 0x75e6 <main+0x40>

00007612 <__umulhisi3>:
    7612:	a2 9f       	mul	r26, r18
    7614:	b0 01       	movw	r22, r0
    7616:	b3 9f       	mul	r27, r19
    7618:	c0 01       	movw	r24, r0
    761a:	a3 9f       	mul	r26, r19
    761c:	70 0d       	add	r23, r0
    761e:	81 1d       	adc	r24, r1
    7620:	11 24       	eor	r1, r1
    7622:	91 1d       	adc	r25, r1
    7624:	b2 9f       	mul	r27, r18
    7626:	70 0d       	add	r23, r0
    7628:	81 1d       	adc	r24, r1
    762a:	11 24       	eor	r1, r1
    762c:	91 1d       	adc	r25, r1
    762e:	08 95       	ret

00007630 <__eerd_byte_m328p>:
    7630:	f9 99       	sbic	0x1f, 1	; 31
    7632:	fe cf       	rjmp	.-4      	; 0x7630 <__eerd_byte_m328p>
    7634:	92 bd       	out	0x22, r25	; 34
    7636:	81 bd       	out	0x21, r24	; 33
    7638:	f8 9a       	sbi	0x1f, 0	; 31
    763a:	99 27       	eor	r25, r25
    763c:	80 b5       	in	r24, 0x20	; 32
    763e:	08 95       	ret

00007640 <_exit>:
    7640:	f8 94       	cli

00007642 <__stop_program>:
    7642:	ff cf       	rjmp	.-2      	; 0x7642 <__stop_program>
