
build/caterpillarAuto.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
       8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
       c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      18:	0c 94 da 06 	jmp	0xdb4	; 0xdb4 <__vector_6>
      1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      2c:	0c 94 a0 0c 	jmp	0x1940	; 0x1940 <__vector_11>
      30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      38:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__vector_14>
      3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      5c:	0c 94 c2 0c 	jmp	0x1984	; 0x1984 <__vector_23>
      60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      68:	3d 07       	cpc	r19, r29
      6a:	b9 07       	cpc	r27, r25
      6c:	11 07       	cpc	r17, r17
      6e:	07 07       	cpc	r16, r23
      70:	0e 07       	cpc	r16, r30
      72:	9b 07       	cpc	r25, r27
      74:	90 07       	cpc	r25, r16
      76:	1e 0e       	add	r1, r30
      78:	02 0d       	add	r16, r2
      7a:	02 0d       	add	r16, r2
      7c:	1b 0e       	add	r1, r27
      7e:	27 0e       	add	r2, r23
      80:	17 0e       	add	r1, r23
      82:	2e 0e       	add	r2, r30
      84:	2a 0e       	add	r2, r26
      86:	32 0e       	add	r3, r18
      88:	eb 0d       	add	r30, r11
      8a:	bd 0d       	add	r27, r13

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
    wdt_disable();
      9a:	88 e1       	ldi	r24, 0x18	; 24
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	80 93 60 00 	sts	0x0060, r24
      a4:	10 92 60 00 	sts	0x0060, r1
      a8:	0f be       	out	0x3f, r0	; 63

000000aa <__do_copy_data>:
      aa:	11 e0       	ldi	r17, 0x01	; 1
      ac:	a0 e0       	ldi	r26, 0x00	; 0
      ae:	b1 e0       	ldi	r27, 0x01	; 1
      b0:	e8 ec       	ldi	r30, 0xC8	; 200
      b2:	f3 e2       	ldi	r31, 0x23	; 35
      b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x10>
      b6:	05 90       	lpm	r0, Z+
      b8:	0d 92       	st	X+, r0
      ba:	a2 32       	cpi	r26, 0x22	; 34
      bc:	b1 07       	cpc	r27, r17
      be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0xc>

000000c0 <__do_clear_bss>:
      c0:	21 e0       	ldi	r18, 0x01	; 1
      c2:	a2 e2       	ldi	r26, 0x22	; 34
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
      c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
      ca:	ae 3b       	cpi	r26, 0xBE	; 190
      cc:	b2 07       	cpc	r27, r18
      ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
      d0:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <main>
      d4:	0c 94 e2 11 	jmp	0x23c4	; 0x23c4 <_exit>

000000d8 <__bad_interrupt>:
      d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <setup>:

void setup()
{
    //If the robot is the seed, its gradient should be 0: overwrite the
    // previously set value of GRADIENT_MAX.
    if (kilo_uid == SEED_ID)
      dc:	80 91 b9 01 	lds	r24, 0x01B9
      e0:	90 91 ba 01 	lds	r25, 0x01BA
      e4:	89 2b       	or	r24, r25
      e6:	09 f0       	breq	.+2      	; 0xea <setup+0xe>
      e8:	5c c0       	rjmp	.+184    	; 0x1a2 <setup+0xc6>
    {
        own_gradient = 0;
      ea:	10 92 09 01 	sts	0x0109, r1
      ee:	10 92 08 01 	sts	0x0108, r1
		distance_to_motivator = DISTANCE_COLLIDE;
      f2:	88 e2       	ldi	r24, 0x28	; 40
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	90 93 17 01 	sts	0x0117, r25
      fa:	80 93 16 01 	sts	0x0116, r24
		update_distance_to_motivator = UPDATE;
      fe:	81 e0       	ldi	r24, 0x01	; 1
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	90 93 35 01 	sts	0x0135, r25
     106:	80 93 34 01 	sts	0x0134, r24
		update_state_motivator = UPDATE;
     10a:	90 93 31 01 	sts	0x0131, r25
     10e:	80 93 30 01 	sts	0x0130, r24
		flag_minor = YES;
     112:	90 93 39 01 	sts	0x0139, r25
     116:	80 93 38 01 	sts	0x0138, r24
		state_motivator = COMPLETED;
     11a:	85 e0       	ldi	r24, 0x05	; 5
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	90 93 2b 01 	sts	0x012B, r25
     122:	80 93 2a 01 	sts	0x012A, r24
     126:	68 e2       	ldi	r22, 0x28	; 40
     128:	75 e0       	ldi	r23, 0x05	; 5
     12a:	e0 e0       	ldi	r30, 0x00	; 0
    }

	last_logic_1 = EQUAL;
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	40 91 10 01 	lds	r20, 0x0110
     134:	50 91 11 01 	lds	r21, 0x0111
     138:	20 91 0e 01 	lds	r18, 0x010E
     13c:	30 91 0f 01 	lds	r19, 0x010F
     140:	42 17       	cp	r20, r18
     142:	53 07       	cpc	r21, r19
     144:	11 f0       	breq	.+4      	; 0x14a <setup+0x6e>
     146:	80 e0       	ldi	r24, 0x00	; 0
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	90 93 3f 01 	sts	0x013F, r25
     14e:	80 93 3e 01 	sts	0x013E, r24
	last_logic_2 = INLINE;
     152:	81 e0       	ldi	r24, 0x01	; 1
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	40 91 0c 01 	lds	r20, 0x010C
     15a:	50 91 0d 01 	lds	r21, 0x010D
     15e:	20 91 0a 01 	lds	r18, 0x010A
     162:	30 91 0b 01 	lds	r19, 0x010B
     166:	24 17       	cp	r18, r20
     168:	35 07       	cpc	r19, r21
     16a:	14 f4       	brge	.+4      	; 0x170 <setup+0x94>
     16c:	80 e0       	ldi	r24, 0x00	; 0
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	90 93 3d 01 	sts	0x013D, r25
     174:	80 93 3c 01 	sts	0x013C, r24

    // Set the transmission message.
    message.type = NORMAL;
     178:	10 92 4d 01 	sts	0x014D, r1
    message.data[0] = own_gradient;
     17c:	e0 93 44 01 	sts	0x0144, r30
	// Sequence has not been formed completely.
	message.data[1] = formed_state;
     180:	80 91 22 01 	lds	r24, 0x0122
     184:	80 93 45 01 	sts	0x0145, r24
	message.data[2] = state_motivator;
     188:	70 93 46 01 	sts	0x0146, r23
	message.data[3] = distance_to_motivator;
     18c:	60 93 47 01 	sts	0x0147, r22
	message.crc = message_crc(&message);
     190:	84 e4       	ldi	r24, 0x44	; 68
     192:	91 e0       	ldi	r25, 0x01	; 1
     194:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <message_crc>
     198:	90 93 4f 01 	sts	0x014F, r25
     19c:	80 93 4e 01 	sts	0x014E, r24
     1a0:	08 95       	ret
     1a2:	e0 91 08 01 	lds	r30, 0x0108
     1a6:	70 91 2a 01 	lds	r23, 0x012A
     1aa:	60 91 16 01 	lds	r22, 0x0116
     1ae:	be cf       	rjmp	.-132    	; 0x12c <setup+0x50>

000001b0 <message_tx>:
}


message_t *message_tx()
{
	message.data[0] = own_gradient;
     1b0:	80 91 08 01 	lds	r24, 0x0108
     1b4:	80 93 44 01 	sts	0x0144, r24
	message.data[1] = formed_state;
     1b8:	80 91 22 01 	lds	r24, 0x0122
     1bc:	80 93 45 01 	sts	0x0145, r24
	message.data[2] = state_myself;
     1c0:	80 91 28 01 	lds	r24, 0x0128
     1c4:	80 93 46 01 	sts	0x0146, r24
	message.data[3] = distance_to_motivator;
     1c8:	80 91 16 01 	lds	r24, 0x0116
     1cc:	80 93 47 01 	sts	0x0147, r24
        default:
             set_color(RGB(0, 1, 1));
             break;
    }
*/
	message.crc = message_crc(&message);
     1d0:	84 e4       	ldi	r24, 0x44	; 68
     1d2:	91 e0       	ldi	r25, 0x01	; 1
     1d4:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <message_crc>
     1d8:	90 93 4f 01 	sts	0x014F, r25
     1dc:	80 93 4e 01 	sts	0x014E, r24
    return &message;
}
     1e0:	84 e4       	ldi	r24, 0x44	; 68
     1e2:	91 e0       	ldi	r25, 0x01	; 1
     1e4:	08 95       	ret

000001e6 <message_rx>:

void message_rx(message_t *m, distance_measurement_t *d)
{
     1e6:	cf 92       	push	r12
     1e8:	df 92       	push	r13
     1ea:	ef 92       	push	r14
     1ec:	ff 92       	push	r15
     1ee:	cf 93       	push	r28
     1f0:	df 93       	push	r29
     1f2:	ec 01       	movw	r28, r24
     1f4:	cb 01       	movw	r24, r22
	//set_color(RGB(0, 0, 0));
	//set_color(RGB(1, 0, 0));
    received_gradient = m->data[0];
     1f6:	28 81       	ld	r18, Y
     1f8:	30 e0       	ldi	r19, 0x00	; 0
     1fa:	30 93 2f 01 	sts	0x012F, r19
     1fe:	20 93 2e 01 	sts	0x012E, r18
    distance = estimate_distance(d);
     202:	0e 94 39 09 	call	0x1272	; 0x1272 <estimate_distance>
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	90 93 19 01 	sts	0x0119, r25
     20c:	80 93 18 01 	sts	0x0118, r24
	// In the valid distance.
	if (distance <= DISTANCE_GRADIENT)
     210:	85 36       	cpi	r24, 0x65	; 101
     212:	91 05       	cpc	r25, r1
     214:	0c f0       	brlt	.+2      	; 0x218 <message_rx+0x32>
     216:	6e c0       	rjmp	.+220    	; 0x2f4 <message_rx+0x10e>
	{
		last_gradient_anchored = kilo_ticks;
     218:	40 91 83 01 	lds	r20, 0x0183
     21c:	50 91 84 01 	lds	r21, 0x0184
     220:	60 91 85 01 	lds	r22, 0x0185
     224:	70 91 86 01 	lds	r23, 0x0186
     228:	40 93 54 01 	sts	0x0154, r20
     22c:	50 93 55 01 	sts	0x0155, r21
     230:	60 93 56 01 	sts	0x0156, r22
     234:	70 93 57 01 	sts	0x0157, r23
		// The message was sent by my motivated.
		// I found someone's gradient maxer than mine in the world.
		// My formed state is determined by my maxer.
		if (received_gradient > own_gradient)
     238:	20 91 2e 01 	lds	r18, 0x012E
     23c:	30 91 2f 01 	lds	r19, 0x012F
     240:	e0 91 08 01 	lds	r30, 0x0108
     244:	f0 91 09 01 	lds	r31, 0x0109
     248:	e2 17       	cp	r30, r18
     24a:	f3 07       	cpc	r31, r19
     24c:	0c f0       	brlt	.+2      	; 0x250 <message_rx+0x6a>
     24e:	59 c0       	rjmp	.+178    	; 0x302 <message_rx+0x11c>
		{
			last_found_maxer = kilo_ticks;
     250:	40 91 83 01 	lds	r20, 0x0183
     254:	50 91 84 01 	lds	r21, 0x0184
     258:	60 91 85 01 	lds	r22, 0x0185
     25c:	70 91 86 01 	lds	r23, 0x0186
     260:	40 93 58 01 	sts	0x0158, r20
     264:	50 93 59 01 	sts	0x0159, r21
     268:	60 93 5a 01 	sts	0x015A, r22
     26c:	70 93 5b 01 	sts	0x015B, r23
			flag_maxest = NO;
     270:	10 92 3b 01 	sts	0x013B, r1
     274:	10 92 3a 01 	sts	0x013A, r1
			if (received_gradient == (own_gradient + 1))
     278:	31 96       	adiw	r30, 0x01	; 1
     27a:	2e 17       	cp	r18, r30
     27c:	3f 07       	cpc	r19, r31
     27e:	09 f4       	brne	.+2      	; 0x282 <message_rx+0x9c>
     280:	ba c0       	rjmp	.+372    	; 0x3f6 <message_rx+0x210>
     282:	80 91 b9 01 	lds	r24, 0x01B9
     286:	90 91 ba 01 	lds	r25, 0x01BA
		//flag_maxest = NO;

		// I have neighbours whose gradient is minor than mine.
		// Meanwhile long time no find gradient maxer than mine.
		// I am the maxest one in my local world.
		if((kilo_uid != SEED_ID) && (kilo_ticks > (last_found_maxer + TIME_CHECK_MAXER)))
     28a:	89 2b       	or	r24, r25
     28c:	99 f1       	breq	.+102    	; 0x2f4 <message_rx+0x10e>
     28e:	40 91 83 01 	lds	r20, 0x0183
     292:	50 91 84 01 	lds	r21, 0x0184
     296:	60 91 85 01 	lds	r22, 0x0185
     29a:	70 91 86 01 	lds	r23, 0x0186
     29e:	80 91 58 01 	lds	r24, 0x0158
     2a2:	90 91 59 01 	lds	r25, 0x0159
     2a6:	a0 91 5a 01 	lds	r26, 0x015A
     2aa:	b0 91 5b 01 	lds	r27, 0x015B
     2ae:	80 56       	subi	r24, 0x60	; 96
     2b0:	9f 4f       	sbci	r25, 0xFF	; 255
     2b2:	af 4f       	sbci	r26, 0xFF	; 255
     2b4:	bf 4f       	sbci	r27, 0xFF	; 255
     2b6:	84 17       	cp	r24, r20
     2b8:	95 07       	cpc	r25, r21
     2ba:	a6 07       	cpc	r26, r22
     2bc:	b7 07       	cpc	r27, r23
     2be:	d0 f4       	brcc	.+52     	; 0x2f4 <message_rx+0x10e>
		{
			formed_state = FORMED_OK;
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	90 93 23 01 	sts	0x0123, r25
     2c8:	80 93 22 01 	sts	0x0122, r24
			state_motivated = COMPLETED;
     2cc:	25 e0       	ldi	r18, 0x05	; 5
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	30 93 2d 01 	sts	0x012D, r19
     2d4:	20 93 2c 01 	sts	0x012C, r18
			flag_maxest = YES;
     2d8:	90 93 3b 01 	sts	0x013B, r25
     2dc:	80 93 3a 01 	sts	0x013A, r24
			distance_to_motivated = DISTANCE_MAX;
     2e0:	24 e6       	ldi	r18, 0x64	; 100
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	30 93 11 01 	sts	0x0111, r19
     2e8:	20 93 10 01 	sts	0x0110, r18
			update_distance_to_motivated = UPDATE;
     2ec:	90 93 37 01 	sts	0x0137, r25
     2f0:	80 93 36 01 	sts	0x0136, r24
			update_state_motivator = UPDATE;
			set_color(RGB(1, 0, 1));
		}
		*/
	}
}
     2f4:	df 91       	pop	r29
     2f6:	cf 91       	pop	r28
     2f8:	ff 90       	pop	r15
     2fa:	ef 90       	pop	r14
     2fc:	df 90       	pop	r13
     2fe:	cf 90       	pop	r12
     300:	08 95       	ret
				update_distance_to_motivated = UPDATE;
			}
		}
		// That guy has the same gradient with mine.
		// There needs a comparison between us.
		else if ((received_gradient == own_gradient) && (received_gradient != GRADIENT_MAX))
     302:	2e 17       	cp	r18, r30
     304:	3f 07       	cpc	r19, r31
     306:	b9 f1       	breq	.+110    	; 0x376 <message_rx+0x190>
				update_distance_to_motivator = UPDATE;
			}
		}
		// received_gradient < own_gradient
		// The message was sent by my motivator.
		else if (kilo_uid != SEED_ID)
     308:	40 91 b9 01 	lds	r20, 0x01B9
     30c:	50 91 ba 01 	lds	r21, 0x01BA
     310:	45 2b       	or	r20, r21
     312:	81 f3       	breq	.-32     	; 0x2f4 <message_rx+0x10e>
		{
			if (((own_gradient - received_gradient) == 2) || ((own_gradient - received_gradient) == 3))
     314:	e2 1b       	sub	r30, r18
     316:	f3 0b       	sbc	r31, r19
     318:	32 97       	sbiw	r30, 0x02	; 2
     31a:	32 97       	sbiw	r30, 0x02	; 2
     31c:	08 f4       	brcc	.+2      	; 0x320 <message_rx+0x13a>
     31e:	9e c0       	rjmp	.+316    	; 0x45c <message_rx+0x276>
					update_distance_to_motivator = UPDATE;
				}
			}
			else
			{
				last_found_minor = kilo_ticks;
     320:	40 91 83 01 	lds	r20, 0x0183
     324:	50 91 84 01 	lds	r21, 0x0184
     328:	60 91 85 01 	lds	r22, 0x0185
     32c:	70 91 86 01 	lds	r23, 0x0186
     330:	40 93 5c 01 	sts	0x015C, r20
     334:	50 93 5d 01 	sts	0x015D, r21
     338:	60 93 5e 01 	sts	0x015E, r22
     33c:	70 93 5f 01 	sts	0x015F, r23
				own_gradient = received_gradient + 1;
     340:	2f 5f       	subi	r18, 0xFF	; 255
     342:	3f 4f       	sbci	r19, 0xFF	; 255
     344:	30 93 09 01 	sts	0x0109, r19
     348:	20 93 08 01 	sts	0x0108, r18
				state_motivator =  m->data[2];
     34c:	2a 81       	ldd	r18, Y+2	; 0x02
     34e:	30 e0       	ldi	r19, 0x00	; 0
     350:	30 93 2b 01 	sts	0x012B, r19
     354:	20 93 2a 01 	sts	0x012A, r18
				update_state_motivator = UPDATE;
     358:	21 e0       	ldi	r18, 0x01	; 1
     35a:	30 e0       	ldi	r19, 0x00	; 0
     35c:	30 93 31 01 	sts	0x0131, r19
     360:	20 93 30 01 	sts	0x0130, r18
				distance_to_motivator = distance;
     364:	90 93 17 01 	sts	0x0117, r25
     368:	80 93 16 01 	sts	0x0116, r24
				update_distance_to_motivator = UPDATE;
     36c:	30 93 35 01 	sts	0x0135, r19
     370:	20 93 34 01 	sts	0x0134, r18
     374:	8c cf       	rjmp	.-232    	; 0x28e <message_rx+0xa8>
				update_distance_to_motivated = UPDATE;
			}
		}
		// That guy has the same gradient with mine.
		// There needs a comparison between us.
		else if ((received_gradient == own_gradient) && (received_gradient != GRADIENT_MAX))
     376:	2f 3f       	cpi	r18, 0xFF	; 255
     378:	31 05       	cpc	r19, r1
     37a:	31 f2       	breq	.-116    	; 0x308 <message_rx+0x122>
		{
			distance_to_motivator_pair = m->data[3];
     37c:	4b 81       	ldd	r20, Y+3	; 0x03
     37e:	50 e0       	ldi	r21, 0x00	; 0
     380:	50 93 15 01 	sts	0x0115, r21
     384:	40 93 14 01 	sts	0x0114, r20
			if (distance_to_motivator_pair < distance_to_motivator)
     388:	60 91 16 01 	lds	r22, 0x0116
     38c:	70 91 17 01 	lds	r23, 0x0117
     390:	46 17       	cp	r20, r22
     392:	57 07       	cpc	r21, r23
     394:	0c f0       	brlt	.+2      	; 0x398 <message_rx+0x1b2>
     396:	75 cf       	rjmp	.-278    	; 0x282 <message_rx+0x9c>
			{
				last_found_minor = kilo_ticks;
     398:	40 91 83 01 	lds	r20, 0x0183
     39c:	50 91 84 01 	lds	r21, 0x0184
     3a0:	60 91 85 01 	lds	r22, 0x0185
     3a4:	70 91 86 01 	lds	r23, 0x0186
     3a8:	40 93 5c 01 	sts	0x015C, r20
     3ac:	50 93 5d 01 	sts	0x015D, r21
     3b0:	60 93 5e 01 	sts	0x015E, r22
     3b4:	70 93 5f 01 	sts	0x015F, r23
				own_gradient = received_gradient + 1;
     3b8:	2f 5f       	subi	r18, 0xFF	; 255
     3ba:	3f 4f       	sbci	r19, 0xFF	; 255
     3bc:	30 93 09 01 	sts	0x0109, r19
     3c0:	20 93 08 01 	sts	0x0108, r18
				state_motivator =  m->data[2];
     3c4:	2a 81       	ldd	r18, Y+2	; 0x02
     3c6:	30 e0       	ldi	r19, 0x00	; 0
     3c8:	30 93 2b 01 	sts	0x012B, r19
     3cc:	20 93 2a 01 	sts	0x012A, r18
				update_state_motivator = UPDATE;
     3d0:	21 e0       	ldi	r18, 0x01	; 1
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	30 93 31 01 	sts	0x0131, r19
     3d8:	20 93 30 01 	sts	0x0130, r18
				distance_to_motivator = distance;
     3dc:	90 93 17 01 	sts	0x0117, r25
     3e0:	80 93 16 01 	sts	0x0116, r24
				update_distance_to_motivator = UPDATE;
     3e4:	30 93 35 01 	sts	0x0135, r19
     3e8:	20 93 34 01 	sts	0x0134, r18
     3ec:	80 91 b9 01 	lds	r24, 0x01B9
     3f0:	90 91 ba 01 	lds	r25, 0x01BA
     3f4:	4a cf       	rjmp	.-364    	; 0x28a <message_rx+0xa4>
		{
			last_found_maxer = kilo_ticks;
			flag_maxest = NO;
			if (received_gradient == (own_gradient + 1))
			{
				formed_state = m->data[1];
     3f6:	29 81       	ldd	r18, Y+1	; 0x01
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	30 93 23 01 	sts	0x0123, r19
     3fe:	20 93 22 01 	sts	0x0122, r18
				state_motivated =  m->data[2];
     402:	2a 81       	ldd	r18, Y+2	; 0x02
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	30 93 2d 01 	sts	0x012D, r19
     40a:	20 93 2c 01 	sts	0x012C, r18
				update_state_motivated = UPDATE;
     40e:	41 e0       	ldi	r20, 0x01	; 1
     410:	50 e0       	ldi	r21, 0x00	; 0
     412:	50 93 33 01 	sts	0x0133, r21
     416:	40 93 32 01 	sts	0x0132, r20
				if (state_motivated != MOVE)
     41a:	24 30       	cpi	r18, 0x04	; 4
     41c:	31 05       	cpc	r19, r1
     41e:	09 f4       	brne	.+2      	; 0x422 <message_rx+0x23c>
     420:	47 c0       	rjmp	.+142    	; 0x4b0 <message_rx+0x2ca>
				{
					if ((++num_stop) == 1)
     422:	20 91 26 01 	lds	r18, 0x0126
     426:	30 91 27 01 	lds	r19, 0x0127
     42a:	2f 5f       	subi	r18, 0xFF	; 255
     42c:	3f 4f       	sbci	r19, 0xFF	; 255
     42e:	30 93 27 01 	sts	0x0127, r19
     432:	20 93 26 01 	sts	0x0126, r18
     436:	21 30       	cpi	r18, 0x01	; 1
     438:	31 05       	cpc	r19, r1
     43a:	59 f0       	breq	.+22     	; 0x452 <message_rx+0x26c>
				}
				else
				{
					num_stop = 0;
				}
				distance_to_motivated = distance;
     43c:	90 93 11 01 	sts	0x0111, r25
     440:	80 93 10 01 	sts	0x0110, r24
				update_distance_to_motivated = UPDATE;
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	90 93 37 01 	sts	0x0137, r25
     44c:	80 93 36 01 	sts	0x0136, r24
     450:	18 cf       	rjmp	.-464    	; 0x282 <message_rx+0x9c>
				update_state_motivated = UPDATE;
				if (state_motivated != MOVE)
				{
					if ((++num_stop) == 1)
					{
						my_fault = NO;
     452:	10 92 03 01 	sts	0x0103, r1
     456:	10 92 02 01 	sts	0x0102, r1
     45a:	f0 cf       	rjmp	.-32     	; 0x43c <message_rx+0x256>
			if (((own_gradient - received_gradient) == 2) || ((own_gradient - received_gradient) == 3))
			{
				// The message sender is closer, and meanwhile the last
				// time I found a minor is too long ago (TIME_CHECK_MINOR).
				// Thus I need  to find a new motivator.
				if ((distance < distance_to_motivator) && (kilo_ticks > (last_found_minor + TIME_CHECK_MINOR)))
     45c:	40 91 16 01 	lds	r20, 0x0116
     460:	50 91 17 01 	lds	r21, 0x0117
     464:	84 17       	cp	r24, r20
     466:	95 07       	cpc	r25, r21
     468:	d4 f4       	brge	.+52     	; 0x49e <message_rx+0x2b8>
     46a:	c0 90 83 01 	lds	r12, 0x0183
     46e:	d0 90 84 01 	lds	r13, 0x0184
     472:	e0 90 85 01 	lds	r14, 0x0185
     476:	f0 90 86 01 	lds	r15, 0x0186
     47a:	40 91 5c 01 	lds	r20, 0x015C
     47e:	50 91 5d 01 	lds	r21, 0x015D
     482:	60 91 5e 01 	lds	r22, 0x015E
     486:	70 91 5f 01 	lds	r23, 0x015F
     48a:	40 58       	subi	r20, 0x80	; 128
     48c:	5f 4f       	sbci	r21, 0xFF	; 255
     48e:	6f 4f       	sbci	r22, 0xFF	; 255
     490:	7f 4f       	sbci	r23, 0xFF	; 255
     492:	4c 15       	cp	r20, r12
     494:	5d 05       	cpc	r21, r13
     496:	6e 05       	cpc	r22, r14
     498:	7f 05       	cpc	r23, r15
     49a:	08 f4       	brcc	.+2      	; 0x49e <message_rx+0x2b8>
     49c:	41 cf       	rjmp	.-382    	; 0x320 <message_rx+0x13a>
					state_motivator =  m->data[2];
					update_state_motivator = UPDATE;
					distance_to_motivator = distance;
					update_distance_to_motivator = UPDATE;
				}
				else if (distance < distance_to_motivator_pair)
     49e:	40 91 14 01 	lds	r20, 0x0114
     4a2:	50 91 15 01 	lds	r21, 0x0115
     4a6:	84 17       	cp	r24, r20
     4a8:	95 07       	cpc	r25, r21
     4aa:	0c f4       	brge	.+2      	; 0x4ae <message_rx+0x2c8>
     4ac:	39 cf       	rjmp	.-398    	; 0x320 <message_rx+0x13a>
     4ae:	ef ce       	rjmp	.-546    	; 0x28e <message_rx+0xa8>
						my_fault = NO;
					}
				}
				else
				{
					num_stop = 0;
     4b0:	10 92 27 01 	sts	0x0127, r1
     4b4:	10 92 26 01 	sts	0x0126, r1
     4b8:	c1 cf       	rjmp	.-126    	; 0x43c <message_rx+0x256>

000004ba <randBinary>:


// Generate 0 or 1 randomly
int randBinary(){
    // Generate an 8-bit random number (between 0 and 2^8 - 1 = 255).
    int random_number = rand_hard();
     4ba:	0e 94 b1 08 	call	0x1162	; 0x1162 <rand_hard>
    // Compute the remainder of random_number when divided by 2.
    // This gives a new random number in the set {0, 1}.
    int random_direction = (random_number % 2);

    return random_direction;
}
     4be:	81 70       	andi	r24, 0x01	; 1
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	08 95       	ret

000004c4 <rand>:

// Generate a random number in the closed interval (0, 1).
float rand(){
    // Generate an 8-bit random number (between 0 and 2^8 - 1 = 255).
    int random_number = rand_hard();
     4c4:	0e 94 b1 08 	call	0x1162	; 0x1162 <rand_hard>
     4c8:	90 e0       	ldi	r25, 0x00	; 0

    float result = random_number / 255;
     4ca:	6f ef       	ldi	r22, 0xFF	; 255
     4cc:	70 e0       	ldi	r23, 0x00	; 0
     4ce:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <__divmodhi4>
     4d2:	88 27       	eor	r24, r24
     4d4:	77 fd       	sbrc	r23, 7
     4d6:	80 95       	com	r24
     4d8:	98 2f       	mov	r25, r24
     4da:	0e 94 b5 10 	call	0x216a	; 0x216a <__floatsisf>

    return result;
}
     4de:	08 95       	ret

000004e0 <set_led>:

// Function to set led states
void set_led()
{
    // Set the LED color based on the gradient.
    switch (own_gradient) {
     4e0:	80 91 08 01 	lds	r24, 0x0108
     4e4:	90 91 09 01 	lds	r25, 0x0109
     4e8:	82 30       	cpi	r24, 0x02	; 2
     4ea:	91 05       	cpc	r25, r1
     4ec:	c9 f0       	breq	.+50     	; 0x520 <set_led+0x40>
     4ee:	3c f4       	brge	.+14     	; 0x4fe <set_led+0x1e>
     4f0:	00 97       	sbiw	r24, 0x00	; 0
     4f2:	99 f0       	breq	.+38     	; 0x51a <set_led+0x3a>
     4f4:	01 97       	sbiw	r24, 0x01	; 1
     4f6:	59 f4       	brne	.+22     	; 0x50e <set_led+0x2e>
        case 0:
            set_color(RGB(1, 1, 1)); // White
            break;
        case 1:
            set_color(RGB(1, 0, 0)); // Red
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	0c 94 7c 0c 	jmp	0x18f8	; 0x18f8 <set_color>

// Function to set led states
void set_led()
{
    // Set the LED color based on the gradient.
    switch (own_gradient) {
     4fe:	83 30       	cpi	r24, 0x03	; 3
     500:	91 05       	cpc	r25, r1
     502:	41 f0       	breq	.+16     	; 0x514 <set_led+0x34>
     504:	04 97       	sbiw	r24, 0x04	; 4
     506:	19 f4       	brne	.+6      	; 0x50e <set_led+0x2e>
            break;
        case 3:
            set_color(RGB(0, 0, 1)); // Blue
            break;
        case 4:
            set_color(RGB(1, 1, 0)); // Yellow
     508:	85 e0       	ldi	r24, 0x05	; 5
     50a:	0c 94 7c 0c 	jmp	0x18f8	; 0x18f8 <set_color>
            break;
        default:
            set_color(RGB(1, 0, 1)); // Magneta
     50e:	81 e1       	ldi	r24, 0x11	; 17
     510:	0c 94 7c 0c 	jmp	0x18f8	; 0x18f8 <set_color>
            break;
        case 2:
            set_color(RGB(0, 1, 0)); // Green
            break;
        case 3:
            set_color(RGB(0, 0, 1)); // Blue
     514:	80 e1       	ldi	r24, 0x10	; 16
     516:	0c 94 7c 0c 	jmp	0x18f8	; 0x18f8 <set_color>
void set_led()
{
    // Set the LED color based on the gradient.
    switch (own_gradient) {
        case 0:
            set_color(RGB(1, 1, 1)); // White
     51a:	85 e1       	ldi	r24, 0x15	; 21
     51c:	0c 94 7c 0c 	jmp	0x18f8	; 0x18f8 <set_color>
            break;
        case 1:
            set_color(RGB(1, 0, 0)); // Red
            break;
        case 2:
            set_color(RGB(0, 1, 0)); // Green
     520:	84 e0       	ldi	r24, 0x04	; 4
     522:	0c 94 7c 0c 	jmp	0x18f8	; 0x18f8 <set_color>

00000526 <set_motion>:

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an an action if the motion is being changed.
    if (current_motion != new_motion)
     526:	20 91 06 01 	lds	r18, 0x0106
     52a:	30 91 07 01 	lds	r19, 0x0107
     52e:	28 17       	cp	r18, r24
     530:	39 07       	cpc	r19, r25
     532:	71 f0       	breq	.+28     	; 0x550 <set_motion+0x2a>
    {
        current_motion = new_motion;
     534:	90 93 07 01 	sts	0x0107, r25
     538:	80 93 06 01 	sts	0x0106, r24

        if (current_motion == STOP)
     53c:	00 97       	sbiw	r24, 0x00	; 0
     53e:	81 f0       	breq	.+32     	; 0x560 <set_motion+0x3a>
        {
			set_color(RGB(0, 0, 0));
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
     540:	81 30       	cpi	r24, 0x01	; 1
     542:	91 05       	cpc	r25, r1
     544:	a1 f0       	breq	.+40     	; 0x56e <set_motion+0x48>
        {
			//set_color(RGB(1, 0, 0));
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
     546:	82 30       	cpi	r24, 0x02	; 2
     548:	91 05       	cpc	r25, r1
     54a:	c9 f0       	breq	.+50     	; 0x57e <set_motion+0x58>
        {
			//set_color(RGB(0, 1, 0));
            spinup_motors();
            set_motors(kilo_turn_left, 0);
        }
        else if (current_motion == RIGHT)
     54c:	03 97       	sbiw	r24, 0x03	; 3
     54e:	09 f0       	breq	.+2      	; 0x552 <set_motion+0x2c>
     550:	08 95       	ret
        {
			//set_color(RGB(0, 0, 1));
            spinup_motors();
     552:	0e 94 56 08 	call	0x10ac	; 0x10ac <spinup_motors>
            set_motors(0, kilo_turn_right);
     556:	60 91 a9 01 	lds	r22, 0x01A9
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <set_motors>
    {
        current_motion = new_motion;

        if (current_motion == STOP)
        {
			set_color(RGB(0, 0, 0));
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <set_color>
            set_motors(0, 0);
     566:	60 e0       	ldi	r22, 0x00	; 0
     568:	80 e0       	ldi	r24, 0x00	; 0
     56a:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <set_motors>
        }
        else if (current_motion == FORWARD)
        {
			//set_color(RGB(1, 0, 0));
            spinup_motors();
     56e:	0e 94 56 08 	call	0x10ac	; 0x10ac <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     572:	60 91 bc 01 	lds	r22, 0x01BC
     576:	80 91 bb 01 	lds	r24, 0x01BB
     57a:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <set_motors>
        }
        else if (current_motion == LEFT)
        {
			//set_color(RGB(0, 1, 0));
            spinup_motors();
     57e:	0e 94 56 08 	call	0x10ac	; 0x10ac <spinup_motors>
            set_motors(kilo_turn_left, 0);
     582:	60 e0       	ldi	r22, 0x00	; 0
     584:	80 91 bd 01 	lds	r24, 0x01BD
     588:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <set_motors>

0000058c <check_own_gradient>:
}

void check_own_gradient() {
	// If no neighbors detected within TIME_LAST_GRADIENT seconds
	// then sleep waiting for be activated.
    if ( (kilo_uid != SEED_ID) && (kilo_ticks > (last_found_minor + TIME_LAST_GRADIENT)) && (own_gradient < GRADIENT_MAX))
     58c:	80 91 b9 01 	lds	r24, 0x01B9
     590:	90 91 ba 01 	lds	r25, 0x01BA
     594:	89 2b       	or	r24, r25
     596:	51 f1       	breq	.+84     	; 0x5ec <check_own_gradient+0x60>
     598:	40 91 83 01 	lds	r20, 0x0183
     59c:	50 91 84 01 	lds	r21, 0x0184
     5a0:	60 91 85 01 	lds	r22, 0x0185
     5a4:	70 91 86 01 	lds	r23, 0x0186
     5a8:	80 91 5c 01 	lds	r24, 0x015C
     5ac:	90 91 5d 01 	lds	r25, 0x015D
     5b0:	a0 91 5e 01 	lds	r26, 0x015E
     5b4:	b0 91 5f 01 	lds	r27, 0x015F
     5b8:	80 56       	subi	r24, 0x60	; 96
     5ba:	9f 4f       	sbci	r25, 0xFF	; 255
     5bc:	af 4f       	sbci	r26, 0xFF	; 255
     5be:	bf 4f       	sbci	r27, 0xFF	; 255
     5c0:	84 17       	cp	r24, r20
     5c2:	95 07       	cpc	r25, r21
     5c4:	a6 07       	cpc	r26, r22
     5c6:	b7 07       	cpc	r27, r23
     5c8:	88 f4       	brcc	.+34     	; 0x5ec <check_own_gradient+0x60>
     5ca:	80 91 08 01 	lds	r24, 0x0108
     5ce:	90 91 09 01 	lds	r25, 0x0109
     5d2:	8f 3f       	cpi	r24, 0xFF	; 255
     5d4:	91 05       	cpc	r25, r1
     5d6:	54 f4       	brge	.+20     	; 0x5ec <check_own_gradient+0x60>
    {
        own_gradient = GRADIENT_MAX;
     5d8:	8f ef       	ldi	r24, 0xFF	; 255
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	90 93 09 01 	sts	0x0109, r25
     5e0:	80 93 08 01 	sts	0x0108, r24
		formed_state = FORMED_NO;
     5e4:	10 92 23 01 	sts	0x0123, r1
     5e8:	10 92 22 01 	sts	0x0122, r1
     5ec:	08 95       	ret

000005ee <opposite_move>:
    }
}

int opposite_move(int offspring)
{
     5ee:	cf 93       	push	r28
     5f0:	df 93       	push	r29
     5f2:	ec 01       	movw	r28, r24
	set_color(RGB(1, 1, 1));
     5f4:	85 e1       	ldi	r24, 0x15	; 21
     5f6:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <set_color>
	int next_motion = offspring;
	switch (offspring)
     5fa:	c2 30       	cpi	r28, 0x02	; 2
     5fc:	d1 05       	cpc	r29, r1
     5fe:	71 f0       	breq	.+28     	; 0x61c <opposite_move+0x2e>
     600:	c3 30       	cpi	r28, 0x03	; 3
     602:	d1 05       	cpc	r29, r1
     604:	89 f0       	breq	.+34     	; 0x628 <opposite_move+0x3a>
     606:	c1 30       	cpi	r28, 0x01	; 1
     608:	d1 05       	cpc	r29, r1
     60a:	21 f0       	breq	.+8      	; 0x614 <opposite_move+0x26>
			break;
		default:
			break;
	}
	return next_motion;
}
     60c:	ce 01       	movw	r24, r28
     60e:	df 91       	pop	r29
     610:	cf 91       	pop	r28
     612:	08 95       	ret


// Generate 0 or 1 randomly
int randBinary(){
    // Generate an 8-bit random number (between 0 and 2^8 - 1 = 255).
    int random_number = rand_hard();
     614:	0e 94 b1 08 	call	0x1162	; 0x1162 <rand_hard>
			break;
		case RIGHT:
			next_motion = LEFT;
			break;
		case FORWARD:
			if (randBinary() == 1)
     618:	80 fd       	sbrc	r24, 0
     61a:	06 c0       	rjmp	.+12     	; 0x628 <opposite_move+0x3a>
			{
				next_motion = LEFT;
			}
			else
			{
				next_motion = RIGHT;
     61c:	c3 e0       	ldi	r28, 0x03	; 3
     61e:	d0 e0       	ldi	r29, 0x00	; 0
			break;
		default:
			break;
	}
	return next_motion;
}
     620:	ce 01       	movw	r24, r28
     622:	df 91       	pop	r29
     624:	cf 91       	pop	r28
     626:	08 95       	ret
			next_motion = LEFT;
			break;
		case FORWARD:
			if (randBinary() == 1)
			{
				next_motion = LEFT;
     628:	c2 e0       	ldi	r28, 0x02	; 2
     62a:	d0 e0       	ldi	r29, 0x00	; 0
			break;
		default:
			break;
	}
	return next_motion;
}
     62c:	ce 01       	movw	r24, r28
     62e:	df 91       	pop	r29
     630:	cf 91       	pop	r28
     632:	08 95       	ret

00000634 <move>:

void move() {
     634:	cf 93       	push	r28
     636:	df 93       	push	r29
	int next_motion = offspring;
     638:	c0 91 00 01 	lds	r28, 0x0100
     63c:	d0 91 01 01 	lds	r29, 0x0101
		set_color(RGB(0, 1, 0));
	}
	*/

	// Decision making: 6 * 6 matrix.
	if (flag_maxest == YES)
     640:	80 91 3a 01 	lds	r24, 0x013A
     644:	90 91 3b 01 	lds	r25, 0x013B
     648:	01 97       	sbiw	r24, 0x01	; 1
     64a:	09 f4       	brne	.+2      	; 0x64e <move+0x1a>
     64c:	12 c1       	rjmp	.+548    	; 0x872 <move+0x23e>
	{
		next_motion = FORWARD;
	}
	else if (NEARER_INLINE)
     64e:	20 91 10 01 	lds	r18, 0x0110
     652:	30 91 11 01 	lds	r19, 0x0111
     656:	80 91 0e 01 	lds	r24, 0x010E
     65a:	90 91 0f 01 	lds	r25, 0x010F
     65e:	28 17       	cp	r18, r24
     660:	39 07       	cpc	r19, r25
     662:	0c f0       	brlt	.+2      	; 0x666 <move+0x32>
     664:	56 c0       	rjmp	.+172    	; 0x712 <move+0xde>
     666:	20 91 0c 01 	lds	r18, 0x010C
     66a:	30 91 0d 01 	lds	r19, 0x010D
     66e:	80 91 0a 01 	lds	r24, 0x010A
     672:	90 91 0b 01 	lds	r25, 0x010B
     676:	82 17       	cp	r24, r18
     678:	93 07       	cpc	r25, r19
     67a:	0c f0       	brlt	.+2      	; 0x67e <move+0x4a>
     67c:	0f c1       	rjmp	.+542    	; 0x89c <move+0x268>
		last_logic_1 = LOGIC_NEARER;
		last_logic_2 = LOGIC_INLINE;
	}
	else if (NEARER_OUTLINE)
	{
		set_color(RGB(0, 1, 0));
     67e:	84 e0       	ldi	r24, 0x04	; 4
     680:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <set_color>
		if (last_logic_2 == LOGIC_OUTLINE)
     684:	80 91 3c 01 	lds	r24, 0x013C
     688:	90 91 3d 01 	lds	r25, 0x013D
		{
			//set_color(RGB(0, 1, 0));
			next_motion = offspring;
     68c:	c0 91 00 01 	lds	r28, 0x0100
     690:	d0 91 01 01 	lds	r29, 0x0101
		last_logic_2 = LOGIC_INLINE;
	}
	else if (NEARER_OUTLINE)
	{
		set_color(RGB(0, 1, 0));
		if (last_logic_2 == LOGIC_OUTLINE)
     694:	04 97       	sbiw	r24, 0x04	; 4
     696:	99 f0       	breq	.+38     	; 0x6be <move+0x8a>
    }
}

int opposite_move(int offspring)
{
	set_color(RGB(1, 1, 1));
     698:	85 e1       	ldi	r24, 0x15	; 21
     69a:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <set_color>
	int next_motion = offspring;
	switch (offspring)
     69e:	c2 30       	cpi	r28, 0x02	; 2
     6a0:	d1 05       	cpc	r29, r1
     6a2:	59 f0       	breq	.+22     	; 0x6ba <move+0x86>
     6a4:	c3 30       	cpi	r28, 0x03	; 3
     6a6:	d1 05       	cpc	r29, r1
     6a8:	09 f4       	brne	.+2      	; 0x6ac <move+0x78>
     6aa:	3a c1       	rjmp	.+628    	; 0x920 <__stack+0x21>
     6ac:	c1 30       	cpi	r28, 0x01	; 1
     6ae:	d1 05       	cpc	r29, r1
     6b0:	31 f4       	brne	.+12     	; 0x6be <move+0x8a>


// Generate 0 or 1 randomly
int randBinary(){
    // Generate an 8-bit random number (between 0 and 2^8 - 1 = 255).
    int random_number = rand_hard();
     6b2:	0e 94 b1 08 	call	0x1162	; 0x1162 <rand_hard>
			break;
		case RIGHT:
			next_motion = LEFT;
			break;
		case FORWARD:
			if (randBinary() == 1)
     6b6:	80 fd       	sbrc	r24, 0
     6b8:	33 c1       	rjmp	.+614    	; 0x920 <__stack+0x21>
			{
				next_motion = LEFT;
			}
			else
			{
				next_motion = RIGHT;
     6ba:	c3 e0       	ldi	r28, 0x03	; 3
     6bc:	d0 e0       	ldi	r29, 0x00	; 0
		else
		{
			//set_color(RGB(0, 1, 0));
			next_motion = opposite_move(offspring);
		}
		last_logic_1 = LOGIC_NEARER;
     6be:	10 92 3f 01 	sts	0x013F, r1
     6c2:	10 92 3e 01 	sts	0x013E, r1
		last_logic_2 = LOGIC_OUTLINE;
     6c6:	84 e0       	ldi	r24, 0x04	; 4
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	90 93 3d 01 	sts	0x013D, r25
     6ce:	80 93 3c 01 	sts	0x013C, r24
		last_logic_1 = LOGIC_FARER;
		last_logic_2 = LOGIC_OUTLINE;
	}

	// Update and carry out the decision making above.
	offspring = next_motion;
     6d2:	d0 93 01 01 	sts	0x0101, r29
     6d6:	c0 93 00 01 	sts	0x0100, r28

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an an action if the motion is being changed.
    if (current_motion != new_motion)
     6da:	80 91 06 01 	lds	r24, 0x0106
     6de:	90 91 07 01 	lds	r25, 0x0107
     6e2:	c8 17       	cp	r28, r24
     6e4:	d9 07       	cpc	r29, r25
     6e6:	91 f0       	breq	.+36     	; 0x70c <move+0xd8>
    {
        current_motion = new_motion;
     6e8:	d0 93 07 01 	sts	0x0107, r29
     6ec:	c0 93 06 01 	sts	0x0106, r28

        if (current_motion == STOP)
     6f0:	20 97       	sbiw	r28, 0x00	; 0
     6f2:	09 f4       	brne	.+2      	; 0x6f6 <move+0xc2>
     6f4:	c1 c0       	rjmp	.+386    	; 0x878 <move+0x244>
        {
			set_color(RGB(0, 0, 0));
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
     6f6:	c1 30       	cpi	r28, 0x01	; 1
     6f8:	d1 05       	cpc	r29, r1
     6fa:	09 f4       	brne	.+2      	; 0x6fe <move+0xca>
     6fc:	e1 c0       	rjmp	.+450    	; 0x8c0 <move+0x28c>
        {
			//set_color(RGB(1, 0, 0));
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
     6fe:	c2 30       	cpi	r28, 0x02	; 2
     700:	d1 05       	cpc	r29, r1
     702:	09 f4       	brne	.+2      	; 0x706 <move+0xd2>
     704:	e7 c0       	rjmp	.+462    	; 0x8d4 <move+0x2a0>
        {
			//set_color(RGB(0, 1, 0));
            spinup_motors();
            set_motors(kilo_turn_left, 0);
        }
        else if (current_motion == RIGHT)
     706:	23 97       	sbiw	r28, 0x03	; 3
     708:	09 f4       	brne	.+2      	; 0x70c <move+0xd8>
     70a:	bf c0       	rjmp	.+382    	; 0x88a <move+0x256>
	}

	// Update and carry out the decision making above.
	offspring = next_motion;
	set_motion(offspring);
}
     70c:	df 91       	pop	r29
     70e:	cf 91       	pop	r28
     710:	08 95       	ret
			next_motion = opposite_move(offspring);
		}
		last_logic_1 = LOGIC_NEARER;
		last_logic_2 = LOGIC_OUTLINE;
	}
	else if (EQUAL_INLINE)
     712:	28 17       	cp	r18, r24
     714:	39 07       	cpc	r19, r25
     716:	e9 f1       	breq	.+122    	; 0x792 <move+0x15e>
			next_motion = opposite_move(offspring);
		}
		last_logic_1 = LOGIC_EQUAL;
		last_logic_2 = LOGIC_OUTLINE;
	}
	else if (FARER_INLINE)
     718:	82 17       	cp	r24, r18
     71a:	93 07       	cpc	r25, r19
     71c:	d4 f6       	brge	.-76     	; 0x6d2 <move+0x9e>
     71e:	20 91 0c 01 	lds	r18, 0x010C
     722:	30 91 0d 01 	lds	r19, 0x010D
     726:	80 91 0a 01 	lds	r24, 0x010A
     72a:	90 91 0b 01 	lds	r25, 0x010B
     72e:	82 17       	cp	r24, r18
     730:	93 07       	cpc	r25, r19
     732:	0c f0       	brlt	.+2      	; 0x736 <move+0x102>
     734:	71 c0       	rjmp	.+226    	; 0x818 <move+0x1e4>
		last_logic_1 = LOGIC_FARER;
		last_logic_2 = LOGIC_INLINE;
	}
	else if (FARER_OUTLINE)
	{
		set_color(RGB(0, 1, 1));
     736:	84 e1       	ldi	r24, 0x14	; 20
     738:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <set_color>
		if ((last_logic_1 == LOGIC_FARER) && (last_logic_2 == LOGIC_OUTLINE))
     73c:	80 91 3e 01 	lds	r24, 0x013E
     740:	90 91 3f 01 	lds	r25, 0x013F
		{
			//set_color(RGB(1, 0, 0));
			next_motion = offspring;
     744:	c0 91 00 01 	lds	r28, 0x0100
     748:	d0 91 01 01 	lds	r29, 0x0101
		last_logic_2 = LOGIC_INLINE;
	}
	else if (FARER_OUTLINE)
	{
		set_color(RGB(0, 1, 1));
		if ((last_logic_1 == LOGIC_FARER) && (last_logic_2 == LOGIC_OUTLINE))
     74c:	02 97       	sbiw	r24, 0x02	; 2
     74e:	09 f4       	brne	.+2      	; 0x752 <move+0x11e>
     750:	5b c0       	rjmp	.+182    	; 0x808 <move+0x1d4>
    }
}

int opposite_move(int offspring)
{
	set_color(RGB(1, 1, 1));
     752:	85 e1       	ldi	r24, 0x15	; 21
     754:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <set_color>
	int next_motion = offspring;
	switch (offspring)
     758:	c2 30       	cpi	r28, 0x02	; 2
     75a:	d1 05       	cpc	r29, r1
     75c:	59 f0       	breq	.+22     	; 0x774 <move+0x140>
     75e:	c3 30       	cpi	r28, 0x03	; 3
     760:	d1 05       	cpc	r29, r1
     762:	09 f4       	brne	.+2      	; 0x766 <move+0x132>
     764:	c0 c0       	rjmp	.+384    	; 0x8e6 <move+0x2b2>
     766:	c1 30       	cpi	r28, 0x01	; 1
     768:	d1 05       	cpc	r29, r1
     76a:	31 f4       	brne	.+12     	; 0x778 <move+0x144>


// Generate 0 or 1 randomly
int randBinary(){
    // Generate an 8-bit random number (between 0 and 2^8 - 1 = 255).
    int random_number = rand_hard();
     76c:	0e 94 b1 08 	call	0x1162	; 0x1162 <rand_hard>
			break;
		case RIGHT:
			next_motion = LEFT;
			break;
		case FORWARD:
			if (randBinary() == 1)
     770:	80 fd       	sbrc	r24, 0
     772:	b9 c0       	rjmp	.+370    	; 0x8e6 <move+0x2b2>
			{
				next_motion = LEFT;
			}
			else
			{
				next_motion = RIGHT;
     774:	c3 e0       	ldi	r28, 0x03	; 3
     776:	d0 e0       	ldi	r29, 0x00	; 0
		else
		{
			//set_color(RGB(0, 1, 0));
			next_motion = opposite_move(offspring);
		}
		last_logic_1 = LOGIC_FARER;
     778:	82 e0       	ldi	r24, 0x02	; 2
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	90 93 3f 01 	sts	0x013F, r25
     780:	80 93 3e 01 	sts	0x013E, r24
		last_logic_2 = LOGIC_OUTLINE;
     784:	84 e0       	ldi	r24, 0x04	; 4
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	90 93 3d 01 	sts	0x013D, r25
     78c:	80 93 3c 01 	sts	0x013C, r24
     790:	a0 cf       	rjmp	.-192    	; 0x6d2 <move+0x9e>
			next_motion = opposite_move(offspring);
		}
		last_logic_1 = LOGIC_NEARER;
		last_logic_2 = LOGIC_OUTLINE;
	}
	else if (EQUAL_INLINE)
     792:	20 91 0c 01 	lds	r18, 0x010C
     796:	30 91 0d 01 	lds	r19, 0x010D
     79a:	80 91 0a 01 	lds	r24, 0x010A
     79e:	90 91 0b 01 	lds	r25, 0x010B
     7a2:	82 17       	cp	r24, r18
     7a4:	93 07       	cpc	r25, r19
     7a6:	0c f0       	brlt	.+2      	; 0x7aa <move+0x176>
     7a8:	a1 c0       	rjmp	.+322    	; 0x8ec <move+0x2b8>
		last_logic_1 = LOGIC_EQUAL;
		last_logic_2 = LOGIC_INLINE;
	}
	else if (EQUAL_OUTLINE)
	{
		set_color(RGB(1, 1, 0));
     7aa:	85 e0       	ldi	r24, 0x05	; 5
     7ac:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <set_color>
		if ((last_logic_1 != LOGIC_NEARER) && (last_logic_2 == LOGIC_OUTLINE))
     7b0:	80 91 3e 01 	lds	r24, 0x013E
     7b4:	90 91 3f 01 	lds	r25, 0x013F
		{
			//set_color(RGB(1, 0, 0));
			next_motion = offspring;
     7b8:	c0 91 00 01 	lds	r28, 0x0100
     7bc:	d0 91 01 01 	lds	r29, 0x0101
		last_logic_2 = LOGIC_INLINE;
	}
	else if (EQUAL_OUTLINE)
	{
		set_color(RGB(1, 1, 0));
		if ((last_logic_1 != LOGIC_NEARER) && (last_logic_2 == LOGIC_OUTLINE))
     7c0:	89 2b       	or	r24, r25
     7c2:	31 f0       	breq	.+12     	; 0x7d0 <move+0x19c>
     7c4:	80 91 3c 01 	lds	r24, 0x013C
     7c8:	90 91 3d 01 	lds	r25, 0x013D
     7cc:	04 97       	sbiw	r24, 0x04	; 4
     7ce:	79 f0       	breq	.+30     	; 0x7ee <move+0x1ba>
    }
}

int opposite_move(int offspring)
{
	set_color(RGB(1, 1, 1));
     7d0:	85 e1       	ldi	r24, 0x15	; 21
     7d2:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <set_color>
	int next_motion = offspring;
	switch (offspring)
     7d6:	c2 30       	cpi	r28, 0x02	; 2
     7d8:	d1 05       	cpc	r29, r1
     7da:	09 f4       	brne	.+2      	; 0x7de <move+0x1aa>
     7dc:	a8 c0       	rjmp	.+336    	; 0x92e <__stack+0x2f>
     7de:	c3 30       	cpi	r28, 0x03	; 3
     7e0:	d1 05       	cpc	r29, r1
     7e2:	09 f4       	brne	.+2      	; 0x7e6 <move+0x1b2>
     7e4:	bd c0       	rjmp	.+378    	; 0x960 <__stack+0x61>
     7e6:	c1 30       	cpi	r28, 0x01	; 1
     7e8:	d1 05       	cpc	r29, r1
     7ea:	09 f4       	brne	.+2      	; 0x7ee <move+0x1ba>
     7ec:	9c c0       	rjmp	.+312    	; 0x926 <__stack+0x27>
		else
		{
			//set_color(RGB(0, 1, 0));
			next_motion = opposite_move(offspring);
		}
		last_logic_1 = LOGIC_EQUAL;
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	90 93 3f 01 	sts	0x013F, r25
     7f6:	80 93 3e 01 	sts	0x013E, r24
		last_logic_2 = LOGIC_OUTLINE;
     7fa:	84 e0       	ldi	r24, 0x04	; 4
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	90 93 3d 01 	sts	0x013D, r25
     802:	80 93 3c 01 	sts	0x013C, r24
     806:	65 cf       	rjmp	.-310    	; 0x6d2 <move+0x9e>
		last_logic_2 = LOGIC_INLINE;
	}
	else if (FARER_OUTLINE)
	{
		set_color(RGB(0, 1, 1));
		if ((last_logic_1 == LOGIC_FARER) && (last_logic_2 == LOGIC_OUTLINE))
     808:	80 91 3c 01 	lds	r24, 0x013C
     80c:	90 91 3d 01 	lds	r25, 0x013D
     810:	04 97       	sbiw	r24, 0x04	; 4
     812:	09 f0       	breq	.+2      	; 0x816 <move+0x1e2>
     814:	9e cf       	rjmp	.-196    	; 0x752 <move+0x11e>
     816:	b0 cf       	rjmp	.-160    	; 0x778 <move+0x144>
		last_logic_1 = LOGIC_EQUAL;
		last_logic_2 = LOGIC_OUTLINE;
	}
	else if (FARER_INLINE)
	{
		set_color(RGB(1, 0, 1));
     818:	81 e1       	ldi	r24, 0x11	; 17
     81a:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <set_color>
		if (last_logic_1 == LOGIC_FARER)
     81e:	80 91 3e 01 	lds	r24, 0x013E
     822:	90 91 3f 01 	lds	r25, 0x013F
		{
			//set_color(RGB(1, 0, 0));
			next_motion = offspring;
     826:	c0 91 00 01 	lds	r28, 0x0100
     82a:	d0 91 01 01 	lds	r29, 0x0101
		last_logic_2 = LOGIC_OUTLINE;
	}
	else if (FARER_INLINE)
	{
		set_color(RGB(1, 0, 1));
		if (last_logic_1 == LOGIC_FARER)
     82e:	02 97       	sbiw	r24, 0x02	; 2
     830:	99 f0       	breq	.+38     	; 0x858 <move+0x224>
    }
}

int opposite_move(int offspring)
{
	set_color(RGB(1, 1, 1));
     832:	85 e1       	ldi	r24, 0x15	; 21
     834:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <set_color>
	int next_motion = offspring;
	switch (offspring)
     838:	c2 30       	cpi	r28, 0x02	; 2
     83a:	d1 05       	cpc	r29, r1
     83c:	59 f0       	breq	.+22     	; 0x854 <move+0x220>
     83e:	c3 30       	cpi	r28, 0x03	; 3
     840:	d1 05       	cpc	r29, r1
     842:	09 f4       	brne	.+2      	; 0x846 <move+0x212>
     844:	8a c0       	rjmp	.+276    	; 0x95a <__stack+0x5b>
     846:	c1 30       	cpi	r28, 0x01	; 1
     848:	d1 05       	cpc	r29, r1
     84a:	31 f4       	brne	.+12     	; 0x858 <move+0x224>


// Generate 0 or 1 randomly
int randBinary(){
    // Generate an 8-bit random number (between 0 and 2^8 - 1 = 255).
    int random_number = rand_hard();
     84c:	0e 94 b1 08 	call	0x1162	; 0x1162 <rand_hard>
			break;
		case RIGHT:
			next_motion = LEFT;
			break;
		case FORWARD:
			if (randBinary() == 1)
     850:	80 fd       	sbrc	r24, 0
     852:	83 c0       	rjmp	.+262    	; 0x95a <__stack+0x5b>
			{
				next_motion = LEFT;
			}
			else
			{
				next_motion = RIGHT;
     854:	c3 e0       	ldi	r28, 0x03	; 3
     856:	d0 e0       	ldi	r29, 0x00	; 0
		else
		{
			//set_color(RGB(0, 1, 0));
			next_motion = opposite_move(offspring);
		}
		last_logic_1 = LOGIC_FARER;
     858:	82 e0       	ldi	r24, 0x02	; 2
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	90 93 3f 01 	sts	0x013F, r25
     860:	80 93 3e 01 	sts	0x013E, r24
		last_logic_2 = LOGIC_INLINE;
     864:	83 e0       	ldi	r24, 0x03	; 3
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	90 93 3d 01 	sts	0x013D, r25
     86c:	80 93 3c 01 	sts	0x013C, r24
     870:	30 cf       	rjmp	.-416    	; 0x6d2 <move+0x9e>
	*/

	// Decision making: 6 * 6 matrix.
	if (flag_maxest == YES)
	{
		next_motion = FORWARD;
     872:	c1 e0       	ldi	r28, 0x01	; 1
     874:	d0 e0       	ldi	r29, 0x00	; 0
     876:	2d cf       	rjmp	.-422    	; 0x6d2 <move+0x9e>
    {
        current_motion = new_motion;

        if (current_motion == STOP)
        {
			set_color(RGB(0, 0, 0));
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <set_color>
            set_motors(0, 0);
     87e:	60 e0       	ldi	r22, 0x00	; 0
     880:	80 e0       	ldi	r24, 0x00	; 0
	}

	// Update and carry out the decision making above.
	offspring = next_motion;
	set_motion(offspring);
}
     882:	df 91       	pop	r29
     884:	cf 91       	pop	r28
        current_motion = new_motion;

        if (current_motion == STOP)
        {
			set_color(RGB(0, 0, 0));
            set_motors(0, 0);
     886:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <set_motors>
            set_motors(kilo_turn_left, 0);
        }
        else if (current_motion == RIGHT)
        {
			//set_color(RGB(0, 0, 1));
            spinup_motors();
     88a:	0e 94 56 08 	call	0x10ac	; 0x10ac <spinup_motors>
            set_motors(0, kilo_turn_right);
     88e:	60 91 a9 01 	lds	r22, 0x01A9
     892:	80 e0       	ldi	r24, 0x00	; 0
	}

	// Update and carry out the decision making above.
	offspring = next_motion;
	set_motion(offspring);
}
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
        }
        else if (current_motion == RIGHT)
        {
			//set_color(RGB(0, 0, 1));
            spinup_motors();
            set_motors(0, kilo_turn_right);
     898:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <set_motors>
	{
		next_motion = FORWARD;
	}
	else if (NEARER_INLINE)
	{
		set_color(RGB(1, 0, 0));
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <set_color>
		next_motion = offspring;
     8a2:	c0 91 00 01 	lds	r28, 0x0100
     8a6:	d0 91 01 01 	lds	r29, 0x0101
		last_logic_1 = LOGIC_NEARER;
     8aa:	10 92 3f 01 	sts	0x013F, r1
     8ae:	10 92 3e 01 	sts	0x013E, r1
		last_logic_2 = LOGIC_INLINE;
     8b2:	83 e0       	ldi	r24, 0x03	; 3
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	90 93 3d 01 	sts	0x013D, r25
     8ba:	80 93 3c 01 	sts	0x013C, r24
     8be:	09 cf       	rjmp	.-494    	; 0x6d2 <move+0x9e>
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
        {
			//set_color(RGB(1, 0, 0));
            spinup_motors();
     8c0:	0e 94 56 08 	call	0x10ac	; 0x10ac <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     8c4:	60 91 bc 01 	lds	r22, 0x01BC
     8c8:	80 91 bb 01 	lds	r24, 0x01BB
	}

	// Update and carry out the decision making above.
	offspring = next_motion;
	set_motion(offspring);
}
     8cc:	df 91       	pop	r29
     8ce:	cf 91       	pop	r28
        }
        else if (current_motion == FORWARD)
        {
			//set_color(RGB(1, 0, 0));
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
     8d0:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <set_motors>
        }
        else if (current_motion == LEFT)
        {
			//set_color(RGB(0, 1, 0));
            spinup_motors();
     8d4:	0e 94 56 08 	call	0x10ac	; 0x10ac <spinup_motors>
            set_motors(kilo_turn_left, 0);
     8d8:	60 e0       	ldi	r22, 0x00	; 0
     8da:	80 91 bd 01 	lds	r24, 0x01BD
	}

	// Update and carry out the decision making above.
	offspring = next_motion;
	set_motion(offspring);
}
     8de:	df 91       	pop	r29
     8e0:	cf 91       	pop	r28
        }
        else if (current_motion == LEFT)
        {
			//set_color(RGB(0, 1, 0));
            spinup_motors();
            set_motors(kilo_turn_left, 0);
     8e2:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <set_motors>
			next_motion = LEFT;
			break;
		case FORWARD:
			if (randBinary() == 1)
			{
				next_motion = LEFT;
     8e6:	c2 e0       	ldi	r28, 0x02	; 2
     8e8:	d0 e0       	ldi	r29, 0x00	; 0
     8ea:	46 cf       	rjmp	.-372    	; 0x778 <move+0x144>
		last_logic_1 = LOGIC_NEARER;
		last_logic_2 = LOGIC_OUTLINE;
	}
	else if (EQUAL_INLINE)
	{
        set_color(RGB(0, 0, 1));
     8ec:	80 e1       	ldi	r24, 0x10	; 16
     8ee:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <set_color>
		if (last_logic_1 == LOGIC_NEARER)
     8f2:	80 91 3e 01 	lds	r24, 0x013E
     8f6:	90 91 3f 01 	lds	r25, 0x013F
		{
			//set_color(RGB(0, 1, 0));
			next_motion = opposite_move(offspring);
     8fa:	c0 91 00 01 	lds	r28, 0x0100
     8fe:	d0 91 01 01 	lds	r29, 0x0101
		last_logic_2 = LOGIC_OUTLINE;
	}
	else if (EQUAL_INLINE)
	{
        set_color(RGB(0, 0, 1));
		if (last_logic_1 == LOGIC_NEARER)
     902:	89 2b       	or	r24, r25
     904:	b9 f0       	breq	.+46     	; 0x934 <__stack+0x35>
		else
		{
			//set_color(RGB(1, 0, 0));
			next_motion = offspring;
		}
		last_logic_1 = LOGIC_EQUAL;
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	90 93 3f 01 	sts	0x013F, r25
     90e:	80 93 3e 01 	sts	0x013E, r24
		last_logic_2 = LOGIC_INLINE;
     912:	83 e0       	ldi	r24, 0x03	; 3
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	90 93 3d 01 	sts	0x013D, r25
     91a:	80 93 3c 01 	sts	0x013C, r24
     91e:	d9 ce       	rjmp	.-590    	; 0x6d2 <move+0x9e>
			next_motion = LEFT;
			break;
		case FORWARD:
			if (randBinary() == 1)
			{
				next_motion = LEFT;
     920:	c2 e0       	ldi	r28, 0x02	; 2
     922:	d0 e0       	ldi	r29, 0x00	; 0
     924:	cc ce       	rjmp	.-616    	; 0x6be <move+0x8a>


// Generate 0 or 1 randomly
int randBinary(){
    // Generate an 8-bit random number (between 0 and 2^8 - 1 = 255).
    int random_number = rand_hard();
     926:	0e 94 b1 08 	call	0x1162	; 0x1162 <rand_hard>
			break;
		case RIGHT:
			next_motion = LEFT;
			break;
		case FORWARD:
			if (randBinary() == 1)
     92a:	80 fd       	sbrc	r24, 0
     92c:	19 c0       	rjmp	.+50     	; 0x960 <__stack+0x61>
			{
				next_motion = LEFT;
			}
			else
			{
				next_motion = RIGHT;
     92e:	c3 e0       	ldi	r28, 0x03	; 3
     930:	d0 e0       	ldi	r29, 0x00	; 0
     932:	5d cf       	rjmp	.-326    	; 0x7ee <move+0x1ba>
    }
}

int opposite_move(int offspring)
{
	set_color(RGB(1, 1, 1));
     934:	85 e1       	ldi	r24, 0x15	; 21
     936:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <set_color>
	int next_motion = offspring;
	switch (offspring)
     93a:	c2 30       	cpi	r28, 0x02	; 2
     93c:	d1 05       	cpc	r29, r1
     93e:	51 f0       	breq	.+20     	; 0x954 <__stack+0x55>
     940:	c3 30       	cpi	r28, 0x03	; 3
     942:	d1 05       	cpc	r29, r1
     944:	81 f0       	breq	.+32     	; 0x966 <__stack+0x67>
     946:	c1 30       	cpi	r28, 0x01	; 1
     948:	d1 05       	cpc	r29, r1
     94a:	e9 f6       	brne	.-70     	; 0x906 <__stack+0x7>


// Generate 0 or 1 randomly
int randBinary(){
    // Generate an 8-bit random number (between 0 and 2^8 - 1 = 255).
    int random_number = rand_hard();
     94c:	0e 94 b1 08 	call	0x1162	; 0x1162 <rand_hard>
			break;
		case RIGHT:
			next_motion = LEFT;
			break;
		case FORWARD:
			if (randBinary() == 1)
     950:	80 fd       	sbrc	r24, 0
     952:	09 c0       	rjmp	.+18     	; 0x966 <__stack+0x67>
			{
				next_motion = LEFT;
			}
			else
			{
				next_motion = RIGHT;
     954:	c3 e0       	ldi	r28, 0x03	; 3
     956:	d0 e0       	ldi	r29, 0x00	; 0
     958:	d6 cf       	rjmp	.-84     	; 0x906 <__stack+0x7>
			next_motion = LEFT;
			break;
		case FORWARD:
			if (randBinary() == 1)
			{
				next_motion = LEFT;
     95a:	c2 e0       	ldi	r28, 0x02	; 2
     95c:	d0 e0       	ldi	r29, 0x00	; 0
     95e:	7c cf       	rjmp	.-264    	; 0x858 <move+0x224>
     960:	c2 e0       	ldi	r28, 0x02	; 2
     962:	d0 e0       	ldi	r29, 0x00	; 0
     964:	44 cf       	rjmp	.-376    	; 0x7ee <move+0x1ba>
     966:	c2 e0       	ldi	r28, 0x02	; 2
     968:	d0 e0       	ldi	r29, 0x00	; 0
     96a:	cd cf       	rjmp	.-102    	; 0x906 <__stack+0x7>

0000096c <loop>:
	offspring = next_motion;
	set_motion(offspring);
}


void loop() {
     96c:	cf 92       	push	r12
     96e:	df 92       	push	r13
     970:	ef 92       	push	r14
     972:	ff 92       	push	r15
}

void check_own_gradient() {
	// If no neighbors detected within TIME_LAST_GRADIENT seconds
	// then sleep waiting for be activated.
    if ( (kilo_uid != SEED_ID) && (kilo_ticks > (last_found_minor + TIME_LAST_GRADIENT)) && (own_gradient < GRADIENT_MAX))
     974:	80 91 b9 01 	lds	r24, 0x01B9
     978:	90 91 ba 01 	lds	r25, 0x01BA
     97c:	89 2b       	or	r24, r25
     97e:	09 f4       	brne	.+2      	; 0x982 <loop+0x16>
     980:	46 c0       	rjmp	.+140    	; 0xa0e <loop+0xa2>
     982:	40 91 83 01 	lds	r20, 0x0183
     986:	50 91 84 01 	lds	r21, 0x0184
     98a:	60 91 85 01 	lds	r22, 0x0185
     98e:	70 91 86 01 	lds	r23, 0x0186
     992:	80 91 5c 01 	lds	r24, 0x015C
     996:	90 91 5d 01 	lds	r25, 0x015D
     99a:	a0 91 5e 01 	lds	r26, 0x015E
     99e:	b0 91 5f 01 	lds	r27, 0x015F
     9a2:	80 56       	subi	r24, 0x60	; 96
     9a4:	9f 4f       	sbci	r25, 0xFF	; 255
     9a6:	af 4f       	sbci	r26, 0xFF	; 255
     9a8:	bf 4f       	sbci	r27, 0xFF	; 255
     9aa:	84 17       	cp	r24, r20
     9ac:	95 07       	cpc	r25, r21
     9ae:	a6 07       	cpc	r26, r22
     9b0:	b7 07       	cpc	r27, r23
     9b2:	68 f5       	brcc	.+90     	; 0xa0e <loop+0xa2>
     9b4:	80 91 08 01 	lds	r24, 0x0108
     9b8:	90 91 09 01 	lds	r25, 0x0109
     9bc:	8f 3f       	cpi	r24, 0xFF	; 255
     9be:	91 05       	cpc	r25, r1
     9c0:	34 f5       	brge	.+76     	; 0xa0e <loop+0xa2>
    {
        own_gradient = GRADIENT_MAX;
     9c2:	8f ef       	ldi	r24, 0xFF	; 255
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	90 93 09 01 	sts	0x0109, r25
     9ca:	80 93 08 01 	sts	0x0108, r24
		formed_state = FORMED_NO;
     9ce:	10 92 23 01 	sts	0x0123, r1
     9d2:	10 92 22 01 	sts	0x0122, r1
    }
	// Stop when the sequence has not formed.
	else
	{
		//set_color(RGB(0, 0, 0));
		state_myself = COMPLETED;
     9d6:	85 e0       	ldi	r24, 0x05	; 5
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	90 93 29 01 	sts	0x0129, r25
     9de:	80 93 28 01 	sts	0x0128, r24

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an an action if the motion is being changed.
    if (current_motion != new_motion)
     9e2:	80 91 06 01 	lds	r24, 0x0106
     9e6:	90 91 07 01 	lds	r25, 0x0107
     9ea:	89 2b       	or	r24, r25
     9ec:	09 f4       	brne	.+2      	; 0x9f0 <loop+0x84>
     9ee:	74 c0       	rjmp	.+232    	; 0xad8 <loop+0x16c>
    {
        current_motion = new_motion;
     9f0:	10 92 07 01 	sts	0x0107, r1
     9f4:	10 92 06 01 	sts	0x0106, r1

        if (current_motion == STOP)
        {
			set_color(RGB(0, 0, 0));
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <set_color>
            set_motors(0, 0);
     9fe:	60 e0       	ldi	r22, 0x00	; 0
     a00:	80 e0       	ldi	r24, 0x00	; 0
	{
		//set_color(RGB(0, 0, 0));
		state_myself = COMPLETED;
		set_motion(STOP);
	}
}
     a02:	ff 90       	pop	r15
     a04:	ef 90       	pop	r14
     a06:	df 90       	pop	r13
     a08:	cf 90       	pop	r12
        current_motion = new_motion;

        if (current_motion == STOP)
        {
			set_color(RGB(0, 0, 0));
            set_motors(0, 0);
     a0a:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <set_motors>
	check_own_gradient();
	// Move only when the sequence has already formed.
	// Move can only occured when the movitvator and motivated member
	// is stationary. This can assure the kilobot make the right
	// decision based on the measured changing distance.
	if ((formed_state == FORMED_OK) && (state_motivator == COMPLETED) && (state_motivated != MOVE))
     a0e:	80 91 22 01 	lds	r24, 0x0122
     a12:	90 91 23 01 	lds	r25, 0x0123
     a16:	01 97       	sbiw	r24, 0x01	; 1
     a18:	f1 f6       	brne	.-68     	; 0x9d6 <loop+0x6a>
     a1a:	80 91 2a 01 	lds	r24, 0x012A
     a1e:	90 91 2b 01 	lds	r25, 0x012B
     a22:	85 30       	cpi	r24, 0x05	; 5
     a24:	91 05       	cpc	r25, r1
     a26:	b9 f6       	brne	.-82     	; 0x9d6 <loop+0x6a>
     a28:	20 91 2c 01 	lds	r18, 0x012C
     a2c:	30 91 2d 01 	lds	r19, 0x012D
     a30:	24 30       	cpi	r18, 0x04	; 4
     a32:	31 05       	cpc	r19, r1
     a34:	81 f2       	breq	.-96     	; 0x9d6 <loop+0x6a>
	{
		if (flag_maxest == YES)
     a36:	20 91 3a 01 	lds	r18, 0x013A
     a3a:	30 91 3b 01 	lds	r19, 0x013B
     a3e:	21 30       	cpi	r18, 0x01	; 1
     a40:	31 05       	cpc	r19, r1
     a42:	09 f4       	brne	.+2      	; 0xa46 <loop+0xda>
     a44:	4e c0       	rjmp	.+156    	; 0xae2 <loop+0x176>
		// My gradient is not the maxest.
		else
		{
			// When my motivator is closer enough can I move
			// to assure my motivator is not lost.
			if (distance_to_motivator <= DISTANCE_MOVE)
     a46:	80 91 16 01 	lds	r24, 0x0116
     a4a:	90 91 17 01 	lds	r25, 0x0117
     a4e:	8b 32       	cpi	r24, 0x2B	; 43
     a50:	91 05       	cpc	r25, r1
     a52:	34 f4       	brge	.+12     	; 0xa60 <loop+0xf4>
			{
				state_myself = MOVE;
     a54:	44 e0       	ldi	r20, 0x04	; 4
     a56:	50 e0       	ldi	r21, 0x00	; 0
     a58:	50 93 29 01 	sts	0x0129, r21
     a5c:	40 93 28 01 	sts	0x0128, r20
			}

			if (distance_to_motivated <= DISTANCE_COLLIDE)
     a60:	40 91 10 01 	lds	r20, 0x0110
     a64:	50 91 11 01 	lds	r21, 0x0111
     a68:	49 32       	cpi	r20, 0x29	; 41
     a6a:	51 05       	cpc	r21, r1
     a6c:	0c f4       	brge	.+2      	; 0xa70 <loop+0x104>
     a6e:	b3 cf       	rjmp	.-154    	; 0x9d6 <loop+0x6a>
			{
				state_myself = COMPLETED;
			}
		}

		if (state_myself == MOVE)
     a70:	40 91 28 01 	lds	r20, 0x0128
     a74:	50 91 29 01 	lds	r21, 0x0129
     a78:	44 30       	cpi	r20, 0x04	; 4
     a7a:	51 05       	cpc	r21, r1
     a7c:	09 f0       	breq	.+2      	; 0xa80 <loop+0x114>
     a7e:	b1 cf       	rjmp	.-158    	; 0x9e2 <loop+0x76>
			// TIME_LAST_MOTION_UPDATE.
			// This can assure the fixed distance kilobot move
			// in a fixed speed.
			// If distance is updated, then I can move according to
			// strategies.
			if ((update_distance_to_motivated == UPDATE) && (update_distance_to_motivator == UPDATE))
     a80:	40 91 36 01 	lds	r20, 0x0136
     a84:	50 91 37 01 	lds	r21, 0x0137
     a88:	41 30       	cpi	r20, 0x01	; 1
     a8a:	51 05       	cpc	r21, r1
     a8c:	d1 f1       	breq	.+116    	; 0xb02 <loop+0x196>
					}
				}
			}
			// If the distance is long-term no updated, 
			// then I stop and wait.
			else if (kilo_ticks > (last_motion_update + TIME_LAST_MOTION_UPDATE))
     a8e:	60 91 83 01 	lds	r22, 0x0183
     a92:	70 91 84 01 	lds	r23, 0x0184
     a96:	80 91 85 01 	lds	r24, 0x0185
     a9a:	90 91 86 01 	lds	r25, 0x0186
     a9e:	0e 94 b3 10 	call	0x2166	; 0x2166 <__floatunsisf>
     aa2:	6b 01       	movw	r12, r22
     aa4:	7c 01       	movw	r14, r24
     aa6:	60 91 50 01 	lds	r22, 0x0150
     aaa:	70 91 51 01 	lds	r23, 0x0151
     aae:	80 91 52 01 	lds	r24, 0x0152
     ab2:	90 91 53 01 	lds	r25, 0x0153
     ab6:	0e 94 b3 10 	call	0x2166	; 0x2166 <__floatunsisf>
     aba:	23 e3       	ldi	r18, 0x33	; 51
     abc:	33 e3       	ldi	r19, 0x33	; 51
     abe:	43 eb       	ldi	r20, 0xB3	; 179
     ac0:	51 e4       	ldi	r21, 0x41	; 65
     ac2:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__addsf3>
     ac6:	9b 01       	movw	r18, r22
     ac8:	ac 01       	movw	r20, r24
     aca:	c7 01       	movw	r24, r14
     acc:	b6 01       	movw	r22, r12
     ace:	0e 94 41 11 	call	0x2282	; 0x2282 <__gesf2>
     ad2:	18 16       	cp	r1, r24
     ad4:	0c f4       	brge	.+2      	; 0xad8 <loop+0x16c>
     ad6:	85 cf       	rjmp	.-246    	; 0x9e2 <loop+0x76>
	{
		//set_color(RGB(0, 0, 0));
		state_myself = COMPLETED;
		set_motion(STOP);
	}
}
     ad8:	ff 90       	pop	r15
     ada:	ef 90       	pop	r14
     adc:	df 90       	pop	r13
     ade:	cf 90       	pop	r12
     ae0:	08 95       	ret
	{
		if (flag_maxest == YES)
		{
			// When my motivator is closer enough can I move
			// to assure my motivator is not lost.
			if (distance_to_motivator <= DISTANCE_MOVE)
     ae2:	40 91 16 01 	lds	r20, 0x0116
     ae6:	50 91 17 01 	lds	r21, 0x0117
     aea:	42 33       	cpi	r20, 0x32	; 50
     aec:	51 05       	cpc	r21, r1
     aee:	0c f0       	brlt	.+2      	; 0xaf2 <loop+0x186>
     af0:	74 cf       	rjmp	.-280    	; 0x9da <loop+0x6e>
			{
				state_myself = MOVE;
     af2:	84 e0       	ldi	r24, 0x04	; 4
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	90 93 29 01 	sts	0x0129, r25
     afa:	80 93 28 01 	sts	0x0128, r24
     afe:	ca 01       	movw	r24, r20
     b00:	bf cf       	rjmp	.-130    	; 0xa80 <loop+0x114>
			// TIME_LAST_MOTION_UPDATE.
			// This can assure the fixed distance kilobot move
			// in a fixed speed.
			// If distance is updated, then I can move according to
			// strategies.
			if ((update_distance_to_motivated == UPDATE) && (update_distance_to_motivator == UPDATE))
     b02:	40 91 34 01 	lds	r20, 0x0134
     b06:	50 91 35 01 	lds	r21, 0x0135
     b0a:	41 30       	cpi	r20, 0x01	; 1
     b0c:	51 05       	cpc	r21, r1
     b0e:	09 f0       	breq	.+2      	; 0xb12 <loop+0x1a6>
     b10:	be cf       	rjmp	.-132    	; 0xa8e <loop+0x122>
			{
				// Update.
				if (flag_minor == NO)
     b12:	40 91 38 01 	lds	r20, 0x0138
     b16:	50 91 39 01 	lds	r21, 0x0139
     b1a:	45 2b       	or	r20, r21
     b1c:	21 f4       	brne	.+8      	; 0xb26 <loop+0x1ba>
				{
					update_distance_to_motivator = UNUPDATE;
     b1e:	10 92 35 01 	sts	0x0135, r1
     b22:	10 92 34 01 	sts	0x0134, r1
				}
				if (flag_maxest == NO)
     b26:	23 2b       	or	r18, r19
     b28:	21 f4       	brne	.+8      	; 0xb32 <loop+0x1c6>
				{
					update_distance_to_motivated = UNUPDATE;
     b2a:	10 92 37 01 	sts	0x0137, r1
     b2e:	10 92 36 01 	sts	0x0136, r1
				}

				distance_line = distance_to_motivated + distance_to_motivator;
     b32:	20 91 10 01 	lds	r18, 0x0110
     b36:	30 91 11 01 	lds	r19, 0x0111
     b3a:	82 0f       	add	r24, r18
     b3c:	93 1f       	adc	r25, r19
     b3e:	90 93 0d 01 	sts	0x010D, r25
     b42:	80 93 0c 01 	sts	0x010C, r24
				// Update.
				// My motivated stops for the first time.
				// So the distance_to_motivated becomes larger is not my fault.
				// Hence, the best values for distance_to_motivated_best and
				// distance_line_best needed to be initialized.
				if (my_fault == NO)
     b46:	40 91 02 01 	lds	r20, 0x0102
     b4a:	50 91 03 01 	lds	r21, 0x0103
     b4e:	45 2b       	or	r20, r21
     b50:	71 f4       	brne	.+28     	; 0xb6e <loop+0x202>
				{
					//set_color(RGB(1, 0, 0));
					//delay(50);
					my_fault = YES;
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	50 93 03 01 	sts	0x0103, r21
     b5a:	40 93 02 01 	sts	0x0102, r20
					distance_to_motivated_best = distance_to_motivated;
     b5e:	30 93 0f 01 	sts	0x010F, r19
     b62:	20 93 0e 01 	sts	0x010E, r18
					distance_line_best = distance_line;
     b66:	90 93 0b 01 	sts	0x010B, r25
     b6a:	80 93 0a 01 	sts	0x010A, r24
				}

				//set_color(RGB(0, 1, 0));	
				move();
     b6e:	0e 94 1a 03 	call	0x634	; 0x634 <move>
				last_motion_update = kilo_ticks;
     b72:	80 91 83 01 	lds	r24, 0x0183
     b76:	90 91 84 01 	lds	r25, 0x0184
     b7a:	a0 91 85 01 	lds	r26, 0x0185
     b7e:	b0 91 86 01 	lds	r27, 0x0186
     b82:	80 93 50 01 	sts	0x0150, r24
     b86:	90 93 51 01 	sts	0x0151, r25
     b8a:	a0 93 52 01 	sts	0x0152, r26
     b8e:	b0 93 53 01 	sts	0x0153, r27

				if (my_fault == YES)
     b92:	80 91 02 01 	lds	r24, 0x0102
     b96:	90 91 03 01 	lds	r25, 0x0103
     b9a:	01 97       	sbiw	r24, 0x01	; 1
     b9c:	09 f0       	breq	.+2      	; 0xba0 <loop+0x234>
     b9e:	9c cf       	rjmp	.-200    	; 0xad8 <loop+0x16c>
				{
					// Update distance_to_motivated_best
					if (distance_to_motivated < distance_to_motivated_best)
     ba0:	80 91 10 01 	lds	r24, 0x0110
     ba4:	90 91 11 01 	lds	r25, 0x0111
     ba8:	20 91 0e 01 	lds	r18, 0x010E
     bac:	30 91 0f 01 	lds	r19, 0x010F
     bb0:	82 17       	cp	r24, r18
     bb2:	93 07       	cpc	r25, r19
     bb4:	24 f4       	brge	.+8      	; 0xbbe <loop+0x252>
					{
						distance_to_motivated_best = distance_to_motivated;
     bb6:	90 93 0f 01 	sts	0x010F, r25
     bba:	80 93 0e 01 	sts	0x010E, r24
					}
					// Update distance_line_best
					if (distance_line < distance_line_best)
     bbe:	80 91 0c 01 	lds	r24, 0x010C
     bc2:	90 91 0d 01 	lds	r25, 0x010D
     bc6:	20 91 0a 01 	lds	r18, 0x010A
     bca:	30 91 0b 01 	lds	r19, 0x010B
     bce:	82 17       	cp	r24, r18
     bd0:	93 07       	cpc	r25, r19
     bd2:	0c f0       	brlt	.+2      	; 0xbd6 <loop+0x26a>
     bd4:	81 cf       	rjmp	.-254    	; 0xad8 <loop+0x16c>
					{
						distance_line_best = distance_line;
     bd6:	90 93 0b 01 	sts	0x010B, r25
     bda:	80 93 0a 01 	sts	0x010A, r24
     bde:	7c cf       	rjmp	.-264    	; 0xad8 <loop+0x16c>

00000be0 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     be0:	08 95       	ret

00000be2 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	08 95       	ret

00000be8 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     be8:	08 95       	ret

00000bea <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     bea:	df 92       	push	r13
     bec:	ef 92       	push	r14
     bee:	ff 92       	push	r15
     bf0:	0f 93       	push	r16
     bf2:	1f 93       	push	r17
     bf4:	cf 93       	push	r28
     bf6:	df 93       	push	r29
    cli();
     bf8:	f8 94       	cli

    ports_off();
     bfa:	14 b8       	out	0x04, r1	; 4
     bfc:	17 b8       	out	0x07, r1	; 7
     bfe:	1a b8       	out	0x0a, r1	; 10
     c00:	15 b8       	out	0x05, r1	; 5
     c02:	18 b8       	out	0x08, r1	; 8
     c04:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     c06:	52 9a       	sbi	0x0a, 2	; 10
     c08:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     c0a:	14 bc       	out	0x24, r1	; 36
     c0c:	85 e0       	ldi	r24, 0x05	; 5
     c0e:	85 bd       	out	0x25, r24	; 37
     c10:	8f ef       	ldi	r24, 0xFF	; 255
     c12:	87 bd       	out	0x27, r24	; 39
     c14:	22 e0       	ldi	r18, 0x02	; 2
     c16:	20 93 6e 00 	sts	0x006E, r18
    rx_timer_setup();
     c1a:	10 92 80 00 	sts	0x0080, r1
     c1e:	10 92 81 00 	sts	0x0081, r1
     c22:	8f e8       	ldi	r24, 0x8F	; 143
     c24:	9b e0       	ldi	r25, 0x0B	; 11
     c26:	90 93 89 00 	sts	0x0089, r25
     c2a:	80 93 88 00 	sts	0x0088, r24
     c2e:	20 93 6f 00 	sts	0x006F, r18
    motors_setup();
     c32:	53 98       	cbi	0x0a, 3	; 10
     c34:	23 98       	cbi	0x04, 3	; 4
     c36:	81 ea       	ldi	r24, 0xA1	; 161
     c38:	80 93 b0 00 	sts	0x00B0, r24
     c3c:	20 93 b1 00 	sts	0x00B1, r18
     c40:	10 92 b4 00 	sts	0x00B4, r1
     c44:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     c48:	8b e0       	ldi	r24, 0x0B	; 11
     c4a:	80 bf       	out	0x30, r24	; 48
     c4c:	83 e0       	ldi	r24, 0x03	; 3
     c4e:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     c52:	86 e0       	ldi	r24, 0x06	; 6
     c54:	80 93 7c 00 	sts	0x007C, r24
     c58:	83 e8       	ldi	r24, 0x83	; 131
     c5a:	80 93 7a 00 	sts	0x007A, r24
     c5e:	80 91 7a 00 	lds	r24, 0x007A
     c62:	80 64       	ori	r24, 0x40	; 64
     c64:	80 93 7a 00 	sts	0x007A, r24
     c68:	80 91 7a 00 	lds	r24, 0x007A
     c6c:	86 fd       	sbrc	r24, 6
     c6e:	fc cf       	rjmp	.-8      	; 0xc68 <kilo_init+0x7e>
    adc_trigger_high_gain();
     c70:	10 92 7c 00 	sts	0x007C, r1
     c74:	83 ea       	ldi	r24, 0xA3	; 163
     c76:	80 93 7a 00 	sts	0x007A, r24
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	0e 94 cc 11 	call	0x2398	; 0x2398 <__eerd_byte_m328p>
    if (osccal != 0xFF)
     c88:	8f 3f       	cpi	r24, 0xFF	; 255
     c8a:	11 f0       	breq	.+4      	; 0xc90 <kilo_init+0xa6>
        OSCCAL = osccal;
     c8c:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     c90:	10 92 87 01 	sts	0x0187, r1
    rx_leadingbit = 1;
     c94:	c1 e0       	ldi	r28, 0x01	; 1
     c96:	c0 93 60 01 	sts	0x0160, r28
    rx_leadingbyte = 1;
     c9a:	c0 93 a4 01 	sts	0x01A4, r28
    rx_byteindex = 0;
     c9e:	10 92 7e 01 	sts	0x017E, r1
    rx_bytevalue = 0;
     ca2:	10 92 b8 01 	sts	0x01B8, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     ca6:	80 e9       	ldi	r24, 0x90	; 144
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	0e 94 cc 11 	call	0x2398	; 0x2398 <__eerd_byte_m328p>
     cae:	80 93 7d 01 	sts	0x017D, r24
    if (tx_mask & ~TX_MASK_MAX)
     cb2:	80 91 7d 01 	lds	r24, 0x017D
     cb6:	88 73       	andi	r24, 0x38	; 56
     cb8:	11 f0       	breq	.+4      	; 0xcbe <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     cba:	c0 93 7d 01 	sts	0x017D, r28
    tx_clock = 0;
     cbe:	10 92 a8 01 	sts	0x01A8, r1
     cc2:	10 92 a7 01 	sts	0x01A7, r1
    tx_increment = 255;
     cc6:	8f ef       	ldi	r24, 0xFF	; 255
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	90 93 a6 01 	sts	0x01A6, r25
     cce:	80 93 a5 01 	sts	0x01A5, r24
    kilo_ticks = 0;
     cd2:	10 92 83 01 	sts	0x0183, r1
     cd6:	10 92 84 01 	sts	0x0184, r1
     cda:	10 92 85 01 	sts	0x0185, r1
     cde:	10 92 86 01 	sts	0x0186, r1
    kilo_state = IDLE;
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	80 93 43 01 	sts	0x0143, r24
    kilo_tx_period = 3906;
     ce8:	82 e4       	ldi	r24, 0x42	; 66
     cea:	9f e0       	ldi	r25, 0x0F	; 15
     cec:	90 93 b7 01 	sts	0x01B7, r25
     cf0:	80 93 b6 01 	sts	0x01B6, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     cf4:	80 eb       	ldi	r24, 0xB0	; 176
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	0e 94 cc 11 	call	0x2398	; 0x2398 <__eerd_byte_m328p>
     cfc:	c8 2f       	mov	r28, r24
     cfe:	81 eb       	ldi	r24, 0xB1	; 177
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	0e 94 cc 11 	call	0x2398	; 0x2398 <__eerd_byte_m328p>
     d06:	2c 2f       	mov	r18, r28
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	38 2b       	or	r19, r24
     d0c:	30 93 ba 01 	sts	0x01BA, r19
     d10:	20 93 b9 01 	sts	0x01B9, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     d14:	85 e0       	ldi	r24, 0x05	; 5
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	0e 94 cc 11 	call	0x2398	; 0x2398 <__eerd_byte_m328p>
     d1c:	80 93 bd 01 	sts	0x01BD, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     d20:	89 e0       	ldi	r24, 0x09	; 9
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	0e 94 cc 11 	call	0x2398	; 0x2398 <__eerd_byte_m328p>
     d28:	80 93 a9 01 	sts	0x01A9, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     d2c:	8c e0       	ldi	r24, 0x0C	; 12
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	0e 94 cc 11 	call	0x2398	; 0x2398 <__eerd_byte_m328p>
     d34:	80 93 bb 01 	sts	0x01BB, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     d38:	84 e1       	ldi	r24, 0x14	; 20
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	0e 94 cc 11 	call	0x2398	; 0x2398 <__eerd_byte_m328p>
     d40:	80 93 bc 01 	sts	0x01BC, r24
     d44:	58 e8       	ldi	r21, 0x88	; 136
     d46:	e5 2e       	mov	r14, r21
     d48:	51 e0       	ldi	r21, 0x01	; 1
     d4a:	f5 2e       	mov	r15, r21
     d4c:	01 e6       	ldi	r16, 0x61	; 97
     d4e:	11 e0       	ldi	r17, 0x01	; 1
     d50:	c0 e2       	ldi	r28, 0x20	; 32
     d52:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     d54:	ce 01       	movw	r24, r28
     d56:	0e 94 cc 11 	call	0x2398	; 0x2398 <__eerd_byte_m328p>
     d5a:	d8 2e       	mov	r13, r24
     d5c:	ce 01       	movw	r24, r28
     d5e:	01 96       	adiw	r24, 0x01	; 1
     d60:	0e 94 cc 11 	call	0x2398	; 0x2398 <__eerd_byte_m328p>
     d64:	2d 2d       	mov	r18, r13
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	32 2f       	mov	r19, r18
     d6a:	22 27       	eor	r18, r18
     d6c:	28 2b       	or	r18, r24
     d6e:	f7 01       	movw	r30, r14
     d70:	21 93       	st	Z+, r18
     d72:	31 93       	st	Z+, r19
     d74:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     d76:	ce 01       	movw	r24, r28
     d78:	c0 96       	adiw	r24, 0x30	; 48
     d7a:	0e 94 cc 11 	call	0x2398	; 0x2398 <__eerd_byte_m328p>
     d7e:	d8 2e       	mov	r13, r24
     d80:	ce 01       	movw	r24, r28
     d82:	c1 96       	adiw	r24, 0x31	; 49
     d84:	0e 94 cc 11 	call	0x2398	; 0x2398 <__eerd_byte_m328p>
     d88:	2d 2d       	mov	r18, r13
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	32 2f       	mov	r19, r18
     d8e:	22 27       	eor	r18, r18
     d90:	28 2b       	or	r18, r24
     d92:	f8 01       	movw	r30, r16
     d94:	21 93       	st	Z+, r18
     d96:	31 93       	st	Z+, r19
     d98:	8f 01       	movw	r16, r30
     d9a:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     d9c:	cc 33       	cpi	r28, 0x3C	; 60
     d9e:	d1 05       	cpc	r29, r1
     da0:	c9 f6       	brne	.-78     	; 0xd54 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     da2:	78 94       	sei
}
     da4:	df 91       	pop	r29
     da6:	cf 91       	pop	r28
     da8:	1f 91       	pop	r17
     daa:	0f 91       	pop	r16
     dac:	ff 90       	pop	r15
     dae:	ef 90       	pop	r14
     db0:	df 90       	pop	r13
     db2:	08 95       	ret

00000db4 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     db4:	1f 92       	push	r1
     db6:	0f 92       	push	r0
     db8:	0f b6       	in	r0, 0x3f	; 63
     dba:	0f 92       	push	r0
     dbc:	11 24       	eor	r1, r1
     dbe:	8f 93       	push	r24
    wdt_disable();
     dc0:	88 e1       	ldi	r24, 0x18	; 24
     dc2:	0f b6       	in	r0, 0x3f	; 63
     dc4:	f8 94       	cli
     dc6:	80 93 60 00 	sts	0x0060, r24
     dca:	10 92 60 00 	sts	0x0060, r1
     dce:	0f be       	out	0x3f, r0	; 63
}
     dd0:	8f 91       	pop	r24
     dd2:	0f 90       	pop	r0
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	0f 90       	pop	r0
     dd8:	1f 90       	pop	r1
     dda:	18 95       	reti

00000ddc <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     ddc:	7c 01       	movw	r14, r24
     dde:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     de0:	d1 2c       	mov	r13, r1
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     de2:	88 24       	eor	r8, r8
     de4:	8a 94       	dec	r8
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     de6:	64 e0       	ldi	r22, 0x04	; 4
     de8:	b6 2e       	mov	r11, r22

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     dea:	76 e0       	ldi	r23, 0x06	; 6
     dec:	97 2e       	mov	r9, r23
     dee:	e3 e8       	ldi	r30, 0x83	; 131
     df0:	ae 2e       	mov	r10, r30
            case SLEEPING:
                cli();
                acomp_off();
                adc_off();
                ports_off();
                wdt_enable(WDTO_8S);
     df2:	08 e1       	ldi	r16, 0x18	; 24
     df4:	10 e0       	ldi	r17, 0x00	; 0
     df6:	f9 e2       	ldi	r31, 0x29	; 41
     df8:	cf 2e       	mov	r12, r31

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     dfa:	e0 91 43 01 	lds	r30, 0x0143
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	e7 30       	cpi	r30, 0x07	; 7
     e02:	f1 05       	cpc	r31, r1
     e04:	d0 f7       	brcc	.-12     	; 0xdfa <kilo_start+0x1e>
     e06:	ec 5c       	subi	r30, 0xCC	; 204
     e08:	ff 4f       	sbci	r31, 0xFF	; 255
     e0a:	0c 94 8c 0f 	jmp	0x1f18	; 0x1f18 <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     e0e:	dd 20       	and	r13, r13
     e10:	09 f4       	brne	.+2      	; 0xe14 <kilo_start+0x38>
     e12:	fd c0       	rjmp	.+506    	; 0x100e <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     e14:	b0 92 43 01 	sts	0x0143, r11
     e18:	dd 24       	eor	r13, r13
     e1a:	d3 94       	inc	r13
            case RUNNING:
                loop();
     e1c:	fe 01       	movw	r30, r28
     e1e:	09 95       	icall
                break;
     e20:	ec cf       	rjmp	.-40     	; 0xdfa <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     e22:	80 91 87 01 	lds	r24, 0x0187
     e26:	81 11       	cpse	r24, r1
     e28:	eb c0       	rjmp	.+470    	; 0x1000 <kilo_start+0x224>
        cli();                                    // disable interrupts
     e2a:	f8 94       	cli
        adc_setup_conversion(6);
     e2c:	90 92 7c 00 	sts	0x007C, r9
     e30:	a0 92 7a 00 	sts	0x007A, r10
        adc_start_conversion();
     e34:	80 91 7a 00 	lds	r24, 0x007A
     e38:	80 64       	ori	r24, 0x40	; 64
     e3a:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     e3e:	80 91 7a 00 	lds	r24, 0x007A
     e42:	86 fd       	sbrc	r24, 6
     e44:	fc cf       	rjmp	.-8      	; 0xe3e <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     e46:	20 91 78 00 	lds	r18, 0x0078
     e4a:	30 91 79 00 	lds	r19, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     e4e:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     e50:	2b 3a       	cpi	r18, 0xAB	; 171
     e52:	92 e0       	ldi	r25, 0x02	; 2
     e54:	39 07       	cpc	r19, r25
     e56:	0c f0       	brlt	.+2      	; 0xe5a <kilo_start+0x7e>
     e58:	ed c0       	rjmp	.+474    	; 0x1034 <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     e5a:	29 38       	cpi	r18, 0x89	; 137
     e5c:	e2 e0       	ldi	r30, 0x02	; 2
     e5e:	3e 07       	cpc	r19, r30
     e60:	0c f0       	brlt	.+2      	; 0xe64 <kilo_start+0x88>
     e62:	ef c0       	rjmp	.+478    	; 0x1042 <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     e64:	27 36       	cpi	r18, 0x67	; 103
     e66:	32 40       	sbci	r19, 0x02	; 2
     e68:	0c f4       	brge	.+2      	; 0xe6c <kilo_start+0x90>
     e6a:	ca c0       	rjmp	.+404    	; 0x1000 <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     e6c:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     e6e:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     e70:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     e72:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     e74:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     e76:	3c 98       	cbi	0x07, 4	; 7
     e78:	c0 cf       	rjmp	.-128    	; 0xdfa <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     e7a:	f8 94       	cli
                acomp_off();
     e7c:	80 b7       	in	r24, 0x30	; 48
     e7e:	87 7f       	andi	r24, 0xF7	; 247
     e80:	80 bf       	out	0x30, r24	; 48
                adc_off();
     e82:	80 91 7a 00 	lds	r24, 0x007A
     e86:	8f 77       	andi	r24, 0x7F	; 127
     e88:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     e8c:	14 b8       	out	0x04, r1	; 4
     e8e:	17 b8       	out	0x07, r1	; 7
     e90:	1a b8       	out	0x0a, r1	; 10
     e92:	15 b8       	out	0x05, r1	; 5
     e94:	18 b8       	out	0x08, r1	; 8
     e96:	1b b8       	out	0x0b, r1	; 11
                wdt_enable(WDTO_8S);
     e98:	0f b6       	in	r0, 0x3f	; 63
     e9a:	f8 94       	cli
     e9c:	a8 95       	wdr
     e9e:	00 93 60 00 	sts	0x0060, r16
     ea2:	0f be       	out	0x3f, r0	; 63
     ea4:	c0 92 60 00 	sts	0x0060, r12
                WDTCSR |= (1<<WDIE);
     ea8:	80 91 60 00 	lds	r24, 0x0060
     eac:	80 64       	ori	r24, 0x40	; 64
     eae:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     eb2:	83 b7       	in	r24, 0x33	; 51
     eb4:	81 7f       	andi	r24, 0xF1	; 241
     eb6:	84 60       	ori	r24, 0x04	; 4
     eb8:	83 bf       	out	0x33, r24	; 51
                cli();
     eba:	f8 94       	cli
                sleep_enable();
     ebc:	83 b7       	in	r24, 0x33	; 51
     ebe:	81 60       	ori	r24, 0x01	; 1
     ec0:	83 bf       	out	0x33, r24	; 51
                sei();
     ec2:	78 94       	sei
                sleep_cpu();
     ec4:	88 95       	sleep
                sleep_disable();
     ec6:	83 b7       	in	r24, 0x33	; 51
     ec8:	8e 7f       	andi	r24, 0xFE	; 254
     eca:	83 bf       	out	0x33, r24	; 51
                sei();
     ecc:	78 94       	sei
                rx_busy = 0;
     ece:	10 92 87 01 	sts	0x0187, r1
                ports_on();
     ed2:	52 9a       	sbi	0x0a, 2	; 10
     ed4:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     ed6:	80 91 7a 00 	lds	r24, 0x007A
     eda:	80 68       	ori	r24, 0x80	; 128
     edc:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ee0:	87 e5       	ldi	r24, 0x57	; 87
     ee2:	92 e0       	ldi	r25, 0x02	; 2
     ee4:	01 97       	sbiw	r24, 0x01	; 1
     ee6:	f1 f7       	brne	.-4      	; 0xee4 <kilo_start+0x108>
     ee8:	00 c0       	rjmp	.+0      	; 0xeea <kilo_start+0x10e>
     eea:	00 00       	nop
                _delay_us(300);
                acomp_on();
     eec:	80 b7       	in	r24, 0x30	; 48
     eee:	88 61       	ori	r24, 0x18	; 24
     ef0:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     ef2:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     ef4:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     ef6:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     ef8:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     efa:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     efc:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     efe:	ef e1       	ldi	r30, 0x1F	; 31
     f00:	fe e4       	ldi	r31, 0x4E	; 78
     f02:	31 97       	sbiw	r30, 0x01	; 1
     f04:	f1 f7       	brne	.-4      	; 0xf02 <kilo_start+0x126>
     f06:	00 c0       	rjmp	.+0      	; 0xf08 <kilo_start+0x12c>
     f08:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     f0a:	80 91 87 01 	lds	r24, 0x0187
     f0e:	81 11       	cpse	r24, r1
     f10:	81 c0       	rjmp	.+258    	; 0x1014 <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     f12:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     f14:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     f16:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     f18:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     f1a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     f1c:	3c 98       	cbi	0x07, 4	; 7
     f1e:	6d cf       	rjmp	.-294    	; 0xdfa <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     f20:	80 91 41 01 	lds	r24, 0x0141
     f24:	81 11       	cpse	r24, r1
     f26:	41 c0       	rjmp	.+130    	; 0xfaa <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     f28:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     f2c:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     f30:	10 92 42 01 	sts	0x0142, r1
     f34:	62 cf       	rjmp	.-316    	; 0xdfa <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     f36:	48 99       	sbic	0x09, 0	; 9
     f38:	ec cf       	rjmp	.-40     	; 0xf12 <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     f3a:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     f3c:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     f3e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     f40:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     f42:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     f44:	3c 98       	cbi	0x07, 4	; 7
     f46:	8f ec       	ldi	r24, 0xCF	; 207
     f48:	97 e0       	ldi	r25, 0x07	; 7
     f4a:	01 97       	sbiw	r24, 0x01	; 1
     f4c:	f1 f7       	brne	.-4      	; 0xf4a <kilo_start+0x16e>
     f4e:	00 c0       	rjmp	.+0      	; 0xf50 <kilo_start+0x174>
     f50:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     f52:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     f54:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     f56:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     f58:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     f5a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     f5c:	3c 98       	cbi	0x07, 4	; 7
     f5e:	9f ef       	ldi	r25, 0xFF	; 255
     f60:	e1 ee       	ldi	r30, 0xE1	; 225
     f62:	f4 e0       	ldi	r31, 0x04	; 4
     f64:	91 50       	subi	r25, 0x01	; 1
     f66:	e0 40       	sbci	r30, 0x00	; 0
     f68:	f0 40       	sbci	r31, 0x00	; 0
     f6a:	e1 f7       	brne	.-8      	; 0xf64 <kilo_start+0x188>
     f6c:	00 c0       	rjmp	.+0      	; 0xf6e <kilo_start+0x192>
     f6e:	00 00       	nop
     f70:	44 cf       	rjmp	.-376    	; 0xdfa <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     f72:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     f74:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     f76:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     f78:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     f7a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     f7c:	3c 98       	cbi	0x07, 4	; 7
     f7e:	ef ec       	ldi	r30, 0xCF	; 207
     f80:	f7 e0       	ldi	r31, 0x07	; 7
     f82:	31 97       	sbiw	r30, 0x01	; 1
     f84:	f1 f7       	brne	.-4      	; 0xf82 <kilo_start+0x1a6>
     f86:	00 c0       	rjmp	.+0      	; 0xf88 <kilo_start+0x1ac>
     f88:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     f8a:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     f8c:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     f8e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     f90:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     f92:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     f94:	3c 98       	cbi	0x07, 4	; 7
     f96:	ff ef       	ldi	r31, 0xFF	; 255
     f98:	21 ee       	ldi	r18, 0xE1	; 225
     f9a:	84 e0       	ldi	r24, 0x04	; 4
     f9c:	f1 50       	subi	r31, 0x01	; 1
     f9e:	20 40       	sbci	r18, 0x00	; 0
     fa0:	80 40       	sbci	r24, 0x00	; 0
     fa2:	e1 f7       	brne	.-8      	; 0xf9c <kilo_start+0x1c0>
     fa4:	00 c0       	rjmp	.+0      	; 0xfa6 <kilo_start+0x1ca>
     fa6:	00 00       	nop
     fa8:	28 cf       	rjmp	.-432    	; 0xdfa <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     faa:	90 91 41 01 	lds	r25, 0x0141
     fae:	80 91 42 01 	lds	r24, 0x0142
     fb2:	98 17       	cp	r25, r24
     fb4:	09 f4       	brne	.+2      	; 0xfb8 <kilo_start+0x1dc>
     fb6:	21 cf       	rjmp	.-446    	; 0xdfa <kilo_start+0x1e>
                        prev_motion = cur_motion;
     fb8:	80 91 41 01 	lds	r24, 0x0141
     fbc:	80 93 42 01 	sts	0x0142, r24
                        if (cur_motion == MOVE_LEFT) {
     fc0:	80 91 41 01 	lds	r24, 0x0141
     fc4:	81 30       	cpi	r24, 0x01	; 1
     fc6:	09 f4       	brne	.+2      	; 0xfca <kilo_start+0x1ee>
     fc8:	50 c0       	rjmp	.+160    	; 0x106a <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     fca:	80 91 41 01 	lds	r24, 0x0141
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     fce:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     fd2:	80 92 b4 00 	sts	0x00B4, r8
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     fd6:	82 30       	cpi	r24, 0x02	; 2
     fd8:	d9 f1       	breq	.+118    	; 0x1050 <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     fda:	80 92 b3 00 	sts	0x00B3, r8
    OCR2B = cw;
     fde:	80 92 b4 00 	sts	0x00B4, r8
     fe2:	8f e2       	ldi	r24, 0x2F	; 47
     fe4:	95 e7       	ldi	r25, 0x75	; 117
     fe6:	01 97       	sbiw	r24, 0x01	; 1
     fe8:	f1 f7       	brne	.-4      	; 0xfe6 <kilo_start+0x20a>
     fea:	00 c0       	rjmp	.+0      	; 0xfec <kilo_start+0x210>
     fec:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     fee:	80 91 bc 01 	lds	r24, 0x01BC
     ff2:	90 91 bb 01 	lds	r25, 0x01BB
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     ff6:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     ffa:	80 93 b4 00 	sts	0x00B4, r24
     ffe:	fd ce       	rjmp	.-518    	; 0xdfa <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    1000:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    1002:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1004:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    1006:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1008:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    100a:	3c 98       	cbi	0x07, 4	; 7
    100c:	f6 ce       	rjmp	.-532    	; 0xdfa <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
    100e:	f7 01       	movw	r30, r14
    1010:	09 95       	icall
    1012:	00 cf       	rjmp	.-512    	; 0xe14 <kilo_start+0x38>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    1014:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    1016:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1018:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    101a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    101c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    101e:	3c 98       	cbi	0x07, 4	; 7
    1020:	ff ef       	ldi	r31, 0xFF	; 255
    1022:	20 e7       	ldi	r18, 0x70	; 112
    1024:	82 e0       	ldi	r24, 0x02	; 2
    1026:	f1 50       	subi	r31, 0x01	; 1
    1028:	20 40       	sbci	r18, 0x00	; 0
    102a:	80 40       	sbci	r24, 0x00	; 0
    102c:	e1 f7       	brne	.-8      	; 0x1026 <kilo_start+0x24a>
    102e:	00 c0       	rjmp	.+0      	; 0x1030 <kilo_start+0x254>
    1030:	00 00       	nop
    1032:	6f cf       	rjmp	.-290    	; 0xf12 <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1034:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1036:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    1038:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    103a:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    103c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    103e:	3c 98       	cbi	0x07, 4	; 7
    1040:	dc ce       	rjmp	.-584    	; 0xdfa <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1042:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1044:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1046:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    1048:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    104a:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    104c:	3c 9a       	sbi	0x07, 4	; 7
    104e:	d5 ce       	rjmp	.-598    	; 0xdfa <kilo_start+0x1e>
    1050:	ef e2       	ldi	r30, 0x2F	; 47
    1052:	f5 e7       	ldi	r31, 0x75	; 117
    1054:	31 97       	sbiw	r30, 0x01	; 1
    1056:	f1 f7       	brne	.-4      	; 0x1054 <kilo_start+0x278>
    1058:	00 c0       	rjmp	.+0      	; 0x105a <kilo_start+0x27e>
    105a:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
    105c:	80 91 a9 01 	lds	r24, 0x01A9
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    1060:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
    1064:	80 93 b4 00 	sts	0x00B4, r24
    1068:	c8 ce       	rjmp	.-624    	; 0xdfa <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    106a:	80 92 b3 00 	sts	0x00B3, r8
    OCR2B = cw;
    106e:	10 92 b4 00 	sts	0x00B4, r1
    1072:	8f e2       	ldi	r24, 0x2F	; 47
    1074:	95 e7       	ldi	r25, 0x75	; 117
    1076:	01 97       	sbiw	r24, 0x01	; 1
    1078:	f1 f7       	brne	.-4      	; 0x1076 <kilo_start+0x29a>
    107a:	00 c0       	rjmp	.+0      	; 0x107c <kilo_start+0x2a0>
    107c:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
    107e:	80 91 bd 01 	lds	r24, 0x01BD
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    1082:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
    1086:	10 92 b4 00 	sts	0x00B4, r1
    108a:	b7 ce       	rjmp	.-658    	; 0xdfa <kilo_start+0x1e>

0000108c <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
    108c:	07 c0       	rjmp	.+14     	; 0x109c <delay+0x10>
    108e:	ef ec       	ldi	r30, 0xCF	; 207
    1090:	f7 e0       	ldi	r31, 0x07	; 7
    1092:	31 97       	sbiw	r30, 0x01	; 1
    1094:	f1 f7       	brne	.-4      	; 0x1092 <delay+0x6>
    1096:	00 c0       	rjmp	.+0      	; 0x1098 <delay+0xc>
    1098:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
    109a:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
    109c:	00 97       	sbiw	r24, 0x00	; 0
    109e:	b9 f7       	brne	.-18     	; 0x108e <delay+0x2>
    10a0:	08 95       	ret

000010a2 <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    10a2:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
    10a6:	60 93 b4 00 	sts	0x00B4, r22
    10aa:	08 95       	ret

000010ac <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    10ac:	8f ef       	ldi	r24, 0xFF	; 255
    10ae:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
    10b2:	80 93 b4 00 	sts	0x00B4, r24
    10b6:	8f e0       	ldi	r24, 0x0F	; 15
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	ef ec       	ldi	r30, 0xCF	; 207
    10bc:	f7 e0       	ldi	r31, 0x07	; 7
    10be:	31 97       	sbiw	r30, 0x01	; 1
    10c0:	f1 f7       	brne	.-4      	; 0x10be <spinup_motors+0x12>
    10c2:	00 c0       	rjmp	.+0      	; 0x10c4 <spinup_motors+0x18>
    10c4:	00 00       	nop
    10c6:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
    10c8:	00 97       	sbiw	r24, 0x00	; 0
    10ca:	b9 f7       	brne	.-18     	; 0x10ba <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
    10cc:	08 95       	ret

000010ce <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
    10ce:	80 91 87 01 	lds	r24, 0x0187
    10d2:	81 11       	cpse	r24, r1
    10d4:	1e c0       	rjmp	.+60     	; 0x1112 <get_ambientlight+0x44>
        cli();
    10d6:	f8 94       	cli
        adc_setup_conversion(7);
    10d8:	87 e0       	ldi	r24, 0x07	; 7
    10da:	80 93 7c 00 	sts	0x007C, r24
    10de:	83 e8       	ldi	r24, 0x83	; 131
    10e0:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
    10e4:	80 91 7a 00 	lds	r24, 0x007A
    10e8:	80 64       	ori	r24, 0x40	; 64
    10ea:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
    10ee:	80 91 7a 00 	lds	r24, 0x007A
    10f2:	86 fd       	sbrc	r24, 6
    10f4:	fc cf       	rjmp	.-8      	; 0x10ee <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
    10f6:	80 91 78 00 	lds	r24, 0x0078
    10fa:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
    10fe:	10 92 7c 00 	sts	0x007C, r1
    1102:	23 ea       	ldi	r18, 0xA3	; 163
    1104:	20 93 7a 00 	sts	0x007A, r18
    1108:	21 e0       	ldi	r18, 0x01	; 1
    110a:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
    110e:	78 94       	sei
    1110:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
    1112:	8f ef       	ldi	r24, 0xFF	; 255
    1114:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
    1116:	08 95       	ret

00001118 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
    1118:	80 91 87 01 	lds	r24, 0x0187
    111c:	81 11       	cpse	r24, r1
    111e:	1e c0       	rjmp	.+60     	; 0x115c <get_temperature+0x44>
        cli();
    1120:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
    1122:	88 ec       	ldi	r24, 0xC8	; 200
    1124:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
    1128:	87 e8       	ldi	r24, 0x87	; 135
    112a:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
    112e:	80 91 7a 00 	lds	r24, 0x007A
    1132:	80 64       	ori	r24, 0x40	; 64
    1134:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
    1138:	80 91 7a 00 	lds	r24, 0x007A
    113c:	86 fd       	sbrc	r24, 6
    113e:	fc cf       	rjmp	.-8      	; 0x1138 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
    1140:	80 91 78 00 	lds	r24, 0x0078
    1144:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
    1148:	10 92 7c 00 	sts	0x007C, r1
    114c:	23 ea       	ldi	r18, 0xA3	; 163
    114e:	20 93 7a 00 	sts	0x007A, r18
    1152:	21 e0       	ldi	r18, 0x01	; 1
    1154:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
    1158:	78 94       	sei
    115a:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
    115c:	8f ef       	ldi	r24, 0xFF	; 255
    115e:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
    1160:	08 95       	ret

00001162 <rand_hard>:

uint8_t rand_hard() {
    1162:	1f 93       	push	r17
    1164:	cf 93       	push	r28
    1166:	df 93       	push	r29
    1168:	60 e0       	ldi	r22, 0x00	; 0
    116a:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t num = 0;
    116c:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
    116e:	13 ea       	ldi	r17, 0xA3	; 163
    1170:	d1 e0       	ldi	r29, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
    1172:	c6 e0       	ldi	r28, 0x06	; 6
    1174:	b3 e8       	ldi	r27, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    1176:	e1 e0       	ldi	r30, 0x01	; 1
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
    117a:	20 e8       	ldi	r18, 0x80	; 128
    117c:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
    117e:	f8 94       	cli
            adc_setup_conversion(6);
    1180:	c0 93 7c 00 	sts	0x007C, r28
    1184:	b0 93 7a 00 	sts	0x007A, r27
            adc_start_conversion();
    1188:	90 91 7a 00 	lds	r25, 0x007A
    118c:	90 64       	ori	r25, 0x40	; 64
    118e:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
    1192:	90 91 7a 00 	lds	r25, 0x007A
    1196:	96 fd       	sbrc	r25, 6
    1198:	fc cf       	rjmp	.-8      	; 0x1192 <rand_hard+0x30>
            a = ADCW&0x1;
    119a:	40 91 78 00 	lds	r20, 0x0078
    119e:	50 91 79 00 	lds	r21, 0x0079
    11a2:	a4 2f       	mov	r26, r20
    11a4:	a1 70       	andi	r26, 0x01	; 1
            adc_start_conversion();
    11a6:	90 91 7a 00 	lds	r25, 0x007A
    11aa:	90 64       	ori	r25, 0x40	; 64
    11ac:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
    11b0:	90 91 7a 00 	lds	r25, 0x007A
    11b4:	96 fd       	sbrc	r25, 6
    11b6:	fc cf       	rjmp	.-8      	; 0x11b0 <rand_hard+0x4e>
            b = ADCW&0x1;
    11b8:	40 91 78 00 	lds	r20, 0x0078
    11bc:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
    11c0:	10 92 7c 00 	sts	0x007C, r1
    11c4:	10 93 7a 00 	sts	0x007A, r17
    11c8:	d0 93 7b 00 	sts	0x007B, r29
            sei();
    11cc:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
    11ce:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
    11d0:	a4 13       	cpse	r26, r20
    11d2:	05 c0       	rjmp	.+10     	; 0x11de <rand_hard+0x7c>
    11d4:	21 50       	subi	r18, 0x01	; 1
    11d6:	31 09       	sbc	r19, r1
    11d8:	21 15       	cp	r18, r1
    11da:	31 05       	cpc	r19, r1
    11dc:	81 f6       	brne	.-96     	; 0x117e <rand_hard+0x1c>
        if (a)
    11de:	aa 23       	and	r26, r26
    11e0:	39 f0       	breq	.+14     	; 0x11f0 <rand_hard+0x8e>
            num |= (1<<i);
    11e2:	9f 01       	movw	r18, r30
    11e4:	06 2e       	mov	r0, r22
    11e6:	01 c0       	rjmp	.+2      	; 0x11ea <rand_hard+0x88>
    11e8:	22 0f       	add	r18, r18
    11ea:	0a 94       	dec	r0
    11ec:	ea f7       	brpl	.-6      	; 0x11e8 <rand_hard+0x86>
    11ee:	82 2b       	or	r24, r18
    11f0:	6f 5f       	subi	r22, 0xFF	; 255
    11f2:	7f 4f       	sbci	r23, 0xFF	; 255
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
    11f4:	68 30       	cpi	r22, 0x08	; 8
    11f6:	71 05       	cpc	r23, r1
    11f8:	09 f0       	breq	.+2      	; 0x11fc <rand_hard+0x9a>
    11fa:	bf cf       	rjmp	.-130    	; 0x117a <rand_hard+0x18>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
    11fc:	df 91       	pop	r29
    11fe:	cf 91       	pop	r28
    1200:	1f 91       	pop	r17
    1202:	08 95       	ret

00001204 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    1204:	80 91 1a 01 	lds	r24, 0x011A
    1208:	98 2f       	mov	r25, r24
    120a:	99 0f       	add	r25, r25
    120c:	99 0f       	add	r25, r25
    120e:	99 0f       	add	r25, r25
    1210:	98 27       	eor	r25, r24
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
    1212:	80 91 40 01 	lds	r24, 0x0140
    1216:	21 e0       	ldi	r18, 0x01	; 1
    1218:	28 0f       	add	r18, r24
    121a:	20 93 40 01 	sts	0x0140, r18
    121e:	86 95       	lsr	r24
    1220:	86 95       	lsr	r24

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
    1222:	89 27       	eor	r24, r25
    1224:	92 95       	swap	r25
    1226:	96 95       	lsr	r25
    1228:	97 70       	andi	r25, 0x07	; 7
    seed ^= accumulator++>>2;
    122a:	89 27       	eor	r24, r25
    122c:	80 93 1a 01 	sts	0x011A, r24
    return seed;
}
    1230:	08 95       	ret

00001232 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
    1232:	80 93 1a 01 	sts	0x011A, r24
    1236:	08 95       	ret

00001238 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
    1238:	80 91 87 01 	lds	r24, 0x0187
    123c:	81 11       	cpse	r24, r1
    123e:	16 c0       	rjmp	.+44     	; 0x126c <get_voltage+0x34>
        cli();                                    // disable interrupts
    1240:	f8 94       	cli
        adc_setup_conversion(6);
    1242:	86 e0       	ldi	r24, 0x06	; 6
    1244:	80 93 7c 00 	sts	0x007C, r24
    1248:	83 e8       	ldi	r24, 0x83	; 131
    124a:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
    124e:	80 91 7a 00 	lds	r24, 0x007A
    1252:	80 64       	ori	r24, 0x40	; 64
    1254:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
    1258:	80 91 7a 00 	lds	r24, 0x007A
    125c:	86 fd       	sbrc	r24, 6
    125e:	fc cf       	rjmp	.-8      	; 0x1258 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
    1260:	80 91 78 00 	lds	r24, 0x0078
    1264:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    1268:	78 94       	sei
    126a:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    126c:	8f ef       	ldi	r24, 0xFF	; 255
    126e:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
    1270:	08 95       	ret

00001272 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
    1272:	2f 92       	push	r2
    1274:	3f 92       	push	r3
    1276:	4f 92       	push	r4
    1278:	5f 92       	push	r5
    127a:	6f 92       	push	r6
    127c:	7f 92       	push	r7
    127e:	8f 92       	push	r8
    1280:	9f 92       	push	r9
    1282:	af 92       	push	r10
    1284:	bf 92       	push	r11
    1286:	cf 92       	push	r12
    1288:	df 92       	push	r13
    128a:	ef 92       	push	r14
    128c:	ff 92       	push	r15
    128e:	0f 93       	push	r16
    1290:	1f 93       	push	r17
    1292:	cf 93       	push	r28
    1294:	df 93       	push	r29
    1296:	00 d0       	rcall	.+0      	; 0x1298 <estimate_distance+0x26>
    1298:	00 d0       	rcall	.+0      	; 0x129a <estimate_distance+0x28>
    129a:	00 d0       	rcall	.+0      	; 0x129c <estimate_distance+0x2a>
    129c:	cd b7       	in	r28, 0x3d	; 61
    129e:	de b7       	in	r29, 0x3e	; 62
    12a0:	8c 01       	movw	r16, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
    12a2:	dc 01       	movw	r26, r24
    12a4:	12 96       	adiw	r26, 0x02	; 2
    12a6:	0d 90       	ld	r0, X+
    12a8:	bc 91       	ld	r27, X
    12aa:	a0 2d       	mov	r26, r0
    12ac:	be 83       	std	Y+6, r27	; 0x06
    12ae:	ad 83       	std	Y+5, r26	; 0x05
    12b0:	a4 38       	cpi	r26, 0x84	; 132
    12b2:	e3 e0       	ldi	r30, 0x03	; 3
    12b4:	be 07       	cpc	r27, r30
    12b6:	0c f0       	brlt	.+2      	; 0x12ba <estimate_distance+0x48>
    12b8:	ca c0       	rjmp	.+404    	; 0x144e <estimate_distance+0x1dc>
        if (dist->high_gain > kilo_irhigh[0]) {
    12ba:	80 91 61 01 	lds	r24, 0x0161
    12be:	90 91 62 01 	lds	r25, 0x0162
    12c2:	8a 17       	cp	r24, r26
    12c4:	9b 07       	cpc	r25, r27
    12c6:	08 f4       	brcc	.+2      	; 0x12ca <estimate_distance+0x58>
    12c8:	a9 c1       	rjmp	.+850    	; 0x161c <estimate_distance+0x3aa>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
    12ca:	60 90 63 01 	lds	r6, 0x0163
    12ce:	70 90 64 01 	lds	r7, 0x0164
    12d2:	6a 16       	cp	r6, r26
    12d4:	7b 06       	cpc	r7, r27
    12d6:	08 f4       	brcc	.+2      	; 0x12da <estimate_distance+0x68>
    12d8:	27 c2       	rjmp	.+1102   	; 0x1728 <estimate_distance+0x4b6>
    12da:	60 90 65 01 	lds	r6, 0x0165
    12de:	70 90 66 01 	lds	r7, 0x0166
    12e2:	6a 16       	cp	r6, r26
    12e4:	7b 06       	cpc	r7, r27
    12e6:	08 f4       	brcc	.+2      	; 0x12ea <estimate_distance+0x78>
    12e8:	28 c2       	rjmp	.+1104   	; 0x173a <estimate_distance+0x4c8>
    12ea:	60 90 67 01 	lds	r6, 0x0167
    12ee:	70 90 68 01 	lds	r7, 0x0168
    12f2:	6a 16       	cp	r6, r26
    12f4:	7b 06       	cpc	r7, r27
    12f6:	08 f4       	brcc	.+2      	; 0x12fa <estimate_distance+0x88>
    12f8:	29 c2       	rjmp	.+1106   	; 0x174c <estimate_distance+0x4da>
    12fa:	60 90 69 01 	lds	r6, 0x0169
    12fe:	70 90 6a 01 	lds	r7, 0x016A
    1302:	6a 16       	cp	r6, r26
    1304:	7b 06       	cpc	r7, r27
    1306:	08 f4       	brcc	.+2      	; 0x130a <estimate_distance+0x98>
    1308:	2a c2       	rjmp	.+1108   	; 0x175e <estimate_distance+0x4ec>
    130a:	60 90 6b 01 	lds	r6, 0x016B
    130e:	70 90 6c 01 	lds	r7, 0x016C
    1312:	6a 16       	cp	r6, r26
    1314:	7b 06       	cpc	r7, r27
    1316:	08 f4       	brcc	.+2      	; 0x131a <estimate_distance+0xa8>
    1318:	8b c1       	rjmp	.+790    	; 0x1630 <estimate_distance+0x3be>
    131a:	60 90 6d 01 	lds	r6, 0x016D
    131e:	70 90 6e 01 	lds	r7, 0x016E
    1322:	6a 16       	cp	r6, r26
    1324:	7b 06       	cpc	r7, r27
    1326:	08 f4       	brcc	.+2      	; 0x132a <estimate_distance+0xb8>
    1328:	23 c2       	rjmp	.+1094   	; 0x1770 <estimate_distance+0x4fe>
    132a:	60 90 6f 01 	lds	r6, 0x016F
    132e:	70 90 70 01 	lds	r7, 0x0170
    1332:	6a 16       	cp	r6, r26
    1334:	7b 06       	cpc	r7, r27
    1336:	08 f4       	brcc	.+2      	; 0x133a <estimate_distance+0xc8>
    1338:	24 c2       	rjmp	.+1096   	; 0x1782 <estimate_distance+0x510>
    133a:	60 90 71 01 	lds	r6, 0x0171
    133e:	70 90 72 01 	lds	r7, 0x0172
    1342:	6a 16       	cp	r6, r26
    1344:	7b 06       	cpc	r7, r27
    1346:	08 f4       	brcc	.+2      	; 0x134a <estimate_distance+0xd8>
    1348:	25 c2       	rjmp	.+1098   	; 0x1794 <estimate_distance+0x522>
    134a:	60 90 73 01 	lds	r6, 0x0173
    134e:	70 90 74 01 	lds	r7, 0x0174
    1352:	6a 16       	cp	r6, r26
    1354:	7b 06       	cpc	r7, r27
    1356:	08 f4       	brcc	.+2      	; 0x135a <estimate_distance+0xe8>
    1358:	26 c2       	rjmp	.+1100   	; 0x17a6 <estimate_distance+0x534>
    135a:	60 90 75 01 	lds	r6, 0x0175
    135e:	70 90 76 01 	lds	r7, 0x0176
    1362:	6a 16       	cp	r6, r26
    1364:	7b 06       	cpc	r7, r27
    1366:	08 f4       	brcc	.+2      	; 0x136a <estimate_distance+0xf8>
    1368:	27 c2       	rjmp	.+1102   	; 0x17b8 <estimate_distance+0x546>
    136a:	60 90 77 01 	lds	r6, 0x0177
    136e:	70 90 78 01 	lds	r7, 0x0178
    1372:	6a 16       	cp	r6, r26
    1374:	7b 06       	cpc	r7, r27
    1376:	08 f4       	brcc	.+2      	; 0x137a <estimate_distance+0x108>
    1378:	2d c2       	rjmp	.+1114   	; 0x17d4 <estimate_distance+0x562>
    137a:	60 90 79 01 	lds	r6, 0x0179
    137e:	70 90 7a 01 	lds	r7, 0x017A
    1382:	6a 16       	cp	r6, r26
    1384:	7b 06       	cpc	r7, r27
    1386:	08 f4       	brcc	.+2      	; 0x138a <estimate_distance+0x118>
    1388:	2e c2       	rjmp	.+1116   	; 0x17e6 <estimate_distance+0x574>
    138a:	60 90 7b 01 	lds	r6, 0x017B
    138e:	70 90 7c 01 	lds	r7, 0x017C
    1392:	6a 16       	cp	r6, r26
    1394:	7b 06       	cpc	r7, r27
    1396:	08 f4       	brcc	.+2      	; 0x139a <estimate_distance+0x128>
    1398:	2f c2       	rjmp	.+1118   	; 0x17f8 <estimate_distance+0x586>
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	a0 ed       	ldi	r26, 0xD0	; 208
    13a0:	b0 e4       	ldi	r27, 0x40	; 64
    13a2:	89 83       	std	Y+1, r24	; 0x01
    13a4:	9a 83       	std	Y+2, r25	; 0x02
    13a6:	ab 83       	std	Y+3, r26	; 0x03
    13a8:	bc 83       	std	Y+4, r27	; 0x04
    13aa:	8c e0       	ldi	r24, 0x0C	; 12
    13ac:	e8 2e       	mov	r14, r24
    13ae:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
    13b0:	f7 01       	movw	r30, r14
    13b2:	ee 0f       	add	r30, r30
    13b4:	ff 1f       	adc	r31, r31
    13b6:	ef 59       	subi	r30, 0x9F	; 159
    13b8:	fe 4f       	sbci	r31, 0xFE	; 254
    13ba:	80 81       	ld	r24, Z
    13bc:	91 81       	ldd	r25, Z+1	; 0x01
    13be:	b3 01       	movw	r22, r6
    13c0:	68 1b       	sub	r22, r24
    13c2:	79 0b       	sbc	r23, r25
    13c4:	80 e0       	ldi	r24, 0x00	; 0
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	0e 94 b3 10 	call	0x2166	; 0x2166 <__floatunsisf>
    13cc:	9b 01       	movw	r18, r22
    13ce:	ac 01       	movw	r20, r24
    13d0:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__addsf3>
    13d4:	6b 01       	movw	r12, r22
    13d6:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
    13d8:	ad 81       	ldd	r26, Y+5	; 0x05
    13da:	be 81       	ldd	r27, Y+6	; 0x06
    13dc:	bd 01       	movw	r22, r26
    13de:	88 27       	eor	r24, r24
    13e0:	77 fd       	sbrc	r23, 7
    13e2:	80 95       	com	r24
    13e4:	98 2f       	mov	r25, r24
    13e6:	0e 94 b5 10 	call	0x216a	; 0x216a <__floatsisf>
    13ea:	4b 01       	movw	r8, r22
    13ec:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
    13ee:	b3 01       	movw	r22, r6
    13f0:	80 e0       	ldi	r24, 0x00	; 0
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	0e 94 b3 10 	call	0x2166	; 0x2166 <__floatunsisf>
    13f8:	2b 01       	movw	r4, r22
    13fa:	3c 01       	movw	r6, r24
    13fc:	29 81       	ldd	r18, Y+1	; 0x01
    13fe:	3a 81       	ldd	r19, Y+2	; 0x02
    1400:	4b 81       	ldd	r20, Y+3	; 0x03
    1402:	5c 81       	ldd	r21, Y+4	; 0x04
    1404:	c7 01       	movw	r24, r14
    1406:	b6 01       	movw	r22, r12
    1408:	0e 94 45 11 	call	0x228a	; 0x228a <__mulsf3>
    140c:	9b 01       	movw	r18, r22
    140e:	ac 01       	movw	r20, r24
    1410:	c3 01       	movw	r24, r6
    1412:	b2 01       	movw	r22, r4
    1414:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__subsf3>
    1418:	9b 01       	movw	r18, r22
    141a:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
    141c:	c5 01       	movw	r24, r10
    141e:	b4 01       	movw	r22, r8
    1420:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__subsf3>
    1424:	20 e0       	ldi	r18, 0x00	; 0
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	40 e2       	ldi	r20, 0x20	; 32
    142a:	51 e4       	ldi	r21, 0x41	; 65
    142c:	0e 94 45 11 	call	0x228a	; 0x228a <__mulsf3>
            b=((int)((int)b/(int)slope));
    1430:	0e 94 82 10 	call	0x2104	; 0x2104 <__fixsfsi>
    1434:	5b 01       	movw	r10, r22
    1436:	c7 01       	movw	r24, r14
    1438:	b6 01       	movw	r22, r12
    143a:	0e 94 82 10 	call	0x2104	; 0x2104 <__fixsfsi>
    143e:	ab 01       	movw	r20, r22
    1440:	bc 01       	movw	r22, r24
    1442:	c5 01       	movw	r24, r10
    1444:	ba 01       	movw	r22, r20
    1446:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <__divmodhi4>
            dist_high=b;
    144a:	76 2e       	mov	r7, r22
    144c:	e8 c0       	rjmp	.+464    	; 0x161e <estimate_distance+0x3ac>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    144e:	77 24       	eor	r7, r7
    1450:	7a 94       	dec	r7
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
    1452:	d8 01       	movw	r26, r16
    1454:	ad 90       	ld	r10, X+
    1456:	bc 90       	ld	r11, X
    1458:	80 91 88 01 	lds	r24, 0x0188
    145c:	90 91 89 01 	lds	r25, 0x0189
    1460:	8a 15       	cp	r24, r10
    1462:	9b 05       	cpc	r25, r11
    1464:	08 f4       	brcc	.+2      	; 0x1468 <estimate_distance+0x1f6>
    1466:	6f c0       	rjmp	.+222    	; 0x1546 <estimate_distance+0x2d4>
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
    1468:	00 91 8a 01 	lds	r16, 0x018A
    146c:	10 91 8b 01 	lds	r17, 0x018B
    1470:	0a 15       	cp	r16, r10
    1472:	1b 05       	cpc	r17, r11
    1474:	08 f4       	brcc	.+2      	; 0x1478 <estimate_distance+0x206>
    1476:	5c c1       	rjmp	.+696    	; 0x1730 <estimate_distance+0x4be>
    1478:	00 91 8c 01 	lds	r16, 0x018C
    147c:	10 91 8d 01 	lds	r17, 0x018D
    1480:	0a 15       	cp	r16, r10
    1482:	1b 05       	cpc	r17, r11
    1484:	08 f4       	brcc	.+2      	; 0x1488 <estimate_distance+0x216>
    1486:	5d c1       	rjmp	.+698    	; 0x1742 <estimate_distance+0x4d0>
    1488:	00 91 8e 01 	lds	r16, 0x018E
    148c:	10 91 8f 01 	lds	r17, 0x018F
    1490:	0a 15       	cp	r16, r10
    1492:	1b 05       	cpc	r17, r11
    1494:	08 f4       	brcc	.+2      	; 0x1498 <estimate_distance+0x226>
    1496:	5e c1       	rjmp	.+700    	; 0x1754 <estimate_distance+0x4e2>
    1498:	00 91 90 01 	lds	r16, 0x0190
    149c:	10 91 91 01 	lds	r17, 0x0191
    14a0:	0a 15       	cp	r16, r10
    14a2:	1b 05       	cpc	r17, r11
    14a4:	08 f4       	brcc	.+2      	; 0x14a8 <estimate_distance+0x236>
    14a6:	5f c1       	rjmp	.+702    	; 0x1766 <estimate_distance+0x4f4>
    14a8:	00 91 92 01 	lds	r16, 0x0192
    14ac:	10 91 93 01 	lds	r17, 0x0193
    14b0:	0a 15       	cp	r16, r10
    14b2:	1b 05       	cpc	r17, r11
    14b4:	08 f4       	brcc	.+2      	; 0x14b8 <estimate_distance+0x246>
    14b6:	d8 c0       	rjmp	.+432    	; 0x1668 <estimate_distance+0x3f6>
    14b8:	00 91 94 01 	lds	r16, 0x0194
    14bc:	10 91 95 01 	lds	r17, 0x0195
    14c0:	0a 15       	cp	r16, r10
    14c2:	1b 05       	cpc	r17, r11
    14c4:	08 f4       	brcc	.+2      	; 0x14c8 <estimate_distance+0x256>
    14c6:	58 c1       	rjmp	.+688    	; 0x1778 <estimate_distance+0x506>
    14c8:	00 91 96 01 	lds	r16, 0x0196
    14cc:	10 91 97 01 	lds	r17, 0x0197
    14d0:	0a 15       	cp	r16, r10
    14d2:	1b 05       	cpc	r17, r11
    14d4:	08 f4       	brcc	.+2      	; 0x14d8 <estimate_distance+0x266>
    14d6:	59 c1       	rjmp	.+690    	; 0x178a <estimate_distance+0x518>
    14d8:	00 91 98 01 	lds	r16, 0x0198
    14dc:	10 91 99 01 	lds	r17, 0x0199
    14e0:	0a 15       	cp	r16, r10
    14e2:	1b 05       	cpc	r17, r11
    14e4:	08 f4       	brcc	.+2      	; 0x14e8 <estimate_distance+0x276>
    14e6:	5a c1       	rjmp	.+692    	; 0x179c <estimate_distance+0x52a>
    14e8:	00 91 9a 01 	lds	r16, 0x019A
    14ec:	10 91 9b 01 	lds	r17, 0x019B
    14f0:	0a 15       	cp	r16, r10
    14f2:	1b 05       	cpc	r17, r11
    14f4:	08 f4       	brcc	.+2      	; 0x14f8 <estimate_distance+0x286>
    14f6:	5b c1       	rjmp	.+694    	; 0x17ae <estimate_distance+0x53c>
    14f8:	00 91 9c 01 	lds	r16, 0x019C
    14fc:	10 91 9d 01 	lds	r17, 0x019D
    1500:	0a 15       	cp	r16, r10
    1502:	1b 05       	cpc	r17, r11
    1504:	08 f4       	brcc	.+2      	; 0x1508 <estimate_distance+0x296>
    1506:	5c c1       	rjmp	.+696    	; 0x17c0 <estimate_distance+0x54e>
    1508:	00 91 9e 01 	lds	r16, 0x019E
    150c:	10 91 9f 01 	lds	r17, 0x019F
    1510:	0a 15       	cp	r16, r10
    1512:	1b 05       	cpc	r17, r11
    1514:	08 f4       	brcc	.+2      	; 0x1518 <estimate_distance+0x2a6>
    1516:	59 c1       	rjmp	.+690    	; 0x17ca <estimate_distance+0x558>
    1518:	00 91 a0 01 	lds	r16, 0x01A0
    151c:	10 91 a1 01 	lds	r17, 0x01A1
    1520:	0a 15       	cp	r16, r10
    1522:	1b 05       	cpc	r17, r11
    1524:	08 f4       	brcc	.+2      	; 0x1528 <estimate_distance+0x2b6>
    1526:	5a c1       	rjmp	.+692    	; 0x17dc <estimate_distance+0x56a>
    1528:	00 91 a2 01 	lds	r16, 0x01A2
    152c:	10 91 a3 01 	lds	r17, 0x01A3
    1530:	0a 15       	cp	r16, r10
    1532:	1b 05       	cpc	r17, r11
    1534:	08 f4       	brcc	.+2      	; 0x1538 <estimate_distance+0x2c6>
    1536:	5b c1       	rjmp	.+694    	; 0x17ee <estimate_distance+0x57c>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
    1538:	1a e5       	ldi	r17, 0x5A	; 90
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
    153a:	bf ef       	ldi	r27, 0xFF	; 255
    153c:	7b 12       	cpse	r7, r27
    153e:	07 c0       	rjmp	.+14     	; 0x154e <estimate_distance+0x2dc>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
    1540:	81 e2       	ldi	r24, 0x21	; 33
    1542:	81 0f       	add	r24, r17
    1544:	52 c0       	rjmp	.+164    	; 0x15ea <estimate_distance+0x378>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
    1546:	10 e0       	ldi	r17, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
    1548:	bf ef       	ldi	r27, 0xFF	; 255
    154a:	7b 16       	cp	r7, r27
    154c:	c9 f3       	breq	.-14     	; 0x1540 <estimate_distance+0x2ce>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
    154e:	ed 81       	ldd	r30, Y+5	; 0x05
    1550:	fe 81       	ldd	r31, Y+6	; 0x06
    1552:	bf 01       	movw	r22, r30
    1554:	88 27       	eor	r24, r24
    1556:	77 fd       	sbrc	r23, 7
    1558:	80 95       	com	r24
    155a:	98 2f       	mov	r25, r24
    155c:	0e 94 b5 10 	call	0x216a	; 0x216a <__floatsisf>
    1560:	6b 01       	movw	r12, r22
    1562:	7c 01       	movw	r14, r24
    1564:	67 2d       	mov	r22, r7
    1566:	70 e0       	ldi	r23, 0x00	; 0
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	0e 94 b3 10 	call	0x2166	; 0x2166 <__floatunsisf>
    1570:	4b 01       	movw	r8, r22
    1572:	5c 01       	movw	r10, r24
    1574:	a7 01       	movw	r20, r14
    1576:	96 01       	movw	r18, r12
    1578:	60 e0       	ldi	r22, 0x00	; 0
    157a:	70 e0       	ldi	r23, 0x00	; 0
    157c:	81 e6       	ldi	r24, 0x61	; 97
    157e:	94 e4       	ldi	r25, 0x44	; 68
    1580:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__subsf3>
    1584:	9b 01       	movw	r18, r22
    1586:	ac 01       	movw	r20, r24
    1588:	c5 01       	movw	r24, r10
    158a:	b4 01       	movw	r22, r8
    158c:	0e 94 45 11 	call	0x228a	; 0x228a <__mulsf3>
    1590:	4b 01       	movw	r8, r22
    1592:	5c 01       	movw	r10, r24
    1594:	61 2f       	mov	r22, r17
    1596:	70 e0       	ldi	r23, 0x00	; 0
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	0e 94 b3 10 	call	0x2166	; 0x2166 <__floatunsisf>
    15a0:	2b 01       	movw	r4, r22
    15a2:	3c 01       	movw	r6, r24
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	4f e2       	ldi	r20, 0x2F	; 47
    15aa:	54 e4       	ldi	r21, 0x44	; 68
    15ac:	c7 01       	movw	r24, r14
    15ae:	b6 01       	movw	r22, r12
    15b0:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__subsf3>
    15b4:	9b 01       	movw	r18, r22
    15b6:	ac 01       	movw	r20, r24
    15b8:	c3 01       	movw	r24, r6
    15ba:	b2 01       	movw	r22, r4
    15bc:	0e 94 45 11 	call	0x228a	; 0x228a <__mulsf3>
    15c0:	9b 01       	movw	r18, r22
    15c2:	ac 01       	movw	r20, r24
    15c4:	c5 01       	movw	r24, r10
    15c6:	b4 01       	movw	r22, r8
    15c8:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__addsf3>
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	48 e4       	ldi	r20, 0x48	; 72
    15d2:	53 e4       	ldi	r21, 0x43	; 67
    15d4:	0e 94 1a 10 	call	0x2034	; 0x2034 <__divsf3>
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	44 e0       	ldi	r20, 0x04	; 4
    15de:	52 e4       	ldi	r21, 0x42	; 66
    15e0:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__addsf3>
    15e4:	0e 94 87 10 	call	0x210e	; 0x210e <__fixunssfsi>
    15e8:	86 2f       	mov	r24, r22
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
    }
}
    15ea:	26 96       	adiw	r28, 0x06	; 6
    15ec:	0f b6       	in	r0, 0x3f	; 63
    15ee:	f8 94       	cli
    15f0:	de bf       	out	0x3e, r29	; 62
    15f2:	0f be       	out	0x3f, r0	; 63
    15f4:	cd bf       	out	0x3d, r28	; 61
    15f6:	df 91       	pop	r29
    15f8:	cf 91       	pop	r28
    15fa:	1f 91       	pop	r17
    15fc:	0f 91       	pop	r16
    15fe:	ff 90       	pop	r15
    1600:	ef 90       	pop	r14
    1602:	df 90       	pop	r13
    1604:	cf 90       	pop	r12
    1606:	bf 90       	pop	r11
    1608:	af 90       	pop	r10
    160a:	9f 90       	pop	r9
    160c:	8f 90       	pop	r8
    160e:	7f 90       	pop	r7
    1610:	6f 90       	pop	r6
    1612:	5f 90       	pop	r5
    1614:	4f 90       	pop	r4
    1616:	3f 90       	pop	r3
    1618:	2f 90       	pop	r2
    161a:	08 95       	ret
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
    161c:	71 2c       	mov	r7, r1
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
    161e:	ed 81       	ldd	r30, Y+5	; 0x05
    1620:	fe 81       	ldd	r31, Y+6	; 0x06
    1622:	ed 3b       	cpi	r30, 0xBD	; 189
    1624:	f2 40       	sbci	r31, 0x02	; 2
    1626:	0c f0       	brlt	.+2      	; 0x162a <estimate_distance+0x3b8>
    1628:	14 cf       	rjmp	.-472    	; 0x1452 <estimate_distance+0x1e0>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
    162a:	81 e2       	ldi	r24, 0x21	; 33
    162c:	87 0d       	add	r24, r7
    162e:	dd cf       	rjmp	.-70     	; 0x15ea <estimate_distance+0x378>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1630:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
    1632:	85 e0       	ldi	r24, 0x05	; 5
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	7c 01       	movw	r14, r24
    1638:	f1 e0       	ldi	r31, 0x01	; 1
    163a:	ef 1a       	sub	r14, r31
    163c:	f1 08       	sbc	r15, r1
    163e:	70 e0       	ldi	r23, 0x00	; 0
    1640:	80 e0       	ldi	r24, 0x00	; 0
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	0e 94 b3 10 	call	0x2166	; 0x2166 <__floatunsisf>
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	40 e0       	ldi	r20, 0x00	; 0
    164e:	5f e3       	ldi	r21, 0x3F	; 63
    1650:	0e 94 45 11 	call	0x228a	; 0x228a <__mulsf3>
    1654:	20 e0       	ldi	r18, 0x00	; 0
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	a9 01       	movw	r20, r18
    165a:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__addsf3>
    165e:	69 83       	std	Y+1, r22	; 0x01
    1660:	7a 83       	std	Y+2, r23	; 0x02
    1662:	8b 83       	std	Y+3, r24	; 0x03
    1664:	9c 83       	std	Y+4, r25	; 0x04
    1666:	a4 ce       	rjmp	.-696    	; 0x13b0 <estimate_distance+0x13e>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1668:	75 e0       	ldi	r23, 0x05	; 5
    166a:	67 2e       	mov	r6, r23
                if(dist->low_gain > kilo_irlow[i]) {
    166c:	e5 e0       	ldi	r30, 0x05	; 5
    166e:	f0 e0       	ldi	r31, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
    1670:	ee 0f       	add	r30, r30
    1672:	ff 1f       	adc	r31, r31
    1674:	ea 57       	subi	r30, 0x7A	; 122
    1676:	fe 4f       	sbci	r31, 0xFE	; 254
    1678:	80 81       	ld	r24, Z
    167a:	91 81       	ldd	r25, Z+1	; 0x01
    167c:	b8 01       	movw	r22, r16
    167e:	68 1b       	sub	r22, r24
    1680:	79 0b       	sbc	r23, r25
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	0e 94 b3 10 	call	0x2166	; 0x2166 <__floatunsisf>
    168a:	9b 01       	movw	r18, r22
    168c:	ac 01       	movw	r20, r24
    168e:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__addsf3>
    1692:	6b 01       	movw	r12, r22
    1694:	7c 01       	movw	r14, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
    1696:	b5 01       	movw	r22, r10
    1698:	88 27       	eor	r24, r24
    169a:	77 fd       	sbrc	r23, 7
    169c:	80 95       	com	r24
    169e:	98 2f       	mov	r25, r24
    16a0:	0e 94 b5 10 	call	0x216a	; 0x216a <__floatsisf>
    16a4:	4b 01       	movw	r8, r22
    16a6:	5c 01       	movw	r10, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
    16a8:	b8 01       	movw	r22, r16
    16aa:	80 e0       	ldi	r24, 0x00	; 0
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	0e 94 b3 10 	call	0x2166	; 0x2166 <__floatunsisf>
    16b2:	1b 01       	movw	r2, r22
    16b4:	2c 01       	movw	r4, r24
    16b6:	66 2d       	mov	r22, r6
    16b8:	70 e0       	ldi	r23, 0x00	; 0
    16ba:	80 e0       	ldi	r24, 0x00	; 0
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	0e 94 b3 10 	call	0x2166	; 0x2166 <__floatunsisf>
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	40 e0       	ldi	r20, 0x00	; 0
    16c8:	5f e3       	ldi	r21, 0x3F	; 63
    16ca:	0e 94 45 11 	call	0x228a	; 0x228a <__mulsf3>
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	a9 01       	movw	r20, r18
    16d4:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__addsf3>
    16d8:	a7 01       	movw	r20, r14
    16da:	96 01       	movw	r18, r12
    16dc:	0e 94 45 11 	call	0x228a	; 0x228a <__mulsf3>
    16e0:	9b 01       	movw	r18, r22
    16e2:	ac 01       	movw	r20, r24
    16e4:	c2 01       	movw	r24, r4
    16e6:	b1 01       	movw	r22, r2
    16e8:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__subsf3>
    16ec:	9b 01       	movw	r18, r22
    16ee:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
    16f0:	c5 01       	movw	r24, r10
    16f2:	b4 01       	movw	r22, r8
    16f4:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__subsf3>
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	40 e2       	ldi	r20, 0x20	; 32
    16fe:	51 e4       	ldi	r21, 0x41	; 65
    1700:	0e 94 45 11 	call	0x228a	; 0x228a <__mulsf3>
                b=((int)((int)b/(int)slope));
    1704:	0e 94 82 10 	call	0x2104	; 0x2104 <__fixsfsi>
    1708:	8b 01       	movw	r16, r22
    170a:	c7 01       	movw	r24, r14
    170c:	b6 01       	movw	r22, r12
    170e:	0e 94 82 10 	call	0x2104	; 0x2104 <__fixsfsi>
    1712:	ab 01       	movw	r20, r22
    1714:	bc 01       	movw	r22, r24
    1716:	c8 01       	movw	r24, r16
    1718:	ba 01       	movw	r22, r20
    171a:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <__divmodhi4>
                dist_low=b;
    171e:	16 2f       	mov	r17, r22
            }
        }
    }

    if (dist_low != 255) {
    1720:	6f 3f       	cpi	r22, 0xFF	; 255
    1722:	09 f0       	breq	.+2      	; 0x1726 <estimate_distance+0x4b4>
    1724:	11 cf       	rjmp	.-478    	; 0x1548 <estimate_distance+0x2d6>
    1726:	81 cf       	rjmp	.-254    	; 0x162a <estimate_distance+0x3b8>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
    1728:	61 e0       	ldi	r22, 0x01	; 1
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	83 cf       	rjmp	.-250    	; 0x1636 <estimate_distance+0x3c4>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
    1730:	66 24       	eor	r6, r6
    1732:	63 94       	inc	r6
    1734:	e1 e0       	ldi	r30, 0x01	; 1
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	9b cf       	rjmp	.-202    	; 0x1670 <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    173a:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
    173c:	82 e0       	ldi	r24, 0x02	; 2
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	7a cf       	rjmp	.-268    	; 0x1636 <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1742:	a2 e0       	ldi	r26, 0x02	; 2
    1744:	6a 2e       	mov	r6, r26
                if(dist->low_gain > kilo_irlow[i]) {
    1746:	e2 e0       	ldi	r30, 0x02	; 2
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	92 cf       	rjmp	.-220    	; 0x1670 <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    174c:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
    174e:	83 e0       	ldi	r24, 0x03	; 3
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	71 cf       	rjmp	.-286    	; 0x1636 <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1754:	f3 e0       	ldi	r31, 0x03	; 3
    1756:	6f 2e       	mov	r6, r31
                if(dist->low_gain > kilo_irlow[i]) {
    1758:	e3 e0       	ldi	r30, 0x03	; 3
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	89 cf       	rjmp	.-238    	; 0x1670 <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    175e:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
    1760:	84 e0       	ldi	r24, 0x04	; 4
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	68 cf       	rjmp	.-304    	; 0x1636 <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1766:	e4 e0       	ldi	r30, 0x04	; 4
    1768:	6e 2e       	mov	r6, r30
                if(dist->low_gain > kilo_irlow[i]) {
    176a:	e4 e0       	ldi	r30, 0x04	; 4
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 cf       	rjmp	.-256    	; 0x1670 <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1770:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
    1772:	86 e0       	ldi	r24, 0x06	; 6
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	5f cf       	rjmp	.-322    	; 0x1636 <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1778:	66 e0       	ldi	r22, 0x06	; 6
    177a:	66 2e       	mov	r6, r22
                if(dist->low_gain > kilo_irlow[i]) {
    177c:	e6 e0       	ldi	r30, 0x06	; 6
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	77 cf       	rjmp	.-274    	; 0x1670 <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1782:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
    1784:	87 e0       	ldi	r24, 0x07	; 7
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	56 cf       	rjmp	.-340    	; 0x1636 <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    178a:	57 e0       	ldi	r21, 0x07	; 7
    178c:	65 2e       	mov	r6, r21
                if(dist->low_gain > kilo_irlow[i]) {
    178e:	e7 e0       	ldi	r30, 0x07	; 7
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	6e cf       	rjmp	.-292    	; 0x1670 <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1794:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
    1796:	88 e0       	ldi	r24, 0x08	; 8
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	4d cf       	rjmp	.-358    	; 0x1636 <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    179c:	48 e0       	ldi	r20, 0x08	; 8
    179e:	64 2e       	mov	r6, r20
                if(dist->low_gain > kilo_irlow[i]) {
    17a0:	e8 e0       	ldi	r30, 0x08	; 8
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	65 cf       	rjmp	.-310    	; 0x1670 <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    17a6:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
    17a8:	89 e0       	ldi	r24, 0x09	; 9
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	44 cf       	rjmp	.-376    	; 0x1636 <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    17ae:	39 e0       	ldi	r19, 0x09	; 9
    17b0:	63 2e       	mov	r6, r19
                if(dist->low_gain > kilo_irlow[i]) {
    17b2:	e9 e0       	ldi	r30, 0x09	; 9
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	5c cf       	rjmp	.-328    	; 0x1670 <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    17b8:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
    17ba:	8a e0       	ldi	r24, 0x0A	; 10
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	3b cf       	rjmp	.-394    	; 0x1636 <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    17c0:	2a e0       	ldi	r18, 0x0A	; 10
    17c2:	62 2e       	mov	r6, r18
                if(dist->low_gain > kilo_irlow[i]) {
    17c4:	ea e0       	ldi	r30, 0x0A	; 10
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	53 cf       	rjmp	.-346    	; 0x1670 <estimate_distance+0x3fe>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    17ca:	9b e0       	ldi	r25, 0x0B	; 11
    17cc:	69 2e       	mov	r6, r25
                if(dist->low_gain > kilo_irlow[i]) {
    17ce:	eb e0       	ldi	r30, 0x0B	; 11
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	4e cf       	rjmp	.-356    	; 0x1670 <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    17d4:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
    17d6:	8b e0       	ldi	r24, 0x0B	; 11
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	2d cf       	rjmp	.-422    	; 0x1636 <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    17dc:	8c e0       	ldi	r24, 0x0C	; 12
    17de:	68 2e       	mov	r6, r24
                if(dist->low_gain > kilo_irlow[i]) {
    17e0:	ec e0       	ldi	r30, 0x0C	; 12
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	45 cf       	rjmp	.-374    	; 0x1670 <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    17e6:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
    17e8:	8c e0       	ldi	r24, 0x0C	; 12
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	24 cf       	rjmp	.-440    	; 0x1636 <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    17ee:	bd e0       	ldi	r27, 0x0D	; 13
    17f0:	6b 2e       	mov	r6, r27
                if(dist->low_gain > kilo_irlow[i]) {
    17f2:	ed e0       	ldi	r30, 0x0D	; 13
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	3c cf       	rjmp	.-392    	; 0x1670 <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    17f8:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
    17fa:	8d e0       	ldi	r24, 0x0D	; 13
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	1b cf       	rjmp	.-458    	; 0x1636 <estimate_distance+0x3c4>

00001800 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
    1800:	1f 92       	push	r1
    1802:	0f 92       	push	r0
    1804:	0f b6       	in	r0, 0x3f	; 63
    1806:	0f 92       	push	r0
    1808:	11 24       	eor	r1, r1
    180a:	2f 93       	push	r18
    180c:	3f 93       	push	r19
    180e:	4f 93       	push	r20
    1810:	5f 93       	push	r21
    1812:	6f 93       	push	r22
    1814:	7f 93       	push	r23
    1816:	8f 93       	push	r24
    1818:	9f 93       	push	r25
    181a:	af 93       	push	r26
    181c:	bf 93       	push	r27
    181e:	ef 93       	push	r30
    1820:	ff 93       	push	r31
    tx_clock += tx_increment;
    1822:	80 91 a7 01 	lds	r24, 0x01A7
    1826:	90 91 a8 01 	lds	r25, 0x01A8
    182a:	20 91 a5 01 	lds	r18, 0x01A5
    182e:	30 91 a6 01 	lds	r19, 0x01A6
    1832:	82 0f       	add	r24, r18
    1834:	93 1f       	adc	r25, r19
    1836:	90 93 a8 01 	sts	0x01A8, r25
    183a:	80 93 a7 01 	sts	0x01A7, r24
    tx_increment = 0xFF;
    183e:	8f ef       	ldi	r24, 0xFF	; 255
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	90 93 a6 01 	sts	0x01A6, r25
    1846:	80 93 a5 01 	sts	0x01A5, r24
    OCR0A = tx_increment;
    184a:	8f ef       	ldi	r24, 0xFF	; 255
    184c:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
    184e:	80 91 83 01 	lds	r24, 0x0183
    1852:	90 91 84 01 	lds	r25, 0x0184
    1856:	a0 91 85 01 	lds	r26, 0x0185
    185a:	b0 91 86 01 	lds	r27, 0x0186
    185e:	01 96       	adiw	r24, 0x01	; 1
    1860:	a1 1d       	adc	r26, r1
    1862:	b1 1d       	adc	r27, r1
    1864:	80 93 83 01 	sts	0x0183, r24
    1868:	90 93 84 01 	sts	0x0184, r25
    186c:	a0 93 85 01 	sts	0x0185, r26
    1870:	b0 93 86 01 	sts	0x0186, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
    1874:	80 91 87 01 	lds	r24, 0x0187
    1878:	81 11       	cpse	r24, r1
    187a:	0f c0       	rjmp	.+30     	; 0x189a <__vector_14+0x9a>
    187c:	80 91 b6 01 	lds	r24, 0x01B6
    1880:	90 91 b7 01 	lds	r25, 0x01B7
    1884:	20 91 a7 01 	lds	r18, 0x01A7
    1888:	30 91 a8 01 	lds	r19, 0x01A8
    188c:	82 17       	cp	r24, r18
    188e:	93 07       	cpc	r25, r19
    1890:	20 f4       	brcc	.+8      	; 0x189a <__vector_14+0x9a>
    1892:	80 91 43 01 	lds	r24, 0x0143
    1896:	84 30       	cpi	r24, 0x04	; 4
    1898:	89 f0       	breq	.+34     	; 0x18bc <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
    189a:	ff 91       	pop	r31
    189c:	ef 91       	pop	r30
    189e:	bf 91       	pop	r27
    18a0:	af 91       	pop	r26
    18a2:	9f 91       	pop	r25
    18a4:	8f 91       	pop	r24
    18a6:	7f 91       	pop	r23
    18a8:	6f 91       	pop	r22
    18aa:	5f 91       	pop	r21
    18ac:	4f 91       	pop	r20
    18ae:	3f 91       	pop	r19
    18b0:	2f 91       	pop	r18
    18b2:	0f 90       	pop	r0
    18b4:	0f be       	out	0x3f, r0	; 63
    18b6:	0f 90       	pop	r0
    18b8:	1f 90       	pop	r1
    18ba:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
    18bc:	e0 91 1d 01 	lds	r30, 0x011D
    18c0:	f0 91 1e 01 	lds	r31, 0x011E
    18c4:	09 95       	icall
        if (msg) {
    18c6:	00 97       	sbiw	r24, 0x00	; 0
    18c8:	41 f3       	breq	.-48     	; 0x189a <__vector_14+0x9a>
            if (message_send(msg)) {
    18ca:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <message_send>
    18ce:	81 11       	cpse	r24, r1
    18d0:	09 c0       	rjmp	.+18     	; 0x18e4 <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
    18d2:	0e 94 62 02 	call	0x4c4	; 0x4c4 <rand>
    18d6:	99 27       	eor	r25, r25
    18d8:	90 93 a6 01 	sts	0x01A6, r25
    18dc:	80 93 a5 01 	sts	0x01A5, r24
                OCR0A = tx_increment;
    18e0:	87 bd       	out	0x27, r24	; 39
    18e2:	db cf       	rjmp	.-74     	; 0x189a <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
    18e4:	e0 91 1b 01 	lds	r30, 0x011B
    18e8:	f0 91 1c 01 	lds	r31, 0x011C
    18ec:	09 95       	icall
                tx_clock = 0;
    18ee:	10 92 a8 01 	sts	0x01A8, r1
    18f2:	10 92 a7 01 	sts	0x01A7, r1
    18f6:	d1 cf       	rjmp	.-94     	; 0x189a <__vector_14+0x9a>

000018f8 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
    18f8:	80 ff       	sbrs	r24, 0
    18fa:	11 c0       	rjmp	.+34     	; 0x191e <set_color+0x26>
        DDRD |= (1<<5);
    18fc:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
    18fe:	81 ff       	sbrs	r24, 1
    1900:	11 c0       	rjmp	.+34     	; 0x1924 <set_color+0x2c>
        DDRD |= (1<<4);
    1902:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
    1904:	82 ff       	sbrs	r24, 2
    1906:	11 c0       	rjmp	.+34     	; 0x192a <set_color+0x32>
        DDRC |= (1<<3);
    1908:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
    190a:	83 ff       	sbrs	r24, 3
    190c:	11 c0       	rjmp	.+34     	; 0x1930 <set_color+0x38>
        DDRC |= (1<<2);
    190e:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
    1910:	84 ff       	sbrs	r24, 4
    1912:	11 c0       	rjmp	.+34     	; 0x1936 <set_color+0x3e>
        DDRC |= (1<<5);
    1914:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
    1916:	85 fd       	sbrc	r24, 5
    1918:	11 c0       	rjmp	.+34     	; 0x193c <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    191a:	3c 98       	cbi	0x07, 4	; 7
    191c:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    191e:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
    1920:	81 fd       	sbrc	r24, 1
    1922:	ef cf       	rjmp	.-34     	; 0x1902 <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1924:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
    1926:	82 fd       	sbrc	r24, 2
    1928:	ef cf       	rjmp	.-34     	; 0x1908 <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    192a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
    192c:	83 fd       	sbrc	r24, 3
    192e:	ef cf       	rjmp	.-34     	; 0x190e <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    1930:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
    1932:	84 fd       	sbrc	r24, 4
    1934:	ef cf       	rjmp	.-34     	; 0x1914 <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1936:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
    1938:	85 ff       	sbrs	r24, 5
    193a:	ef cf       	rjmp	.-34     	; 0x191a <set_color+0x22>
        DDRC |= (1<<4);
    193c:	3c 9a       	sbi	0x07, 4	; 7
    193e:	08 95       	ret

00001940 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
    1940:	1f 92       	push	r1
    1942:	0f 92       	push	r0
    1944:	0f b6       	in	r0, 0x3f	; 63
    1946:	0f 92       	push	r0
    1948:	11 24       	eor	r1, r1
    194a:	8f 93       	push	r24
    194c:	9f 93       	push	r25
    rx_timer_off();
    194e:	10 92 81 00 	sts	0x0081, r1
    1952:	10 92 85 00 	sts	0x0085, r1
    1956:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	80 93 60 01 	sts	0x0160, r24
    rx_leadingbyte = 1;
    1960:	80 93 a4 01 	sts	0x01A4, r24
    rx_busy = 0;
    1964:	10 92 87 01 	sts	0x0187, r1
    adc_trigger_high_gain();
    1968:	10 92 7c 00 	sts	0x007C, r1
    196c:	93 ea       	ldi	r25, 0xA3	; 163
    196e:	90 93 7a 00 	sts	0x007A, r25
    1972:	80 93 7b 00 	sts	0x007B, r24
}
    1976:	9f 91       	pop	r25
    1978:	8f 91       	pop	r24
    197a:	0f 90       	pop	r0
    197c:	0f be       	out	0x3f, r0	; 63
    197e:	0f 90       	pop	r0
    1980:	1f 90       	pop	r1
    1982:	18 95       	reti

00001984 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
    1984:	1f 92       	push	r1
    1986:	0f 92       	push	r0
    1988:	0f b6       	in	r0, 0x3f	; 63
    198a:	0f 92       	push	r0
    198c:	11 24       	eor	r1, r1
    198e:	2f 93       	push	r18
    1990:	3f 93       	push	r19
    1992:	4f 93       	push	r20
    1994:	5f 93       	push	r21
    1996:	6f 93       	push	r22
    1998:	7f 93       	push	r23
    199a:	8f 93       	push	r24
    199c:	9f 93       	push	r25
    199e:	af 93       	push	r26
    19a0:	bf 93       	push	r27
    19a2:	cf 93       	push	r28
    19a4:	df 93       	push	r29
    19a6:	ef 93       	push	r30
    19a8:	ff 93       	push	r31
    uint16_t timer = TCNT1;
    19aa:	20 91 84 00 	lds	r18, 0x0084
    19ae:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
    19b2:	41 e0       	ldi	r20, 0x01	; 1
    19b4:	40 93 87 01 	sts	0x0187, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
    19b8:	80 91 60 01 	lds	r24, 0x0160
    19bc:	88 23       	and	r24, r24
    19be:	a9 f1       	breq	.+106    	; 0x1a2a <__vector_23+0xa6>
        rx_timer_on();
    19c0:	10 92 85 00 	sts	0x0085, r1
    19c4:	10 92 84 00 	sts	0x0084, r1
    19c8:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
    19cc:	10 92 b8 01 	sts	0x01B8, r1
        rx_leadingbit = 0;
    19d0:	10 92 60 01 	sts	0x0160, r1
        if (rx_leadingbyte) {
    19d4:	80 91 a4 01 	lds	r24, 0x01A4
    19d8:	88 23       	and	r24, r24
    19da:	a1 f0       	breq	.+40     	; 0x1a04 <__vector_23+0x80>
            adc_finish_conversion();
    19dc:	80 91 7a 00 	lds	r24, 0x007A
    19e0:	86 fd       	sbrc	r24, 6
    19e2:	fc cf       	rjmp	.-8      	; 0x19dc <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
    19e4:	80 91 78 00 	lds	r24, 0x0078
    19e8:	90 91 79 00 	lds	r25, 0x0079
    19ec:	90 93 82 01 	sts	0x0182, r25
    19f0:	80 93 81 01 	sts	0x0181, r24
            adc_trigger_low_gain();
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	80 93 7c 00 	sts	0x007C, r24
    19fa:	93 ea       	ldi	r25, 0xA3	; 163
    19fc:	90 93 7a 00 	sts	0x007A, r25
    1a00:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
    1a04:	ff 91       	pop	r31
    1a06:	ef 91       	pop	r30
    1a08:	df 91       	pop	r29
    1a0a:	cf 91       	pop	r28
    1a0c:	bf 91       	pop	r27
    1a0e:	af 91       	pop	r26
    1a10:	9f 91       	pop	r25
    1a12:	8f 91       	pop	r24
    1a14:	7f 91       	pop	r23
    1a16:	6f 91       	pop	r22
    1a18:	5f 91       	pop	r21
    1a1a:	4f 91       	pop	r20
    1a1c:	3f 91       	pop	r19
    1a1e:	2f 91       	pop	r18
    1a20:	0f 90       	pop	r0
    1a22:	0f be       	out	0x3f, r0	; 63
    1a24:	0f 90       	pop	r0
    1a26:	1f 90       	pop	r1
    1a28:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    1a2a:	c9 01       	movw	r24, r18
    1a2c:	87 58       	subi	r24, 0x87	; 135
    1a2e:	91 09       	sbc	r25, r1
    1a30:	84 37       	cpi	r24, 0x74	; 116
    1a32:	99 40       	sbci	r25, 0x09	; 9
    1a34:	08 f0       	brcs	.+2      	; 0x1a38 <__vector_23+0xb4>
    1a36:	4f c0       	rjmp	.+158    	; 0x1ad6 <__vector_23+0x152>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    1a38:	26 58       	subi	r18, 0x86	; 134
    1a3a:	31 09       	sbc	r19, r1
    1a3c:	a4 ef       	ldi	r26, 0xF4	; 244
    1a3e:	b0 e0       	ldi	r27, 0x00	; 0
    1a40:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <__umulhisi3>
    1a44:	aa 27       	eor	r26, r26
    1a46:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
    1a48:	88 30       	cpi	r24, 0x08	; 8
    1a4a:	08 f4       	brcc	.+2      	; 0x1a4e <__vector_23+0xca>
    1a4c:	7b c0       	rjmp	.+246    	; 0x1b44 <__vector_23+0x1c0>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    1a4e:	40 93 60 01 	sts	0x0160, r20
                if (rx_leadingbyte) {
    1a52:	80 91 a4 01 	lds	r24, 0x01A4
    1a56:	81 11       	cpse	r24, r1
    1a58:	52 c0       	rjmp	.+164    	; 0x1afe <__vector_23+0x17a>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    1a5a:	80 91 7e 01 	lds	r24, 0x017E
    1a5e:	e8 2f       	mov	r30, r24
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	e6 55       	subi	r30, 0x56	; 86
    1a64:	fe 4f       	sbci	r31, 0xFE	; 254
    1a66:	90 91 b8 01 	lds	r25, 0x01B8
    1a6a:	90 83       	st	Z, r25
                    rx_byteindex++;
    1a6c:	8f 5f       	subi	r24, 0xFF	; 255
    1a6e:	80 93 7e 01 	sts	0x017E, r24
                    if (rx_byteindex == sizeof(message_t)) {
    1a72:	8c 30       	cpi	r24, 0x0C	; 12
    1a74:	39 f6       	brne	.-114    	; 0x1a04 <__vector_23+0x80>
                        rx_timer_off();
    1a76:	10 92 81 00 	sts	0x0081, r1
    1a7a:	10 92 85 00 	sts	0x0085, r1
    1a7e:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1a82:	40 93 a4 01 	sts	0x01A4, r20
                        rx_busy = 0;
    1a86:	10 92 87 01 	sts	0x0187, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    1a8a:	c0 91 b4 01 	lds	r28, 0x01B4
    1a8e:	d0 91 b5 01 	lds	r29, 0x01B5
    1a92:	8a ea       	ldi	r24, 0xAA	; 170
    1a94:	91 e0       	ldi	r25, 0x01	; 1
    1a96:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <message_crc>
    1a9a:	c8 17       	cp	r28, r24
    1a9c:	d9 07       	cpc	r29, r25
    1a9e:	09 f0       	breq	.+2      	; 0x1aa2 <__vector_23+0x11e>
    1aa0:	b1 cf       	rjmp	.-158    	; 0x1a04 <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    1aa2:	80 91 b3 01 	lds	r24, 0x01B3
    1aa6:	87 ff       	sbrs	r24, 7
    1aa8:	5e c0       	rjmp	.+188    	; 0x1b66 <__vector_23+0x1e2>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    1aaa:	98 e7       	ldi	r25, 0x78	; 120
    1aac:	98 0f       	add	r25, r24
    1aae:	93 30       	cpi	r25, 0x03	; 3
    1ab0:	30 f0       	brcs	.+12     	; 0x1abe <__vector_23+0x13a>
        motors_off();
    1ab2:	53 98       	cbi	0x0a, 3	; 10
    1ab4:	23 98       	cbi	0x04, 3	; 4
    1ab6:	10 92 b4 00 	sts	0x00B4, r1
    1aba:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	fc 01       	movw	r30, r24
    1ac2:	e0 58       	subi	r30, 0x80	; 128
    1ac4:	f1 09       	sbc	r31, r1
    1ac6:	eb 30       	cpi	r30, 0x0B	; 11
    1ac8:	f1 05       	cpc	r31, r1
    1aca:	08 f0       	brcs	.+2      	; 0x1ace <__vector_23+0x14a>
    1acc:	9b cf       	rjmp	.-202    	; 0x1a04 <__vector_23+0x80>
    1ace:	e5 5c       	subi	r30, 0xC5	; 197
    1ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad2:	0c 94 8c 0f 	jmp	0x1f18	; 0x1f18 <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    1ad6:	10 92 81 00 	sts	0x0081, r1
    1ada:	10 92 85 00 	sts	0x0085, r1
    1ade:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    1ae2:	40 93 60 01 	sts	0x0160, r20
            rx_leadingbyte = 1;
    1ae6:	40 93 a4 01 	sts	0x01A4, r20
            rx_busy = 0;
    1aea:	10 92 87 01 	sts	0x0187, r1
            adc_trigger_high_gain();
    1aee:	10 92 7c 00 	sts	0x007C, r1
    1af2:	83 ea       	ldi	r24, 0xA3	; 163
    1af4:	80 93 7a 00 	sts	0x007A, r24
    1af8:	40 93 7b 00 	sts	0x007B, r20
    1afc:	83 cf       	rjmp	.-250    	; 0x1a04 <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    1afe:	80 91 7a 00 	lds	r24, 0x007A
    1b02:	86 fd       	sbrc	r24, 6
    1b04:	fc cf       	rjmp	.-8      	; 0x1afe <__vector_23+0x17a>
                    rx_dist.low_gain = ADCW;
    1b06:	80 91 78 00 	lds	r24, 0x0078
    1b0a:	90 91 79 00 	lds	r25, 0x0079
    1b0e:	90 93 80 01 	sts	0x0180, r25
    1b12:	80 93 7f 01 	sts	0x017F, r24
                    adc_trigger_high_gain();
    1b16:	10 92 7c 00 	sts	0x007C, r1
    1b1a:	83 ea       	ldi	r24, 0xA3	; 163
    1b1c:	80 93 7a 00 	sts	0x007A, r24
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    1b26:	90 91 b8 01 	lds	r25, 0x01B8
    1b2a:	99 23       	and	r25, r25
    1b2c:	b9 f0       	breq	.+46     	; 0x1b5c <__vector_23+0x1d8>
                        rx_timer_off();
    1b2e:	10 92 81 00 	sts	0x0081, r1
    1b32:	10 92 85 00 	sts	0x0085, r1
    1b36:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1b3a:	80 93 a4 01 	sts	0x01A4, r24
                        rx_busy = 0;
    1b3e:	10 92 87 01 	sts	0x0187, r1
    1b42:	60 cf       	rjmp	.-320    	; 0x1a04 <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    1b44:	21 e0       	ldi	r18, 0x01	; 1
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	01 c0       	rjmp	.+2      	; 0x1b4c <__vector_23+0x1c8>
    1b4a:	22 0f       	add	r18, r18
    1b4c:	8a 95       	dec	r24
    1b4e:	ea f7       	brpl	.-6      	; 0x1b4a <__vector_23+0x1c6>
    1b50:	80 91 b8 01 	lds	r24, 0x01B8
    1b54:	82 2b       	or	r24, r18
    1b56:	80 93 b8 01 	sts	0x01B8, r24
    1b5a:	54 cf       	rjmp	.-344    	; 0x1a04 <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    1b5c:	10 92 a4 01 	sts	0x01A4, r1
                        rx_byteindex = 0;
    1b60:	10 92 7e 01 	sts	0x017E, r1
    1b64:	4f cf       	rjmp	.-354    	; 0x1a04 <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    1b66:	e0 91 1f 01 	lds	r30, 0x011F
    1b6a:	f0 91 20 01 	lds	r31, 0x0120
    1b6e:	6f e7       	ldi	r22, 0x7F	; 127
    1b70:	71 e0       	ldi	r23, 0x01	; 1
    1b72:	8a ea       	ldi	r24, 0xAA	; 170
    1b74:	91 e0       	ldi	r25, 0x01	; 1
    1b76:	09 95       	icall
    1b78:	45 cf       	rjmp	.-374    	; 0x1a04 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1b7a:	80 91 aa 01 	lds	r24, 0x01AA
    1b7e:	82 30       	cpi	r24, 0x02	; 2
    1b80:	09 f4       	brne	.+2      	; 0x1b84 <__vector_23+0x200>
    1b82:	dc c0       	rjmp	.+440    	; 0x1d3c <__vector_23+0x3b8>
    1b84:	08 f4       	brcc	.+2      	; 0x1b88 <__vector_23+0x204>
    1b86:	b9 c0       	rjmp	.+370    	; 0x1cfa <__vector_23+0x376>
    1b88:	83 30       	cpi	r24, 0x03	; 3
    1b8a:	09 f4       	brne	.+2      	; 0x1b8e <__vector_23+0x20a>
    1b8c:	c5 c0       	rjmp	.+394    	; 0x1d18 <__vector_23+0x394>
    1b8e:	84 30       	cpi	r24, 0x04	; 4
    1b90:	09 f0       	breq	.+2      	; 0x1b94 <__vector_23+0x210>
    1b92:	b0 c0       	rjmp	.+352    	; 0x1cf4 <__vector_23+0x370>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1b94:	80 91 41 01 	lds	r24, 0x0141
    1b98:	90 91 b0 01 	lds	r25, 0x01B0
    1b9c:	83 30       	cpi	r24, 0x03	; 3
    1b9e:	09 f4       	brne	.+2      	; 0x1ba2 <__vector_23+0x21e>
    1ba0:	e2 c0       	rjmp	.+452    	; 0x1d66 <__vector_23+0x3e2>
    1ba2:	80 91 af 01 	lds	r24, 0x01AF
                        prev_motion = MOVE_STOP;
    1ba6:	10 92 42 01 	sts	0x0142, r1
                        cur_motion = MOVE_STRAIGHT;
    1baa:	23 e0       	ldi	r18, 0x03	; 3
    1bac:	20 93 41 01 	sts	0x0141, r18
                        kilo_straight_left = calibmsg->straight_left;
    1bb0:	80 93 bb 01 	sts	0x01BB, r24
                        kilo_straight_right = calibmsg->straight_right;
    1bb4:	90 93 bc 01 	sts	0x01BC, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1bb8:	80 91 43 01 	lds	r24, 0x0143
    1bbc:	86 30       	cpi	r24, 0x06	; 6
    1bbe:	09 f4       	brne	.+2      	; 0x1bc2 <__vector_23+0x23e>
    1bc0:	21 cf       	rjmp	.-446    	; 0x1a04 <__vector_23+0x80>
                motors_on();
    1bc2:	53 9a       	sbi	0x0a, 3	; 10
    1bc4:	23 9a       	sbi	0x04, 3	; 4
    1bc6:	10 92 b4 00 	sts	0x00B4, r1
    1bca:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    1bce:	86 e0       	ldi	r24, 0x06	; 6
    1bd0:	80 93 43 01 	sts	0x0143, r24
    1bd4:	17 cf       	rjmp	.-466    	; 0x1a04 <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    1bd6:	80 91 43 01 	lds	r24, 0x0143
    1bda:	86 30       	cpi	r24, 0x06	; 6
    1bdc:	99 f0       	breq	.+38     	; 0x1c04 <__vector_23+0x280>
                motors_on();
    1bde:	53 9a       	sbi	0x0a, 3	; 10
    1be0:	23 9a       	sbi	0x04, 3	; 4
    1be2:	10 92 b4 00 	sts	0x00B4, r1
    1be6:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1bea:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1bec:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1bee:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    1bf0:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1bf2:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1bf4:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    1bf6:	10 92 41 01 	sts	0x0141, r1
    1bfa:	10 92 42 01 	sts	0x0142, r1
                kilo_state = MOVING;
    1bfe:	86 e0       	ldi	r24, 0x06	; 6
    1c00:	80 93 43 01 	sts	0x0143, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	00 90 aa 01 	lds	r0, 0x01AA
    1c0c:	02 c0       	rjmp	.+4      	; 0x1c12 <__vector_23+0x28e>
    1c0e:	88 0f       	add	r24, r24
    1c10:	99 1f       	adc	r25, r25
    1c12:	0a 94       	dec	r0
    1c14:	e2 f7       	brpl	.-8      	; 0x1c0e <__vector_23+0x28a>
    1c16:	20 91 b9 01 	lds	r18, 0x01B9
    1c1a:	30 91 ba 01 	lds	r19, 0x01BA
    1c1e:	82 23       	and	r24, r18
    1c20:	93 23       	and	r25, r19
    1c22:	89 2b       	or	r24, r25
    1c24:	09 f0       	breq	.+2      	; 0x1c28 <__vector_23+0x2a4>
    1c26:	86 c0       	rjmp	.+268    	; 0x1d34 <__vector_23+0x3b0>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    1c28:	10 92 41 01 	sts	0x0141, r1
    1c2c:	eb ce       	rjmp	.-554    	; 0x1a04 <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	80 93 43 01 	sts	0x0143, r24
    1c34:	e7 ce       	rjmp	.-562    	; 0x1a04 <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    1c36:	e0 e0       	ldi	r30, 0x00	; 0
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    1c3c:	80 91 6e 00 	lds	r24, 0x006E
    1c40:	8d 7f       	andi	r24, 0xFD	; 253
    1c42:	80 93 6e 00 	sts	0x006E, r24
    1c46:	16 bc       	out	0x26, r1	; 38
            bootload();
    1c48:	e0 e0       	ldi	r30, 0x00	; 0
    1c4a:	f0 e7       	ldi	r31, 0x70	; 112
    1c4c:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    1c4e:	10 92 43 01 	sts	0x0143, r1
    1c52:	d8 ce       	rjmp	.-592    	; 0x1a04 <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    1c54:	82 e0       	ldi	r24, 0x02	; 2
    1c56:	80 93 43 01 	sts	0x0143, r24
    1c5a:	d4 ce       	rjmp	.-600    	; 0x1a04 <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    1c5c:	85 e0       	ldi	r24, 0x05	; 5
    1c5e:	80 93 43 01 	sts	0x0143, r24
    1c62:	d0 ce       	rjmp	.-608    	; 0x1a04 <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    1c64:	80 91 43 01 	lds	r24, 0x0143
    1c68:	83 30       	cpi	r24, 0x03	; 3
    1c6a:	09 f4       	brne	.+2      	; 0x1c6e <__vector_23+0x2ea>
    1c6c:	cb ce       	rjmp	.-618    	; 0x1a04 <__vector_23+0x80>
    1c6e:	80 91 43 01 	lds	r24, 0x0143
    1c72:	84 30       	cpi	r24, 0x04	; 4
    1c74:	09 f4       	brne	.+2      	; 0x1c78 <__vector_23+0x2f4>
    1c76:	c6 ce       	rjmp	.-628    	; 0x1a04 <__vector_23+0x80>
                motors_on();
    1c78:	53 9a       	sbi	0x0a, 3	; 10
    1c7a:	23 9a       	sbi	0x04, 3	; 4
    1c7c:	10 92 b4 00 	sts	0x00B4, r1
    1c80:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    1c84:	83 e0       	ldi	r24, 0x03	; 3
    1c86:	80 93 43 01 	sts	0x0143, r24
    1c8a:	bc ce       	rjmp	.-648    	; 0x1a04 <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    1c8c:	80 91 43 01 	lds	r24, 0x0143
    1c90:	86 30       	cpi	r24, 0x06	; 6
    1c92:	09 f0       	breq	.+2      	; 0x1c96 <__vector_23+0x312>
    1c94:	b7 ce       	rjmp	.-658    	; 0x1a04 <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    1c96:	60 91 b9 01 	lds	r22, 0x01B9
    1c9a:	80 eb       	ldi	r24, 0xB0	; 176
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    1ca2:	60 91 ba 01 	lds	r22, 0x01BA
    1ca6:	81 eb       	ldi	r24, 0xB1	; 177
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    1cae:	60 91 bd 01 	lds	r22, 0x01BD
    1cb2:	85 e0       	ldi	r24, 0x05	; 5
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    1cba:	60 91 a9 01 	lds	r22, 0x01A9
    1cbe:	89 e0       	ldi	r24, 0x09	; 9
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    1cc6:	60 91 bb 01 	lds	r22, 0x01BB
    1cca:	8c e0       	ldi	r24, 0x0C	; 12
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    1cd2:	60 91 bc 01 	lds	r22, 0x01BC
    1cd6:	84 e1       	ldi	r24, 0x14	; 20
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__eewr_byte_m328p>
                        motors_off();
    1cde:	53 98       	cbi	0x0a, 3	; 10
    1ce0:	23 98       	cbi	0x04, 3	; 4
    1ce2:	10 92 b4 00 	sts	0x00B4, r1
    1ce6:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	80 93 43 01 	sts	0x0143, r24
    1cf0:	80 91 aa 01 	lds	r24, 0x01AA
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1cf4:	81 11       	cpse	r24, r1
    1cf6:	60 cf       	rjmp	.-320    	; 0x1bb8 <__vector_23+0x234>
    1cf8:	85 ce       	rjmp	.-758    	; 0x1a04 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1cfa:	88 23       	and	r24, r24
    1cfc:	39 f2       	breq	.-114    	; 0x1c8c <__vector_23+0x308>
    1cfe:	81 30       	cpi	r24, 0x01	; 1
    1d00:	c9 f7       	brne	.-14     	; 0x1cf4 <__vector_23+0x370>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    1d02:	80 91 ab 01 	lds	r24, 0x01AB
    1d06:	90 91 ac 01 	lds	r25, 0x01AC
    1d0a:	90 93 ba 01 	sts	0x01BA, r25
    1d0e:	80 93 b9 01 	sts	0x01B9, r24
                    cur_motion = MOVE_STOP;
    1d12:	10 92 41 01 	sts	0x0141, r1
    1d16:	50 cf       	rjmp	.-352    	; 0x1bb8 <__vector_23+0x234>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1d18:	80 91 41 01 	lds	r24, 0x0141
    1d1c:	82 30       	cpi	r24, 0x02	; 2
    1d1e:	71 f1       	breq	.+92     	; 0x1d7c <__vector_23+0x3f8>
    1d20:	80 91 ae 01 	lds	r24, 0x01AE
                        prev_motion = MOVE_STOP;
    1d24:	10 92 42 01 	sts	0x0142, r1
                        cur_motion = MOVE_RIGHT;
    1d28:	92 e0       	ldi	r25, 0x02	; 2
    1d2a:	90 93 41 01 	sts	0x0141, r25
                        kilo_turn_right = calibmsg->turn_right;
    1d2e:	80 93 a9 01 	sts	0x01A9, r24
    1d32:	42 cf       	rjmp	.-380    	; 0x1bb8 <__vector_23+0x234>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	80 93 41 01 	sts	0x0141, r24
    1d3a:	64 ce       	rjmp	.-824    	; 0x1a04 <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1d3c:	80 91 41 01 	lds	r24, 0x0141
    1d40:	81 30       	cpi	r24, 0x01	; 1
    1d42:	51 f0       	breq	.+20     	; 0x1d58 <__vector_23+0x3d4>
    1d44:	80 91 ad 01 	lds	r24, 0x01AD
                        prev_motion = MOVE_STOP;
    1d48:	10 92 42 01 	sts	0x0142, r1
                        cur_motion = MOVE_LEFT;
    1d4c:	91 e0       	ldi	r25, 0x01	; 1
    1d4e:	90 93 41 01 	sts	0x0141, r25
                        kilo_turn_left = calibmsg->turn_left;
    1d52:	80 93 bd 01 	sts	0x01BD, r24
    1d56:	30 cf       	rjmp	.-416    	; 0x1bb8 <__vector_23+0x234>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1d58:	80 91 ad 01 	lds	r24, 0x01AD
    1d5c:	90 91 bd 01 	lds	r25, 0x01BD
    1d60:	89 13       	cpse	r24, r25
    1d62:	f2 cf       	rjmp	.-28     	; 0x1d48 <__vector_23+0x3c4>
    1d64:	29 cf       	rjmp	.-430    	; 0x1bb8 <__vector_23+0x234>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1d66:	80 91 bc 01 	lds	r24, 0x01BC
    1d6a:	98 13       	cpse	r25, r24
    1d6c:	1a cf       	rjmp	.-460    	; 0x1ba2 <__vector_23+0x21e>
    1d6e:	80 91 af 01 	lds	r24, 0x01AF
    1d72:	20 91 bb 01 	lds	r18, 0x01BB
    1d76:	82 13       	cpse	r24, r18
    1d78:	16 cf       	rjmp	.-468    	; 0x1ba6 <__vector_23+0x222>
    1d7a:	1e cf       	rjmp	.-452    	; 0x1bb8 <__vector_23+0x234>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1d7c:	80 91 ae 01 	lds	r24, 0x01AE
    1d80:	90 91 a9 01 	lds	r25, 0x01A9
    1d84:	89 13       	cpse	r24, r25
    1d86:	ce cf       	rjmp	.-100    	; 0x1d24 <__vector_23+0x3a0>
    1d88:	17 cf       	rjmp	.-466    	; 0x1bb8 <__vector_23+0x234>

00001d8a <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    1d8a:	fc 01       	movw	r30, r24
    1d8c:	2a e0       	ldi	r18, 0x0A	; 10
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    1d8e:	8f ef       	ldi	r24, 0xFF	; 255
    1d90:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    1d92:	31 91       	ld	r19, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    1d94:	83 27       	eor	r24, r19
    1d96:	08 2e       	mov	r0, r24
    1d98:	82 95       	swap	r24
    1d9a:	80 7f       	andi	r24, 0xF0	; 240
    1d9c:	80 25       	eor	r24, r0
    1d9e:	09 2e       	mov	r0, r25
    1da0:	98 2f       	mov	r25, r24
    1da2:	82 95       	swap	r24
    1da4:	8f 70       	andi	r24, 0x0F	; 15
    1da6:	08 26       	eor	r0, r24
    1da8:	86 95       	lsr	r24
    1daa:	98 27       	eor	r25, r24
    1dac:	89 27       	eor	r24, r25
    1dae:	88 0f       	add	r24, r24
    1db0:	88 0f       	add	r24, r24
    1db2:	88 0f       	add	r24, r24
    1db4:	80 25       	eor	r24, r0
    1db6:	21 50       	subi	r18, 0x01	; 1

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    1db8:	61 f7       	brne	.-40     	; 0x1d92 <message_crc+0x8>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    1dba:	08 95       	ret

00001dbc <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    1dbc:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    1dbe:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    1dc0:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    1dc2:	20 91 7d 01 	lds	r18, 0x017D
    or tmpreg1, ddrreg
    1dc6:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    1dc8:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    1dca:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1dcc:	30 91 7d 01 	lds	r19, 0x017D
    1dd0:	20 30       	cpi	r18, 0x00	; 0
    1dd2:	29 f0       	breq	.+10     	; 0x1dde <message_send+0x22>
    1dd4:	00 00       	nop
    1dd6:	25 b1       	in	r18, 0x05	; 5
    1dd8:	23 2b       	or	r18, r19
    1dda:	25 b9       	out	0x05, r18	; 5
    1ddc:	04 c0       	rjmp	.+8      	; 0x1de6 <message_send+0x2a>
    1dde:	00 00       	nop
    1de0:	00 00       	nop
    1de2:	00 00       	nop
    1de4:	00 c0       	rjmp	.+0      	; 0x1de6 <message_send+0x2a>
    1de6:	00 00       	nop
    1de8:	00 00       	nop
    1dea:	00 00       	nop
    1dec:	30 95       	com	r19
    1dee:	25 b1       	in	r18, 0x05	; 5
    1df0:	23 23       	and	r18, r19
    1df2:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    1df4:	2e ea       	ldi	r18, 0xAE	; 174
    1df6:	2a 95       	dec	r18
    1df8:	f1 f7       	brne	.-4      	; 0x1df6 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    1dfa:	2b ee       	ldi	r18, 0xEB	; 235

00001dfc <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    1dfc:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    1dfe:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1e00:	0a c0       	rjmp	.+20     	; 0x1e16 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1e02:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1e04:	30 91 7d 01 	lds	r19, 0x017D
    com tmpreg2
    1e08:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1e0a:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1e0c:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1e0e:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1e10:	0f be       	out	0x3f, r0	; 63
    return 0
    1e12:	80 e0       	ldi	r24, 0x00	; 0
    1e14:	08 95       	ret

00001e16 <nocollision>:
nocollision:
    nop
    1e16:	00 00       	nop
    dec tmpreg1
    1e18:	2a 95       	dec	r18
    brne checkcollision
    1e1a:	81 f7       	brne	.-32     	; 0x1dfc <checkcollision>

    ldi tmpreg1, 0x01
    1e1c:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1e1e:	30 91 7d 01 	lds	r19, 0x017D
    1e22:	20 30       	cpi	r18, 0x00	; 0
    1e24:	29 f0       	breq	.+10     	; 0x1e30 <nocollision+0x1a>
    1e26:	00 00       	nop
    1e28:	25 b1       	in	r18, 0x05	; 5
    1e2a:	23 2b       	or	r18, r19
    1e2c:	25 b9       	out	0x05, r18	; 5
    1e2e:	04 c0       	rjmp	.+8      	; 0x1e38 <nocollision+0x22>
    1e30:	00 00       	nop
    1e32:	00 00       	nop
    1e34:	00 00       	nop
    1e36:	00 c0       	rjmp	.+0      	; 0x1e38 <nocollision+0x22>
    1e38:	00 00       	nop
    1e3a:	00 00       	nop
    1e3c:	00 00       	nop
    1e3e:	30 95       	com	r19
    1e40:	25 b1       	in	r18, 0x05	; 5
    1e42:	23 23       	and	r18, r19
    1e44:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    1e46:	00 00       	nop
    1e48:	24 e5       	ldi	r18, 0x54	; 84
    1e4a:	2a 95       	dec	r18
    1e4c:	f1 f7       	brne	.-4      	; 0x1e4a <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    1e4e:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    1e50:	8c e0       	ldi	r24, 0x0C	; 12

00001e52 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    1e52:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    1e54:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    1e56:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    1e58:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    1e5a:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    1e5c:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    1e5e:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    1e60:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    1e62:	50 e0       	ldi	r21, 0x00	; 0

00001e64 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    1e64:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    1e66:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    1e68:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    1e6a:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    1e6c:	30 91 7d 01 	lds	r19, 0x017D
    1e70:	20 30       	cpi	r18, 0x00	; 0
    1e72:	29 f0       	breq	.+10     	; 0x1e7e <sendbit+0x1a>
    1e74:	00 00       	nop
    1e76:	25 b1       	in	r18, 0x05	; 5
    1e78:	23 2b       	or	r18, r19
    1e7a:	25 b9       	out	0x05, r18	; 5
    1e7c:	04 c0       	rjmp	.+8      	; 0x1e86 <sendbit+0x22>
    1e7e:	00 00       	nop
    1e80:	00 00       	nop
    1e82:	00 00       	nop
    1e84:	00 c0       	rjmp	.+0      	; 0x1e86 <sendbit+0x22>
    1e86:	00 00       	nop
    1e88:	00 00       	nop
    1e8a:	00 00       	nop
    1e8c:	30 95       	com	r19
    1e8e:	25 b1       	in	r18, 0x05	; 5
    1e90:	23 23       	and	r18, r19
    1e92:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    1e94:	00 00       	nop
    1e96:	21 e5       	ldi	r18, 0x51	; 81
    1e98:	2a 95       	dec	r18
    1e9a:	f1 f7       	brne	.-4      	; 0x1e98 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    1e9c:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    1e9e:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    1ea0:	9a 95       	dec	r25
    brne sendbit
    1ea2:	01 f7       	brne	.-64     	; 0x1e64 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    1ea4:	8a 95       	dec	r24
    brne sendbyte
    1ea6:	a9 f6       	brne	.-86     	; 0x1e52 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    1ea8:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    1eaa:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    1eac:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1eae:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1eb0:	30 91 7d 01 	lds	r19, 0x017D
    com tmpreg2
    1eb4:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1eb6:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1eb8:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1eba:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1ebc:	0f be       	out	0x3f, r0	; 63
    return 1
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	08 95       	ret

00001ec2 <main>:



int main()
{
    kilo_init();
    1ec2:	0e 94 f5 05 	call	0xbea	; 0xbea <kilo_init>
    kilo_message_rx = message_rx;
    1ec6:	83 ef       	ldi	r24, 0xF3	; 243
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	90 93 20 01 	sts	0x0120, r25
    1ece:	80 93 1f 01 	sts	0x011F, r24
    kilo_message_tx = message_tx;
    1ed2:	88 ed       	ldi	r24, 0xD8	; 216
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	90 93 1e 01 	sts	0x011E, r25
    1eda:	80 93 1d 01 	sts	0x011D, r24
    kilo_start(setup, loop);
    1ede:	66 eb       	ldi	r22, 0xB6	; 182
    1ee0:	74 e0       	ldi	r23, 0x04	; 4
    1ee2:	8e e6       	ldi	r24, 0x6E	; 110
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	0e 94 ee 06 	call	0xddc	; 0xddc <kilo_start>

    return 0;
}
    1eea:	80 e0       	ldi	r24, 0x00	; 0
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	08 95       	ret

00001ef0 <__divmodhi4>:
    1ef0:	97 fb       	bst	r25, 7
    1ef2:	07 2e       	mov	r0, r23
    1ef4:	16 f4       	brtc	.+4      	; 0x1efa <__divmodhi4+0xa>
    1ef6:	00 94       	com	r0
    1ef8:	07 d0       	rcall	.+14     	; 0x1f08 <__divmodhi4_neg1>
    1efa:	77 fd       	sbrc	r23, 7
    1efc:	09 d0       	rcall	.+18     	; 0x1f10 <__divmodhi4_neg2>
    1efe:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__udivmodhi4>
    1f02:	07 fc       	sbrc	r0, 7
    1f04:	05 d0       	rcall	.+10     	; 0x1f10 <__divmodhi4_neg2>
    1f06:	3e f4       	brtc	.+14     	; 0x1f16 <__divmodhi4_exit>

00001f08 <__divmodhi4_neg1>:
    1f08:	90 95       	com	r25
    1f0a:	81 95       	neg	r24
    1f0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f0e:	08 95       	ret

00001f10 <__divmodhi4_neg2>:
    1f10:	70 95       	com	r23
    1f12:	61 95       	neg	r22
    1f14:	7f 4f       	sbci	r23, 0xFF	; 255

00001f16 <__divmodhi4_exit>:
    1f16:	08 95       	ret

00001f18 <__tablejump2__>:
    1f18:	ee 0f       	add	r30, r30
    1f1a:	ff 1f       	adc	r31, r31

00001f1c <__tablejump__>:
    1f1c:	05 90       	lpm	r0, Z+
    1f1e:	f4 91       	lpm	r31, Z
    1f20:	e0 2d       	mov	r30, r0
    1f22:	09 94       	ijmp

00001f24 <__umulhisi3>:
    1f24:	a2 9f       	mul	r26, r18
    1f26:	b0 01       	movw	r22, r0
    1f28:	b3 9f       	mul	r27, r19
    1f2a:	c0 01       	movw	r24, r0
    1f2c:	a3 9f       	mul	r26, r19
    1f2e:	70 0d       	add	r23, r0
    1f30:	81 1d       	adc	r24, r1
    1f32:	11 24       	eor	r1, r1
    1f34:	91 1d       	adc	r25, r1
    1f36:	b2 9f       	mul	r27, r18
    1f38:	70 0d       	add	r23, r0
    1f3a:	81 1d       	adc	r24, r1
    1f3c:	11 24       	eor	r1, r1
    1f3e:	91 1d       	adc	r25, r1
    1f40:	08 95       	ret

00001f42 <__udivmodhi4>:
    1f42:	aa 1b       	sub	r26, r26
    1f44:	bb 1b       	sub	r27, r27
    1f46:	51 e1       	ldi	r21, 0x11	; 17
    1f48:	07 c0       	rjmp	.+14     	; 0x1f58 <__udivmodhi4_ep>

00001f4a <__udivmodhi4_loop>:
    1f4a:	aa 1f       	adc	r26, r26
    1f4c:	bb 1f       	adc	r27, r27
    1f4e:	a6 17       	cp	r26, r22
    1f50:	b7 07       	cpc	r27, r23
    1f52:	10 f0       	brcs	.+4      	; 0x1f58 <__udivmodhi4_ep>
    1f54:	a6 1b       	sub	r26, r22
    1f56:	b7 0b       	sbc	r27, r23

00001f58 <__udivmodhi4_ep>:
    1f58:	88 1f       	adc	r24, r24
    1f5a:	99 1f       	adc	r25, r25
    1f5c:	5a 95       	dec	r21
    1f5e:	a9 f7       	brne	.-22     	; 0x1f4a <__udivmodhi4_loop>
    1f60:	80 95       	com	r24
    1f62:	90 95       	com	r25
    1f64:	bc 01       	movw	r22, r24
    1f66:	cd 01       	movw	r24, r26
    1f68:	08 95       	ret

00001f6a <__subsf3>:
    1f6a:	50 58       	subi	r21, 0x80	; 128

00001f6c <__addsf3>:
    1f6c:	bb 27       	eor	r27, r27
    1f6e:	aa 27       	eor	r26, r26
    1f70:	0e d0       	rcall	.+28     	; 0x1f8e <__addsf3x>
    1f72:	4d c1       	rjmp	.+666    	; 0x220e <__fp_round>
    1f74:	3e d1       	rcall	.+636    	; 0x21f2 <__fp_pscA>
    1f76:	30 f0       	brcs	.+12     	; 0x1f84 <__addsf3+0x18>
    1f78:	43 d1       	rcall	.+646    	; 0x2200 <__fp_pscB>
    1f7a:	20 f0       	brcs	.+8      	; 0x1f84 <__addsf3+0x18>
    1f7c:	31 f4       	brne	.+12     	; 0x1f8a <__addsf3+0x1e>
    1f7e:	9f 3f       	cpi	r25, 0xFF	; 255
    1f80:	11 f4       	brne	.+4      	; 0x1f86 <__addsf3+0x1a>
    1f82:	1e f4       	brtc	.+6      	; 0x1f8a <__addsf3+0x1e>
    1f84:	33 c1       	rjmp	.+614    	; 0x21ec <__fp_nan>
    1f86:	0e f4       	brtc	.+2      	; 0x1f8a <__addsf3+0x1e>
    1f88:	e0 95       	com	r30
    1f8a:	e7 fb       	bst	r30, 7
    1f8c:	29 c1       	rjmp	.+594    	; 0x21e0 <__fp_inf>

00001f8e <__addsf3x>:
    1f8e:	e9 2f       	mov	r30, r25
    1f90:	4f d1       	rcall	.+670    	; 0x2230 <__fp_split3>
    1f92:	80 f3       	brcs	.-32     	; 0x1f74 <__addsf3+0x8>
    1f94:	ba 17       	cp	r27, r26
    1f96:	62 07       	cpc	r22, r18
    1f98:	73 07       	cpc	r23, r19
    1f9a:	84 07       	cpc	r24, r20
    1f9c:	95 07       	cpc	r25, r21
    1f9e:	18 f0       	brcs	.+6      	; 0x1fa6 <__addsf3x+0x18>
    1fa0:	71 f4       	brne	.+28     	; 0x1fbe <__addsf3x+0x30>
    1fa2:	9e f5       	brtc	.+102    	; 0x200a <__addsf3x+0x7c>
    1fa4:	67 c1       	rjmp	.+718    	; 0x2274 <__fp_zero>
    1fa6:	0e f4       	brtc	.+2      	; 0x1faa <__addsf3x+0x1c>
    1fa8:	e0 95       	com	r30
    1faa:	0b 2e       	mov	r0, r27
    1fac:	ba 2f       	mov	r27, r26
    1fae:	a0 2d       	mov	r26, r0
    1fb0:	0b 01       	movw	r0, r22
    1fb2:	b9 01       	movw	r22, r18
    1fb4:	90 01       	movw	r18, r0
    1fb6:	0c 01       	movw	r0, r24
    1fb8:	ca 01       	movw	r24, r20
    1fba:	a0 01       	movw	r20, r0
    1fbc:	11 24       	eor	r1, r1
    1fbe:	ff 27       	eor	r31, r31
    1fc0:	59 1b       	sub	r21, r25
    1fc2:	99 f0       	breq	.+38     	; 0x1fea <__addsf3x+0x5c>
    1fc4:	59 3f       	cpi	r21, 0xF9	; 249
    1fc6:	50 f4       	brcc	.+20     	; 0x1fdc <__addsf3x+0x4e>
    1fc8:	50 3e       	cpi	r21, 0xE0	; 224
    1fca:	68 f1       	brcs	.+90     	; 0x2026 <__addsf3x+0x98>
    1fcc:	1a 16       	cp	r1, r26
    1fce:	f0 40       	sbci	r31, 0x00	; 0
    1fd0:	a2 2f       	mov	r26, r18
    1fd2:	23 2f       	mov	r18, r19
    1fd4:	34 2f       	mov	r19, r20
    1fd6:	44 27       	eor	r20, r20
    1fd8:	58 5f       	subi	r21, 0xF8	; 248
    1fda:	f3 cf       	rjmp	.-26     	; 0x1fc2 <__addsf3x+0x34>
    1fdc:	46 95       	lsr	r20
    1fde:	37 95       	ror	r19
    1fe0:	27 95       	ror	r18
    1fe2:	a7 95       	ror	r26
    1fe4:	f0 40       	sbci	r31, 0x00	; 0
    1fe6:	53 95       	inc	r21
    1fe8:	c9 f7       	brne	.-14     	; 0x1fdc <__addsf3x+0x4e>
    1fea:	7e f4       	brtc	.+30     	; 0x200a <__addsf3x+0x7c>
    1fec:	1f 16       	cp	r1, r31
    1fee:	ba 0b       	sbc	r27, r26
    1ff0:	62 0b       	sbc	r22, r18
    1ff2:	73 0b       	sbc	r23, r19
    1ff4:	84 0b       	sbc	r24, r20
    1ff6:	ba f0       	brmi	.+46     	; 0x2026 <__addsf3x+0x98>
    1ff8:	91 50       	subi	r25, 0x01	; 1
    1ffa:	a1 f0       	breq	.+40     	; 0x2024 <__addsf3x+0x96>
    1ffc:	ff 0f       	add	r31, r31
    1ffe:	bb 1f       	adc	r27, r27
    2000:	66 1f       	adc	r22, r22
    2002:	77 1f       	adc	r23, r23
    2004:	88 1f       	adc	r24, r24
    2006:	c2 f7       	brpl	.-16     	; 0x1ff8 <__addsf3x+0x6a>
    2008:	0e c0       	rjmp	.+28     	; 0x2026 <__addsf3x+0x98>
    200a:	ba 0f       	add	r27, r26
    200c:	62 1f       	adc	r22, r18
    200e:	73 1f       	adc	r23, r19
    2010:	84 1f       	adc	r24, r20
    2012:	48 f4       	brcc	.+18     	; 0x2026 <__addsf3x+0x98>
    2014:	87 95       	ror	r24
    2016:	77 95       	ror	r23
    2018:	67 95       	ror	r22
    201a:	b7 95       	ror	r27
    201c:	f7 95       	ror	r31
    201e:	9e 3f       	cpi	r25, 0xFE	; 254
    2020:	08 f0       	brcs	.+2      	; 0x2024 <__addsf3x+0x96>
    2022:	b3 cf       	rjmp	.-154    	; 0x1f8a <__addsf3+0x1e>
    2024:	93 95       	inc	r25
    2026:	88 0f       	add	r24, r24
    2028:	08 f0       	brcs	.+2      	; 0x202c <__addsf3x+0x9e>
    202a:	99 27       	eor	r25, r25
    202c:	ee 0f       	add	r30, r30
    202e:	97 95       	ror	r25
    2030:	87 95       	ror	r24
    2032:	08 95       	ret

00002034 <__divsf3>:
    2034:	0c d0       	rcall	.+24     	; 0x204e <__divsf3x>
    2036:	eb c0       	rjmp	.+470    	; 0x220e <__fp_round>
    2038:	e3 d0       	rcall	.+454    	; 0x2200 <__fp_pscB>
    203a:	40 f0       	brcs	.+16     	; 0x204c <__divsf3+0x18>
    203c:	da d0       	rcall	.+436    	; 0x21f2 <__fp_pscA>
    203e:	30 f0       	brcs	.+12     	; 0x204c <__divsf3+0x18>
    2040:	21 f4       	brne	.+8      	; 0x204a <__divsf3+0x16>
    2042:	5f 3f       	cpi	r21, 0xFF	; 255
    2044:	19 f0       	breq	.+6      	; 0x204c <__divsf3+0x18>
    2046:	cc c0       	rjmp	.+408    	; 0x21e0 <__fp_inf>
    2048:	51 11       	cpse	r21, r1
    204a:	15 c1       	rjmp	.+554    	; 0x2276 <__fp_szero>
    204c:	cf c0       	rjmp	.+414    	; 0x21ec <__fp_nan>

0000204e <__divsf3x>:
    204e:	f0 d0       	rcall	.+480    	; 0x2230 <__fp_split3>
    2050:	98 f3       	brcs	.-26     	; 0x2038 <__divsf3+0x4>

00002052 <__divsf3_pse>:
    2052:	99 23       	and	r25, r25
    2054:	c9 f3       	breq	.-14     	; 0x2048 <__divsf3+0x14>
    2056:	55 23       	and	r21, r21
    2058:	b1 f3       	breq	.-20     	; 0x2046 <__divsf3+0x12>
    205a:	95 1b       	sub	r25, r21
    205c:	55 0b       	sbc	r21, r21
    205e:	bb 27       	eor	r27, r27
    2060:	aa 27       	eor	r26, r26
    2062:	62 17       	cp	r22, r18
    2064:	73 07       	cpc	r23, r19
    2066:	84 07       	cpc	r24, r20
    2068:	38 f0       	brcs	.+14     	; 0x2078 <__divsf3_pse+0x26>
    206a:	9f 5f       	subi	r25, 0xFF	; 255
    206c:	5f 4f       	sbci	r21, 0xFF	; 255
    206e:	22 0f       	add	r18, r18
    2070:	33 1f       	adc	r19, r19
    2072:	44 1f       	adc	r20, r20
    2074:	aa 1f       	adc	r26, r26
    2076:	a9 f3       	breq	.-22     	; 0x2062 <__divsf3_pse+0x10>
    2078:	33 d0       	rcall	.+102    	; 0x20e0 <__divsf3_pse+0x8e>
    207a:	0e 2e       	mov	r0, r30
    207c:	3a f0       	brmi	.+14     	; 0x208c <__divsf3_pse+0x3a>
    207e:	e0 e8       	ldi	r30, 0x80	; 128
    2080:	30 d0       	rcall	.+96     	; 0x20e2 <__divsf3_pse+0x90>
    2082:	91 50       	subi	r25, 0x01	; 1
    2084:	50 40       	sbci	r21, 0x00	; 0
    2086:	e6 95       	lsr	r30
    2088:	00 1c       	adc	r0, r0
    208a:	ca f7       	brpl	.-14     	; 0x207e <__divsf3_pse+0x2c>
    208c:	29 d0       	rcall	.+82     	; 0x20e0 <__divsf3_pse+0x8e>
    208e:	fe 2f       	mov	r31, r30
    2090:	27 d0       	rcall	.+78     	; 0x20e0 <__divsf3_pse+0x8e>
    2092:	66 0f       	add	r22, r22
    2094:	77 1f       	adc	r23, r23
    2096:	88 1f       	adc	r24, r24
    2098:	bb 1f       	adc	r27, r27
    209a:	26 17       	cp	r18, r22
    209c:	37 07       	cpc	r19, r23
    209e:	48 07       	cpc	r20, r24
    20a0:	ab 07       	cpc	r26, r27
    20a2:	b0 e8       	ldi	r27, 0x80	; 128
    20a4:	09 f0       	breq	.+2      	; 0x20a8 <__divsf3_pse+0x56>
    20a6:	bb 0b       	sbc	r27, r27
    20a8:	80 2d       	mov	r24, r0
    20aa:	bf 01       	movw	r22, r30
    20ac:	ff 27       	eor	r31, r31
    20ae:	93 58       	subi	r25, 0x83	; 131
    20b0:	5f 4f       	sbci	r21, 0xFF	; 255
    20b2:	2a f0       	brmi	.+10     	; 0x20be <__divsf3_pse+0x6c>
    20b4:	9e 3f       	cpi	r25, 0xFE	; 254
    20b6:	51 05       	cpc	r21, r1
    20b8:	68 f0       	brcs	.+26     	; 0x20d4 <__divsf3_pse+0x82>
    20ba:	92 c0       	rjmp	.+292    	; 0x21e0 <__fp_inf>
    20bc:	dc c0       	rjmp	.+440    	; 0x2276 <__fp_szero>
    20be:	5f 3f       	cpi	r21, 0xFF	; 255
    20c0:	ec f3       	brlt	.-6      	; 0x20bc <__divsf3_pse+0x6a>
    20c2:	98 3e       	cpi	r25, 0xE8	; 232
    20c4:	dc f3       	brlt	.-10     	; 0x20bc <__divsf3_pse+0x6a>
    20c6:	86 95       	lsr	r24
    20c8:	77 95       	ror	r23
    20ca:	67 95       	ror	r22
    20cc:	b7 95       	ror	r27
    20ce:	f7 95       	ror	r31
    20d0:	9f 5f       	subi	r25, 0xFF	; 255
    20d2:	c9 f7       	brne	.-14     	; 0x20c6 <__divsf3_pse+0x74>
    20d4:	88 0f       	add	r24, r24
    20d6:	91 1d       	adc	r25, r1
    20d8:	96 95       	lsr	r25
    20da:	87 95       	ror	r24
    20dc:	97 f9       	bld	r25, 7
    20de:	08 95       	ret
    20e0:	e1 e0       	ldi	r30, 0x01	; 1
    20e2:	66 0f       	add	r22, r22
    20e4:	77 1f       	adc	r23, r23
    20e6:	88 1f       	adc	r24, r24
    20e8:	bb 1f       	adc	r27, r27
    20ea:	62 17       	cp	r22, r18
    20ec:	73 07       	cpc	r23, r19
    20ee:	84 07       	cpc	r24, r20
    20f0:	ba 07       	cpc	r27, r26
    20f2:	20 f0       	brcs	.+8      	; 0x20fc <__divsf3_pse+0xaa>
    20f4:	62 1b       	sub	r22, r18
    20f6:	73 0b       	sbc	r23, r19
    20f8:	84 0b       	sbc	r24, r20
    20fa:	ba 0b       	sbc	r27, r26
    20fc:	ee 1f       	adc	r30, r30
    20fe:	88 f7       	brcc	.-30     	; 0x20e2 <__divsf3_pse+0x90>
    2100:	e0 95       	com	r30
    2102:	08 95       	ret

00002104 <__fixsfsi>:
    2104:	04 d0       	rcall	.+8      	; 0x210e <__fixunssfsi>
    2106:	68 94       	set
    2108:	b1 11       	cpse	r27, r1
    210a:	b5 c0       	rjmp	.+362    	; 0x2276 <__fp_szero>
    210c:	08 95       	ret

0000210e <__fixunssfsi>:
    210e:	98 d0       	rcall	.+304    	; 0x2240 <__fp_splitA>
    2110:	88 f0       	brcs	.+34     	; 0x2134 <__fixunssfsi+0x26>
    2112:	9f 57       	subi	r25, 0x7F	; 127
    2114:	90 f0       	brcs	.+36     	; 0x213a <__fixunssfsi+0x2c>
    2116:	b9 2f       	mov	r27, r25
    2118:	99 27       	eor	r25, r25
    211a:	b7 51       	subi	r27, 0x17	; 23
    211c:	a0 f0       	brcs	.+40     	; 0x2146 <__fixunssfsi+0x38>
    211e:	d1 f0       	breq	.+52     	; 0x2154 <__fixunssfsi+0x46>
    2120:	66 0f       	add	r22, r22
    2122:	77 1f       	adc	r23, r23
    2124:	88 1f       	adc	r24, r24
    2126:	99 1f       	adc	r25, r25
    2128:	1a f0       	brmi	.+6      	; 0x2130 <__fixunssfsi+0x22>
    212a:	ba 95       	dec	r27
    212c:	c9 f7       	brne	.-14     	; 0x2120 <__fixunssfsi+0x12>
    212e:	12 c0       	rjmp	.+36     	; 0x2154 <__fixunssfsi+0x46>
    2130:	b1 30       	cpi	r27, 0x01	; 1
    2132:	81 f0       	breq	.+32     	; 0x2154 <__fixunssfsi+0x46>
    2134:	9f d0       	rcall	.+318    	; 0x2274 <__fp_zero>
    2136:	b1 e0       	ldi	r27, 0x01	; 1
    2138:	08 95       	ret
    213a:	9c c0       	rjmp	.+312    	; 0x2274 <__fp_zero>
    213c:	67 2f       	mov	r22, r23
    213e:	78 2f       	mov	r23, r24
    2140:	88 27       	eor	r24, r24
    2142:	b8 5f       	subi	r27, 0xF8	; 248
    2144:	39 f0       	breq	.+14     	; 0x2154 <__fixunssfsi+0x46>
    2146:	b9 3f       	cpi	r27, 0xF9	; 249
    2148:	cc f3       	brlt	.-14     	; 0x213c <__fixunssfsi+0x2e>
    214a:	86 95       	lsr	r24
    214c:	77 95       	ror	r23
    214e:	67 95       	ror	r22
    2150:	b3 95       	inc	r27
    2152:	d9 f7       	brne	.-10     	; 0x214a <__fixunssfsi+0x3c>
    2154:	3e f4       	brtc	.+14     	; 0x2164 <__fixunssfsi+0x56>
    2156:	90 95       	com	r25
    2158:	80 95       	com	r24
    215a:	70 95       	com	r23
    215c:	61 95       	neg	r22
    215e:	7f 4f       	sbci	r23, 0xFF	; 255
    2160:	8f 4f       	sbci	r24, 0xFF	; 255
    2162:	9f 4f       	sbci	r25, 0xFF	; 255
    2164:	08 95       	ret

00002166 <__floatunsisf>:
    2166:	e8 94       	clt
    2168:	09 c0       	rjmp	.+18     	; 0x217c <__floatsisf+0x12>

0000216a <__floatsisf>:
    216a:	97 fb       	bst	r25, 7
    216c:	3e f4       	brtc	.+14     	; 0x217c <__floatsisf+0x12>
    216e:	90 95       	com	r25
    2170:	80 95       	com	r24
    2172:	70 95       	com	r23
    2174:	61 95       	neg	r22
    2176:	7f 4f       	sbci	r23, 0xFF	; 255
    2178:	8f 4f       	sbci	r24, 0xFF	; 255
    217a:	9f 4f       	sbci	r25, 0xFF	; 255
    217c:	99 23       	and	r25, r25
    217e:	a9 f0       	breq	.+42     	; 0x21aa <__floatsisf+0x40>
    2180:	f9 2f       	mov	r31, r25
    2182:	96 e9       	ldi	r25, 0x96	; 150
    2184:	bb 27       	eor	r27, r27
    2186:	93 95       	inc	r25
    2188:	f6 95       	lsr	r31
    218a:	87 95       	ror	r24
    218c:	77 95       	ror	r23
    218e:	67 95       	ror	r22
    2190:	b7 95       	ror	r27
    2192:	f1 11       	cpse	r31, r1
    2194:	f8 cf       	rjmp	.-16     	; 0x2186 <__floatsisf+0x1c>
    2196:	fa f4       	brpl	.+62     	; 0x21d6 <__floatsisf+0x6c>
    2198:	bb 0f       	add	r27, r27
    219a:	11 f4       	brne	.+4      	; 0x21a0 <__floatsisf+0x36>
    219c:	60 ff       	sbrs	r22, 0
    219e:	1b c0       	rjmp	.+54     	; 0x21d6 <__floatsisf+0x6c>
    21a0:	6f 5f       	subi	r22, 0xFF	; 255
    21a2:	7f 4f       	sbci	r23, 0xFF	; 255
    21a4:	8f 4f       	sbci	r24, 0xFF	; 255
    21a6:	9f 4f       	sbci	r25, 0xFF	; 255
    21a8:	16 c0       	rjmp	.+44     	; 0x21d6 <__floatsisf+0x6c>
    21aa:	88 23       	and	r24, r24
    21ac:	11 f0       	breq	.+4      	; 0x21b2 <__floatsisf+0x48>
    21ae:	96 e9       	ldi	r25, 0x96	; 150
    21b0:	11 c0       	rjmp	.+34     	; 0x21d4 <__floatsisf+0x6a>
    21b2:	77 23       	and	r23, r23
    21b4:	21 f0       	breq	.+8      	; 0x21be <__floatsisf+0x54>
    21b6:	9e e8       	ldi	r25, 0x8E	; 142
    21b8:	87 2f       	mov	r24, r23
    21ba:	76 2f       	mov	r23, r22
    21bc:	05 c0       	rjmp	.+10     	; 0x21c8 <__floatsisf+0x5e>
    21be:	66 23       	and	r22, r22
    21c0:	71 f0       	breq	.+28     	; 0x21de <__floatsisf+0x74>
    21c2:	96 e8       	ldi	r25, 0x86	; 134
    21c4:	86 2f       	mov	r24, r22
    21c6:	70 e0       	ldi	r23, 0x00	; 0
    21c8:	60 e0       	ldi	r22, 0x00	; 0
    21ca:	2a f0       	brmi	.+10     	; 0x21d6 <__floatsisf+0x6c>
    21cc:	9a 95       	dec	r25
    21ce:	66 0f       	add	r22, r22
    21d0:	77 1f       	adc	r23, r23
    21d2:	88 1f       	adc	r24, r24
    21d4:	da f7       	brpl	.-10     	; 0x21cc <__floatsisf+0x62>
    21d6:	88 0f       	add	r24, r24
    21d8:	96 95       	lsr	r25
    21da:	87 95       	ror	r24
    21dc:	97 f9       	bld	r25, 7
    21de:	08 95       	ret

000021e0 <__fp_inf>:
    21e0:	97 f9       	bld	r25, 7
    21e2:	9f 67       	ori	r25, 0x7F	; 127
    21e4:	80 e8       	ldi	r24, 0x80	; 128
    21e6:	70 e0       	ldi	r23, 0x00	; 0
    21e8:	60 e0       	ldi	r22, 0x00	; 0
    21ea:	08 95       	ret

000021ec <__fp_nan>:
    21ec:	9f ef       	ldi	r25, 0xFF	; 255
    21ee:	80 ec       	ldi	r24, 0xC0	; 192
    21f0:	08 95       	ret

000021f2 <__fp_pscA>:
    21f2:	00 24       	eor	r0, r0
    21f4:	0a 94       	dec	r0
    21f6:	16 16       	cp	r1, r22
    21f8:	17 06       	cpc	r1, r23
    21fa:	18 06       	cpc	r1, r24
    21fc:	09 06       	cpc	r0, r25
    21fe:	08 95       	ret

00002200 <__fp_pscB>:
    2200:	00 24       	eor	r0, r0
    2202:	0a 94       	dec	r0
    2204:	12 16       	cp	r1, r18
    2206:	13 06       	cpc	r1, r19
    2208:	14 06       	cpc	r1, r20
    220a:	05 06       	cpc	r0, r21
    220c:	08 95       	ret

0000220e <__fp_round>:
    220e:	09 2e       	mov	r0, r25
    2210:	03 94       	inc	r0
    2212:	00 0c       	add	r0, r0
    2214:	11 f4       	brne	.+4      	; 0x221a <__fp_round+0xc>
    2216:	88 23       	and	r24, r24
    2218:	52 f0       	brmi	.+20     	; 0x222e <__fp_round+0x20>
    221a:	bb 0f       	add	r27, r27
    221c:	40 f4       	brcc	.+16     	; 0x222e <__fp_round+0x20>
    221e:	bf 2b       	or	r27, r31
    2220:	11 f4       	brne	.+4      	; 0x2226 <__fp_round+0x18>
    2222:	60 ff       	sbrs	r22, 0
    2224:	04 c0       	rjmp	.+8      	; 0x222e <__fp_round+0x20>
    2226:	6f 5f       	subi	r22, 0xFF	; 255
    2228:	7f 4f       	sbci	r23, 0xFF	; 255
    222a:	8f 4f       	sbci	r24, 0xFF	; 255
    222c:	9f 4f       	sbci	r25, 0xFF	; 255
    222e:	08 95       	ret

00002230 <__fp_split3>:
    2230:	57 fd       	sbrc	r21, 7
    2232:	90 58       	subi	r25, 0x80	; 128
    2234:	44 0f       	add	r20, r20
    2236:	55 1f       	adc	r21, r21
    2238:	59 f0       	breq	.+22     	; 0x2250 <__fp_splitA+0x10>
    223a:	5f 3f       	cpi	r21, 0xFF	; 255
    223c:	71 f0       	breq	.+28     	; 0x225a <__fp_splitA+0x1a>
    223e:	47 95       	ror	r20

00002240 <__fp_splitA>:
    2240:	88 0f       	add	r24, r24
    2242:	97 fb       	bst	r25, 7
    2244:	99 1f       	adc	r25, r25
    2246:	61 f0       	breq	.+24     	; 0x2260 <__fp_splitA+0x20>
    2248:	9f 3f       	cpi	r25, 0xFF	; 255
    224a:	79 f0       	breq	.+30     	; 0x226a <__fp_splitA+0x2a>
    224c:	87 95       	ror	r24
    224e:	08 95       	ret
    2250:	12 16       	cp	r1, r18
    2252:	13 06       	cpc	r1, r19
    2254:	14 06       	cpc	r1, r20
    2256:	55 1f       	adc	r21, r21
    2258:	f2 cf       	rjmp	.-28     	; 0x223e <__fp_split3+0xe>
    225a:	46 95       	lsr	r20
    225c:	f1 df       	rcall	.-30     	; 0x2240 <__fp_splitA>
    225e:	08 c0       	rjmp	.+16     	; 0x2270 <__fp_splitA+0x30>
    2260:	16 16       	cp	r1, r22
    2262:	17 06       	cpc	r1, r23
    2264:	18 06       	cpc	r1, r24
    2266:	99 1f       	adc	r25, r25
    2268:	f1 cf       	rjmp	.-30     	; 0x224c <__fp_splitA+0xc>
    226a:	86 95       	lsr	r24
    226c:	71 05       	cpc	r23, r1
    226e:	61 05       	cpc	r22, r1
    2270:	08 94       	sec
    2272:	08 95       	ret

00002274 <__fp_zero>:
    2274:	e8 94       	clt

00002276 <__fp_szero>:
    2276:	bb 27       	eor	r27, r27
    2278:	66 27       	eor	r22, r22
    227a:	77 27       	eor	r23, r23
    227c:	cb 01       	movw	r24, r22
    227e:	97 f9       	bld	r25, 7
    2280:	08 95       	ret

00002282 <__gesf2>:
    2282:	66 d0       	rcall	.+204    	; 0x2350 <__fp_cmp>
    2284:	08 f4       	brcc	.+2      	; 0x2288 <__gesf2+0x6>
    2286:	8f ef       	ldi	r24, 0xFF	; 255
    2288:	08 95       	ret

0000228a <__mulsf3>:
    228a:	0b d0       	rcall	.+22     	; 0x22a2 <__mulsf3x>
    228c:	c0 cf       	rjmp	.-128    	; 0x220e <__fp_round>
    228e:	b1 df       	rcall	.-158    	; 0x21f2 <__fp_pscA>
    2290:	28 f0       	brcs	.+10     	; 0x229c <__mulsf3+0x12>
    2292:	b6 df       	rcall	.-148    	; 0x2200 <__fp_pscB>
    2294:	18 f0       	brcs	.+6      	; 0x229c <__mulsf3+0x12>
    2296:	95 23       	and	r25, r21
    2298:	09 f0       	breq	.+2      	; 0x229c <__mulsf3+0x12>
    229a:	a2 cf       	rjmp	.-188    	; 0x21e0 <__fp_inf>
    229c:	a7 cf       	rjmp	.-178    	; 0x21ec <__fp_nan>
    229e:	11 24       	eor	r1, r1
    22a0:	ea cf       	rjmp	.-44     	; 0x2276 <__fp_szero>

000022a2 <__mulsf3x>:
    22a2:	c6 df       	rcall	.-116    	; 0x2230 <__fp_split3>
    22a4:	a0 f3       	brcs	.-24     	; 0x228e <__mulsf3+0x4>

000022a6 <__mulsf3_pse>:
    22a6:	95 9f       	mul	r25, r21
    22a8:	d1 f3       	breq	.-12     	; 0x229e <__mulsf3+0x14>
    22aa:	95 0f       	add	r25, r21
    22ac:	50 e0       	ldi	r21, 0x00	; 0
    22ae:	55 1f       	adc	r21, r21
    22b0:	62 9f       	mul	r22, r18
    22b2:	f0 01       	movw	r30, r0
    22b4:	72 9f       	mul	r23, r18
    22b6:	bb 27       	eor	r27, r27
    22b8:	f0 0d       	add	r31, r0
    22ba:	b1 1d       	adc	r27, r1
    22bc:	63 9f       	mul	r22, r19
    22be:	aa 27       	eor	r26, r26
    22c0:	f0 0d       	add	r31, r0
    22c2:	b1 1d       	adc	r27, r1
    22c4:	aa 1f       	adc	r26, r26
    22c6:	64 9f       	mul	r22, r20
    22c8:	66 27       	eor	r22, r22
    22ca:	b0 0d       	add	r27, r0
    22cc:	a1 1d       	adc	r26, r1
    22ce:	66 1f       	adc	r22, r22
    22d0:	82 9f       	mul	r24, r18
    22d2:	22 27       	eor	r18, r18
    22d4:	b0 0d       	add	r27, r0
    22d6:	a1 1d       	adc	r26, r1
    22d8:	62 1f       	adc	r22, r18
    22da:	73 9f       	mul	r23, r19
    22dc:	b0 0d       	add	r27, r0
    22de:	a1 1d       	adc	r26, r1
    22e0:	62 1f       	adc	r22, r18
    22e2:	83 9f       	mul	r24, r19
    22e4:	a0 0d       	add	r26, r0
    22e6:	61 1d       	adc	r22, r1
    22e8:	22 1f       	adc	r18, r18
    22ea:	74 9f       	mul	r23, r20
    22ec:	33 27       	eor	r19, r19
    22ee:	a0 0d       	add	r26, r0
    22f0:	61 1d       	adc	r22, r1
    22f2:	23 1f       	adc	r18, r19
    22f4:	84 9f       	mul	r24, r20
    22f6:	60 0d       	add	r22, r0
    22f8:	21 1d       	adc	r18, r1
    22fa:	82 2f       	mov	r24, r18
    22fc:	76 2f       	mov	r23, r22
    22fe:	6a 2f       	mov	r22, r26
    2300:	11 24       	eor	r1, r1
    2302:	9f 57       	subi	r25, 0x7F	; 127
    2304:	50 40       	sbci	r21, 0x00	; 0
    2306:	8a f0       	brmi	.+34     	; 0x232a <__mulsf3_pse+0x84>
    2308:	e1 f0       	breq	.+56     	; 0x2342 <__mulsf3_pse+0x9c>
    230a:	88 23       	and	r24, r24
    230c:	4a f0       	brmi	.+18     	; 0x2320 <__mulsf3_pse+0x7a>
    230e:	ee 0f       	add	r30, r30
    2310:	ff 1f       	adc	r31, r31
    2312:	bb 1f       	adc	r27, r27
    2314:	66 1f       	adc	r22, r22
    2316:	77 1f       	adc	r23, r23
    2318:	88 1f       	adc	r24, r24
    231a:	91 50       	subi	r25, 0x01	; 1
    231c:	50 40       	sbci	r21, 0x00	; 0
    231e:	a9 f7       	brne	.-22     	; 0x230a <__mulsf3_pse+0x64>
    2320:	9e 3f       	cpi	r25, 0xFE	; 254
    2322:	51 05       	cpc	r21, r1
    2324:	70 f0       	brcs	.+28     	; 0x2342 <__mulsf3_pse+0x9c>
    2326:	5c cf       	rjmp	.-328    	; 0x21e0 <__fp_inf>
    2328:	a6 cf       	rjmp	.-180    	; 0x2276 <__fp_szero>
    232a:	5f 3f       	cpi	r21, 0xFF	; 255
    232c:	ec f3       	brlt	.-6      	; 0x2328 <__mulsf3_pse+0x82>
    232e:	98 3e       	cpi	r25, 0xE8	; 232
    2330:	dc f3       	brlt	.-10     	; 0x2328 <__mulsf3_pse+0x82>
    2332:	86 95       	lsr	r24
    2334:	77 95       	ror	r23
    2336:	67 95       	ror	r22
    2338:	b7 95       	ror	r27
    233a:	f7 95       	ror	r31
    233c:	e7 95       	ror	r30
    233e:	9f 5f       	subi	r25, 0xFF	; 255
    2340:	c1 f7       	brne	.-16     	; 0x2332 <__mulsf3_pse+0x8c>
    2342:	fe 2b       	or	r31, r30
    2344:	88 0f       	add	r24, r24
    2346:	91 1d       	adc	r25, r1
    2348:	96 95       	lsr	r25
    234a:	87 95       	ror	r24
    234c:	97 f9       	bld	r25, 7
    234e:	08 95       	ret

00002350 <__fp_cmp>:
    2350:	99 0f       	add	r25, r25
    2352:	00 08       	sbc	r0, r0
    2354:	55 0f       	add	r21, r21
    2356:	aa 0b       	sbc	r26, r26
    2358:	e0 e8       	ldi	r30, 0x80	; 128
    235a:	fe ef       	ldi	r31, 0xFE	; 254
    235c:	16 16       	cp	r1, r22
    235e:	17 06       	cpc	r1, r23
    2360:	e8 07       	cpc	r30, r24
    2362:	f9 07       	cpc	r31, r25
    2364:	c0 f0       	brcs	.+48     	; 0x2396 <__fp_cmp+0x46>
    2366:	12 16       	cp	r1, r18
    2368:	13 06       	cpc	r1, r19
    236a:	e4 07       	cpc	r30, r20
    236c:	f5 07       	cpc	r31, r21
    236e:	98 f0       	brcs	.+38     	; 0x2396 <__fp_cmp+0x46>
    2370:	62 1b       	sub	r22, r18
    2372:	73 0b       	sbc	r23, r19
    2374:	84 0b       	sbc	r24, r20
    2376:	95 0b       	sbc	r25, r21
    2378:	39 f4       	brne	.+14     	; 0x2388 <__fp_cmp+0x38>
    237a:	0a 26       	eor	r0, r26
    237c:	61 f0       	breq	.+24     	; 0x2396 <__fp_cmp+0x46>
    237e:	23 2b       	or	r18, r19
    2380:	24 2b       	or	r18, r20
    2382:	25 2b       	or	r18, r21
    2384:	21 f4       	brne	.+8      	; 0x238e <__fp_cmp+0x3e>
    2386:	08 95       	ret
    2388:	0a 26       	eor	r0, r26
    238a:	09 f4       	brne	.+2      	; 0x238e <__fp_cmp+0x3e>
    238c:	a1 40       	sbci	r26, 0x01	; 1
    238e:	a6 95       	lsr	r26
    2390:	8f ef       	ldi	r24, 0xFF	; 255
    2392:	81 1d       	adc	r24, r1
    2394:	81 1d       	adc	r24, r1
    2396:	08 95       	ret

00002398 <__eerd_byte_m328p>:
    2398:	f9 99       	sbic	0x1f, 1	; 31
    239a:	fe cf       	rjmp	.-4      	; 0x2398 <__eerd_byte_m328p>
    239c:	92 bd       	out	0x22, r25	; 34
    239e:	81 bd       	out	0x21, r24	; 33
    23a0:	f8 9a       	sbi	0x1f, 0	; 31
    23a2:	99 27       	eor	r25, r25
    23a4:	80 b5       	in	r24, 0x20	; 32
    23a6:	08 95       	ret

000023a8 <__eewr_byte_m328p>:
    23a8:	26 2f       	mov	r18, r22

000023aa <__eewr_r18_m328p>:
    23aa:	f9 99       	sbic	0x1f, 1	; 31
    23ac:	fe cf       	rjmp	.-4      	; 0x23aa <__eewr_r18_m328p>
    23ae:	1f ba       	out	0x1f, r1	; 31
    23b0:	92 bd       	out	0x22, r25	; 34
    23b2:	81 bd       	out	0x21, r24	; 33
    23b4:	20 bd       	out	0x20, r18	; 32
    23b6:	0f b6       	in	r0, 0x3f	; 63
    23b8:	f8 94       	cli
    23ba:	fa 9a       	sbi	0x1f, 2	; 31
    23bc:	f9 9a       	sbi	0x1f, 1	; 31
    23be:	0f be       	out	0x3f, r0	; 63
    23c0:	01 96       	adiw	r24, 0x01	; 1
    23c2:	08 95       	ret

000023c4 <_exit>:
    23c4:	f8 94       	cli

000023c6 <__stop_program>:
    23c6:	ff cf       	rjmp	.-2      	; 0x23c6 <__stop_program>
