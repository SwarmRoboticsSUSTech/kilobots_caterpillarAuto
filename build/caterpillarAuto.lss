
build/caterpillarAuto.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
       8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
       c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      18:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__vector_6>
      1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      2c:	0c 94 15 0b 	jmp	0x162a	; 0x162a <__vector_11>
      30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      38:	0c 94 75 0a 	jmp	0x14ea	; 0x14ea <__vector_14>
      3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      5c:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__vector_23>
      60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      68:	b2 05       	cpc	r27, r2
      6a:	2e 06       	cpc	r2, r30
      6c:	86 05       	cpc	r24, r6
      6e:	7c 05       	cpc	r23, r12
      70:	83 05       	cpc	r24, r3
      72:	10 06       	cpc	r1, r16
      74:	05 06       	cpc	r0, r21
      76:	93 0c       	add	r9, r3
      78:	77 0b       	sbc	r23, r23
      7a:	77 0b       	sbc	r23, r23
      7c:	90 0c       	add	r9, r0
      7e:	9c 0c       	add	r9, r12
      80:	8c 0c       	add	r8, r12
      82:	a3 0c       	add	r10, r3
      84:	9f 0c       	add	r9, r15
      86:	a7 0c       	add	r10, r7
      88:	60 0c       	add	r6, r0
      8a:	32 0c       	add	r3, r2

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
    wdt_disable();
      9a:	88 e1       	ldi	r24, 0x18	; 24
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	80 93 60 00 	sts	0x0060, r24
      a4:	10 92 60 00 	sts	0x0060, r1
      a8:	0f be       	out	0x3f, r0	; 63

000000aa <__do_copy_data>:
      aa:	11 e0       	ldi	r17, 0x01	; 1
      ac:	a0 e0       	ldi	r26, 0x00	; 0
      ae:	b1 e0       	ldi	r27, 0x01	; 1
      b0:	e2 eb       	ldi	r30, 0xB2	; 178
      b2:	f0 e2       	ldi	r31, 0x20	; 32
      b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x10>
      b6:	05 90       	lpm	r0, Z+
      b8:	0d 92       	st	X+, r0
      ba:	a6 32       	cpi	r26, 0x26	; 38
      bc:	b1 07       	cpc	r27, r17
      be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0xc>

000000c0 <__do_clear_bss>:
      c0:	21 e0       	ldi	r18, 0x01	; 1
      c2:	a6 e2       	ldi	r26, 0x26	; 38
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
      c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
      ca:	ae 3b       	cpi	r26, 0xBE	; 190
      cc:	b2 07       	cpc	r27, r18
      ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
      d0:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <main>
      d4:	0c 94 57 10 	jmp	0x20ae	; 0x20ae <_exit>

000000d8 <__bad_interrupt>:
      d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <setup>:

void setup()
{   
    //If the robot is the seed, its gradient should be 0: overwrite the 
    // previously set value of GRADIENT_MAX.
    if (kilo_uid == SEED_ID)
      dc:	80 91 b9 01 	lds	r24, 0x01B9
      e0:	90 91 ba 01 	lds	r25, 0x01BA
      e4:	89 2b       	or	r24, r25
      e6:	b1 f5       	brne	.+108    	; 0x154 <setup+0x78>
    {   
        own_gradient = 0;
      e8:	10 92 19 01 	sts	0x0119, r1
      ec:	10 92 18 01 	sts	0x0118, r1
		distance_to_motivator = DISTANCE_COLLIDE;
      f0:	88 e2       	ldi	r24, 0x28	; 40
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	90 93 0d 01 	sts	0x010D, r25
      f8:	80 93 0c 01 	sts	0x010C, r24
		update_distance_to_motivator = UPDATE;
      fc:	81 e0       	ldi	r24, 0x01	; 1
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	90 93 39 01 	sts	0x0139, r25
     104:	80 93 38 01 	sts	0x0138, r24
		update_state_motivator = UPDATE;
     108:	90 93 35 01 	sts	0x0135, r25
     10c:	80 93 34 01 	sts	0x0134, r24
		flag_minor = YES;
     110:	90 93 3d 01 	sts	0x013D, r25
     114:	80 93 3c 01 	sts	0x013C, r24
		state_motivator = COMPLETED;
     118:	85 e0       	ldi	r24, 0x05	; 5
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	90 93 2f 01 	sts	0x012F, r25
     120:	80 93 2e 01 	sts	0x012E, r24
     124:	88 e2       	ldi	r24, 0x28	; 40
     126:	95 e0       	ldi	r25, 0x05	; 5
     128:	20 e0       	ldi	r18, 0x00	; 0
    }   
        
    // Set the transmission message.
    message.type = NORMAL;
     12a:	10 92 4d 01 	sts	0x014D, r1
    message.data[0] = own_gradient;
     12e:	20 93 44 01 	sts	0x0144, r18
	// Sequence has not been formed completely.
	message.data[1] = formed_state;
     132:	20 91 26 01 	lds	r18, 0x0126
     136:	20 93 45 01 	sts	0x0145, r18
	message.data[2] = state_motivator;
     13a:	90 93 46 01 	sts	0x0146, r25
	message.data[3] = distance_to_motivator;
     13e:	80 93 47 01 	sts	0x0147, r24
	message.crc = message_crc(&message);
     142:	84 e4       	ldi	r24, 0x44	; 68
     144:	91 e0       	ldi	r25, 0x01	; 1
     146:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <message_crc>
     14a:	90 93 4f 01 	sts	0x014F, r25
     14e:	80 93 4e 01 	sts	0x014E, r24
     152:	08 95       	ret
     154:	20 91 18 01 	lds	r18, 0x0118
     158:	90 91 2e 01 	lds	r25, 0x012E
     15c:	80 91 0c 01 	lds	r24, 0x010C
     160:	e4 cf       	rjmp	.-56     	; 0x12a <setup+0x4e>

00000162 <message_tx>:
}


message_t *message_tx()
{
	message.data[0] = own_gradient;
     162:	80 91 18 01 	lds	r24, 0x0118
     166:	80 93 44 01 	sts	0x0144, r24
	message.data[1] = formed_state;
     16a:	80 91 26 01 	lds	r24, 0x0126
     16e:	80 93 45 01 	sts	0x0145, r24
	message.data[2] = state_myself;
     172:	80 91 2c 01 	lds	r24, 0x012C
     176:	80 93 46 01 	sts	0x0146, r24
	message.data[3] = distance_to_motivator;
     17a:	80 91 0c 01 	lds	r24, 0x010C
     17e:	80 93 47 01 	sts	0x0147, r24
        default:
             set_color(RGB(0, 1, 1));
             break;
    }
*/	
	message.crc = message_crc(&message);
     182:	84 e4       	ldi	r24, 0x44	; 68
     184:	91 e0       	ldi	r25, 0x01	; 1
     186:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <message_crc>
     18a:	90 93 4f 01 	sts	0x014F, r25
     18e:	80 93 4e 01 	sts	0x014E, r24
    return &message;
}
     192:	84 e4       	ldi	r24, 0x44	; 68
     194:	91 e0       	ldi	r25, 0x01	; 1
     196:	08 95       	ret

00000198 <message_rx>:

void message_rx(message_t *m, distance_measurement_t *d)
{
     198:	cf 92       	push	r12
     19a:	df 92       	push	r13
     19c:	ef 92       	push	r14
     19e:	ff 92       	push	r15
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
     1a4:	ec 01       	movw	r28, r24
     1a6:	cb 01       	movw	r24, r22
	//set_color(RGB(0, 0, 0));
	//set_color(RGB(1, 0, 0));
    received_gradient = m->data[0];
     1a8:	28 81       	ld	r18, Y
     1aa:	30 e0       	ldi	r19, 0x00	; 0
     1ac:	30 93 33 01 	sts	0x0133, r19
     1b0:	20 93 32 01 	sts	0x0132, r18
    distance = estimate_distance(d);
     1b4:	0e 94 ae 07 	call	0xf5c	; 0xf5c <estimate_distance>
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	90 93 0f 01 	sts	0x010F, r25
     1be:	80 93 0e 01 	sts	0x010E, r24
	// In the valid distance.
	if (distance <= DISTANCE_GRADIENT)
     1c2:	85 36       	cpi	r24, 0x65	; 101
     1c4:	91 05       	cpc	r25, r1
     1c6:	0c f0       	brlt	.+2      	; 0x1ca <message_rx+0x32>
     1c8:	6e c0       	rjmp	.+220    	; 0x2a6 <message_rx+0x10e>
	{
		last_gradient_anchored = kilo_ticks;
     1ca:	40 91 83 01 	lds	r20, 0x0183
     1ce:	50 91 84 01 	lds	r21, 0x0184
     1d2:	60 91 85 01 	lds	r22, 0x0185
     1d6:	70 91 86 01 	lds	r23, 0x0186
     1da:	40 93 54 01 	sts	0x0154, r20
     1de:	50 93 55 01 	sts	0x0155, r21
     1e2:	60 93 56 01 	sts	0x0156, r22
     1e6:	70 93 57 01 	sts	0x0157, r23
		// The message was sent by my motivated.
		// I found someone's gradient maxer than mine in the world.
		// My formed state is determined by my maxer.
		if (received_gradient > own_gradient)
     1ea:	20 91 32 01 	lds	r18, 0x0132
     1ee:	30 91 33 01 	lds	r19, 0x0133
     1f2:	e0 91 18 01 	lds	r30, 0x0118
     1f6:	f0 91 19 01 	lds	r31, 0x0119
     1fa:	e2 17       	cp	r30, r18
     1fc:	f3 07       	cpc	r31, r19
     1fe:	0c f0       	brlt	.+2      	; 0x202 <message_rx+0x6a>
     200:	59 c0       	rjmp	.+178    	; 0x2b4 <message_rx+0x11c>
		{
			last_found_maxer = kilo_ticks;
     202:	40 91 83 01 	lds	r20, 0x0183
     206:	50 91 84 01 	lds	r21, 0x0184
     20a:	60 91 85 01 	lds	r22, 0x0185
     20e:	70 91 86 01 	lds	r23, 0x0186
     212:	40 93 58 01 	sts	0x0158, r20
     216:	50 93 59 01 	sts	0x0159, r21
     21a:	60 93 5a 01 	sts	0x015A, r22
     21e:	70 93 5b 01 	sts	0x015B, r23
			flag_maxest = NO;
     222:	10 92 3f 01 	sts	0x013F, r1
     226:	10 92 3e 01 	sts	0x013E, r1
			if (received_gradient == (own_gradient + 1))
     22a:	31 96       	adiw	r30, 0x01	; 1
     22c:	2e 17       	cp	r18, r30
     22e:	3f 07       	cpc	r19, r31
     230:	09 f4       	brne	.+2      	; 0x234 <message_rx+0x9c>
     232:	ba c0       	rjmp	.+372    	; 0x3a8 <message_rx+0x210>
     234:	80 91 b9 01 	lds	r24, 0x01B9
     238:	90 91 ba 01 	lds	r25, 0x01BA
		//flag_maxest = NO;
		
		// I have neighbours whose gradient is minor than mine.
		// Meanwhile long time no find gradient maxer than mine.
		// I am the maxest one in my local world.
		if((kilo_uid != SEED_ID) && (kilo_ticks > (last_found_maxer + TIME_CHECK_MAXER)))
     23c:	89 2b       	or	r24, r25
     23e:	99 f1       	breq	.+102    	; 0x2a6 <message_rx+0x10e>
     240:	40 91 83 01 	lds	r20, 0x0183
     244:	50 91 84 01 	lds	r21, 0x0184
     248:	60 91 85 01 	lds	r22, 0x0185
     24c:	70 91 86 01 	lds	r23, 0x0186
     250:	80 91 58 01 	lds	r24, 0x0158
     254:	90 91 59 01 	lds	r25, 0x0159
     258:	a0 91 5a 01 	lds	r26, 0x015A
     25c:	b0 91 5b 01 	lds	r27, 0x015B
     260:	80 56       	subi	r24, 0x60	; 96
     262:	9f 4f       	sbci	r25, 0xFF	; 255
     264:	af 4f       	sbci	r26, 0xFF	; 255
     266:	bf 4f       	sbci	r27, 0xFF	; 255
     268:	84 17       	cp	r24, r20
     26a:	95 07       	cpc	r25, r21
     26c:	a6 07       	cpc	r26, r22
     26e:	b7 07       	cpc	r27, r23
     270:	d0 f4       	brcc	.+52     	; 0x2a6 <message_rx+0x10e>
		{
			formed_state = FORMED_OK;
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	90 93 27 01 	sts	0x0127, r25
     27a:	80 93 26 01 	sts	0x0126, r24
			state_motivated = COMPLETED;
     27e:	25 e0       	ldi	r18, 0x05	; 5
     280:	30 e0       	ldi	r19, 0x00	; 0
     282:	30 93 31 01 	sts	0x0131, r19
     286:	20 93 30 01 	sts	0x0130, r18
			flag_maxest = YES;
     28a:	90 93 3f 01 	sts	0x013F, r25
     28e:	80 93 3e 01 	sts	0x013E, r24
			distance_to_motivated = DISTANCE_MAX;
     292:	24 e6       	ldi	r18, 0x64	; 100
     294:	30 e0       	ldi	r19, 0x00	; 0
     296:	30 93 07 01 	sts	0x0107, r19
     29a:	20 93 06 01 	sts	0x0106, r18
			update_distance_to_motivated = UPDATE;
     29e:	90 93 3b 01 	sts	0x013B, r25
     2a2:	80 93 3a 01 	sts	0x013A, r24
			update_state_motivator = UPDATE;
			set_color(RGB(1, 0, 1));
		}
		*/
	}	
}
     2a6:	df 91       	pop	r29
     2a8:	cf 91       	pop	r28
     2aa:	ff 90       	pop	r15
     2ac:	ef 90       	pop	r14
     2ae:	df 90       	pop	r13
     2b0:	cf 90       	pop	r12
     2b2:	08 95       	ret
				update_distance_to_motivated = UPDATE;
			}
		}
		// That guy has the same gradient with mine.
		// There needs a comparison between us.
		else if ((received_gradient == own_gradient) && (received_gradient != GRADIENT_MAX))
     2b4:	2e 17       	cp	r18, r30
     2b6:	3f 07       	cpc	r19, r31
     2b8:	b9 f1       	breq	.+110    	; 0x328 <message_rx+0x190>
				update_distance_to_motivator = UPDATE;
			}
		}
		// received_gradient < own_gradient
		// The message was sent by my motivator.
		else if (kilo_uid != SEED_ID)
     2ba:	40 91 b9 01 	lds	r20, 0x01B9
     2be:	50 91 ba 01 	lds	r21, 0x01BA
     2c2:	45 2b       	or	r20, r21
     2c4:	81 f3       	breq	.-32     	; 0x2a6 <message_rx+0x10e>
		{
			if (((own_gradient - received_gradient) == 2) || ((own_gradient - received_gradient) == 3))
     2c6:	e2 1b       	sub	r30, r18
     2c8:	f3 0b       	sbc	r31, r19
     2ca:	32 97       	sbiw	r30, 0x02	; 2
     2cc:	32 97       	sbiw	r30, 0x02	; 2
     2ce:	08 f4       	brcc	.+2      	; 0x2d2 <message_rx+0x13a>
     2d0:	9f c0       	rjmp	.+318    	; 0x410 <message_rx+0x278>
					update_distance_to_motivator = UPDATE;
				}
			}
			else
			{
				last_found_minor = kilo_ticks;
     2d2:	40 91 83 01 	lds	r20, 0x0183
     2d6:	50 91 84 01 	lds	r21, 0x0184
     2da:	60 91 85 01 	lds	r22, 0x0185
     2de:	70 91 86 01 	lds	r23, 0x0186
     2e2:	40 93 5c 01 	sts	0x015C, r20
     2e6:	50 93 5d 01 	sts	0x015D, r21
     2ea:	60 93 5e 01 	sts	0x015E, r22
     2ee:	70 93 5f 01 	sts	0x015F, r23
				own_gradient = received_gradient + 1;
     2f2:	2f 5f       	subi	r18, 0xFF	; 255
     2f4:	3f 4f       	sbci	r19, 0xFF	; 255
     2f6:	30 93 19 01 	sts	0x0119, r19
     2fa:	20 93 18 01 	sts	0x0118, r18
				state_motivator =  m->data[2];
     2fe:	2a 81       	ldd	r18, Y+2	; 0x02
     300:	30 e0       	ldi	r19, 0x00	; 0
     302:	30 93 2f 01 	sts	0x012F, r19
     306:	20 93 2e 01 	sts	0x012E, r18
				update_state_motivator = UPDATE;
     30a:	21 e0       	ldi	r18, 0x01	; 1
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	30 93 35 01 	sts	0x0135, r19
     312:	20 93 34 01 	sts	0x0134, r18
				distance_to_motivator = distance;
     316:	90 93 0d 01 	sts	0x010D, r25
     31a:	80 93 0c 01 	sts	0x010C, r24
				update_distance_to_motivator = UPDATE;
     31e:	30 93 39 01 	sts	0x0139, r19
     322:	20 93 38 01 	sts	0x0138, r18
     326:	8c cf       	rjmp	.-232    	; 0x240 <message_rx+0xa8>
				update_distance_to_motivated = UPDATE;
			}
		}
		// That guy has the same gradient with mine.
		// There needs a comparison between us.
		else if ((received_gradient == own_gradient) && (received_gradient != GRADIENT_MAX))
     328:	2f 3f       	cpi	r18, 0xFF	; 255
     32a:	31 05       	cpc	r19, r1
     32c:	31 f2       	breq	.-116    	; 0x2ba <message_rx+0x122>
		{
			distance_to_motivator_pair = m->data[3];
     32e:	4b 81       	ldd	r20, Y+3	; 0x03
     330:	50 e0       	ldi	r21, 0x00	; 0
     332:	50 93 0b 01 	sts	0x010B, r21
     336:	40 93 0a 01 	sts	0x010A, r20
			if (distance_to_motivator_pair < distance_to_motivator)
     33a:	60 91 0c 01 	lds	r22, 0x010C
     33e:	70 91 0d 01 	lds	r23, 0x010D
     342:	46 17       	cp	r20, r22
     344:	57 07       	cpc	r21, r23
     346:	0c f0       	brlt	.+2      	; 0x34a <message_rx+0x1b2>
     348:	75 cf       	rjmp	.-278    	; 0x234 <message_rx+0x9c>
			{
				last_found_minor = kilo_ticks;
     34a:	40 91 83 01 	lds	r20, 0x0183
     34e:	50 91 84 01 	lds	r21, 0x0184
     352:	60 91 85 01 	lds	r22, 0x0185
     356:	70 91 86 01 	lds	r23, 0x0186
     35a:	40 93 5c 01 	sts	0x015C, r20
     35e:	50 93 5d 01 	sts	0x015D, r21
     362:	60 93 5e 01 	sts	0x015E, r22
     366:	70 93 5f 01 	sts	0x015F, r23
				own_gradient = received_gradient + 1;
     36a:	2f 5f       	subi	r18, 0xFF	; 255
     36c:	3f 4f       	sbci	r19, 0xFF	; 255
     36e:	30 93 19 01 	sts	0x0119, r19
     372:	20 93 18 01 	sts	0x0118, r18
				state_motivator =  m->data[2];
     376:	2a 81       	ldd	r18, Y+2	; 0x02
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	30 93 2f 01 	sts	0x012F, r19
     37e:	20 93 2e 01 	sts	0x012E, r18
				update_state_motivator = UPDATE;
     382:	21 e0       	ldi	r18, 0x01	; 1
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	30 93 35 01 	sts	0x0135, r19
     38a:	20 93 34 01 	sts	0x0134, r18
				distance_to_motivator = distance;
     38e:	90 93 0d 01 	sts	0x010D, r25
     392:	80 93 0c 01 	sts	0x010C, r24
				update_distance_to_motivator = UPDATE;
     396:	30 93 39 01 	sts	0x0139, r19
     39a:	20 93 38 01 	sts	0x0138, r18
     39e:	80 91 b9 01 	lds	r24, 0x01B9
     3a2:	90 91 ba 01 	lds	r25, 0x01BA
     3a6:	4a cf       	rjmp	.-364    	; 0x23c <message_rx+0xa4>
		{
			last_found_maxer = kilo_ticks;
			flag_maxest = NO;
			if (received_gradient == (own_gradient + 1))
			{
				formed_state = m->data[1];
     3a8:	29 81       	ldd	r18, Y+1	; 0x01
     3aa:	30 e0       	ldi	r19, 0x00	; 0
     3ac:	30 93 27 01 	sts	0x0127, r19
     3b0:	20 93 26 01 	sts	0x0126, r18
				state_motivated =  m->data[2];
     3b4:	2a 81       	ldd	r18, Y+2	; 0x02
     3b6:	30 e0       	ldi	r19, 0x00	; 0
     3b8:	30 93 31 01 	sts	0x0131, r19
     3bc:	20 93 30 01 	sts	0x0130, r18
				update_state_motivated = UPDATE;
     3c0:	41 e0       	ldi	r20, 0x01	; 1
     3c2:	50 e0       	ldi	r21, 0x00	; 0
     3c4:	50 93 37 01 	sts	0x0137, r21
     3c8:	40 93 36 01 	sts	0x0136, r20
				if (state_motivated != MOVE) 
     3cc:	24 30       	cpi	r18, 0x04	; 4
     3ce:	31 05       	cpc	r19, r1
     3d0:	09 f4       	brne	.+2      	; 0x3d4 <message_rx+0x23c>
     3d2:	48 c0       	rjmp	.+144    	; 0x464 <message_rx+0x2cc>
				{
					if ((num_stop ++) == 1)
     3d4:	20 91 2a 01 	lds	r18, 0x012A
     3d8:	30 91 2b 01 	lds	r19, 0x012B
     3dc:	a9 01       	movw	r20, r18
     3de:	4f 5f       	subi	r20, 0xFF	; 255
     3e0:	5f 4f       	sbci	r21, 0xFF	; 255
     3e2:	50 93 2b 01 	sts	0x012B, r21
     3e6:	40 93 2a 01 	sts	0x012A, r20
     3ea:	21 30       	cpi	r18, 0x01	; 1
     3ec:	31 05       	cpc	r19, r1
     3ee:	59 f0       	breq	.+22     	; 0x406 <message_rx+0x26e>
				}
				else
				{
					num_stop = 0;
				}
				distance_to_motivated = distance;
     3f0:	90 93 07 01 	sts	0x0107, r25
     3f4:	80 93 06 01 	sts	0x0106, r24
				update_distance_to_motivated = UPDATE;
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	90 93 3b 01 	sts	0x013B, r25
     400:	80 93 3a 01 	sts	0x013A, r24
     404:	17 cf       	rjmp	.-466    	; 0x234 <message_rx+0x9c>
				update_state_motivated = UPDATE;
				if (state_motivated != MOVE) 
				{
					if ((num_stop ++) == 1)
					{
						my_fault = NO;
     406:	10 92 13 01 	sts	0x0113, r1
     40a:	10 92 12 01 	sts	0x0112, r1
     40e:	f0 cf       	rjmp	.-32     	; 0x3f0 <message_rx+0x258>
			if (((own_gradient - received_gradient) == 2) || ((own_gradient - received_gradient) == 3))
			{
				// The message sender is closer, and meanwhile the last 
				// time I found a minor is too long ago (TIME_CHECK_MINOR).
				// Thus I need  to find a new motivator.
				if ((distance < distance_to_motivator) && (kilo_ticks > (last_found_minor + TIME_CHECK_MINOR)))
     410:	40 91 0c 01 	lds	r20, 0x010C
     414:	50 91 0d 01 	lds	r21, 0x010D
     418:	84 17       	cp	r24, r20
     41a:	95 07       	cpc	r25, r21
     41c:	d4 f4       	brge	.+52     	; 0x452 <message_rx+0x2ba>
     41e:	c0 90 83 01 	lds	r12, 0x0183
     422:	d0 90 84 01 	lds	r13, 0x0184
     426:	e0 90 85 01 	lds	r14, 0x0185
     42a:	f0 90 86 01 	lds	r15, 0x0186
     42e:	40 91 5c 01 	lds	r20, 0x015C
     432:	50 91 5d 01 	lds	r21, 0x015D
     436:	60 91 5e 01 	lds	r22, 0x015E
     43a:	70 91 5f 01 	lds	r23, 0x015F
     43e:	40 58       	subi	r20, 0x80	; 128
     440:	5f 4f       	sbci	r21, 0xFF	; 255
     442:	6f 4f       	sbci	r22, 0xFF	; 255
     444:	7f 4f       	sbci	r23, 0xFF	; 255
     446:	4c 15       	cp	r20, r12
     448:	5d 05       	cpc	r21, r13
     44a:	6e 05       	cpc	r22, r14
     44c:	7f 05       	cpc	r23, r15
     44e:	08 f4       	brcc	.+2      	; 0x452 <message_rx+0x2ba>
     450:	40 cf       	rjmp	.-384    	; 0x2d2 <message_rx+0x13a>
					state_motivator =  m->data[2];
					update_state_motivator = UPDATE;
					distance_to_motivator = distance;
					update_distance_to_motivator = UPDATE;
				}
				else if (distance < distance_to_motivator_pair)
     452:	40 91 0a 01 	lds	r20, 0x010A
     456:	50 91 0b 01 	lds	r21, 0x010B
     45a:	84 17       	cp	r24, r20
     45c:	95 07       	cpc	r25, r21
     45e:	0c f4       	brge	.+2      	; 0x462 <message_rx+0x2ca>
     460:	38 cf       	rjmp	.-400    	; 0x2d2 <message_rx+0x13a>
     462:	ee ce       	rjmp	.-548    	; 0x240 <message_rx+0xa8>
						my_fault = NO;
					}
				}
				else
				{
					num_stop = 0;
     464:	10 92 2b 01 	sts	0x012B, r1
     468:	10 92 2a 01 	sts	0x012A, r1
     46c:	c1 cf       	rjmp	.-126    	; 0x3f0 <message_rx+0x258>

0000046e <randBinary>:


// Generate 0 or 1 randomly
int randBinary(){
    // Generate an 8-bit random number (between 0 and 2^8 - 1 = 255).
    int random_number = rand_hard();
     46e:	0e 94 26 07 	call	0xe4c	; 0xe4c <rand_hard>
    // Compute the remainder of random_number when divided by 2.
    // This gives a new random number in the set {0, 1}.
    int random_direction = (random_number % 2);

    return random_direction;
}
     472:	81 70       	andi	r24, 0x01	; 1
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	08 95       	ret

00000478 <rand>:

// Generate a random number in the closed interval (0, 1).
float rand(){
    // Generate an 8-bit random number (between 0 and 2^8 - 1 = 255).
    int random_number = rand_hard();
     478:	0e 94 26 07 	call	0xe4c	; 0xe4c <rand_hard>
     47c:	90 e0       	ldi	r25, 0x00	; 0

    float result = random_number / 255;
     47e:	6f ef       	ldi	r22, 0xFF	; 255
     480:	70 e0       	ldi	r23, 0x00	; 0
     482:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <__divmodhi4>
     486:	88 27       	eor	r24, r24
     488:	77 fd       	sbrc	r23, 7
     48a:	80 95       	com	r24
     48c:	98 2f       	mov	r25, r24
     48e:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <__floatsisf>

    return result;
}
     492:	08 95       	ret

00000494 <set_led>:

// Function to set led states
void set_led()
{
    // Set the LED color based on the gradient.
    switch (own_gradient) {
     494:	80 91 18 01 	lds	r24, 0x0118
     498:	90 91 19 01 	lds	r25, 0x0119
     49c:	82 30       	cpi	r24, 0x02	; 2
     49e:	91 05       	cpc	r25, r1
     4a0:	c9 f0       	breq	.+50     	; 0x4d4 <set_led+0x40>
     4a2:	3c f4       	brge	.+14     	; 0x4b2 <set_led+0x1e>
     4a4:	00 97       	sbiw	r24, 0x00	; 0
     4a6:	99 f0       	breq	.+38     	; 0x4ce <set_led+0x3a>
     4a8:	01 97       	sbiw	r24, 0x01	; 1
     4aa:	59 f4       	brne	.+22     	; 0x4c2 <set_led+0x2e>
        case 0:
            set_color(RGB(1, 1, 1)); // White
            break;
        case 1:
            set_color(RGB(1, 0, 0)); // Red
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <set_color>

// Function to set led states
void set_led()
{
    // Set the LED color based on the gradient.
    switch (own_gradient) {
     4b2:	83 30       	cpi	r24, 0x03	; 3
     4b4:	91 05       	cpc	r25, r1
     4b6:	41 f0       	breq	.+16     	; 0x4c8 <set_led+0x34>
     4b8:	04 97       	sbiw	r24, 0x04	; 4
     4ba:	19 f4       	brne	.+6      	; 0x4c2 <set_led+0x2e>
            break;
        case 3:
            set_color(RGB(0, 0, 1)); // Blue
            break;
        case 4:
            set_color(RGB(1, 1, 0)); // Yellow
     4bc:	85 e0       	ldi	r24, 0x05	; 5
     4be:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <set_color>
            break;
        default:
            set_color(RGB(1, 0, 1)); // Magneta
     4c2:	81 e1       	ldi	r24, 0x11	; 17
     4c4:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <set_color>
            break;
        case 2:
            set_color(RGB(0, 1, 0)); // Green
            break;
        case 3:
            set_color(RGB(0, 0, 1)); // Blue
     4c8:	80 e1       	ldi	r24, 0x10	; 16
     4ca:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <set_color>
void set_led()
{
    // Set the LED color based on the gradient.
    switch (own_gradient) {
        case 0:
            set_color(RGB(1, 1, 1)); // White
     4ce:	85 e1       	ldi	r24, 0x15	; 21
     4d0:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <set_color>
            break;
        case 1:
            set_color(RGB(1, 0, 0)); // Red
            break;
        case 2:
            set_color(RGB(0, 1, 0)); // Green
     4d4:	84 e0       	ldi	r24, 0x04	; 4
     4d6:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <set_color>

000004da <set_motion>:

// Function to handle motion.
void set_motion(int new_motion)
{   
    // Only take an an action if the motion is being changed.
    if (current_motion != new_motion)
     4da:	20 91 16 01 	lds	r18, 0x0116
     4de:	30 91 17 01 	lds	r19, 0x0117
     4e2:	28 17       	cp	r18, r24
     4e4:	39 07       	cpc	r19, r25
     4e6:	71 f0       	breq	.+28     	; 0x504 <set_motion+0x2a>
    {   
        current_motion = new_motion;
     4e8:	90 93 17 01 	sts	0x0117, r25
     4ec:	80 93 16 01 	sts	0x0116, r24
        
        if (current_motion == STOP)
     4f0:	00 97       	sbiw	r24, 0x00	; 0
     4f2:	81 f0       	breq	.+32     	; 0x514 <set_motion+0x3a>
        {   
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
     4f4:	81 30       	cpi	r24, 0x01	; 1
     4f6:	91 05       	cpc	r25, r1
     4f8:	89 f0       	breq	.+34     	; 0x51c <set_motion+0x42>
        {   
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
     4fa:	82 30       	cpi	r24, 0x02	; 2
     4fc:	91 05       	cpc	r25, r1
     4fe:	b1 f0       	breq	.+44     	; 0x52c <set_motion+0x52>
        {   
            spinup_motors();
            set_motors(kilo_turn_left, 0);
        }
        else if (current_motion == RIGHT)
     500:	03 97       	sbiw	r24, 0x03	; 3
     502:	09 f0       	breq	.+2      	; 0x506 <set_motion+0x2c>
     504:	08 95       	ret
        {   
            spinup_motors();
     506:	0e 94 cb 06 	call	0xd96	; 0xd96 <spinup_motors>
            set_motors(0, kilo_turn_right);
     50a:	60 91 a9 01 	lds	r22, 0x01A9
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	0c 94 c6 06 	jmp	0xd8c	; 0xd8c <set_motors>
    {   
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {   
            set_motors(0, 0);
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	0c 94 c6 06 	jmp	0xd8c	; 0xd8c <set_motors>
        }
        else if (current_motion == FORWARD)
        {   
            spinup_motors();
     51c:	0e 94 cb 06 	call	0xd96	; 0xd96 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     520:	60 91 bc 01 	lds	r22, 0x01BC
     524:	80 91 bb 01 	lds	r24, 0x01BB
     528:	0c 94 c6 06 	jmp	0xd8c	; 0xd8c <set_motors>
        }
        else if (current_motion == LEFT)
        {   
            spinup_motors();
     52c:	0e 94 cb 06 	call	0xd96	; 0xd96 <spinup_motors>
            set_motors(kilo_turn_left, 0);
     530:	60 e0       	ldi	r22, 0x00	; 0
     532:	80 91 bd 01 	lds	r24, 0x01BD
     536:	0c 94 c6 06 	jmp	0xd8c	; 0xd8c <set_motors>

0000053a <check_own_gradient>:
}

void check_own_gradient() {
	// If no neighbors detected within TIME_LAST_GRADIENT seconds
	// then sleep waiting for be activated.
    if ( (kilo_uid != SEED_ID) && (kilo_ticks > (last_found_minor + TIME_LAST_GRADIENT)) && (own_gradient < GRADIENT_MAX))
     53a:	80 91 b9 01 	lds	r24, 0x01B9
     53e:	90 91 ba 01 	lds	r25, 0x01BA
     542:	89 2b       	or	r24, r25
     544:	51 f1       	breq	.+84     	; 0x59a <check_own_gradient+0x60>
     546:	40 91 83 01 	lds	r20, 0x0183
     54a:	50 91 84 01 	lds	r21, 0x0184
     54e:	60 91 85 01 	lds	r22, 0x0185
     552:	70 91 86 01 	lds	r23, 0x0186
     556:	80 91 5c 01 	lds	r24, 0x015C
     55a:	90 91 5d 01 	lds	r25, 0x015D
     55e:	a0 91 5e 01 	lds	r26, 0x015E
     562:	b0 91 5f 01 	lds	r27, 0x015F
     566:	80 56       	subi	r24, 0x60	; 96
     568:	9f 4f       	sbci	r25, 0xFF	; 255
     56a:	af 4f       	sbci	r26, 0xFF	; 255
     56c:	bf 4f       	sbci	r27, 0xFF	; 255
     56e:	84 17       	cp	r24, r20
     570:	95 07       	cpc	r25, r21
     572:	a6 07       	cpc	r26, r22
     574:	b7 07       	cpc	r27, r23
     576:	88 f4       	brcc	.+34     	; 0x59a <check_own_gradient+0x60>
     578:	80 91 18 01 	lds	r24, 0x0118
     57c:	90 91 19 01 	lds	r25, 0x0119
     580:	8f 3f       	cpi	r24, 0xFF	; 255
     582:	91 05       	cpc	r25, r1
     584:	54 f4       	brge	.+20     	; 0x59a <check_own_gradient+0x60>
    {   
        own_gradient = GRADIENT_MAX;
     586:	8f ef       	ldi	r24, 0xFF	; 255
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	90 93 19 01 	sts	0x0119, r25
     58e:	80 93 18 01 	sts	0x0118, r24
		formed_state = FORMED_NO;
     592:	10 92 27 01 	sts	0x0127, r1
     596:	10 92 26 01 	sts	0x0126, r1
     59a:	08 95       	ret

0000059c <opposite_move>:
}

int opposite_move(int offspring)
{
	int next_motion = offspring;
	switch (offspring)
     59c:	82 30       	cpi	r24, 0x02	; 2
     59e:	91 05       	cpc	r25, r1
     5a0:	59 f0       	breq	.+22     	; 0x5b8 <opposite_move+0x1c>
     5a2:	83 30       	cpi	r24, 0x03	; 3
     5a4:	91 05       	cpc	r25, r1
     5a6:	59 f0       	breq	.+22     	; 0x5be <opposite_move+0x22>
     5a8:	81 30       	cpi	r24, 0x01	; 1
     5aa:	91 05       	cpc	r25, r1
     5ac:	09 f0       	breq	.+2      	; 0x5b0 <opposite_move+0x14>
			break;
		default:
			break;
	}
	return next_motion;
}
     5ae:	08 95       	ret


// Generate 0 or 1 randomly
int randBinary(){
    // Generate an 8-bit random number (between 0 and 2^8 - 1 = 255).
    int random_number = rand_hard();
     5b0:	0e 94 26 07 	call	0xe4c	; 0xe4c <rand_hard>
			break;
		case RIGHT:
			next_motion = LEFT;
			break;
		case FORWARD:
			if (randBinary() == 1) 
     5b4:	80 fd       	sbrc	r24, 0
     5b6:	03 c0       	rjmp	.+6      	; 0x5be <opposite_move+0x22>
			{
				next_motion = LEFT;
			} 
			else 
			{
				next_motion = RIGHT;
     5b8:	83 e0       	ldi	r24, 0x03	; 3
     5ba:	90 e0       	ldi	r25, 0x00	; 0
			break;
		default:
			break;
	}
	return next_motion;
}
     5bc:	08 95       	ret
			next_motion = LEFT;
			break;
		case FORWARD:
			if (randBinary() == 1) 
			{
				next_motion = LEFT;
     5be:	82 e0       	ldi	r24, 0x02	; 2
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	08 95       	ret

000005c4 <move>:

void move() {
	int next_motion = offspring;
	//set_color(RGB(0, 0, 0));
	// closer and closer
	if (distance_to_motivated < distance_to_motivated_parent) 
     5c4:	20 91 06 01 	lds	r18, 0x0106
     5c8:	30 91 07 01 	lds	r19, 0x0107
     5cc:	80 91 04 01 	lds	r24, 0x0104
     5d0:	90 91 05 01 	lds	r25, 0x0105
     5d4:	28 17       	cp	r18, r24
     5d6:	39 07       	cpc	r19, r25
     5d8:	ec f5       	brge	.+122    	; 0x654 <move+0x90>
	{
		// I am keeped in the line formed by my motivator and my motivated.
		if (distance_line <= distance_line_parent)
     5da:	20 91 02 01 	lds	r18, 0x0102
     5de:	30 91 03 01 	lds	r19, 0x0103
     5e2:	80 91 00 01 	lds	r24, 0x0100
     5e6:	90 91 01 01 	lds	r25, 0x0101
     5ea:	82 17       	cp	r24, r18
     5ec:	93 07       	cpc	r25, r19
     5ee:	54 f5       	brge	.+84     	; 0x644 <move+0x80>
			set_color(RGB(1, 0, 0));
			next_motion = offspring;
		}
		else
		{
			set_color(RGB(0, 0, 0));
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <set_color>
			next_motion = opposite_move(offspring);			
     5f6:	80 91 10 01 	lds	r24, 0x0110
     5fa:	90 91 11 01 	lds	r25, 0x0111
}

int opposite_move(int offspring)
{
	int next_motion = offspring;
	switch (offspring)
     5fe:	82 30       	cpi	r24, 0x02	; 2
     600:	91 05       	cpc	r25, r1
     602:	91 f1       	breq	.+100    	; 0x668 <move+0xa4>
     604:	83 30       	cpi	r24, 0x03	; 3
     606:	91 05       	cpc	r25, r1
     608:	b1 f1       	breq	.+108    	; 0x676 <move+0xb2>
     60a:	81 30       	cpi	r24, 0x01	; 1
     60c:	91 05       	cpc	r25, r1
     60e:	79 f1       	breq	.+94     	; 0x66e <move+0xaa>
	{	
		set_color(RGB(0, 1, 1));
		next_motion = opposite_move(offspring);
	}
	
	offspring = next_motion;
     610:	90 93 11 01 	sts	0x0111, r25
     614:	80 93 10 01 	sts	0x0110, r24

// Function to handle motion.
void set_motion(int new_motion)
{   
    // Only take an an action if the motion is being changed.
    if (current_motion != new_motion)
     618:	20 91 16 01 	lds	r18, 0x0116
     61c:	30 91 17 01 	lds	r19, 0x0117
     620:	82 17       	cp	r24, r18
     622:	93 07       	cpc	r25, r19
     624:	71 f0       	breq	.+28     	; 0x642 <move+0x7e>
    {   
        current_motion = new_motion;
     626:	90 93 17 01 	sts	0x0117, r25
     62a:	80 93 16 01 	sts	0x0116, r24
        
        if (current_motion == STOP)
     62e:	00 97       	sbiw	r24, 0x00	; 0
     630:	61 f1       	breq	.+88     	; 0x68a <move+0xc6>
        {   
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
     632:	81 30       	cpi	r24, 0x01	; 1
     634:	91 05       	cpc	r25, r1
     636:	69 f1       	breq	.+90     	; 0x692 <move+0xce>
        {   
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
     638:	82 30       	cpi	r24, 0x02	; 2
     63a:	91 05       	cpc	r25, r1
     63c:	91 f1       	breq	.+100    	; 0x6a2 <move+0xde>
        {   
            spinup_motors();
            set_motors(kilo_turn_left, 0);
        }
        else if (current_motion == RIGHT)
     63e:	03 97       	sbiw	r24, 0x03	; 3
     640:	e9 f0       	breq	.+58     	; 0x67c <move+0xb8>
     642:	08 95       	ret
	if (distance_to_motivated < distance_to_motivated_parent) 
	{
		// I am keeped in the line formed by my motivator and my motivated.
		if (distance_line <= distance_line_parent)
		{
			set_color(RGB(1, 0, 0));
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <set_color>
			next_motion = offspring;
     64a:	80 91 10 01 	lds	r24, 0x0110
     64e:	90 91 11 01 	lds	r25, 0x0111
     652:	de cf       	rjmp	.-68     	; 0x610 <move+0x4c>
		}
	}
	*/
	else
	{	
		set_color(RGB(0, 1, 1));
     654:	84 e1       	ldi	r24, 0x14	; 20
     656:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <set_color>
		next_motion = opposite_move(offspring);
     65a:	80 91 10 01 	lds	r24, 0x0110
     65e:	90 91 11 01 	lds	r25, 0x0111
}

int opposite_move(int offspring)
{
	int next_motion = offspring;
	switch (offspring)
     662:	82 30       	cpi	r24, 0x02	; 2
     664:	91 05       	cpc	r25, r1
     666:	71 f6       	brne	.-100    	; 0x604 <move+0x40>
			{
				next_motion = LEFT;
			} 
			else 
			{
				next_motion = RIGHT;
     668:	83 e0       	ldi	r24, 0x03	; 3
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	d1 cf       	rjmp	.-94     	; 0x610 <move+0x4c>


// Generate 0 or 1 randomly
int randBinary(){
    // Generate an 8-bit random number (between 0 and 2^8 - 1 = 255).
    int random_number = rand_hard();
     66e:	0e 94 26 07 	call	0xe4c	; 0xe4c <rand_hard>
			break;
		case RIGHT:
			next_motion = LEFT;
			break;
		case FORWARD:
			if (randBinary() == 1) 
     672:	80 ff       	sbrs	r24, 0
     674:	f9 cf       	rjmp	.-14     	; 0x668 <move+0xa4>
			{
				next_motion = LEFT;
     676:	82 e0       	ldi	r24, 0x02	; 2
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	ca cf       	rjmp	.-108    	; 0x610 <move+0x4c>
            spinup_motors();
            set_motors(kilo_turn_left, 0);
        }
        else if (current_motion == RIGHT)
        {   
            spinup_motors();
     67c:	0e 94 cb 06 	call	0xd96	; 0xd96 <spinup_motors>
            set_motors(0, kilo_turn_right);
     680:	60 91 a9 01 	lds	r22, 0x01A9
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	0c 94 c6 06 	jmp	0xd8c	; 0xd8c <set_motors>
    {   
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {   
            set_motors(0, 0);
     68a:	60 e0       	ldi	r22, 0x00	; 0
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	0c 94 c6 06 	jmp	0xd8c	; 0xd8c <set_motors>
        }
        else if (current_motion == FORWARD)
        {   
            spinup_motors();
     692:	0e 94 cb 06 	call	0xd96	; 0xd96 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     696:	60 91 bc 01 	lds	r22, 0x01BC
     69a:	80 91 bb 01 	lds	r24, 0x01BB
     69e:	0c 94 c6 06 	jmp	0xd8c	; 0xd8c <set_motors>
        }
        else if (current_motion == LEFT)
        {   
            spinup_motors();
     6a2:	0e 94 cb 06 	call	0xd96	; 0xd96 <spinup_motors>
            set_motors(kilo_turn_left, 0);
     6a6:	60 e0       	ldi	r22, 0x00	; 0
     6a8:	80 91 bd 01 	lds	r24, 0x01BD
     6ac:	0c 94 c6 06 	jmp	0xd8c	; 0xd8c <set_motors>

000006b0 <loop>:
	offspring = next_motion;
	set_motion(offspring);
}


void loop() {
     6b0:	cf 92       	push	r12
     6b2:	df 92       	push	r13
     6b4:	ef 92       	push	r14
     6b6:	ff 92       	push	r15
}

void check_own_gradient() {
	// If no neighbors detected within TIME_LAST_GRADIENT seconds
	// then sleep waiting for be activated.
    if ( (kilo_uid != SEED_ID) && (kilo_ticks > (last_found_minor + TIME_LAST_GRADIENT)) && (own_gradient < GRADIENT_MAX))
     6b8:	80 91 b9 01 	lds	r24, 0x01B9
     6bc:	90 91 ba 01 	lds	r25, 0x01BA
     6c0:	89 2b       	or	r24, r25
     6c2:	09 f4       	brne	.+2      	; 0x6c6 <loop+0x16>
     6c4:	43 c0       	rjmp	.+134    	; 0x74c <loop+0x9c>
     6c6:	40 91 83 01 	lds	r20, 0x0183
     6ca:	50 91 84 01 	lds	r21, 0x0184
     6ce:	60 91 85 01 	lds	r22, 0x0185
     6d2:	70 91 86 01 	lds	r23, 0x0186
     6d6:	80 91 5c 01 	lds	r24, 0x015C
     6da:	90 91 5d 01 	lds	r25, 0x015D
     6de:	a0 91 5e 01 	lds	r26, 0x015E
     6e2:	b0 91 5f 01 	lds	r27, 0x015F
     6e6:	80 56       	subi	r24, 0x60	; 96
     6e8:	9f 4f       	sbci	r25, 0xFF	; 255
     6ea:	af 4f       	sbci	r26, 0xFF	; 255
     6ec:	bf 4f       	sbci	r27, 0xFF	; 255
     6ee:	84 17       	cp	r24, r20
     6f0:	95 07       	cpc	r25, r21
     6f2:	a6 07       	cpc	r26, r22
     6f4:	b7 07       	cpc	r27, r23
     6f6:	50 f5       	brcc	.+84     	; 0x74c <loop+0x9c>
     6f8:	80 91 18 01 	lds	r24, 0x0118
     6fc:	90 91 19 01 	lds	r25, 0x0119
     700:	8f 3f       	cpi	r24, 0xFF	; 255
     702:	91 05       	cpc	r25, r1
     704:	1c f5       	brge	.+70     	; 0x74c <loop+0x9c>
    {   
        own_gradient = GRADIENT_MAX;
     706:	8f ef       	ldi	r24, 0xFF	; 255
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	90 93 19 01 	sts	0x0119, r25
     70e:	80 93 18 01 	sts	0x0118, r24
		formed_state = FORMED_NO;
     712:	10 92 27 01 	sts	0x0127, r1
     716:	10 92 26 01 	sts	0x0126, r1
    }
	// Stop when the sequence has not formed.
	else
	{
		//set_color(RGB(0, 0, 0));
		state_myself = COMPLETED;
     71a:	85 e0       	ldi	r24, 0x05	; 5
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	90 93 2d 01 	sts	0x012D, r25
     722:	80 93 2c 01 	sts	0x012C, r24

// Function to handle motion.
void set_motion(int new_motion)
{   
    // Only take an an action if the motion is being changed.
    if (current_motion != new_motion)
     726:	80 91 16 01 	lds	r24, 0x0116
     72a:	90 91 17 01 	lds	r25, 0x0117
     72e:	89 2b       	or	r24, r25
     730:	09 f4       	brne	.+2      	; 0x734 <loop+0x84>
     732:	71 c0       	rjmp	.+226    	; 0x816 <loop+0x166>
    {   
        current_motion = new_motion;
     734:	10 92 17 01 	sts	0x0117, r1
     738:	10 92 16 01 	sts	0x0116, r1
        
        if (current_motion == STOP)
        {   
            set_motors(0, 0);
     73c:	60 e0       	ldi	r22, 0x00	; 0
     73e:	80 e0       	ldi	r24, 0x00	; 0
	{
		//set_color(RGB(0, 0, 0));
		state_myself = COMPLETED;
		set_motion(STOP);
	}
}
     740:	ff 90       	pop	r15
     742:	ef 90       	pop	r14
     744:	df 90       	pop	r13
     746:	cf 90       	pop	r12
    {   
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {   
            set_motors(0, 0);
     748:	0c 94 c6 06 	jmp	0xd8c	; 0xd8c <set_motors>
	check_own_gradient();
	// Move only when the sequence has already formed.
	// Move can only occured when the movitvator and motivated member
	// is stationary. This can assure the kilobot make the right
	// decision based on the measured changing distance.
	if ((formed_state == FORMED_OK) && (state_motivator == COMPLETED) && (state_motivated != MOVE))
     74c:	80 91 26 01 	lds	r24, 0x0126
     750:	90 91 27 01 	lds	r25, 0x0127
     754:	01 97       	sbiw	r24, 0x01	; 1
     756:	09 f7       	brne	.-62     	; 0x71a <loop+0x6a>
     758:	80 91 2e 01 	lds	r24, 0x012E
     75c:	90 91 2f 01 	lds	r25, 0x012F
     760:	85 30       	cpi	r24, 0x05	; 5
     762:	91 05       	cpc	r25, r1
     764:	d1 f6       	brne	.-76     	; 0x71a <loop+0x6a>
     766:	20 91 30 01 	lds	r18, 0x0130
     76a:	30 91 31 01 	lds	r19, 0x0131
     76e:	24 30       	cpi	r18, 0x04	; 4
     770:	31 05       	cpc	r19, r1
     772:	99 f2       	breq	.-90     	; 0x71a <loop+0x6a>
	{
		if (flag_maxest == YES)
     774:	20 91 3e 01 	lds	r18, 0x013E
     778:	30 91 3f 01 	lds	r19, 0x013F
     77c:	21 30       	cpi	r18, 0x01	; 1
     77e:	31 05       	cpc	r19, r1
     780:	09 f4       	brne	.+2      	; 0x784 <loop+0xd4>
     782:	4e c0       	rjmp	.+156    	; 0x820 <loop+0x170>
		// My gradient is not the maxest.
		else
		{
			// When my motivator is closer enough can I move 
			// to assure my motivator is not lost.
			if (distance_to_motivator <= DISTANCE_MOVE)
     784:	80 91 0c 01 	lds	r24, 0x010C
     788:	90 91 0d 01 	lds	r25, 0x010D
     78c:	8b 32       	cpi	r24, 0x2B	; 43
     78e:	91 05       	cpc	r25, r1
     790:	34 f4       	brge	.+12     	; 0x79e <loop+0xee>
			{
				state_myself = MOVE;
     792:	44 e0       	ldi	r20, 0x04	; 4
     794:	50 e0       	ldi	r21, 0x00	; 0
     796:	50 93 2d 01 	sts	0x012D, r21
     79a:	40 93 2c 01 	sts	0x012C, r20
			}

			if (distance_to_motivated <= DISTANCE_COLLIDE)
     79e:	40 91 06 01 	lds	r20, 0x0106
     7a2:	50 91 07 01 	lds	r21, 0x0107
     7a6:	49 32       	cpi	r20, 0x29	; 41
     7a8:	51 05       	cpc	r21, r1
     7aa:	0c f4       	brge	.+2      	; 0x7ae <loop+0xfe>
     7ac:	b6 cf       	rjmp	.-148    	; 0x71a <loop+0x6a>
			{
				state_myself = COMPLETED;
			}
		}

		if (state_myself == MOVE)
     7ae:	40 91 2c 01 	lds	r20, 0x012C
     7b2:	50 91 2d 01 	lds	r21, 0x012D
     7b6:	44 30       	cpi	r20, 0x04	; 4
     7b8:	51 05       	cpc	r21, r1
     7ba:	09 f0       	breq	.+2      	; 0x7be <loop+0x10e>
     7bc:	b4 cf       	rjmp	.-152    	; 0x726 <loop+0x76>
			// TIME_LAST_MOTION_UPDATE.
			// This can assure the fixed distance kilobot move 
			// in a fixed speed.
			// If distance is updated, then I can move according to 
			// strategies.
			if ((update_distance_to_motivated == UPDATE) && (update_distance_to_motivator == UPDATE))
     7be:	40 91 3a 01 	lds	r20, 0x013A
     7c2:	50 91 3b 01 	lds	r21, 0x013B
     7c6:	41 30       	cpi	r20, 0x01	; 1
     7c8:	51 05       	cpc	r21, r1
     7ca:	d1 f1       	breq	.+116    	; 0x840 <loop+0x190>
				move();
				last_motion_update = kilo_ticks;
				distance_to_motivated_parent = distance_to_motivated;
				distance_line_parent = distance_line;
			}
			else if (kilo_ticks > (last_motion_update + TIME_LAST_MOTION_UPDATE))
     7cc:	60 91 83 01 	lds	r22, 0x0183
     7d0:	70 91 84 01 	lds	r23, 0x0184
     7d4:	80 91 85 01 	lds	r24, 0x0185
     7d8:	90 91 86 01 	lds	r25, 0x0186
     7dc:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__floatunsisf>
     7e0:	6b 01       	movw	r12, r22
     7e2:	7c 01       	movw	r14, r24
     7e4:	60 91 50 01 	lds	r22, 0x0150
     7e8:	70 91 51 01 	lds	r23, 0x0151
     7ec:	80 91 52 01 	lds	r24, 0x0152
     7f0:	90 91 53 01 	lds	r25, 0x0153
     7f4:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__floatunsisf>
     7f8:	2a e9       	ldi	r18, 0x9A	; 154
     7fa:	39 e9       	ldi	r19, 0x99	; 153
     7fc:	49 e1       	ldi	r20, 0x19	; 25
     7fe:	51 e4       	ldi	r21, 0x41	; 65
     800:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <__addsf3>
     804:	9b 01       	movw	r18, r22
     806:	ac 01       	movw	r20, r24
     808:	c7 01       	movw	r24, r14
     80a:	b6 01       	movw	r22, r12
     80c:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__gesf2>
     810:	18 16       	cp	r1, r24
     812:	0c f4       	brge	.+2      	; 0x816 <loop+0x166>
     814:	88 cf       	rjmp	.-240    	; 0x726 <loop+0x76>
	{
		//set_color(RGB(0, 0, 0));
		state_myself = COMPLETED;
		set_motion(STOP);
	}
}
     816:	ff 90       	pop	r15
     818:	ef 90       	pop	r14
     81a:	df 90       	pop	r13
     81c:	cf 90       	pop	r12
     81e:	08 95       	ret
	{
		if (flag_maxest == YES)
		{
			// When my motivator is closer enough can I move 
			// to assure my motivator is not lost.
			if (distance_to_motivator <= DISTANCE_MOVE)
     820:	40 91 0c 01 	lds	r20, 0x010C
     824:	50 91 0d 01 	lds	r21, 0x010D
     828:	42 33       	cpi	r20, 0x32	; 50
     82a:	51 05       	cpc	r21, r1
     82c:	0c f0       	brlt	.+2      	; 0x830 <loop+0x180>
     82e:	77 cf       	rjmp	.-274    	; 0x71e <loop+0x6e>
			{
				state_myself = MOVE;
     830:	84 e0       	ldi	r24, 0x04	; 4
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	90 93 2d 01 	sts	0x012D, r25
     838:	80 93 2c 01 	sts	0x012C, r24
     83c:	ca 01       	movw	r24, r20
     83e:	bf cf       	rjmp	.-130    	; 0x7be <loop+0x10e>
			// TIME_LAST_MOTION_UPDATE.
			// This can assure the fixed distance kilobot move 
			// in a fixed speed.
			// If distance is updated, then I can move according to 
			// strategies.
			if ((update_distance_to_motivated == UPDATE) && (update_distance_to_motivator == UPDATE))
     840:	40 91 38 01 	lds	r20, 0x0138
     844:	50 91 39 01 	lds	r21, 0x0139
     848:	41 30       	cpi	r20, 0x01	; 1
     84a:	51 05       	cpc	r21, r1
     84c:	09 f0       	breq	.+2      	; 0x850 <loop+0x1a0>
     84e:	be cf       	rjmp	.-132    	; 0x7cc <loop+0x11c>
			{
				if (flag_minor == NO)
     850:	40 91 3c 01 	lds	r20, 0x013C
     854:	50 91 3d 01 	lds	r21, 0x013D
     858:	45 2b       	or	r20, r21
     85a:	21 f4       	brne	.+8      	; 0x864 <loop+0x1b4>
				{
					update_distance_to_motivator = UNUPDATE;
     85c:	10 92 39 01 	sts	0x0139, r1
     860:	10 92 38 01 	sts	0x0138, r1
				}
				if (flag_maxest == NO)
     864:	23 2b       	or	r18, r19
     866:	21 f4       	brne	.+8      	; 0x870 <loop+0x1c0>
				{
					update_distance_to_motivated = UNUPDATE;
     868:	10 92 3b 01 	sts	0x013B, r1
     86c:	10 92 3a 01 	sts	0x013A, r1
				}

				distance_line = distance_to_motivated + distance_to_motivator;
     870:	20 91 06 01 	lds	r18, 0x0106
     874:	30 91 07 01 	lds	r19, 0x0107
     878:	28 0f       	add	r18, r24
     87a:	39 1f       	adc	r19, r25
     87c:	30 93 03 01 	sts	0x0103, r19
     880:	20 93 02 01 	sts	0x0102, r18
				move();
     884:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <move>
				last_motion_update = kilo_ticks;
     888:	80 91 83 01 	lds	r24, 0x0183
     88c:	90 91 84 01 	lds	r25, 0x0184
     890:	a0 91 85 01 	lds	r26, 0x0185
     894:	b0 91 86 01 	lds	r27, 0x0186
     898:	80 93 50 01 	sts	0x0150, r24
     89c:	90 93 51 01 	sts	0x0151, r25
     8a0:	a0 93 52 01 	sts	0x0152, r26
     8a4:	b0 93 53 01 	sts	0x0153, r27
				distance_to_motivated_parent = distance_to_motivated;
     8a8:	80 91 06 01 	lds	r24, 0x0106
     8ac:	90 91 07 01 	lds	r25, 0x0107
     8b0:	90 93 05 01 	sts	0x0105, r25
     8b4:	80 93 04 01 	sts	0x0104, r24
				distance_line_parent = distance_line;
     8b8:	80 91 02 01 	lds	r24, 0x0102
     8bc:	90 91 03 01 	lds	r25, 0x0103
     8c0:	90 93 01 01 	sts	0x0101, r25
     8c4:	80 93 00 01 	sts	0x0100, r24
     8c8:	a6 cf       	rjmp	.-180    	; 0x816 <loop+0x166>

000008ca <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     8ca:	08 95       	ret

000008cc <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	08 95       	ret

000008d2 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     8d2:	08 95       	ret

000008d4 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     8d4:	df 92       	push	r13
     8d6:	ef 92       	push	r14
     8d8:	ff 92       	push	r15
     8da:	0f 93       	push	r16
     8dc:	1f 93       	push	r17
     8de:	cf 93       	push	r28
     8e0:	df 93       	push	r29
    cli();
     8e2:	f8 94       	cli

    ports_off();
     8e4:	14 b8       	out	0x04, r1	; 4
     8e6:	17 b8       	out	0x07, r1	; 7
     8e8:	1a b8       	out	0x0a, r1	; 10
     8ea:	15 b8       	out	0x05, r1	; 5
     8ec:	18 b8       	out	0x08, r1	; 8
     8ee:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     8f0:	52 9a       	sbi	0x0a, 2	; 10
     8f2:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     8f4:	14 bc       	out	0x24, r1	; 36
     8f6:	85 e0       	ldi	r24, 0x05	; 5
     8f8:	85 bd       	out	0x25, r24	; 37
     8fa:	8f ef       	ldi	r24, 0xFF	; 255
     8fc:	87 bd       	out	0x27, r24	; 39
     8fe:	22 e0       	ldi	r18, 0x02	; 2
     900:	20 93 6e 00 	sts	0x006E, r18
    rx_timer_setup();
     904:	10 92 80 00 	sts	0x0080, r1
     908:	10 92 81 00 	sts	0x0081, r1
     90c:	8f e8       	ldi	r24, 0x8F	; 143
     90e:	9b e0       	ldi	r25, 0x0B	; 11
     910:	90 93 89 00 	sts	0x0089, r25
     914:	80 93 88 00 	sts	0x0088, r24
     918:	20 93 6f 00 	sts	0x006F, r18
    motors_setup();
     91c:	53 98       	cbi	0x0a, 3	; 10
     91e:	23 98       	cbi	0x04, 3	; 4
     920:	81 ea       	ldi	r24, 0xA1	; 161
     922:	80 93 b0 00 	sts	0x00B0, r24
     926:	20 93 b1 00 	sts	0x00B1, r18
     92a:	10 92 b4 00 	sts	0x00B4, r1
     92e:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     932:	8b e0       	ldi	r24, 0x0B	; 11
     934:	80 bf       	out	0x30, r24	; 48
     936:	83 e0       	ldi	r24, 0x03	; 3
     938:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     93c:	86 e0       	ldi	r24, 0x06	; 6
     93e:	80 93 7c 00 	sts	0x007C, r24
     942:	83 e8       	ldi	r24, 0x83	; 131
     944:	80 93 7a 00 	sts	0x007A, r24
     948:	80 91 7a 00 	lds	r24, 0x007A
     94c:	80 64       	ori	r24, 0x40	; 64
     94e:	80 93 7a 00 	sts	0x007A, r24
     952:	80 91 7a 00 	lds	r24, 0x007A
     956:	86 fd       	sbrc	r24, 6
     958:	fc cf       	rjmp	.-8      	; 0x952 <__stack+0x53>
    adc_trigger_high_gain();
     95a:	10 92 7c 00 	sts	0x007C, r1
     95e:	83 ea       	ldi	r24, 0xA3	; 163
     960:	80 93 7a 00 	sts	0x007A, r24
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	0e 94 41 10 	call	0x2082	; 0x2082 <__eerd_byte_m328p>
    if (osccal != 0xFF)
     972:	8f 3f       	cpi	r24, 0xFF	; 255
     974:	11 f0       	breq	.+4      	; 0x97a <__stack+0x7b>
        OSCCAL = osccal;
     976:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     97a:	10 92 87 01 	sts	0x0187, r1
    rx_leadingbit = 1;
     97e:	c1 e0       	ldi	r28, 0x01	; 1
     980:	c0 93 60 01 	sts	0x0160, r28
    rx_leadingbyte = 1;
     984:	c0 93 a4 01 	sts	0x01A4, r28
    rx_byteindex = 0;
     988:	10 92 7e 01 	sts	0x017E, r1
    rx_bytevalue = 0;
     98c:	10 92 b8 01 	sts	0x01B8, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     990:	80 e9       	ldi	r24, 0x90	; 144
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	0e 94 41 10 	call	0x2082	; 0x2082 <__eerd_byte_m328p>
     998:	80 93 7d 01 	sts	0x017D, r24
    if (tx_mask & ~TX_MASK_MAX)
     99c:	80 91 7d 01 	lds	r24, 0x017D
     9a0:	88 73       	andi	r24, 0x38	; 56
     9a2:	11 f0       	breq	.+4      	; 0x9a8 <__stack+0xa9>
        tx_mask = TX_MASK_MIN;
     9a4:	c0 93 7d 01 	sts	0x017D, r28
    tx_clock = 0;
     9a8:	10 92 a8 01 	sts	0x01A8, r1
     9ac:	10 92 a7 01 	sts	0x01A7, r1
    tx_increment = 255;
     9b0:	8f ef       	ldi	r24, 0xFF	; 255
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	90 93 a6 01 	sts	0x01A6, r25
     9b8:	80 93 a5 01 	sts	0x01A5, r24
    kilo_ticks = 0;
     9bc:	10 92 83 01 	sts	0x0183, r1
     9c0:	10 92 84 01 	sts	0x0184, r1
     9c4:	10 92 85 01 	sts	0x0185, r1
     9c8:	10 92 86 01 	sts	0x0186, r1
    kilo_state = IDLE;
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	80 93 43 01 	sts	0x0143, r24
    kilo_tx_period = 3906;
     9d2:	82 e4       	ldi	r24, 0x42	; 66
     9d4:	9f e0       	ldi	r25, 0x0F	; 15
     9d6:	90 93 b7 01 	sts	0x01B7, r25
     9da:	80 93 b6 01 	sts	0x01B6, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     9de:	80 eb       	ldi	r24, 0xB0	; 176
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	0e 94 41 10 	call	0x2082	; 0x2082 <__eerd_byte_m328p>
     9e6:	c8 2f       	mov	r28, r24
     9e8:	81 eb       	ldi	r24, 0xB1	; 177
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	0e 94 41 10 	call	0x2082	; 0x2082 <__eerd_byte_m328p>
     9f0:	2c 2f       	mov	r18, r28
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	38 2b       	or	r19, r24
     9f6:	30 93 ba 01 	sts	0x01BA, r19
     9fa:	20 93 b9 01 	sts	0x01B9, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     9fe:	85 e0       	ldi	r24, 0x05	; 5
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	0e 94 41 10 	call	0x2082	; 0x2082 <__eerd_byte_m328p>
     a06:	80 93 bd 01 	sts	0x01BD, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     a0a:	89 e0       	ldi	r24, 0x09	; 9
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	0e 94 41 10 	call	0x2082	; 0x2082 <__eerd_byte_m328p>
     a12:	80 93 a9 01 	sts	0x01A9, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     a16:	8c e0       	ldi	r24, 0x0C	; 12
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	0e 94 41 10 	call	0x2082	; 0x2082 <__eerd_byte_m328p>
     a1e:	80 93 bb 01 	sts	0x01BB, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     a22:	84 e1       	ldi	r24, 0x14	; 20
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	0e 94 41 10 	call	0x2082	; 0x2082 <__eerd_byte_m328p>
     a2a:	80 93 bc 01 	sts	0x01BC, r24
     a2e:	58 e8       	ldi	r21, 0x88	; 136
     a30:	e5 2e       	mov	r14, r21
     a32:	51 e0       	ldi	r21, 0x01	; 1
     a34:	f5 2e       	mov	r15, r21
     a36:	01 e6       	ldi	r16, 0x61	; 97
     a38:	11 e0       	ldi	r17, 0x01	; 1
     a3a:	c0 e2       	ldi	r28, 0x20	; 32
     a3c:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     a3e:	ce 01       	movw	r24, r28
     a40:	0e 94 41 10 	call	0x2082	; 0x2082 <__eerd_byte_m328p>
     a44:	d8 2e       	mov	r13, r24
     a46:	ce 01       	movw	r24, r28
     a48:	01 96       	adiw	r24, 0x01	; 1
     a4a:	0e 94 41 10 	call	0x2082	; 0x2082 <__eerd_byte_m328p>
     a4e:	2d 2d       	mov	r18, r13
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	32 2f       	mov	r19, r18
     a54:	22 27       	eor	r18, r18
     a56:	28 2b       	or	r18, r24
     a58:	f7 01       	movw	r30, r14
     a5a:	21 93       	st	Z+, r18
     a5c:	31 93       	st	Z+, r19
     a5e:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     a60:	ce 01       	movw	r24, r28
     a62:	c0 96       	adiw	r24, 0x30	; 48
     a64:	0e 94 41 10 	call	0x2082	; 0x2082 <__eerd_byte_m328p>
     a68:	d8 2e       	mov	r13, r24
     a6a:	ce 01       	movw	r24, r28
     a6c:	c1 96       	adiw	r24, 0x31	; 49
     a6e:	0e 94 41 10 	call	0x2082	; 0x2082 <__eerd_byte_m328p>
     a72:	2d 2d       	mov	r18, r13
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	32 2f       	mov	r19, r18
     a78:	22 27       	eor	r18, r18
     a7a:	28 2b       	or	r18, r24
     a7c:	f8 01       	movw	r30, r16
     a7e:	21 93       	st	Z+, r18
     a80:	31 93       	st	Z+, r19
     a82:	8f 01       	movw	r16, r30
     a84:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     a86:	cc 33       	cpi	r28, 0x3C	; 60
     a88:	d1 05       	cpc	r29, r1
     a8a:	c9 f6       	brne	.-78     	; 0xa3e <__stack+0x13f>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     a8c:	78 94       	sei
}
     a8e:	df 91       	pop	r29
     a90:	cf 91       	pop	r28
     a92:	1f 91       	pop	r17
     a94:	0f 91       	pop	r16
     a96:	ff 90       	pop	r15
     a98:	ef 90       	pop	r14
     a9a:	df 90       	pop	r13
     a9c:	08 95       	ret

00000a9e <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     a9e:	1f 92       	push	r1
     aa0:	0f 92       	push	r0
     aa2:	0f b6       	in	r0, 0x3f	; 63
     aa4:	0f 92       	push	r0
     aa6:	11 24       	eor	r1, r1
     aa8:	8f 93       	push	r24
    wdt_disable();
     aaa:	88 e1       	ldi	r24, 0x18	; 24
     aac:	0f b6       	in	r0, 0x3f	; 63
     aae:	f8 94       	cli
     ab0:	80 93 60 00 	sts	0x0060, r24
     ab4:	10 92 60 00 	sts	0x0060, r1
     ab8:	0f be       	out	0x3f, r0	; 63
}
     aba:	8f 91       	pop	r24
     abc:	0f 90       	pop	r0
     abe:	0f be       	out	0x3f, r0	; 63
     ac0:	0f 90       	pop	r0
     ac2:	1f 90       	pop	r1
     ac4:	18 95       	reti

00000ac6 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     ac6:	7c 01       	movw	r14, r24
     ac8:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     aca:	d1 2c       	mov	r13, r1
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     acc:	88 24       	eor	r8, r8
     ace:	8a 94       	dec	r8
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     ad0:	64 e0       	ldi	r22, 0x04	; 4
     ad2:	b6 2e       	mov	r11, r22

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     ad4:	76 e0       	ldi	r23, 0x06	; 6
     ad6:	97 2e       	mov	r9, r23
     ad8:	e3 e8       	ldi	r30, 0x83	; 131
     ada:	ae 2e       	mov	r10, r30
            case SLEEPING:
                cli();
                acomp_off();
                adc_off();
                ports_off();
                wdt_enable(WDTO_8S);
     adc:	08 e1       	ldi	r16, 0x18	; 24
     ade:	10 e0       	ldi	r17, 0x00	; 0
     ae0:	f9 e2       	ldi	r31, 0x29	; 41
     ae2:	cf 2e       	mov	r12, r31

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     ae4:	e0 91 43 01 	lds	r30, 0x0143
     ae8:	f0 e0       	ldi	r31, 0x00	; 0
     aea:	e7 30       	cpi	r30, 0x07	; 7
     aec:	f1 05       	cpc	r31, r1
     aee:	d0 f7       	brcc	.-12     	; 0xae4 <kilo_start+0x1e>
     af0:	ec 5c       	subi	r30, 0xCC	; 204
     af2:	ff 4f       	sbci	r31, 0xFF	; 255
     af4:	0c 94 01 0e 	jmp	0x1c02	; 0x1c02 <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     af8:	dd 20       	and	r13, r13
     afa:	09 f4       	brne	.+2      	; 0xafe <kilo_start+0x38>
     afc:	fd c0       	rjmp	.+506    	; 0xcf8 <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     afe:	b0 92 43 01 	sts	0x0143, r11
     b02:	dd 24       	eor	r13, r13
     b04:	d3 94       	inc	r13
            case RUNNING:
                loop();
     b06:	fe 01       	movw	r30, r28
     b08:	09 95       	icall
                break;
     b0a:	ec cf       	rjmp	.-40     	; 0xae4 <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     b0c:	80 91 87 01 	lds	r24, 0x0187
     b10:	81 11       	cpse	r24, r1
     b12:	eb c0       	rjmp	.+470    	; 0xcea <kilo_start+0x224>
        cli();                                    // disable interrupts
     b14:	f8 94       	cli
        adc_setup_conversion(6);
     b16:	90 92 7c 00 	sts	0x007C, r9
     b1a:	a0 92 7a 00 	sts	0x007A, r10
        adc_start_conversion();
     b1e:	80 91 7a 00 	lds	r24, 0x007A
     b22:	80 64       	ori	r24, 0x40	; 64
     b24:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     b28:	80 91 7a 00 	lds	r24, 0x007A
     b2c:	86 fd       	sbrc	r24, 6
     b2e:	fc cf       	rjmp	.-8      	; 0xb28 <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     b30:	20 91 78 00 	lds	r18, 0x0078
     b34:	30 91 79 00 	lds	r19, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     b38:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     b3a:	2b 3a       	cpi	r18, 0xAB	; 171
     b3c:	92 e0       	ldi	r25, 0x02	; 2
     b3e:	39 07       	cpc	r19, r25
     b40:	0c f0       	brlt	.+2      	; 0xb44 <kilo_start+0x7e>
     b42:	ed c0       	rjmp	.+474    	; 0xd1e <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     b44:	29 38       	cpi	r18, 0x89	; 137
     b46:	e2 e0       	ldi	r30, 0x02	; 2
     b48:	3e 07       	cpc	r19, r30
     b4a:	0c f0       	brlt	.+2      	; 0xb4e <kilo_start+0x88>
     b4c:	ef c0       	rjmp	.+478    	; 0xd2c <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     b4e:	27 36       	cpi	r18, 0x67	; 103
     b50:	32 40       	sbci	r19, 0x02	; 2
     b52:	0c f4       	brge	.+2      	; 0xb56 <kilo_start+0x90>
     b54:	ca c0       	rjmp	.+404    	; 0xcea <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     b56:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     b58:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     b5a:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     b5c:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     b5e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     b60:	3c 98       	cbi	0x07, 4	; 7
     b62:	c0 cf       	rjmp	.-128    	; 0xae4 <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     b64:	f8 94       	cli
                acomp_off();
     b66:	80 b7       	in	r24, 0x30	; 48
     b68:	87 7f       	andi	r24, 0xF7	; 247
     b6a:	80 bf       	out	0x30, r24	; 48
                adc_off();
     b6c:	80 91 7a 00 	lds	r24, 0x007A
     b70:	8f 77       	andi	r24, 0x7F	; 127
     b72:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     b76:	14 b8       	out	0x04, r1	; 4
     b78:	17 b8       	out	0x07, r1	; 7
     b7a:	1a b8       	out	0x0a, r1	; 10
     b7c:	15 b8       	out	0x05, r1	; 5
     b7e:	18 b8       	out	0x08, r1	; 8
     b80:	1b b8       	out	0x0b, r1	; 11
                wdt_enable(WDTO_8S);
     b82:	0f b6       	in	r0, 0x3f	; 63
     b84:	f8 94       	cli
     b86:	a8 95       	wdr
     b88:	00 93 60 00 	sts	0x0060, r16
     b8c:	0f be       	out	0x3f, r0	; 63
     b8e:	c0 92 60 00 	sts	0x0060, r12
                WDTCSR |= (1<<WDIE);
     b92:	80 91 60 00 	lds	r24, 0x0060
     b96:	80 64       	ori	r24, 0x40	; 64
     b98:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     b9c:	83 b7       	in	r24, 0x33	; 51
     b9e:	81 7f       	andi	r24, 0xF1	; 241
     ba0:	84 60       	ori	r24, 0x04	; 4
     ba2:	83 bf       	out	0x33, r24	; 51
                cli();
     ba4:	f8 94       	cli
                sleep_enable();
     ba6:	83 b7       	in	r24, 0x33	; 51
     ba8:	81 60       	ori	r24, 0x01	; 1
     baa:	83 bf       	out	0x33, r24	; 51
                sei();
     bac:	78 94       	sei
                sleep_cpu();
     bae:	88 95       	sleep
                sleep_disable();
     bb0:	83 b7       	in	r24, 0x33	; 51
     bb2:	8e 7f       	andi	r24, 0xFE	; 254
     bb4:	83 bf       	out	0x33, r24	; 51
                sei();
     bb6:	78 94       	sei
                rx_busy = 0;
     bb8:	10 92 87 01 	sts	0x0187, r1
                ports_on();
     bbc:	52 9a       	sbi	0x0a, 2	; 10
     bbe:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     bc0:	80 91 7a 00 	lds	r24, 0x007A
     bc4:	80 68       	ori	r24, 0x80	; 128
     bc6:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bca:	87 e5       	ldi	r24, 0x57	; 87
     bcc:	92 e0       	ldi	r25, 0x02	; 2
     bce:	01 97       	sbiw	r24, 0x01	; 1
     bd0:	f1 f7       	brne	.-4      	; 0xbce <kilo_start+0x108>
     bd2:	00 c0       	rjmp	.+0      	; 0xbd4 <kilo_start+0x10e>
     bd4:	00 00       	nop
                _delay_us(300);
                acomp_on();
     bd6:	80 b7       	in	r24, 0x30	; 48
     bd8:	88 61       	ori	r24, 0x18	; 24
     bda:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     bdc:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     bde:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     be0:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     be2:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     be4:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     be6:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     be8:	ef e1       	ldi	r30, 0x1F	; 31
     bea:	fe e4       	ldi	r31, 0x4E	; 78
     bec:	31 97       	sbiw	r30, 0x01	; 1
     bee:	f1 f7       	brne	.-4      	; 0xbec <kilo_start+0x126>
     bf0:	00 c0       	rjmp	.+0      	; 0xbf2 <kilo_start+0x12c>
     bf2:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     bf4:	80 91 87 01 	lds	r24, 0x0187
     bf8:	81 11       	cpse	r24, r1
     bfa:	81 c0       	rjmp	.+258    	; 0xcfe <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     bfc:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     bfe:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     c00:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     c02:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     c04:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     c06:	3c 98       	cbi	0x07, 4	; 7
     c08:	6d cf       	rjmp	.-294    	; 0xae4 <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     c0a:	80 91 41 01 	lds	r24, 0x0141
     c0e:	81 11       	cpse	r24, r1
     c10:	41 c0       	rjmp	.+130    	; 0xc94 <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     c12:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     c16:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     c1a:	10 92 42 01 	sts	0x0142, r1
     c1e:	62 cf       	rjmp	.-316    	; 0xae4 <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     c20:	48 99       	sbic	0x09, 0	; 9
     c22:	ec cf       	rjmp	.-40     	; 0xbfc <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     c24:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     c26:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     c28:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     c2a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     c2c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     c2e:	3c 98       	cbi	0x07, 4	; 7
     c30:	8f ec       	ldi	r24, 0xCF	; 207
     c32:	97 e0       	ldi	r25, 0x07	; 7
     c34:	01 97       	sbiw	r24, 0x01	; 1
     c36:	f1 f7       	brne	.-4      	; 0xc34 <kilo_start+0x16e>
     c38:	00 c0       	rjmp	.+0      	; 0xc3a <kilo_start+0x174>
     c3a:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     c3c:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     c3e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     c40:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     c42:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     c44:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     c46:	3c 98       	cbi	0x07, 4	; 7
     c48:	9f ef       	ldi	r25, 0xFF	; 255
     c4a:	e1 ee       	ldi	r30, 0xE1	; 225
     c4c:	f4 e0       	ldi	r31, 0x04	; 4
     c4e:	91 50       	subi	r25, 0x01	; 1
     c50:	e0 40       	sbci	r30, 0x00	; 0
     c52:	f0 40       	sbci	r31, 0x00	; 0
     c54:	e1 f7       	brne	.-8      	; 0xc4e <kilo_start+0x188>
     c56:	00 c0       	rjmp	.+0      	; 0xc58 <kilo_start+0x192>
     c58:	00 00       	nop
     c5a:	44 cf       	rjmp	.-376    	; 0xae4 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     c5c:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     c5e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     c60:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     c62:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     c64:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     c66:	3c 98       	cbi	0x07, 4	; 7
     c68:	ef ec       	ldi	r30, 0xCF	; 207
     c6a:	f7 e0       	ldi	r31, 0x07	; 7
     c6c:	31 97       	sbiw	r30, 0x01	; 1
     c6e:	f1 f7       	brne	.-4      	; 0xc6c <kilo_start+0x1a6>
     c70:	00 c0       	rjmp	.+0      	; 0xc72 <kilo_start+0x1ac>
     c72:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     c74:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     c76:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     c78:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     c7a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     c7c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     c7e:	3c 98       	cbi	0x07, 4	; 7
     c80:	ff ef       	ldi	r31, 0xFF	; 255
     c82:	21 ee       	ldi	r18, 0xE1	; 225
     c84:	84 e0       	ldi	r24, 0x04	; 4
     c86:	f1 50       	subi	r31, 0x01	; 1
     c88:	20 40       	sbci	r18, 0x00	; 0
     c8a:	80 40       	sbci	r24, 0x00	; 0
     c8c:	e1 f7       	brne	.-8      	; 0xc86 <kilo_start+0x1c0>
     c8e:	00 c0       	rjmp	.+0      	; 0xc90 <kilo_start+0x1ca>
     c90:	00 00       	nop
     c92:	28 cf       	rjmp	.-432    	; 0xae4 <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     c94:	90 91 41 01 	lds	r25, 0x0141
     c98:	80 91 42 01 	lds	r24, 0x0142
     c9c:	98 17       	cp	r25, r24
     c9e:	09 f4       	brne	.+2      	; 0xca2 <kilo_start+0x1dc>
     ca0:	21 cf       	rjmp	.-446    	; 0xae4 <kilo_start+0x1e>
                        prev_motion = cur_motion;
     ca2:	80 91 41 01 	lds	r24, 0x0141
     ca6:	80 93 42 01 	sts	0x0142, r24
                        if (cur_motion == MOVE_LEFT) {
     caa:	80 91 41 01 	lds	r24, 0x0141
     cae:	81 30       	cpi	r24, 0x01	; 1
     cb0:	09 f4       	brne	.+2      	; 0xcb4 <kilo_start+0x1ee>
     cb2:	50 c0       	rjmp	.+160    	; 0xd54 <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     cb4:	80 91 41 01 	lds	r24, 0x0141
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     cb8:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     cbc:	80 92 b4 00 	sts	0x00B4, r8
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     cc0:	82 30       	cpi	r24, 0x02	; 2
     cc2:	d9 f1       	breq	.+118    	; 0xd3a <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     cc4:	80 92 b3 00 	sts	0x00B3, r8
    OCR2B = cw;
     cc8:	80 92 b4 00 	sts	0x00B4, r8
     ccc:	8f e2       	ldi	r24, 0x2F	; 47
     cce:	95 e7       	ldi	r25, 0x75	; 117
     cd0:	01 97       	sbiw	r24, 0x01	; 1
     cd2:	f1 f7       	brne	.-4      	; 0xcd0 <kilo_start+0x20a>
     cd4:	00 c0       	rjmp	.+0      	; 0xcd6 <kilo_start+0x210>
     cd6:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     cd8:	80 91 bc 01 	lds	r24, 0x01BC
     cdc:	90 91 bb 01 	lds	r25, 0x01BB
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     ce0:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     ce4:	80 93 b4 00 	sts	0x00B4, r24
     ce8:	fd ce       	rjmp	.-518    	; 0xae4 <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     cea:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     cec:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     cee:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     cf0:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     cf2:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     cf4:	3c 98       	cbi	0x07, 4	; 7
     cf6:	f6 ce       	rjmp	.-532    	; 0xae4 <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     cf8:	f7 01       	movw	r30, r14
     cfa:	09 95       	icall
     cfc:	00 cf       	rjmp	.-512    	; 0xafe <kilo_start+0x38>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     cfe:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     d00:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     d02:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     d04:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     d06:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     d08:	3c 98       	cbi	0x07, 4	; 7
     d0a:	ff ef       	ldi	r31, 0xFF	; 255
     d0c:	20 e7       	ldi	r18, 0x70	; 112
     d0e:	82 e0       	ldi	r24, 0x02	; 2
     d10:	f1 50       	subi	r31, 0x01	; 1
     d12:	20 40       	sbci	r18, 0x00	; 0
     d14:	80 40       	sbci	r24, 0x00	; 0
     d16:	e1 f7       	brne	.-8      	; 0xd10 <kilo_start+0x24a>
     d18:	00 c0       	rjmp	.+0      	; 0xd1a <kilo_start+0x254>
     d1a:	00 00       	nop
     d1c:	6f cf       	rjmp	.-290    	; 0xbfc <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     d1e:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     d20:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     d22:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     d24:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     d26:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     d28:	3c 98       	cbi	0x07, 4	; 7
     d2a:	dc ce       	rjmp	.-584    	; 0xae4 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     d2c:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     d2e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     d30:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     d32:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     d34:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     d36:	3c 9a       	sbi	0x07, 4	; 7
     d38:	d5 ce       	rjmp	.-598    	; 0xae4 <kilo_start+0x1e>
     d3a:	ef e2       	ldi	r30, 0x2F	; 47
     d3c:	f5 e7       	ldi	r31, 0x75	; 117
     d3e:	31 97       	sbiw	r30, 0x01	; 1
     d40:	f1 f7       	brne	.-4      	; 0xd3e <kilo_start+0x278>
     d42:	00 c0       	rjmp	.+0      	; 0xd44 <kilo_start+0x27e>
     d44:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     d46:	80 91 a9 01 	lds	r24, 0x01A9
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     d4a:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     d4e:	80 93 b4 00 	sts	0x00B4, r24
     d52:	c8 ce       	rjmp	.-624    	; 0xae4 <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     d54:	80 92 b3 00 	sts	0x00B3, r8
    OCR2B = cw;
     d58:	10 92 b4 00 	sts	0x00B4, r1
     d5c:	8f e2       	ldi	r24, 0x2F	; 47
     d5e:	95 e7       	ldi	r25, 0x75	; 117
     d60:	01 97       	sbiw	r24, 0x01	; 1
     d62:	f1 f7       	brne	.-4      	; 0xd60 <kilo_start+0x29a>
     d64:	00 c0       	rjmp	.+0      	; 0xd66 <kilo_start+0x2a0>
     d66:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     d68:	80 91 bd 01 	lds	r24, 0x01BD
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     d6c:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     d70:	10 92 b4 00 	sts	0x00B4, r1
     d74:	b7 ce       	rjmp	.-658    	; 0xae4 <kilo_start+0x1e>

00000d76 <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     d76:	07 c0       	rjmp	.+14     	; 0xd86 <delay+0x10>
     d78:	ef ec       	ldi	r30, 0xCF	; 207
     d7a:	f7 e0       	ldi	r31, 0x07	; 7
     d7c:	31 97       	sbiw	r30, 0x01	; 1
     d7e:	f1 f7       	brne	.-4      	; 0xd7c <delay+0x6>
     d80:	00 c0       	rjmp	.+0      	; 0xd82 <delay+0xc>
     d82:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     d84:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     d86:	00 97       	sbiw	r24, 0x00	; 0
     d88:	b9 f7       	brne	.-18     	; 0xd78 <delay+0x2>
     d8a:	08 95       	ret

00000d8c <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     d8c:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     d90:	60 93 b4 00 	sts	0x00B4, r22
     d94:	08 95       	ret

00000d96 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     d96:	8f ef       	ldi	r24, 0xFF	; 255
     d98:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     d9c:	80 93 b4 00 	sts	0x00B4, r24
     da0:	8f e0       	ldi	r24, 0x0F	; 15
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	ef ec       	ldi	r30, 0xCF	; 207
     da6:	f7 e0       	ldi	r31, 0x07	; 7
     da8:	31 97       	sbiw	r30, 0x01	; 1
     daa:	f1 f7       	brne	.-4      	; 0xda8 <spinup_motors+0x12>
     dac:	00 c0       	rjmp	.+0      	; 0xdae <spinup_motors+0x18>
     dae:	00 00       	nop
     db0:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     db2:	00 97       	sbiw	r24, 0x00	; 0
     db4:	b9 f7       	brne	.-18     	; 0xda4 <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     db6:	08 95       	ret

00000db8 <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     db8:	80 91 87 01 	lds	r24, 0x0187
     dbc:	81 11       	cpse	r24, r1
     dbe:	1e c0       	rjmp	.+60     	; 0xdfc <get_ambientlight+0x44>
        cli();
     dc0:	f8 94       	cli
        adc_setup_conversion(7);
     dc2:	87 e0       	ldi	r24, 0x07	; 7
     dc4:	80 93 7c 00 	sts	0x007C, r24
     dc8:	83 e8       	ldi	r24, 0x83	; 131
     dca:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     dce:	80 91 7a 00 	lds	r24, 0x007A
     dd2:	80 64       	ori	r24, 0x40	; 64
     dd4:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     dd8:	80 91 7a 00 	lds	r24, 0x007A
     ddc:	86 fd       	sbrc	r24, 6
     dde:	fc cf       	rjmp	.-8      	; 0xdd8 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     de0:	80 91 78 00 	lds	r24, 0x0078
     de4:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     de8:	10 92 7c 00 	sts	0x007C, r1
     dec:	23 ea       	ldi	r18, 0xA3	; 163
     dee:	20 93 7a 00 	sts	0x007A, r18
     df2:	21 e0       	ldi	r18, 0x01	; 1
     df4:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     df8:	78 94       	sei
     dfa:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     dfc:	8f ef       	ldi	r24, 0xFF	; 255
     dfe:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     e00:	08 95       	ret

00000e02 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     e02:	80 91 87 01 	lds	r24, 0x0187
     e06:	81 11       	cpse	r24, r1
     e08:	1e c0       	rjmp	.+60     	; 0xe46 <get_temperature+0x44>
        cli();
     e0a:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     e0c:	88 ec       	ldi	r24, 0xC8	; 200
     e0e:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     e12:	87 e8       	ldi	r24, 0x87	; 135
     e14:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     e18:	80 91 7a 00 	lds	r24, 0x007A
     e1c:	80 64       	ori	r24, 0x40	; 64
     e1e:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     e22:	80 91 7a 00 	lds	r24, 0x007A
     e26:	86 fd       	sbrc	r24, 6
     e28:	fc cf       	rjmp	.-8      	; 0xe22 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     e2a:	80 91 78 00 	lds	r24, 0x0078
     e2e:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     e32:	10 92 7c 00 	sts	0x007C, r1
     e36:	23 ea       	ldi	r18, 0xA3	; 163
     e38:	20 93 7a 00 	sts	0x007A, r18
     e3c:	21 e0       	ldi	r18, 0x01	; 1
     e3e:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     e42:	78 94       	sei
     e44:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     e46:	8f ef       	ldi	r24, 0xFF	; 255
     e48:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     e4a:	08 95       	ret

00000e4c <rand_hard>:

uint8_t rand_hard() {
     e4c:	1f 93       	push	r17
     e4e:	cf 93       	push	r28
     e50:	df 93       	push	r29
     e52:	60 e0       	ldi	r22, 0x00	; 0
     e54:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t num = 0;
     e56:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     e58:	13 ea       	ldi	r17, 0xA3	; 163
     e5a:	d1 e0       	ldi	r29, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     e5c:	c6 e0       	ldi	r28, 0x06	; 6
     e5e:	b3 e8       	ldi	r27, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     e60:	e1 e0       	ldi	r30, 0x01	; 1
     e62:	f0 e0       	ldi	r31, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     e64:	20 e8       	ldi	r18, 0x80	; 128
     e66:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     e68:	f8 94       	cli
            adc_setup_conversion(6);
     e6a:	c0 93 7c 00 	sts	0x007C, r28
     e6e:	b0 93 7a 00 	sts	0x007A, r27
            adc_start_conversion();
     e72:	90 91 7a 00 	lds	r25, 0x007A
     e76:	90 64       	ori	r25, 0x40	; 64
     e78:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     e7c:	90 91 7a 00 	lds	r25, 0x007A
     e80:	96 fd       	sbrc	r25, 6
     e82:	fc cf       	rjmp	.-8      	; 0xe7c <rand_hard+0x30>
            a = ADCW&0x1;
     e84:	40 91 78 00 	lds	r20, 0x0078
     e88:	50 91 79 00 	lds	r21, 0x0079
     e8c:	a4 2f       	mov	r26, r20
     e8e:	a1 70       	andi	r26, 0x01	; 1
            adc_start_conversion();
     e90:	90 91 7a 00 	lds	r25, 0x007A
     e94:	90 64       	ori	r25, 0x40	; 64
     e96:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     e9a:	90 91 7a 00 	lds	r25, 0x007A
     e9e:	96 fd       	sbrc	r25, 6
     ea0:	fc cf       	rjmp	.-8      	; 0xe9a <rand_hard+0x4e>
            b = ADCW&0x1;
     ea2:	40 91 78 00 	lds	r20, 0x0078
     ea6:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     eaa:	10 92 7c 00 	sts	0x007C, r1
     eae:	10 93 7a 00 	sts	0x007A, r17
     eb2:	d0 93 7b 00 	sts	0x007B, r29
            sei();
     eb6:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     eb8:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     eba:	a4 13       	cpse	r26, r20
     ebc:	05 c0       	rjmp	.+10     	; 0xec8 <rand_hard+0x7c>
     ebe:	21 50       	subi	r18, 0x01	; 1
     ec0:	31 09       	sbc	r19, r1
     ec2:	21 15       	cp	r18, r1
     ec4:	31 05       	cpc	r19, r1
     ec6:	81 f6       	brne	.-96     	; 0xe68 <rand_hard+0x1c>
        if (a)
     ec8:	aa 23       	and	r26, r26
     eca:	39 f0       	breq	.+14     	; 0xeda <rand_hard+0x8e>
            num |= (1<<i);
     ecc:	9f 01       	movw	r18, r30
     ece:	06 2e       	mov	r0, r22
     ed0:	01 c0       	rjmp	.+2      	; 0xed4 <rand_hard+0x88>
     ed2:	22 0f       	add	r18, r18
     ed4:	0a 94       	dec	r0
     ed6:	ea f7       	brpl	.-6      	; 0xed2 <rand_hard+0x86>
     ed8:	82 2b       	or	r24, r18
     eda:	6f 5f       	subi	r22, 0xFF	; 255
     edc:	7f 4f       	sbci	r23, 0xFF	; 255
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     ede:	68 30       	cpi	r22, 0x08	; 8
     ee0:	71 05       	cpc	r23, r1
     ee2:	09 f0       	breq	.+2      	; 0xee6 <rand_hard+0x9a>
     ee4:	bf cf       	rjmp	.-130    	; 0xe64 <rand_hard+0x18>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     ee6:	df 91       	pop	r29
     ee8:	cf 91       	pop	r28
     eea:	1f 91       	pop	r17
     eec:	08 95       	ret

00000eee <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     eee:	80 91 1e 01 	lds	r24, 0x011E
     ef2:	98 2f       	mov	r25, r24
     ef4:	99 0f       	add	r25, r25
     ef6:	99 0f       	add	r25, r25
     ef8:	99 0f       	add	r25, r25
     efa:	98 27       	eor	r25, r24
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     efc:	80 91 40 01 	lds	r24, 0x0140
     f00:	21 e0       	ldi	r18, 0x01	; 1
     f02:	28 0f       	add	r18, r24
     f04:	20 93 40 01 	sts	0x0140, r18
     f08:	86 95       	lsr	r24
     f0a:	86 95       	lsr	r24

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     f0c:	89 27       	eor	r24, r25
     f0e:	92 95       	swap	r25
     f10:	96 95       	lsr	r25
     f12:	97 70       	andi	r25, 0x07	; 7
    seed ^= accumulator++>>2;
     f14:	89 27       	eor	r24, r25
     f16:	80 93 1e 01 	sts	0x011E, r24
    return seed;
}
     f1a:	08 95       	ret

00000f1c <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     f1c:	80 93 1e 01 	sts	0x011E, r24
     f20:	08 95       	ret

00000f22 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     f22:	80 91 87 01 	lds	r24, 0x0187
     f26:	81 11       	cpse	r24, r1
     f28:	16 c0       	rjmp	.+44     	; 0xf56 <get_voltage+0x34>
        cli();                                    // disable interrupts
     f2a:	f8 94       	cli
        adc_setup_conversion(6);
     f2c:	86 e0       	ldi	r24, 0x06	; 6
     f2e:	80 93 7c 00 	sts	0x007C, r24
     f32:	83 e8       	ldi	r24, 0x83	; 131
     f34:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     f38:	80 91 7a 00 	lds	r24, 0x007A
     f3c:	80 64       	ori	r24, 0x40	; 64
     f3e:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     f42:	80 91 7a 00 	lds	r24, 0x007A
     f46:	86 fd       	sbrc	r24, 6
     f48:	fc cf       	rjmp	.-8      	; 0xf42 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     f4a:	80 91 78 00 	lds	r24, 0x0078
     f4e:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     f52:	78 94       	sei
     f54:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     f56:	8f ef       	ldi	r24, 0xFF	; 255
     f58:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     f5a:	08 95       	ret

00000f5c <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     f5c:	2f 92       	push	r2
     f5e:	3f 92       	push	r3
     f60:	4f 92       	push	r4
     f62:	5f 92       	push	r5
     f64:	6f 92       	push	r6
     f66:	7f 92       	push	r7
     f68:	8f 92       	push	r8
     f6a:	9f 92       	push	r9
     f6c:	af 92       	push	r10
     f6e:	bf 92       	push	r11
     f70:	cf 92       	push	r12
     f72:	df 92       	push	r13
     f74:	ef 92       	push	r14
     f76:	ff 92       	push	r15
     f78:	0f 93       	push	r16
     f7a:	1f 93       	push	r17
     f7c:	cf 93       	push	r28
     f7e:	df 93       	push	r29
     f80:	00 d0       	rcall	.+0      	; 0xf82 <estimate_distance+0x26>
     f82:	00 d0       	rcall	.+0      	; 0xf84 <estimate_distance+0x28>
     f84:	00 d0       	rcall	.+0      	; 0xf86 <estimate_distance+0x2a>
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
     f8a:	8c 01       	movw	r16, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     f8c:	dc 01       	movw	r26, r24
     f8e:	12 96       	adiw	r26, 0x02	; 2
     f90:	0d 90       	ld	r0, X+
     f92:	bc 91       	ld	r27, X
     f94:	a0 2d       	mov	r26, r0
     f96:	be 83       	std	Y+6, r27	; 0x06
     f98:	ad 83       	std	Y+5, r26	; 0x05
     f9a:	a4 38       	cpi	r26, 0x84	; 132
     f9c:	e3 e0       	ldi	r30, 0x03	; 3
     f9e:	be 07       	cpc	r27, r30
     fa0:	0c f0       	brlt	.+2      	; 0xfa4 <estimate_distance+0x48>
     fa2:	ca c0       	rjmp	.+404    	; 0x1138 <estimate_distance+0x1dc>
        if (dist->high_gain > kilo_irhigh[0]) {
     fa4:	80 91 61 01 	lds	r24, 0x0161
     fa8:	90 91 62 01 	lds	r25, 0x0162
     fac:	8a 17       	cp	r24, r26
     fae:	9b 07       	cpc	r25, r27
     fb0:	08 f4       	brcc	.+2      	; 0xfb4 <estimate_distance+0x58>
     fb2:	a9 c1       	rjmp	.+850    	; 0x1306 <estimate_distance+0x3aa>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     fb4:	60 90 63 01 	lds	r6, 0x0163
     fb8:	70 90 64 01 	lds	r7, 0x0164
     fbc:	6a 16       	cp	r6, r26
     fbe:	7b 06       	cpc	r7, r27
     fc0:	08 f4       	brcc	.+2      	; 0xfc4 <estimate_distance+0x68>
     fc2:	27 c2       	rjmp	.+1102   	; 0x1412 <estimate_distance+0x4b6>
     fc4:	60 90 65 01 	lds	r6, 0x0165
     fc8:	70 90 66 01 	lds	r7, 0x0166
     fcc:	6a 16       	cp	r6, r26
     fce:	7b 06       	cpc	r7, r27
     fd0:	08 f4       	brcc	.+2      	; 0xfd4 <estimate_distance+0x78>
     fd2:	28 c2       	rjmp	.+1104   	; 0x1424 <estimate_distance+0x4c8>
     fd4:	60 90 67 01 	lds	r6, 0x0167
     fd8:	70 90 68 01 	lds	r7, 0x0168
     fdc:	6a 16       	cp	r6, r26
     fde:	7b 06       	cpc	r7, r27
     fe0:	08 f4       	brcc	.+2      	; 0xfe4 <estimate_distance+0x88>
     fe2:	29 c2       	rjmp	.+1106   	; 0x1436 <estimate_distance+0x4da>
     fe4:	60 90 69 01 	lds	r6, 0x0169
     fe8:	70 90 6a 01 	lds	r7, 0x016A
     fec:	6a 16       	cp	r6, r26
     fee:	7b 06       	cpc	r7, r27
     ff0:	08 f4       	brcc	.+2      	; 0xff4 <estimate_distance+0x98>
     ff2:	2a c2       	rjmp	.+1108   	; 0x1448 <estimate_distance+0x4ec>
     ff4:	60 90 6b 01 	lds	r6, 0x016B
     ff8:	70 90 6c 01 	lds	r7, 0x016C
     ffc:	6a 16       	cp	r6, r26
     ffe:	7b 06       	cpc	r7, r27
    1000:	08 f4       	brcc	.+2      	; 0x1004 <estimate_distance+0xa8>
    1002:	8b c1       	rjmp	.+790    	; 0x131a <estimate_distance+0x3be>
    1004:	60 90 6d 01 	lds	r6, 0x016D
    1008:	70 90 6e 01 	lds	r7, 0x016E
    100c:	6a 16       	cp	r6, r26
    100e:	7b 06       	cpc	r7, r27
    1010:	08 f4       	brcc	.+2      	; 0x1014 <estimate_distance+0xb8>
    1012:	23 c2       	rjmp	.+1094   	; 0x145a <estimate_distance+0x4fe>
    1014:	60 90 6f 01 	lds	r6, 0x016F
    1018:	70 90 70 01 	lds	r7, 0x0170
    101c:	6a 16       	cp	r6, r26
    101e:	7b 06       	cpc	r7, r27
    1020:	08 f4       	brcc	.+2      	; 0x1024 <estimate_distance+0xc8>
    1022:	24 c2       	rjmp	.+1096   	; 0x146c <estimate_distance+0x510>
    1024:	60 90 71 01 	lds	r6, 0x0171
    1028:	70 90 72 01 	lds	r7, 0x0172
    102c:	6a 16       	cp	r6, r26
    102e:	7b 06       	cpc	r7, r27
    1030:	08 f4       	brcc	.+2      	; 0x1034 <estimate_distance+0xd8>
    1032:	25 c2       	rjmp	.+1098   	; 0x147e <estimate_distance+0x522>
    1034:	60 90 73 01 	lds	r6, 0x0173
    1038:	70 90 74 01 	lds	r7, 0x0174
    103c:	6a 16       	cp	r6, r26
    103e:	7b 06       	cpc	r7, r27
    1040:	08 f4       	brcc	.+2      	; 0x1044 <estimate_distance+0xe8>
    1042:	26 c2       	rjmp	.+1100   	; 0x1490 <estimate_distance+0x534>
    1044:	60 90 75 01 	lds	r6, 0x0175
    1048:	70 90 76 01 	lds	r7, 0x0176
    104c:	6a 16       	cp	r6, r26
    104e:	7b 06       	cpc	r7, r27
    1050:	08 f4       	brcc	.+2      	; 0x1054 <estimate_distance+0xf8>
    1052:	27 c2       	rjmp	.+1102   	; 0x14a2 <estimate_distance+0x546>
    1054:	60 90 77 01 	lds	r6, 0x0177
    1058:	70 90 78 01 	lds	r7, 0x0178
    105c:	6a 16       	cp	r6, r26
    105e:	7b 06       	cpc	r7, r27
    1060:	08 f4       	brcc	.+2      	; 0x1064 <estimate_distance+0x108>
    1062:	2d c2       	rjmp	.+1114   	; 0x14be <estimate_distance+0x562>
    1064:	60 90 79 01 	lds	r6, 0x0179
    1068:	70 90 7a 01 	lds	r7, 0x017A
    106c:	6a 16       	cp	r6, r26
    106e:	7b 06       	cpc	r7, r27
    1070:	08 f4       	brcc	.+2      	; 0x1074 <estimate_distance+0x118>
    1072:	2e c2       	rjmp	.+1116   	; 0x14d0 <estimate_distance+0x574>
    1074:	60 90 7b 01 	lds	r6, 0x017B
    1078:	70 90 7c 01 	lds	r7, 0x017C
    107c:	6a 16       	cp	r6, r26
    107e:	7b 06       	cpc	r7, r27
    1080:	08 f4       	brcc	.+2      	; 0x1084 <estimate_distance+0x128>
    1082:	2f c2       	rjmp	.+1118   	; 0x14e2 <estimate_distance+0x586>
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	a0 ed       	ldi	r26, 0xD0	; 208
    108a:	b0 e4       	ldi	r27, 0x40	; 64
    108c:	89 83       	std	Y+1, r24	; 0x01
    108e:	9a 83       	std	Y+2, r25	; 0x02
    1090:	ab 83       	std	Y+3, r26	; 0x03
    1092:	bc 83       	std	Y+4, r27	; 0x04
    1094:	8c e0       	ldi	r24, 0x0C	; 12
    1096:	e8 2e       	mov	r14, r24
    1098:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
    109a:	f7 01       	movw	r30, r14
    109c:	ee 0f       	add	r30, r30
    109e:	ff 1f       	adc	r31, r31
    10a0:	ef 59       	subi	r30, 0x9F	; 159
    10a2:	fe 4f       	sbci	r31, 0xFE	; 254
    10a4:	80 81       	ld	r24, Z
    10a6:	91 81       	ldd	r25, Z+1	; 0x01
    10a8:	b3 01       	movw	r22, r6
    10aa:	68 1b       	sub	r22, r24
    10ac:	79 0b       	sbc	r23, r25
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__floatunsisf>
    10b6:	9b 01       	movw	r18, r22
    10b8:	ac 01       	movw	r20, r24
    10ba:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <__addsf3>
    10be:	6b 01       	movw	r12, r22
    10c0:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
    10c2:	ad 81       	ldd	r26, Y+5	; 0x05
    10c4:	be 81       	ldd	r27, Y+6	; 0x06
    10c6:	bd 01       	movw	r22, r26
    10c8:	88 27       	eor	r24, r24
    10ca:	77 fd       	sbrc	r23, 7
    10cc:	80 95       	com	r24
    10ce:	98 2f       	mov	r25, r24
    10d0:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <__floatsisf>
    10d4:	4b 01       	movw	r8, r22
    10d6:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
    10d8:	b3 01       	movw	r22, r6
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__floatunsisf>
    10e2:	2b 01       	movw	r4, r22
    10e4:	3c 01       	movw	r6, r24
    10e6:	29 81       	ldd	r18, Y+1	; 0x01
    10e8:	3a 81       	ldd	r19, Y+2	; 0x02
    10ea:	4b 81       	ldd	r20, Y+3	; 0x03
    10ec:	5c 81       	ldd	r21, Y+4	; 0x04
    10ee:	c7 01       	movw	r24, r14
    10f0:	b6 01       	movw	r22, r12
    10f2:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3>
    10f6:	9b 01       	movw	r18, r22
    10f8:	ac 01       	movw	r20, r24
    10fa:	c3 01       	movw	r24, r6
    10fc:	b2 01       	movw	r22, r4
    10fe:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__subsf3>
    1102:	9b 01       	movw	r18, r22
    1104:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
    1106:	c5 01       	movw	r24, r10
    1108:	b4 01       	movw	r22, r8
    110a:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__subsf3>
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	40 e2       	ldi	r20, 0x20	; 32
    1114:	51 e4       	ldi	r21, 0x41	; 65
    1116:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3>
            b=((int)((int)b/(int)slope));
    111a:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <__fixsfsi>
    111e:	5b 01       	movw	r10, r22
    1120:	c7 01       	movw	r24, r14
    1122:	b6 01       	movw	r22, r12
    1124:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <__fixsfsi>
    1128:	ab 01       	movw	r20, r22
    112a:	bc 01       	movw	r22, r24
    112c:	c5 01       	movw	r24, r10
    112e:	ba 01       	movw	r22, r20
    1130:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <__divmodhi4>
            dist_high=b;
    1134:	76 2e       	mov	r7, r22
    1136:	e8 c0       	rjmp	.+464    	; 0x1308 <estimate_distance+0x3ac>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    1138:	77 24       	eor	r7, r7
    113a:	7a 94       	dec	r7
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
    113c:	d8 01       	movw	r26, r16
    113e:	ad 90       	ld	r10, X+
    1140:	bc 90       	ld	r11, X
    1142:	80 91 88 01 	lds	r24, 0x0188
    1146:	90 91 89 01 	lds	r25, 0x0189
    114a:	8a 15       	cp	r24, r10
    114c:	9b 05       	cpc	r25, r11
    114e:	08 f4       	brcc	.+2      	; 0x1152 <estimate_distance+0x1f6>
    1150:	6f c0       	rjmp	.+222    	; 0x1230 <estimate_distance+0x2d4>
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
    1152:	00 91 8a 01 	lds	r16, 0x018A
    1156:	10 91 8b 01 	lds	r17, 0x018B
    115a:	0a 15       	cp	r16, r10
    115c:	1b 05       	cpc	r17, r11
    115e:	08 f4       	brcc	.+2      	; 0x1162 <estimate_distance+0x206>
    1160:	5c c1       	rjmp	.+696    	; 0x141a <estimate_distance+0x4be>
    1162:	00 91 8c 01 	lds	r16, 0x018C
    1166:	10 91 8d 01 	lds	r17, 0x018D
    116a:	0a 15       	cp	r16, r10
    116c:	1b 05       	cpc	r17, r11
    116e:	08 f4       	brcc	.+2      	; 0x1172 <estimate_distance+0x216>
    1170:	5d c1       	rjmp	.+698    	; 0x142c <estimate_distance+0x4d0>
    1172:	00 91 8e 01 	lds	r16, 0x018E
    1176:	10 91 8f 01 	lds	r17, 0x018F
    117a:	0a 15       	cp	r16, r10
    117c:	1b 05       	cpc	r17, r11
    117e:	08 f4       	brcc	.+2      	; 0x1182 <estimate_distance+0x226>
    1180:	5e c1       	rjmp	.+700    	; 0x143e <estimate_distance+0x4e2>
    1182:	00 91 90 01 	lds	r16, 0x0190
    1186:	10 91 91 01 	lds	r17, 0x0191
    118a:	0a 15       	cp	r16, r10
    118c:	1b 05       	cpc	r17, r11
    118e:	08 f4       	brcc	.+2      	; 0x1192 <estimate_distance+0x236>
    1190:	5f c1       	rjmp	.+702    	; 0x1450 <estimate_distance+0x4f4>
    1192:	00 91 92 01 	lds	r16, 0x0192
    1196:	10 91 93 01 	lds	r17, 0x0193
    119a:	0a 15       	cp	r16, r10
    119c:	1b 05       	cpc	r17, r11
    119e:	08 f4       	brcc	.+2      	; 0x11a2 <estimate_distance+0x246>
    11a0:	d8 c0       	rjmp	.+432    	; 0x1352 <estimate_distance+0x3f6>
    11a2:	00 91 94 01 	lds	r16, 0x0194
    11a6:	10 91 95 01 	lds	r17, 0x0195
    11aa:	0a 15       	cp	r16, r10
    11ac:	1b 05       	cpc	r17, r11
    11ae:	08 f4       	brcc	.+2      	; 0x11b2 <estimate_distance+0x256>
    11b0:	58 c1       	rjmp	.+688    	; 0x1462 <estimate_distance+0x506>
    11b2:	00 91 96 01 	lds	r16, 0x0196
    11b6:	10 91 97 01 	lds	r17, 0x0197
    11ba:	0a 15       	cp	r16, r10
    11bc:	1b 05       	cpc	r17, r11
    11be:	08 f4       	brcc	.+2      	; 0x11c2 <estimate_distance+0x266>
    11c0:	59 c1       	rjmp	.+690    	; 0x1474 <estimate_distance+0x518>
    11c2:	00 91 98 01 	lds	r16, 0x0198
    11c6:	10 91 99 01 	lds	r17, 0x0199
    11ca:	0a 15       	cp	r16, r10
    11cc:	1b 05       	cpc	r17, r11
    11ce:	08 f4       	brcc	.+2      	; 0x11d2 <estimate_distance+0x276>
    11d0:	5a c1       	rjmp	.+692    	; 0x1486 <estimate_distance+0x52a>
    11d2:	00 91 9a 01 	lds	r16, 0x019A
    11d6:	10 91 9b 01 	lds	r17, 0x019B
    11da:	0a 15       	cp	r16, r10
    11dc:	1b 05       	cpc	r17, r11
    11de:	08 f4       	brcc	.+2      	; 0x11e2 <estimate_distance+0x286>
    11e0:	5b c1       	rjmp	.+694    	; 0x1498 <estimate_distance+0x53c>
    11e2:	00 91 9c 01 	lds	r16, 0x019C
    11e6:	10 91 9d 01 	lds	r17, 0x019D
    11ea:	0a 15       	cp	r16, r10
    11ec:	1b 05       	cpc	r17, r11
    11ee:	08 f4       	brcc	.+2      	; 0x11f2 <estimate_distance+0x296>
    11f0:	5c c1       	rjmp	.+696    	; 0x14aa <estimate_distance+0x54e>
    11f2:	00 91 9e 01 	lds	r16, 0x019E
    11f6:	10 91 9f 01 	lds	r17, 0x019F
    11fa:	0a 15       	cp	r16, r10
    11fc:	1b 05       	cpc	r17, r11
    11fe:	08 f4       	brcc	.+2      	; 0x1202 <estimate_distance+0x2a6>
    1200:	59 c1       	rjmp	.+690    	; 0x14b4 <estimate_distance+0x558>
    1202:	00 91 a0 01 	lds	r16, 0x01A0
    1206:	10 91 a1 01 	lds	r17, 0x01A1
    120a:	0a 15       	cp	r16, r10
    120c:	1b 05       	cpc	r17, r11
    120e:	08 f4       	brcc	.+2      	; 0x1212 <estimate_distance+0x2b6>
    1210:	5a c1       	rjmp	.+692    	; 0x14c6 <estimate_distance+0x56a>
    1212:	00 91 a2 01 	lds	r16, 0x01A2
    1216:	10 91 a3 01 	lds	r17, 0x01A3
    121a:	0a 15       	cp	r16, r10
    121c:	1b 05       	cpc	r17, r11
    121e:	08 f4       	brcc	.+2      	; 0x1222 <estimate_distance+0x2c6>
    1220:	5b c1       	rjmp	.+694    	; 0x14d8 <estimate_distance+0x57c>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
    1222:	1a e5       	ldi	r17, 0x5A	; 90
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
    1224:	bf ef       	ldi	r27, 0xFF	; 255
    1226:	7b 12       	cpse	r7, r27
    1228:	07 c0       	rjmp	.+14     	; 0x1238 <estimate_distance+0x2dc>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
    122a:	81 e2       	ldi	r24, 0x21	; 33
    122c:	81 0f       	add	r24, r17
    122e:	52 c0       	rjmp	.+164    	; 0x12d4 <estimate_distance+0x378>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
    1230:	10 e0       	ldi	r17, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
    1232:	bf ef       	ldi	r27, 0xFF	; 255
    1234:	7b 16       	cp	r7, r27
    1236:	c9 f3       	breq	.-14     	; 0x122a <estimate_distance+0x2ce>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
    1238:	ed 81       	ldd	r30, Y+5	; 0x05
    123a:	fe 81       	ldd	r31, Y+6	; 0x06
    123c:	bf 01       	movw	r22, r30
    123e:	88 27       	eor	r24, r24
    1240:	77 fd       	sbrc	r23, 7
    1242:	80 95       	com	r24
    1244:	98 2f       	mov	r25, r24
    1246:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <__floatsisf>
    124a:	6b 01       	movw	r12, r22
    124c:	7c 01       	movw	r14, r24
    124e:	67 2d       	mov	r22, r7
    1250:	70 e0       	ldi	r23, 0x00	; 0
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__floatunsisf>
    125a:	4b 01       	movw	r8, r22
    125c:	5c 01       	movw	r10, r24
    125e:	a7 01       	movw	r20, r14
    1260:	96 01       	movw	r18, r12
    1262:	60 e0       	ldi	r22, 0x00	; 0
    1264:	70 e0       	ldi	r23, 0x00	; 0
    1266:	81 e6       	ldi	r24, 0x61	; 97
    1268:	94 e4       	ldi	r25, 0x44	; 68
    126a:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__subsf3>
    126e:	9b 01       	movw	r18, r22
    1270:	ac 01       	movw	r20, r24
    1272:	c5 01       	movw	r24, r10
    1274:	b4 01       	movw	r22, r8
    1276:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3>
    127a:	4b 01       	movw	r8, r22
    127c:	5c 01       	movw	r10, r24
    127e:	61 2f       	mov	r22, r17
    1280:	70 e0       	ldi	r23, 0x00	; 0
    1282:	80 e0       	ldi	r24, 0x00	; 0
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__floatunsisf>
    128a:	2b 01       	movw	r4, r22
    128c:	3c 01       	movw	r6, r24
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	4f e2       	ldi	r20, 0x2F	; 47
    1294:	54 e4       	ldi	r21, 0x44	; 68
    1296:	c7 01       	movw	r24, r14
    1298:	b6 01       	movw	r22, r12
    129a:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__subsf3>
    129e:	9b 01       	movw	r18, r22
    12a0:	ac 01       	movw	r20, r24
    12a2:	c3 01       	movw	r24, r6
    12a4:	b2 01       	movw	r22, r4
    12a6:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3>
    12aa:	9b 01       	movw	r18, r22
    12ac:	ac 01       	movw	r20, r24
    12ae:	c5 01       	movw	r24, r10
    12b0:	b4 01       	movw	r22, r8
    12b2:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <__addsf3>
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	48 e4       	ldi	r20, 0x48	; 72
    12bc:	53 e4       	ldi	r21, 0x43	; 67
    12be:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <__divsf3>
    12c2:	20 e0       	ldi	r18, 0x00	; 0
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	44 e0       	ldi	r20, 0x04	; 4
    12c8:	52 e4       	ldi	r21, 0x42	; 66
    12ca:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <__addsf3>
    12ce:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__fixunssfsi>
    12d2:	86 2f       	mov	r24, r22
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
    }
}
    12d4:	26 96       	adiw	r28, 0x06	; 6
    12d6:	0f b6       	in	r0, 0x3f	; 63
    12d8:	f8 94       	cli
    12da:	de bf       	out	0x3e, r29	; 62
    12dc:	0f be       	out	0x3f, r0	; 63
    12de:	cd bf       	out	0x3d, r28	; 61
    12e0:	df 91       	pop	r29
    12e2:	cf 91       	pop	r28
    12e4:	1f 91       	pop	r17
    12e6:	0f 91       	pop	r16
    12e8:	ff 90       	pop	r15
    12ea:	ef 90       	pop	r14
    12ec:	df 90       	pop	r13
    12ee:	cf 90       	pop	r12
    12f0:	bf 90       	pop	r11
    12f2:	af 90       	pop	r10
    12f4:	9f 90       	pop	r9
    12f6:	8f 90       	pop	r8
    12f8:	7f 90       	pop	r7
    12fa:	6f 90       	pop	r6
    12fc:	5f 90       	pop	r5
    12fe:	4f 90       	pop	r4
    1300:	3f 90       	pop	r3
    1302:	2f 90       	pop	r2
    1304:	08 95       	ret
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
    1306:	71 2c       	mov	r7, r1
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
    1308:	ed 81       	ldd	r30, Y+5	; 0x05
    130a:	fe 81       	ldd	r31, Y+6	; 0x06
    130c:	ed 3b       	cpi	r30, 0xBD	; 189
    130e:	f2 40       	sbci	r31, 0x02	; 2
    1310:	0c f0       	brlt	.+2      	; 0x1314 <estimate_distance+0x3b8>
    1312:	14 cf       	rjmp	.-472    	; 0x113c <estimate_distance+0x1e0>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
    1314:	81 e2       	ldi	r24, 0x21	; 33
    1316:	87 0d       	add	r24, r7
    1318:	dd cf       	rjmp	.-70     	; 0x12d4 <estimate_distance+0x378>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    131a:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
    131c:	85 e0       	ldi	r24, 0x05	; 5
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	7c 01       	movw	r14, r24
    1322:	f1 e0       	ldi	r31, 0x01	; 1
    1324:	ef 1a       	sub	r14, r31
    1326:	f1 08       	sbc	r15, r1
    1328:	70 e0       	ldi	r23, 0x00	; 0
    132a:	80 e0       	ldi	r24, 0x00	; 0
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__floatunsisf>
    1332:	20 e0       	ldi	r18, 0x00	; 0
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	40 e0       	ldi	r20, 0x00	; 0
    1338:	5f e3       	ldi	r21, 0x3F	; 63
    133a:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3>
    133e:	20 e0       	ldi	r18, 0x00	; 0
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	a9 01       	movw	r20, r18
    1344:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <__addsf3>
    1348:	69 83       	std	Y+1, r22	; 0x01
    134a:	7a 83       	std	Y+2, r23	; 0x02
    134c:	8b 83       	std	Y+3, r24	; 0x03
    134e:	9c 83       	std	Y+4, r25	; 0x04
    1350:	a4 ce       	rjmp	.-696    	; 0x109a <estimate_distance+0x13e>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1352:	75 e0       	ldi	r23, 0x05	; 5
    1354:	67 2e       	mov	r6, r23
                if(dist->low_gain > kilo_irlow[i]) {
    1356:	e5 e0       	ldi	r30, 0x05	; 5
    1358:	f0 e0       	ldi	r31, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
    135a:	ee 0f       	add	r30, r30
    135c:	ff 1f       	adc	r31, r31
    135e:	ea 57       	subi	r30, 0x7A	; 122
    1360:	fe 4f       	sbci	r31, 0xFE	; 254
    1362:	80 81       	ld	r24, Z
    1364:	91 81       	ldd	r25, Z+1	; 0x01
    1366:	b8 01       	movw	r22, r16
    1368:	68 1b       	sub	r22, r24
    136a:	79 0b       	sbc	r23, r25
    136c:	80 e0       	ldi	r24, 0x00	; 0
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__floatunsisf>
    1374:	9b 01       	movw	r18, r22
    1376:	ac 01       	movw	r20, r24
    1378:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <__addsf3>
    137c:	6b 01       	movw	r12, r22
    137e:	7c 01       	movw	r14, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
    1380:	b5 01       	movw	r22, r10
    1382:	88 27       	eor	r24, r24
    1384:	77 fd       	sbrc	r23, 7
    1386:	80 95       	com	r24
    1388:	98 2f       	mov	r25, r24
    138a:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <__floatsisf>
    138e:	4b 01       	movw	r8, r22
    1390:	5c 01       	movw	r10, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
    1392:	b8 01       	movw	r22, r16
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__floatunsisf>
    139c:	1b 01       	movw	r2, r22
    139e:	2c 01       	movw	r4, r24
    13a0:	66 2d       	mov	r22, r6
    13a2:	70 e0       	ldi	r23, 0x00	; 0
    13a4:	80 e0       	ldi	r24, 0x00	; 0
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__floatunsisf>
    13ac:	20 e0       	ldi	r18, 0x00	; 0
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	40 e0       	ldi	r20, 0x00	; 0
    13b2:	5f e3       	ldi	r21, 0x3F	; 63
    13b4:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3>
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	a9 01       	movw	r20, r18
    13be:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <__addsf3>
    13c2:	a7 01       	movw	r20, r14
    13c4:	96 01       	movw	r18, r12
    13c6:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3>
    13ca:	9b 01       	movw	r18, r22
    13cc:	ac 01       	movw	r20, r24
    13ce:	c2 01       	movw	r24, r4
    13d0:	b1 01       	movw	r22, r2
    13d2:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__subsf3>
    13d6:	9b 01       	movw	r18, r22
    13d8:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
    13da:	c5 01       	movw	r24, r10
    13dc:	b4 01       	movw	r22, r8
    13de:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__subsf3>
    13e2:	20 e0       	ldi	r18, 0x00	; 0
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	40 e2       	ldi	r20, 0x20	; 32
    13e8:	51 e4       	ldi	r21, 0x41	; 65
    13ea:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3>
                b=((int)((int)b/(int)slope));
    13ee:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <__fixsfsi>
    13f2:	8b 01       	movw	r16, r22
    13f4:	c7 01       	movw	r24, r14
    13f6:	b6 01       	movw	r22, r12
    13f8:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <__fixsfsi>
    13fc:	ab 01       	movw	r20, r22
    13fe:	bc 01       	movw	r22, r24
    1400:	c8 01       	movw	r24, r16
    1402:	ba 01       	movw	r22, r20
    1404:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <__divmodhi4>
                dist_low=b;
    1408:	16 2f       	mov	r17, r22
            }
        }
    }

    if (dist_low != 255) {
    140a:	6f 3f       	cpi	r22, 0xFF	; 255
    140c:	09 f0       	breq	.+2      	; 0x1410 <estimate_distance+0x4b4>
    140e:	11 cf       	rjmp	.-478    	; 0x1232 <estimate_distance+0x2d6>
    1410:	81 cf       	rjmp	.-254    	; 0x1314 <estimate_distance+0x3b8>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
    1412:	61 e0       	ldi	r22, 0x01	; 1
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	83 cf       	rjmp	.-250    	; 0x1320 <estimate_distance+0x3c4>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
    141a:	66 24       	eor	r6, r6
    141c:	63 94       	inc	r6
    141e:	e1 e0       	ldi	r30, 0x01	; 1
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	9b cf       	rjmp	.-202    	; 0x135a <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1424:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
    1426:	82 e0       	ldi	r24, 0x02	; 2
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	7a cf       	rjmp	.-268    	; 0x1320 <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    142c:	a2 e0       	ldi	r26, 0x02	; 2
    142e:	6a 2e       	mov	r6, r26
                if(dist->low_gain > kilo_irlow[i]) {
    1430:	e2 e0       	ldi	r30, 0x02	; 2
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	92 cf       	rjmp	.-220    	; 0x135a <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1436:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
    1438:	83 e0       	ldi	r24, 0x03	; 3
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	71 cf       	rjmp	.-286    	; 0x1320 <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    143e:	f3 e0       	ldi	r31, 0x03	; 3
    1440:	6f 2e       	mov	r6, r31
                if(dist->low_gain > kilo_irlow[i]) {
    1442:	e3 e0       	ldi	r30, 0x03	; 3
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	89 cf       	rjmp	.-238    	; 0x135a <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1448:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
    144a:	84 e0       	ldi	r24, 0x04	; 4
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	68 cf       	rjmp	.-304    	; 0x1320 <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1450:	e4 e0       	ldi	r30, 0x04	; 4
    1452:	6e 2e       	mov	r6, r30
                if(dist->low_gain > kilo_irlow[i]) {
    1454:	e4 e0       	ldi	r30, 0x04	; 4
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 cf       	rjmp	.-256    	; 0x135a <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    145a:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
    145c:	86 e0       	ldi	r24, 0x06	; 6
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	5f cf       	rjmp	.-322    	; 0x1320 <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1462:	66 e0       	ldi	r22, 0x06	; 6
    1464:	66 2e       	mov	r6, r22
                if(dist->low_gain > kilo_irlow[i]) {
    1466:	e6 e0       	ldi	r30, 0x06	; 6
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	77 cf       	rjmp	.-274    	; 0x135a <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    146c:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
    146e:	87 e0       	ldi	r24, 0x07	; 7
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	56 cf       	rjmp	.-340    	; 0x1320 <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1474:	57 e0       	ldi	r21, 0x07	; 7
    1476:	65 2e       	mov	r6, r21
                if(dist->low_gain > kilo_irlow[i]) {
    1478:	e7 e0       	ldi	r30, 0x07	; 7
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	6e cf       	rjmp	.-292    	; 0x135a <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    147e:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
    1480:	88 e0       	ldi	r24, 0x08	; 8
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	4d cf       	rjmp	.-358    	; 0x1320 <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1486:	48 e0       	ldi	r20, 0x08	; 8
    1488:	64 2e       	mov	r6, r20
                if(dist->low_gain > kilo_irlow[i]) {
    148a:	e8 e0       	ldi	r30, 0x08	; 8
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	65 cf       	rjmp	.-310    	; 0x135a <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1490:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
    1492:	89 e0       	ldi	r24, 0x09	; 9
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	44 cf       	rjmp	.-376    	; 0x1320 <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1498:	39 e0       	ldi	r19, 0x09	; 9
    149a:	63 2e       	mov	r6, r19
                if(dist->low_gain > kilo_irlow[i]) {
    149c:	e9 e0       	ldi	r30, 0x09	; 9
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	5c cf       	rjmp	.-328    	; 0x135a <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    14a2:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
    14a4:	8a e0       	ldi	r24, 0x0A	; 10
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	3b cf       	rjmp	.-394    	; 0x1320 <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    14aa:	2a e0       	ldi	r18, 0x0A	; 10
    14ac:	62 2e       	mov	r6, r18
                if(dist->low_gain > kilo_irlow[i]) {
    14ae:	ea e0       	ldi	r30, 0x0A	; 10
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	53 cf       	rjmp	.-346    	; 0x135a <estimate_distance+0x3fe>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    14b4:	9b e0       	ldi	r25, 0x0B	; 11
    14b6:	69 2e       	mov	r6, r25
                if(dist->low_gain > kilo_irlow[i]) {
    14b8:	eb e0       	ldi	r30, 0x0B	; 11
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	4e cf       	rjmp	.-356    	; 0x135a <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    14be:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
    14c0:	8b e0       	ldi	r24, 0x0B	; 11
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	2d cf       	rjmp	.-422    	; 0x1320 <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    14c6:	8c e0       	ldi	r24, 0x0C	; 12
    14c8:	68 2e       	mov	r6, r24
                if(dist->low_gain > kilo_irlow[i]) {
    14ca:	ec e0       	ldi	r30, 0x0C	; 12
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	45 cf       	rjmp	.-374    	; 0x135a <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    14d0:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
    14d2:	8c e0       	ldi	r24, 0x0C	; 12
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	24 cf       	rjmp	.-440    	; 0x1320 <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    14d8:	bd e0       	ldi	r27, 0x0D	; 13
    14da:	6b 2e       	mov	r6, r27
                if(dist->low_gain > kilo_irlow[i]) {
    14dc:	ed e0       	ldi	r30, 0x0D	; 13
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	3c cf       	rjmp	.-392    	; 0x135a <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    14e2:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
    14e4:	8d e0       	ldi	r24, 0x0D	; 13
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	1b cf       	rjmp	.-458    	; 0x1320 <estimate_distance+0x3c4>

000014ea <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
    14ea:	1f 92       	push	r1
    14ec:	0f 92       	push	r0
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	0f 92       	push	r0
    14f2:	11 24       	eor	r1, r1
    14f4:	2f 93       	push	r18
    14f6:	3f 93       	push	r19
    14f8:	4f 93       	push	r20
    14fa:	5f 93       	push	r21
    14fc:	6f 93       	push	r22
    14fe:	7f 93       	push	r23
    1500:	8f 93       	push	r24
    1502:	9f 93       	push	r25
    1504:	af 93       	push	r26
    1506:	bf 93       	push	r27
    1508:	ef 93       	push	r30
    150a:	ff 93       	push	r31
    tx_clock += tx_increment;
    150c:	80 91 a7 01 	lds	r24, 0x01A7
    1510:	90 91 a8 01 	lds	r25, 0x01A8
    1514:	20 91 a5 01 	lds	r18, 0x01A5
    1518:	30 91 a6 01 	lds	r19, 0x01A6
    151c:	82 0f       	add	r24, r18
    151e:	93 1f       	adc	r25, r19
    1520:	90 93 a8 01 	sts	0x01A8, r25
    1524:	80 93 a7 01 	sts	0x01A7, r24
    tx_increment = 0xFF;
    1528:	8f ef       	ldi	r24, 0xFF	; 255
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	90 93 a6 01 	sts	0x01A6, r25
    1530:	80 93 a5 01 	sts	0x01A5, r24
    OCR0A = tx_increment;
    1534:	8f ef       	ldi	r24, 0xFF	; 255
    1536:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
    1538:	80 91 83 01 	lds	r24, 0x0183
    153c:	90 91 84 01 	lds	r25, 0x0184
    1540:	a0 91 85 01 	lds	r26, 0x0185
    1544:	b0 91 86 01 	lds	r27, 0x0186
    1548:	01 96       	adiw	r24, 0x01	; 1
    154a:	a1 1d       	adc	r26, r1
    154c:	b1 1d       	adc	r27, r1
    154e:	80 93 83 01 	sts	0x0183, r24
    1552:	90 93 84 01 	sts	0x0184, r25
    1556:	a0 93 85 01 	sts	0x0185, r26
    155a:	b0 93 86 01 	sts	0x0186, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
    155e:	80 91 87 01 	lds	r24, 0x0187
    1562:	81 11       	cpse	r24, r1
    1564:	0f c0       	rjmp	.+30     	; 0x1584 <__vector_14+0x9a>
    1566:	80 91 b6 01 	lds	r24, 0x01B6
    156a:	90 91 b7 01 	lds	r25, 0x01B7
    156e:	20 91 a7 01 	lds	r18, 0x01A7
    1572:	30 91 a8 01 	lds	r19, 0x01A8
    1576:	82 17       	cp	r24, r18
    1578:	93 07       	cpc	r25, r19
    157a:	20 f4       	brcc	.+8      	; 0x1584 <__vector_14+0x9a>
    157c:	80 91 43 01 	lds	r24, 0x0143
    1580:	84 30       	cpi	r24, 0x04	; 4
    1582:	89 f0       	breq	.+34     	; 0x15a6 <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
    1584:	ff 91       	pop	r31
    1586:	ef 91       	pop	r30
    1588:	bf 91       	pop	r27
    158a:	af 91       	pop	r26
    158c:	9f 91       	pop	r25
    158e:	8f 91       	pop	r24
    1590:	7f 91       	pop	r23
    1592:	6f 91       	pop	r22
    1594:	5f 91       	pop	r21
    1596:	4f 91       	pop	r20
    1598:	3f 91       	pop	r19
    159a:	2f 91       	pop	r18
    159c:	0f 90       	pop	r0
    159e:	0f be       	out	0x3f, r0	; 63
    15a0:	0f 90       	pop	r0
    15a2:	1f 90       	pop	r1
    15a4:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
    15a6:	e0 91 21 01 	lds	r30, 0x0121
    15aa:	f0 91 22 01 	lds	r31, 0x0122
    15ae:	09 95       	icall
        if (msg) {
    15b0:	00 97       	sbiw	r24, 0x00	; 0
    15b2:	41 f3       	breq	.-48     	; 0x1584 <__vector_14+0x9a>
            if (message_send(msg)) {
    15b4:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <message_send>
    15b8:	81 11       	cpse	r24, r1
    15ba:	09 c0       	rjmp	.+18     	; 0x15ce <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
    15bc:	0e 94 3c 02 	call	0x478	; 0x478 <rand>
    15c0:	99 27       	eor	r25, r25
    15c2:	90 93 a6 01 	sts	0x01A6, r25
    15c6:	80 93 a5 01 	sts	0x01A5, r24
                OCR0A = tx_increment;
    15ca:	87 bd       	out	0x27, r24	; 39
    15cc:	db cf       	rjmp	.-74     	; 0x1584 <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
    15ce:	e0 91 1f 01 	lds	r30, 0x011F
    15d2:	f0 91 20 01 	lds	r31, 0x0120
    15d6:	09 95       	icall
                tx_clock = 0;
    15d8:	10 92 a8 01 	sts	0x01A8, r1
    15dc:	10 92 a7 01 	sts	0x01A7, r1
    15e0:	d1 cf       	rjmp	.-94     	; 0x1584 <__vector_14+0x9a>

000015e2 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
    15e2:	80 ff       	sbrs	r24, 0
    15e4:	11 c0       	rjmp	.+34     	; 0x1608 <set_color+0x26>
        DDRD |= (1<<5);
    15e6:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
    15e8:	81 ff       	sbrs	r24, 1
    15ea:	11 c0       	rjmp	.+34     	; 0x160e <set_color+0x2c>
        DDRD |= (1<<4);
    15ec:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
    15ee:	82 ff       	sbrs	r24, 2
    15f0:	11 c0       	rjmp	.+34     	; 0x1614 <set_color+0x32>
        DDRC |= (1<<3);
    15f2:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
    15f4:	83 ff       	sbrs	r24, 3
    15f6:	11 c0       	rjmp	.+34     	; 0x161a <set_color+0x38>
        DDRC |= (1<<2);
    15f8:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
    15fa:	84 ff       	sbrs	r24, 4
    15fc:	11 c0       	rjmp	.+34     	; 0x1620 <set_color+0x3e>
        DDRC |= (1<<5);
    15fe:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
    1600:	85 fd       	sbrc	r24, 5
    1602:	11 c0       	rjmp	.+34     	; 0x1626 <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1604:	3c 98       	cbi	0x07, 4	; 7
    1606:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1608:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
    160a:	81 fd       	sbrc	r24, 1
    160c:	ef cf       	rjmp	.-34     	; 0x15ec <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    160e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
    1610:	82 fd       	sbrc	r24, 2
    1612:	ef cf       	rjmp	.-34     	; 0x15f2 <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1614:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
    1616:	83 fd       	sbrc	r24, 3
    1618:	ef cf       	rjmp	.-34     	; 0x15f8 <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    161a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
    161c:	84 fd       	sbrc	r24, 4
    161e:	ef cf       	rjmp	.-34     	; 0x15fe <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1620:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
    1622:	85 ff       	sbrs	r24, 5
    1624:	ef cf       	rjmp	.-34     	; 0x1604 <set_color+0x22>
        DDRC |= (1<<4);
    1626:	3c 9a       	sbi	0x07, 4	; 7
    1628:	08 95       	ret

0000162a <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
    162a:	1f 92       	push	r1
    162c:	0f 92       	push	r0
    162e:	0f b6       	in	r0, 0x3f	; 63
    1630:	0f 92       	push	r0
    1632:	11 24       	eor	r1, r1
    1634:	8f 93       	push	r24
    1636:	9f 93       	push	r25
    rx_timer_off();
    1638:	10 92 81 00 	sts	0x0081, r1
    163c:	10 92 85 00 	sts	0x0085, r1
    1640:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	80 93 60 01 	sts	0x0160, r24
    rx_leadingbyte = 1;
    164a:	80 93 a4 01 	sts	0x01A4, r24
    rx_busy = 0;
    164e:	10 92 87 01 	sts	0x0187, r1
    adc_trigger_high_gain();
    1652:	10 92 7c 00 	sts	0x007C, r1
    1656:	93 ea       	ldi	r25, 0xA3	; 163
    1658:	90 93 7a 00 	sts	0x007A, r25
    165c:	80 93 7b 00 	sts	0x007B, r24
}
    1660:	9f 91       	pop	r25
    1662:	8f 91       	pop	r24
    1664:	0f 90       	pop	r0
    1666:	0f be       	out	0x3f, r0	; 63
    1668:	0f 90       	pop	r0
    166a:	1f 90       	pop	r1
    166c:	18 95       	reti

0000166e <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
    166e:	1f 92       	push	r1
    1670:	0f 92       	push	r0
    1672:	0f b6       	in	r0, 0x3f	; 63
    1674:	0f 92       	push	r0
    1676:	11 24       	eor	r1, r1
    1678:	2f 93       	push	r18
    167a:	3f 93       	push	r19
    167c:	4f 93       	push	r20
    167e:	5f 93       	push	r21
    1680:	6f 93       	push	r22
    1682:	7f 93       	push	r23
    1684:	8f 93       	push	r24
    1686:	9f 93       	push	r25
    1688:	af 93       	push	r26
    168a:	bf 93       	push	r27
    168c:	cf 93       	push	r28
    168e:	df 93       	push	r29
    1690:	ef 93       	push	r30
    1692:	ff 93       	push	r31
    uint16_t timer = TCNT1;
    1694:	20 91 84 00 	lds	r18, 0x0084
    1698:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
    169c:	41 e0       	ldi	r20, 0x01	; 1
    169e:	40 93 87 01 	sts	0x0187, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
    16a2:	80 91 60 01 	lds	r24, 0x0160
    16a6:	88 23       	and	r24, r24
    16a8:	a9 f1       	breq	.+106    	; 0x1714 <__vector_23+0xa6>
        rx_timer_on();
    16aa:	10 92 85 00 	sts	0x0085, r1
    16ae:	10 92 84 00 	sts	0x0084, r1
    16b2:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
    16b6:	10 92 b8 01 	sts	0x01B8, r1
        rx_leadingbit = 0;
    16ba:	10 92 60 01 	sts	0x0160, r1
        if (rx_leadingbyte) {
    16be:	80 91 a4 01 	lds	r24, 0x01A4
    16c2:	88 23       	and	r24, r24
    16c4:	a1 f0       	breq	.+40     	; 0x16ee <__vector_23+0x80>
            adc_finish_conversion();
    16c6:	80 91 7a 00 	lds	r24, 0x007A
    16ca:	86 fd       	sbrc	r24, 6
    16cc:	fc cf       	rjmp	.-8      	; 0x16c6 <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
    16ce:	80 91 78 00 	lds	r24, 0x0078
    16d2:	90 91 79 00 	lds	r25, 0x0079
    16d6:	90 93 82 01 	sts	0x0182, r25
    16da:	80 93 81 01 	sts	0x0181, r24
            adc_trigger_low_gain();
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	80 93 7c 00 	sts	0x007C, r24
    16e4:	93 ea       	ldi	r25, 0xA3	; 163
    16e6:	90 93 7a 00 	sts	0x007A, r25
    16ea:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
    16ee:	ff 91       	pop	r31
    16f0:	ef 91       	pop	r30
    16f2:	df 91       	pop	r29
    16f4:	cf 91       	pop	r28
    16f6:	bf 91       	pop	r27
    16f8:	af 91       	pop	r26
    16fa:	9f 91       	pop	r25
    16fc:	8f 91       	pop	r24
    16fe:	7f 91       	pop	r23
    1700:	6f 91       	pop	r22
    1702:	5f 91       	pop	r21
    1704:	4f 91       	pop	r20
    1706:	3f 91       	pop	r19
    1708:	2f 91       	pop	r18
    170a:	0f 90       	pop	r0
    170c:	0f be       	out	0x3f, r0	; 63
    170e:	0f 90       	pop	r0
    1710:	1f 90       	pop	r1
    1712:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    1714:	c9 01       	movw	r24, r18
    1716:	87 58       	subi	r24, 0x87	; 135
    1718:	91 09       	sbc	r25, r1
    171a:	84 37       	cpi	r24, 0x74	; 116
    171c:	99 40       	sbci	r25, 0x09	; 9
    171e:	08 f0       	brcs	.+2      	; 0x1722 <__vector_23+0xb4>
    1720:	4f c0       	rjmp	.+158    	; 0x17c0 <__vector_23+0x152>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    1722:	26 58       	subi	r18, 0x86	; 134
    1724:	31 09       	sbc	r19, r1
    1726:	a4 ef       	ldi	r26, 0xF4	; 244
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <__umulhisi3>
    172e:	aa 27       	eor	r26, r26
    1730:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
    1732:	88 30       	cpi	r24, 0x08	; 8
    1734:	08 f4       	brcc	.+2      	; 0x1738 <__vector_23+0xca>
    1736:	7b c0       	rjmp	.+246    	; 0x182e <__vector_23+0x1c0>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    1738:	40 93 60 01 	sts	0x0160, r20
                if (rx_leadingbyte) {
    173c:	80 91 a4 01 	lds	r24, 0x01A4
    1740:	81 11       	cpse	r24, r1
    1742:	52 c0       	rjmp	.+164    	; 0x17e8 <__vector_23+0x17a>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    1744:	80 91 7e 01 	lds	r24, 0x017E
    1748:	e8 2f       	mov	r30, r24
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	e6 55       	subi	r30, 0x56	; 86
    174e:	fe 4f       	sbci	r31, 0xFE	; 254
    1750:	90 91 b8 01 	lds	r25, 0x01B8
    1754:	90 83       	st	Z, r25
                    rx_byteindex++;
    1756:	8f 5f       	subi	r24, 0xFF	; 255
    1758:	80 93 7e 01 	sts	0x017E, r24
                    if (rx_byteindex == sizeof(message_t)) {
    175c:	8c 30       	cpi	r24, 0x0C	; 12
    175e:	39 f6       	brne	.-114    	; 0x16ee <__vector_23+0x80>
                        rx_timer_off();
    1760:	10 92 81 00 	sts	0x0081, r1
    1764:	10 92 85 00 	sts	0x0085, r1
    1768:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    176c:	40 93 a4 01 	sts	0x01A4, r20
                        rx_busy = 0;
    1770:	10 92 87 01 	sts	0x0187, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    1774:	c0 91 b4 01 	lds	r28, 0x01B4
    1778:	d0 91 b5 01 	lds	r29, 0x01B5
    177c:	8a ea       	ldi	r24, 0xAA	; 170
    177e:	91 e0       	ldi	r25, 0x01	; 1
    1780:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <message_crc>
    1784:	c8 17       	cp	r28, r24
    1786:	d9 07       	cpc	r29, r25
    1788:	09 f0       	breq	.+2      	; 0x178c <__vector_23+0x11e>
    178a:	b1 cf       	rjmp	.-158    	; 0x16ee <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    178c:	80 91 b3 01 	lds	r24, 0x01B3
    1790:	87 ff       	sbrs	r24, 7
    1792:	5e c0       	rjmp	.+188    	; 0x1850 <__vector_23+0x1e2>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    1794:	98 e7       	ldi	r25, 0x78	; 120
    1796:	98 0f       	add	r25, r24
    1798:	93 30       	cpi	r25, 0x03	; 3
    179a:	30 f0       	brcs	.+12     	; 0x17a8 <__vector_23+0x13a>
        motors_off();
    179c:	53 98       	cbi	0x0a, 3	; 10
    179e:	23 98       	cbi	0x04, 3	; 4
    17a0:	10 92 b4 00 	sts	0x00B4, r1
    17a4:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	fc 01       	movw	r30, r24
    17ac:	e0 58       	subi	r30, 0x80	; 128
    17ae:	f1 09       	sbc	r31, r1
    17b0:	eb 30       	cpi	r30, 0x0B	; 11
    17b2:	f1 05       	cpc	r31, r1
    17b4:	08 f0       	brcs	.+2      	; 0x17b8 <__vector_23+0x14a>
    17b6:	9b cf       	rjmp	.-202    	; 0x16ee <__vector_23+0x80>
    17b8:	e5 5c       	subi	r30, 0xC5	; 197
    17ba:	ff 4f       	sbci	r31, 0xFF	; 255
    17bc:	0c 94 01 0e 	jmp	0x1c02	; 0x1c02 <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    17c0:	10 92 81 00 	sts	0x0081, r1
    17c4:	10 92 85 00 	sts	0x0085, r1
    17c8:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    17cc:	40 93 60 01 	sts	0x0160, r20
            rx_leadingbyte = 1;
    17d0:	40 93 a4 01 	sts	0x01A4, r20
            rx_busy = 0;
    17d4:	10 92 87 01 	sts	0x0187, r1
            adc_trigger_high_gain();
    17d8:	10 92 7c 00 	sts	0x007C, r1
    17dc:	83 ea       	ldi	r24, 0xA3	; 163
    17de:	80 93 7a 00 	sts	0x007A, r24
    17e2:	40 93 7b 00 	sts	0x007B, r20
    17e6:	83 cf       	rjmp	.-250    	; 0x16ee <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    17e8:	80 91 7a 00 	lds	r24, 0x007A
    17ec:	86 fd       	sbrc	r24, 6
    17ee:	fc cf       	rjmp	.-8      	; 0x17e8 <__vector_23+0x17a>
                    rx_dist.low_gain = ADCW;
    17f0:	80 91 78 00 	lds	r24, 0x0078
    17f4:	90 91 79 00 	lds	r25, 0x0079
    17f8:	90 93 80 01 	sts	0x0180, r25
    17fc:	80 93 7f 01 	sts	0x017F, r24
                    adc_trigger_high_gain();
    1800:	10 92 7c 00 	sts	0x007C, r1
    1804:	83 ea       	ldi	r24, 0xA3	; 163
    1806:	80 93 7a 00 	sts	0x007A, r24
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    1810:	90 91 b8 01 	lds	r25, 0x01B8
    1814:	99 23       	and	r25, r25
    1816:	b9 f0       	breq	.+46     	; 0x1846 <__vector_23+0x1d8>
                        rx_timer_off();
    1818:	10 92 81 00 	sts	0x0081, r1
    181c:	10 92 85 00 	sts	0x0085, r1
    1820:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1824:	80 93 a4 01 	sts	0x01A4, r24
                        rx_busy = 0;
    1828:	10 92 87 01 	sts	0x0187, r1
    182c:	60 cf       	rjmp	.-320    	; 0x16ee <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    182e:	21 e0       	ldi	r18, 0x01	; 1
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	01 c0       	rjmp	.+2      	; 0x1836 <__vector_23+0x1c8>
    1834:	22 0f       	add	r18, r18
    1836:	8a 95       	dec	r24
    1838:	ea f7       	brpl	.-6      	; 0x1834 <__vector_23+0x1c6>
    183a:	80 91 b8 01 	lds	r24, 0x01B8
    183e:	82 2b       	or	r24, r18
    1840:	80 93 b8 01 	sts	0x01B8, r24
    1844:	54 cf       	rjmp	.-344    	; 0x16ee <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    1846:	10 92 a4 01 	sts	0x01A4, r1
                        rx_byteindex = 0;
    184a:	10 92 7e 01 	sts	0x017E, r1
    184e:	4f cf       	rjmp	.-354    	; 0x16ee <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    1850:	e0 91 23 01 	lds	r30, 0x0123
    1854:	f0 91 24 01 	lds	r31, 0x0124
    1858:	6f e7       	ldi	r22, 0x7F	; 127
    185a:	71 e0       	ldi	r23, 0x01	; 1
    185c:	8a ea       	ldi	r24, 0xAA	; 170
    185e:	91 e0       	ldi	r25, 0x01	; 1
    1860:	09 95       	icall
    1862:	45 cf       	rjmp	.-374    	; 0x16ee <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1864:	80 91 aa 01 	lds	r24, 0x01AA
    1868:	82 30       	cpi	r24, 0x02	; 2
    186a:	09 f4       	brne	.+2      	; 0x186e <__vector_23+0x200>
    186c:	dc c0       	rjmp	.+440    	; 0x1a26 <__vector_23+0x3b8>
    186e:	08 f4       	brcc	.+2      	; 0x1872 <__vector_23+0x204>
    1870:	b9 c0       	rjmp	.+370    	; 0x19e4 <__vector_23+0x376>
    1872:	83 30       	cpi	r24, 0x03	; 3
    1874:	09 f4       	brne	.+2      	; 0x1878 <__vector_23+0x20a>
    1876:	c5 c0       	rjmp	.+394    	; 0x1a02 <__vector_23+0x394>
    1878:	84 30       	cpi	r24, 0x04	; 4
    187a:	09 f0       	breq	.+2      	; 0x187e <__vector_23+0x210>
    187c:	b0 c0       	rjmp	.+352    	; 0x19de <__vector_23+0x370>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    187e:	80 91 41 01 	lds	r24, 0x0141
    1882:	90 91 b0 01 	lds	r25, 0x01B0
    1886:	83 30       	cpi	r24, 0x03	; 3
    1888:	09 f4       	brne	.+2      	; 0x188c <__vector_23+0x21e>
    188a:	e2 c0       	rjmp	.+452    	; 0x1a50 <__vector_23+0x3e2>
    188c:	80 91 af 01 	lds	r24, 0x01AF
                        prev_motion = MOVE_STOP;
    1890:	10 92 42 01 	sts	0x0142, r1
                        cur_motion = MOVE_STRAIGHT;
    1894:	23 e0       	ldi	r18, 0x03	; 3
    1896:	20 93 41 01 	sts	0x0141, r18
                        kilo_straight_left = calibmsg->straight_left;
    189a:	80 93 bb 01 	sts	0x01BB, r24
                        kilo_straight_right = calibmsg->straight_right;
    189e:	90 93 bc 01 	sts	0x01BC, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    18a2:	80 91 43 01 	lds	r24, 0x0143
    18a6:	86 30       	cpi	r24, 0x06	; 6
    18a8:	09 f4       	brne	.+2      	; 0x18ac <__vector_23+0x23e>
    18aa:	21 cf       	rjmp	.-446    	; 0x16ee <__vector_23+0x80>
                motors_on();
    18ac:	53 9a       	sbi	0x0a, 3	; 10
    18ae:	23 9a       	sbi	0x04, 3	; 4
    18b0:	10 92 b4 00 	sts	0x00B4, r1
    18b4:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    18b8:	86 e0       	ldi	r24, 0x06	; 6
    18ba:	80 93 43 01 	sts	0x0143, r24
    18be:	17 cf       	rjmp	.-466    	; 0x16ee <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    18c0:	80 91 43 01 	lds	r24, 0x0143
    18c4:	86 30       	cpi	r24, 0x06	; 6
    18c6:	99 f0       	breq	.+38     	; 0x18ee <__vector_23+0x280>
                motors_on();
    18c8:	53 9a       	sbi	0x0a, 3	; 10
    18ca:	23 9a       	sbi	0x04, 3	; 4
    18cc:	10 92 b4 00 	sts	0x00B4, r1
    18d0:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    18d4:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    18d6:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    18d8:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    18da:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    18dc:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    18de:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    18e0:	10 92 41 01 	sts	0x0141, r1
    18e4:	10 92 42 01 	sts	0x0142, r1
                kilo_state = MOVING;
    18e8:	86 e0       	ldi	r24, 0x06	; 6
    18ea:	80 93 43 01 	sts	0x0143, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	00 90 aa 01 	lds	r0, 0x01AA
    18f6:	02 c0       	rjmp	.+4      	; 0x18fc <__vector_23+0x28e>
    18f8:	88 0f       	add	r24, r24
    18fa:	99 1f       	adc	r25, r25
    18fc:	0a 94       	dec	r0
    18fe:	e2 f7       	brpl	.-8      	; 0x18f8 <__vector_23+0x28a>
    1900:	20 91 b9 01 	lds	r18, 0x01B9
    1904:	30 91 ba 01 	lds	r19, 0x01BA
    1908:	82 23       	and	r24, r18
    190a:	93 23       	and	r25, r19
    190c:	89 2b       	or	r24, r25
    190e:	09 f0       	breq	.+2      	; 0x1912 <__vector_23+0x2a4>
    1910:	86 c0       	rjmp	.+268    	; 0x1a1e <__vector_23+0x3b0>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    1912:	10 92 41 01 	sts	0x0141, r1
    1916:	eb ce       	rjmp	.-554    	; 0x16ee <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	80 93 43 01 	sts	0x0143, r24
    191e:	e7 ce       	rjmp	.-562    	; 0x16ee <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    1920:	e0 e0       	ldi	r30, 0x00	; 0
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    1926:	80 91 6e 00 	lds	r24, 0x006E
    192a:	8d 7f       	andi	r24, 0xFD	; 253
    192c:	80 93 6e 00 	sts	0x006E, r24
    1930:	16 bc       	out	0x26, r1	; 38
            bootload();
    1932:	e0 e0       	ldi	r30, 0x00	; 0
    1934:	f0 e7       	ldi	r31, 0x70	; 112
    1936:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    1938:	10 92 43 01 	sts	0x0143, r1
    193c:	d8 ce       	rjmp	.-592    	; 0x16ee <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    193e:	82 e0       	ldi	r24, 0x02	; 2
    1940:	80 93 43 01 	sts	0x0143, r24
    1944:	d4 ce       	rjmp	.-600    	; 0x16ee <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    1946:	85 e0       	ldi	r24, 0x05	; 5
    1948:	80 93 43 01 	sts	0x0143, r24
    194c:	d0 ce       	rjmp	.-608    	; 0x16ee <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    194e:	80 91 43 01 	lds	r24, 0x0143
    1952:	83 30       	cpi	r24, 0x03	; 3
    1954:	09 f4       	brne	.+2      	; 0x1958 <__vector_23+0x2ea>
    1956:	cb ce       	rjmp	.-618    	; 0x16ee <__vector_23+0x80>
    1958:	80 91 43 01 	lds	r24, 0x0143
    195c:	84 30       	cpi	r24, 0x04	; 4
    195e:	09 f4       	brne	.+2      	; 0x1962 <__vector_23+0x2f4>
    1960:	c6 ce       	rjmp	.-628    	; 0x16ee <__vector_23+0x80>
                motors_on();
    1962:	53 9a       	sbi	0x0a, 3	; 10
    1964:	23 9a       	sbi	0x04, 3	; 4
    1966:	10 92 b4 00 	sts	0x00B4, r1
    196a:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    196e:	83 e0       	ldi	r24, 0x03	; 3
    1970:	80 93 43 01 	sts	0x0143, r24
    1974:	bc ce       	rjmp	.-648    	; 0x16ee <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    1976:	80 91 43 01 	lds	r24, 0x0143
    197a:	86 30       	cpi	r24, 0x06	; 6
    197c:	09 f0       	breq	.+2      	; 0x1980 <__vector_23+0x312>
    197e:	b7 ce       	rjmp	.-658    	; 0x16ee <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    1980:	60 91 b9 01 	lds	r22, 0x01B9
    1984:	80 eb       	ldi	r24, 0xB0	; 176
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	0e 94 49 10 	call	0x2092	; 0x2092 <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    198c:	60 91 ba 01 	lds	r22, 0x01BA
    1990:	81 eb       	ldi	r24, 0xB1	; 177
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	0e 94 49 10 	call	0x2092	; 0x2092 <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    1998:	60 91 bd 01 	lds	r22, 0x01BD
    199c:	85 e0       	ldi	r24, 0x05	; 5
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	0e 94 49 10 	call	0x2092	; 0x2092 <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    19a4:	60 91 a9 01 	lds	r22, 0x01A9
    19a8:	89 e0       	ldi	r24, 0x09	; 9
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	0e 94 49 10 	call	0x2092	; 0x2092 <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    19b0:	60 91 bb 01 	lds	r22, 0x01BB
    19b4:	8c e0       	ldi	r24, 0x0C	; 12
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	0e 94 49 10 	call	0x2092	; 0x2092 <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    19bc:	60 91 bc 01 	lds	r22, 0x01BC
    19c0:	84 e1       	ldi	r24, 0x14	; 20
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	0e 94 49 10 	call	0x2092	; 0x2092 <__eewr_byte_m328p>
                        motors_off();
    19c8:	53 98       	cbi	0x0a, 3	; 10
    19ca:	23 98       	cbi	0x04, 3	; 4
    19cc:	10 92 b4 00 	sts	0x00B4, r1
    19d0:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	80 93 43 01 	sts	0x0143, r24
    19da:	80 91 aa 01 	lds	r24, 0x01AA
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    19de:	81 11       	cpse	r24, r1
    19e0:	60 cf       	rjmp	.-320    	; 0x18a2 <__vector_23+0x234>
    19e2:	85 ce       	rjmp	.-758    	; 0x16ee <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    19e4:	88 23       	and	r24, r24
    19e6:	39 f2       	breq	.-114    	; 0x1976 <__vector_23+0x308>
    19e8:	81 30       	cpi	r24, 0x01	; 1
    19ea:	c9 f7       	brne	.-14     	; 0x19de <__vector_23+0x370>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    19ec:	80 91 ab 01 	lds	r24, 0x01AB
    19f0:	90 91 ac 01 	lds	r25, 0x01AC
    19f4:	90 93 ba 01 	sts	0x01BA, r25
    19f8:	80 93 b9 01 	sts	0x01B9, r24
                    cur_motion = MOVE_STOP;
    19fc:	10 92 41 01 	sts	0x0141, r1
    1a00:	50 cf       	rjmp	.-352    	; 0x18a2 <__vector_23+0x234>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1a02:	80 91 41 01 	lds	r24, 0x0141
    1a06:	82 30       	cpi	r24, 0x02	; 2
    1a08:	71 f1       	breq	.+92     	; 0x1a66 <__vector_23+0x3f8>
    1a0a:	80 91 ae 01 	lds	r24, 0x01AE
                        prev_motion = MOVE_STOP;
    1a0e:	10 92 42 01 	sts	0x0142, r1
                        cur_motion = MOVE_RIGHT;
    1a12:	92 e0       	ldi	r25, 0x02	; 2
    1a14:	90 93 41 01 	sts	0x0141, r25
                        kilo_turn_right = calibmsg->turn_right;
    1a18:	80 93 a9 01 	sts	0x01A9, r24
    1a1c:	42 cf       	rjmp	.-380    	; 0x18a2 <__vector_23+0x234>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	80 93 41 01 	sts	0x0141, r24
    1a24:	64 ce       	rjmp	.-824    	; 0x16ee <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1a26:	80 91 41 01 	lds	r24, 0x0141
    1a2a:	81 30       	cpi	r24, 0x01	; 1
    1a2c:	51 f0       	breq	.+20     	; 0x1a42 <__vector_23+0x3d4>
    1a2e:	80 91 ad 01 	lds	r24, 0x01AD
                        prev_motion = MOVE_STOP;
    1a32:	10 92 42 01 	sts	0x0142, r1
                        cur_motion = MOVE_LEFT;
    1a36:	91 e0       	ldi	r25, 0x01	; 1
    1a38:	90 93 41 01 	sts	0x0141, r25
                        kilo_turn_left = calibmsg->turn_left;
    1a3c:	80 93 bd 01 	sts	0x01BD, r24
    1a40:	30 cf       	rjmp	.-416    	; 0x18a2 <__vector_23+0x234>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1a42:	80 91 ad 01 	lds	r24, 0x01AD
    1a46:	90 91 bd 01 	lds	r25, 0x01BD
    1a4a:	89 13       	cpse	r24, r25
    1a4c:	f2 cf       	rjmp	.-28     	; 0x1a32 <__vector_23+0x3c4>
    1a4e:	29 cf       	rjmp	.-430    	; 0x18a2 <__vector_23+0x234>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1a50:	80 91 bc 01 	lds	r24, 0x01BC
    1a54:	98 13       	cpse	r25, r24
    1a56:	1a cf       	rjmp	.-460    	; 0x188c <__vector_23+0x21e>
    1a58:	80 91 af 01 	lds	r24, 0x01AF
    1a5c:	20 91 bb 01 	lds	r18, 0x01BB
    1a60:	82 13       	cpse	r24, r18
    1a62:	16 cf       	rjmp	.-468    	; 0x1890 <__vector_23+0x222>
    1a64:	1e cf       	rjmp	.-452    	; 0x18a2 <__vector_23+0x234>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1a66:	80 91 ae 01 	lds	r24, 0x01AE
    1a6a:	90 91 a9 01 	lds	r25, 0x01A9
    1a6e:	89 13       	cpse	r24, r25
    1a70:	ce cf       	rjmp	.-100    	; 0x1a0e <__vector_23+0x3a0>
    1a72:	17 cf       	rjmp	.-466    	; 0x18a2 <__vector_23+0x234>

00001a74 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    1a74:	fc 01       	movw	r30, r24
    1a76:	2a e0       	ldi	r18, 0x0A	; 10
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    1a78:	8f ef       	ldi	r24, 0xFF	; 255
    1a7a:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    1a7c:	31 91       	ld	r19, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    1a7e:	83 27       	eor	r24, r19
    1a80:	08 2e       	mov	r0, r24
    1a82:	82 95       	swap	r24
    1a84:	80 7f       	andi	r24, 0xF0	; 240
    1a86:	80 25       	eor	r24, r0
    1a88:	09 2e       	mov	r0, r25
    1a8a:	98 2f       	mov	r25, r24
    1a8c:	82 95       	swap	r24
    1a8e:	8f 70       	andi	r24, 0x0F	; 15
    1a90:	08 26       	eor	r0, r24
    1a92:	86 95       	lsr	r24
    1a94:	98 27       	eor	r25, r24
    1a96:	89 27       	eor	r24, r25
    1a98:	88 0f       	add	r24, r24
    1a9a:	88 0f       	add	r24, r24
    1a9c:	88 0f       	add	r24, r24
    1a9e:	80 25       	eor	r24, r0
    1aa0:	21 50       	subi	r18, 0x01	; 1

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    1aa2:	61 f7       	brne	.-40     	; 0x1a7c <message_crc+0x8>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    1aa4:	08 95       	ret

00001aa6 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    1aa6:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    1aa8:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    1aaa:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    1aac:	20 91 7d 01 	lds	r18, 0x017D
    or tmpreg1, ddrreg
    1ab0:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    1ab2:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    1ab4:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1ab6:	30 91 7d 01 	lds	r19, 0x017D
    1aba:	20 30       	cpi	r18, 0x00	; 0
    1abc:	29 f0       	breq	.+10     	; 0x1ac8 <message_send+0x22>
    1abe:	00 00       	nop
    1ac0:	25 b1       	in	r18, 0x05	; 5
    1ac2:	23 2b       	or	r18, r19
    1ac4:	25 b9       	out	0x05, r18	; 5
    1ac6:	04 c0       	rjmp	.+8      	; 0x1ad0 <message_send+0x2a>
    1ac8:	00 00       	nop
    1aca:	00 00       	nop
    1acc:	00 00       	nop
    1ace:	00 c0       	rjmp	.+0      	; 0x1ad0 <message_send+0x2a>
    1ad0:	00 00       	nop
    1ad2:	00 00       	nop
    1ad4:	00 00       	nop
    1ad6:	30 95       	com	r19
    1ad8:	25 b1       	in	r18, 0x05	; 5
    1ada:	23 23       	and	r18, r19
    1adc:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    1ade:	2e ea       	ldi	r18, 0xAE	; 174
    1ae0:	2a 95       	dec	r18
    1ae2:	f1 f7       	brne	.-4      	; 0x1ae0 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    1ae4:	2b ee       	ldi	r18, 0xEB	; 235

00001ae6 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    1ae6:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    1ae8:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1aea:	0a c0       	rjmp	.+20     	; 0x1b00 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1aec:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1aee:	30 91 7d 01 	lds	r19, 0x017D
    com tmpreg2
    1af2:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1af4:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1af6:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1af8:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1afa:	0f be       	out	0x3f, r0	; 63
    return 0
    1afc:	80 e0       	ldi	r24, 0x00	; 0
    1afe:	08 95       	ret

00001b00 <nocollision>:
nocollision:
    nop
    1b00:	00 00       	nop
    dec tmpreg1
    1b02:	2a 95       	dec	r18
    brne checkcollision
    1b04:	81 f7       	brne	.-32     	; 0x1ae6 <checkcollision>

    ldi tmpreg1, 0x01
    1b06:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1b08:	30 91 7d 01 	lds	r19, 0x017D
    1b0c:	20 30       	cpi	r18, 0x00	; 0
    1b0e:	29 f0       	breq	.+10     	; 0x1b1a <nocollision+0x1a>
    1b10:	00 00       	nop
    1b12:	25 b1       	in	r18, 0x05	; 5
    1b14:	23 2b       	or	r18, r19
    1b16:	25 b9       	out	0x05, r18	; 5
    1b18:	04 c0       	rjmp	.+8      	; 0x1b22 <nocollision+0x22>
    1b1a:	00 00       	nop
    1b1c:	00 00       	nop
    1b1e:	00 00       	nop
    1b20:	00 c0       	rjmp	.+0      	; 0x1b22 <nocollision+0x22>
    1b22:	00 00       	nop
    1b24:	00 00       	nop
    1b26:	00 00       	nop
    1b28:	30 95       	com	r19
    1b2a:	25 b1       	in	r18, 0x05	; 5
    1b2c:	23 23       	and	r18, r19
    1b2e:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    1b30:	00 00       	nop
    1b32:	24 e5       	ldi	r18, 0x54	; 84
    1b34:	2a 95       	dec	r18
    1b36:	f1 f7       	brne	.-4      	; 0x1b34 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    1b38:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    1b3a:	8c e0       	ldi	r24, 0x0C	; 12

00001b3c <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    1b3c:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    1b3e:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    1b40:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    1b42:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    1b44:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    1b46:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    1b48:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    1b4a:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    1b4c:	50 e0       	ldi	r21, 0x00	; 0

00001b4e <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    1b4e:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    1b50:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    1b52:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    1b54:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    1b56:	30 91 7d 01 	lds	r19, 0x017D
    1b5a:	20 30       	cpi	r18, 0x00	; 0
    1b5c:	29 f0       	breq	.+10     	; 0x1b68 <sendbit+0x1a>
    1b5e:	00 00       	nop
    1b60:	25 b1       	in	r18, 0x05	; 5
    1b62:	23 2b       	or	r18, r19
    1b64:	25 b9       	out	0x05, r18	; 5
    1b66:	04 c0       	rjmp	.+8      	; 0x1b70 <sendbit+0x22>
    1b68:	00 00       	nop
    1b6a:	00 00       	nop
    1b6c:	00 00       	nop
    1b6e:	00 c0       	rjmp	.+0      	; 0x1b70 <sendbit+0x22>
    1b70:	00 00       	nop
    1b72:	00 00       	nop
    1b74:	00 00       	nop
    1b76:	30 95       	com	r19
    1b78:	25 b1       	in	r18, 0x05	; 5
    1b7a:	23 23       	and	r18, r19
    1b7c:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    1b7e:	00 00       	nop
    1b80:	21 e5       	ldi	r18, 0x51	; 81
    1b82:	2a 95       	dec	r18
    1b84:	f1 f7       	brne	.-4      	; 0x1b82 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    1b86:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    1b88:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    1b8a:	9a 95       	dec	r25
    brne sendbit
    1b8c:	01 f7       	brne	.-64     	; 0x1b4e <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    1b8e:	8a 95       	dec	r24
    brne sendbyte
    1b90:	a9 f6       	brne	.-86     	; 0x1b3c <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    1b92:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    1b94:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    1b96:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1b98:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1b9a:	30 91 7d 01 	lds	r19, 0x017D
    com tmpreg2
    1b9e:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1ba0:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1ba2:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1ba4:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1ba6:	0f be       	out	0x3f, r0	; 63
    return 1
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	08 95       	ret

00001bac <main>:
}


int main()
{
    kilo_init();
    1bac:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <kilo_init>
    kilo_message_rx = message_rx;
    1bb0:	8c ec       	ldi	r24, 0xCC	; 204
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	90 93 24 01 	sts	0x0124, r25
    1bb8:	80 93 23 01 	sts	0x0123, r24
    kilo_message_tx = message_tx;
    1bbc:	81 eb       	ldi	r24, 0xB1	; 177
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	90 93 22 01 	sts	0x0122, r25
    1bc4:	80 93 21 01 	sts	0x0121, r24
    kilo_start(setup, loop);
    1bc8:	68 e5       	ldi	r22, 0x58	; 88
    1bca:	73 e0       	ldi	r23, 0x03	; 3
    1bcc:	8e e6       	ldi	r24, 0x6E	; 110
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	0e 94 63 05 	call	0xac6	; 0xac6 <kilo_start>

    return 0;
}
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	08 95       	ret

00001bda <__divmodhi4>:
    1bda:	97 fb       	bst	r25, 7
    1bdc:	07 2e       	mov	r0, r23
    1bde:	16 f4       	brtc	.+4      	; 0x1be4 <__divmodhi4+0xa>
    1be0:	00 94       	com	r0
    1be2:	07 d0       	rcall	.+14     	; 0x1bf2 <__divmodhi4_neg1>
    1be4:	77 fd       	sbrc	r23, 7
    1be6:	09 d0       	rcall	.+18     	; 0x1bfa <__divmodhi4_neg2>
    1be8:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <__udivmodhi4>
    1bec:	07 fc       	sbrc	r0, 7
    1bee:	05 d0       	rcall	.+10     	; 0x1bfa <__divmodhi4_neg2>
    1bf0:	3e f4       	brtc	.+14     	; 0x1c00 <__divmodhi4_exit>

00001bf2 <__divmodhi4_neg1>:
    1bf2:	90 95       	com	r25
    1bf4:	81 95       	neg	r24
    1bf6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bf8:	08 95       	ret

00001bfa <__divmodhi4_neg2>:
    1bfa:	70 95       	com	r23
    1bfc:	61 95       	neg	r22
    1bfe:	7f 4f       	sbci	r23, 0xFF	; 255

00001c00 <__divmodhi4_exit>:
    1c00:	08 95       	ret

00001c02 <__tablejump2__>:
    1c02:	ee 0f       	add	r30, r30
    1c04:	ff 1f       	adc	r31, r31

00001c06 <__tablejump__>:
    1c06:	05 90       	lpm	r0, Z+
    1c08:	f4 91       	lpm	r31, Z
    1c0a:	e0 2d       	mov	r30, r0
    1c0c:	09 94       	ijmp

00001c0e <__umulhisi3>:
    1c0e:	a2 9f       	mul	r26, r18
    1c10:	b0 01       	movw	r22, r0
    1c12:	b3 9f       	mul	r27, r19
    1c14:	c0 01       	movw	r24, r0
    1c16:	a3 9f       	mul	r26, r19
    1c18:	70 0d       	add	r23, r0
    1c1a:	81 1d       	adc	r24, r1
    1c1c:	11 24       	eor	r1, r1
    1c1e:	91 1d       	adc	r25, r1
    1c20:	b2 9f       	mul	r27, r18
    1c22:	70 0d       	add	r23, r0
    1c24:	81 1d       	adc	r24, r1
    1c26:	11 24       	eor	r1, r1
    1c28:	91 1d       	adc	r25, r1
    1c2a:	08 95       	ret

00001c2c <__udivmodhi4>:
    1c2c:	aa 1b       	sub	r26, r26
    1c2e:	bb 1b       	sub	r27, r27
    1c30:	51 e1       	ldi	r21, 0x11	; 17
    1c32:	07 c0       	rjmp	.+14     	; 0x1c42 <__udivmodhi4_ep>

00001c34 <__udivmodhi4_loop>:
    1c34:	aa 1f       	adc	r26, r26
    1c36:	bb 1f       	adc	r27, r27
    1c38:	a6 17       	cp	r26, r22
    1c3a:	b7 07       	cpc	r27, r23
    1c3c:	10 f0       	brcs	.+4      	; 0x1c42 <__udivmodhi4_ep>
    1c3e:	a6 1b       	sub	r26, r22
    1c40:	b7 0b       	sbc	r27, r23

00001c42 <__udivmodhi4_ep>:
    1c42:	88 1f       	adc	r24, r24
    1c44:	99 1f       	adc	r25, r25
    1c46:	5a 95       	dec	r21
    1c48:	a9 f7       	brne	.-22     	; 0x1c34 <__udivmodhi4_loop>
    1c4a:	80 95       	com	r24
    1c4c:	90 95       	com	r25
    1c4e:	bc 01       	movw	r22, r24
    1c50:	cd 01       	movw	r24, r26
    1c52:	08 95       	ret

00001c54 <__subsf3>:
    1c54:	50 58       	subi	r21, 0x80	; 128

00001c56 <__addsf3>:
    1c56:	bb 27       	eor	r27, r27
    1c58:	aa 27       	eor	r26, r26
    1c5a:	0e d0       	rcall	.+28     	; 0x1c78 <__addsf3x>
    1c5c:	4d c1       	rjmp	.+666    	; 0x1ef8 <__fp_round>
    1c5e:	3e d1       	rcall	.+636    	; 0x1edc <__fp_pscA>
    1c60:	30 f0       	brcs	.+12     	; 0x1c6e <__addsf3+0x18>
    1c62:	43 d1       	rcall	.+646    	; 0x1eea <__fp_pscB>
    1c64:	20 f0       	brcs	.+8      	; 0x1c6e <__addsf3+0x18>
    1c66:	31 f4       	brne	.+12     	; 0x1c74 <__addsf3+0x1e>
    1c68:	9f 3f       	cpi	r25, 0xFF	; 255
    1c6a:	11 f4       	brne	.+4      	; 0x1c70 <__addsf3+0x1a>
    1c6c:	1e f4       	brtc	.+6      	; 0x1c74 <__addsf3+0x1e>
    1c6e:	33 c1       	rjmp	.+614    	; 0x1ed6 <__fp_nan>
    1c70:	0e f4       	brtc	.+2      	; 0x1c74 <__addsf3+0x1e>
    1c72:	e0 95       	com	r30
    1c74:	e7 fb       	bst	r30, 7
    1c76:	29 c1       	rjmp	.+594    	; 0x1eca <__fp_inf>

00001c78 <__addsf3x>:
    1c78:	e9 2f       	mov	r30, r25
    1c7a:	4f d1       	rcall	.+670    	; 0x1f1a <__fp_split3>
    1c7c:	80 f3       	brcs	.-32     	; 0x1c5e <__addsf3+0x8>
    1c7e:	ba 17       	cp	r27, r26
    1c80:	62 07       	cpc	r22, r18
    1c82:	73 07       	cpc	r23, r19
    1c84:	84 07       	cpc	r24, r20
    1c86:	95 07       	cpc	r25, r21
    1c88:	18 f0       	brcs	.+6      	; 0x1c90 <__addsf3x+0x18>
    1c8a:	71 f4       	brne	.+28     	; 0x1ca8 <__addsf3x+0x30>
    1c8c:	9e f5       	brtc	.+102    	; 0x1cf4 <__addsf3x+0x7c>
    1c8e:	67 c1       	rjmp	.+718    	; 0x1f5e <__fp_zero>
    1c90:	0e f4       	brtc	.+2      	; 0x1c94 <__addsf3x+0x1c>
    1c92:	e0 95       	com	r30
    1c94:	0b 2e       	mov	r0, r27
    1c96:	ba 2f       	mov	r27, r26
    1c98:	a0 2d       	mov	r26, r0
    1c9a:	0b 01       	movw	r0, r22
    1c9c:	b9 01       	movw	r22, r18
    1c9e:	90 01       	movw	r18, r0
    1ca0:	0c 01       	movw	r0, r24
    1ca2:	ca 01       	movw	r24, r20
    1ca4:	a0 01       	movw	r20, r0
    1ca6:	11 24       	eor	r1, r1
    1ca8:	ff 27       	eor	r31, r31
    1caa:	59 1b       	sub	r21, r25
    1cac:	99 f0       	breq	.+38     	; 0x1cd4 <__addsf3x+0x5c>
    1cae:	59 3f       	cpi	r21, 0xF9	; 249
    1cb0:	50 f4       	brcc	.+20     	; 0x1cc6 <__addsf3x+0x4e>
    1cb2:	50 3e       	cpi	r21, 0xE0	; 224
    1cb4:	68 f1       	brcs	.+90     	; 0x1d10 <__addsf3x+0x98>
    1cb6:	1a 16       	cp	r1, r26
    1cb8:	f0 40       	sbci	r31, 0x00	; 0
    1cba:	a2 2f       	mov	r26, r18
    1cbc:	23 2f       	mov	r18, r19
    1cbe:	34 2f       	mov	r19, r20
    1cc0:	44 27       	eor	r20, r20
    1cc2:	58 5f       	subi	r21, 0xF8	; 248
    1cc4:	f3 cf       	rjmp	.-26     	; 0x1cac <__addsf3x+0x34>
    1cc6:	46 95       	lsr	r20
    1cc8:	37 95       	ror	r19
    1cca:	27 95       	ror	r18
    1ccc:	a7 95       	ror	r26
    1cce:	f0 40       	sbci	r31, 0x00	; 0
    1cd0:	53 95       	inc	r21
    1cd2:	c9 f7       	brne	.-14     	; 0x1cc6 <__addsf3x+0x4e>
    1cd4:	7e f4       	brtc	.+30     	; 0x1cf4 <__addsf3x+0x7c>
    1cd6:	1f 16       	cp	r1, r31
    1cd8:	ba 0b       	sbc	r27, r26
    1cda:	62 0b       	sbc	r22, r18
    1cdc:	73 0b       	sbc	r23, r19
    1cde:	84 0b       	sbc	r24, r20
    1ce0:	ba f0       	brmi	.+46     	; 0x1d10 <__addsf3x+0x98>
    1ce2:	91 50       	subi	r25, 0x01	; 1
    1ce4:	a1 f0       	breq	.+40     	; 0x1d0e <__addsf3x+0x96>
    1ce6:	ff 0f       	add	r31, r31
    1ce8:	bb 1f       	adc	r27, r27
    1cea:	66 1f       	adc	r22, r22
    1cec:	77 1f       	adc	r23, r23
    1cee:	88 1f       	adc	r24, r24
    1cf0:	c2 f7       	brpl	.-16     	; 0x1ce2 <__addsf3x+0x6a>
    1cf2:	0e c0       	rjmp	.+28     	; 0x1d10 <__addsf3x+0x98>
    1cf4:	ba 0f       	add	r27, r26
    1cf6:	62 1f       	adc	r22, r18
    1cf8:	73 1f       	adc	r23, r19
    1cfa:	84 1f       	adc	r24, r20
    1cfc:	48 f4       	brcc	.+18     	; 0x1d10 <__addsf3x+0x98>
    1cfe:	87 95       	ror	r24
    1d00:	77 95       	ror	r23
    1d02:	67 95       	ror	r22
    1d04:	b7 95       	ror	r27
    1d06:	f7 95       	ror	r31
    1d08:	9e 3f       	cpi	r25, 0xFE	; 254
    1d0a:	08 f0       	brcs	.+2      	; 0x1d0e <__addsf3x+0x96>
    1d0c:	b3 cf       	rjmp	.-154    	; 0x1c74 <__addsf3+0x1e>
    1d0e:	93 95       	inc	r25
    1d10:	88 0f       	add	r24, r24
    1d12:	08 f0       	brcs	.+2      	; 0x1d16 <__addsf3x+0x9e>
    1d14:	99 27       	eor	r25, r25
    1d16:	ee 0f       	add	r30, r30
    1d18:	97 95       	ror	r25
    1d1a:	87 95       	ror	r24
    1d1c:	08 95       	ret

00001d1e <__divsf3>:
    1d1e:	0c d0       	rcall	.+24     	; 0x1d38 <__divsf3x>
    1d20:	eb c0       	rjmp	.+470    	; 0x1ef8 <__fp_round>
    1d22:	e3 d0       	rcall	.+454    	; 0x1eea <__fp_pscB>
    1d24:	40 f0       	brcs	.+16     	; 0x1d36 <__divsf3+0x18>
    1d26:	da d0       	rcall	.+436    	; 0x1edc <__fp_pscA>
    1d28:	30 f0       	brcs	.+12     	; 0x1d36 <__divsf3+0x18>
    1d2a:	21 f4       	brne	.+8      	; 0x1d34 <__divsf3+0x16>
    1d2c:	5f 3f       	cpi	r21, 0xFF	; 255
    1d2e:	19 f0       	breq	.+6      	; 0x1d36 <__divsf3+0x18>
    1d30:	cc c0       	rjmp	.+408    	; 0x1eca <__fp_inf>
    1d32:	51 11       	cpse	r21, r1
    1d34:	15 c1       	rjmp	.+554    	; 0x1f60 <__fp_szero>
    1d36:	cf c0       	rjmp	.+414    	; 0x1ed6 <__fp_nan>

00001d38 <__divsf3x>:
    1d38:	f0 d0       	rcall	.+480    	; 0x1f1a <__fp_split3>
    1d3a:	98 f3       	brcs	.-26     	; 0x1d22 <__divsf3+0x4>

00001d3c <__divsf3_pse>:
    1d3c:	99 23       	and	r25, r25
    1d3e:	c9 f3       	breq	.-14     	; 0x1d32 <__divsf3+0x14>
    1d40:	55 23       	and	r21, r21
    1d42:	b1 f3       	breq	.-20     	; 0x1d30 <__divsf3+0x12>
    1d44:	95 1b       	sub	r25, r21
    1d46:	55 0b       	sbc	r21, r21
    1d48:	bb 27       	eor	r27, r27
    1d4a:	aa 27       	eor	r26, r26
    1d4c:	62 17       	cp	r22, r18
    1d4e:	73 07       	cpc	r23, r19
    1d50:	84 07       	cpc	r24, r20
    1d52:	38 f0       	brcs	.+14     	; 0x1d62 <__divsf3_pse+0x26>
    1d54:	9f 5f       	subi	r25, 0xFF	; 255
    1d56:	5f 4f       	sbci	r21, 0xFF	; 255
    1d58:	22 0f       	add	r18, r18
    1d5a:	33 1f       	adc	r19, r19
    1d5c:	44 1f       	adc	r20, r20
    1d5e:	aa 1f       	adc	r26, r26
    1d60:	a9 f3       	breq	.-22     	; 0x1d4c <__divsf3_pse+0x10>
    1d62:	33 d0       	rcall	.+102    	; 0x1dca <__divsf3_pse+0x8e>
    1d64:	0e 2e       	mov	r0, r30
    1d66:	3a f0       	brmi	.+14     	; 0x1d76 <__divsf3_pse+0x3a>
    1d68:	e0 e8       	ldi	r30, 0x80	; 128
    1d6a:	30 d0       	rcall	.+96     	; 0x1dcc <__divsf3_pse+0x90>
    1d6c:	91 50       	subi	r25, 0x01	; 1
    1d6e:	50 40       	sbci	r21, 0x00	; 0
    1d70:	e6 95       	lsr	r30
    1d72:	00 1c       	adc	r0, r0
    1d74:	ca f7       	brpl	.-14     	; 0x1d68 <__divsf3_pse+0x2c>
    1d76:	29 d0       	rcall	.+82     	; 0x1dca <__divsf3_pse+0x8e>
    1d78:	fe 2f       	mov	r31, r30
    1d7a:	27 d0       	rcall	.+78     	; 0x1dca <__divsf3_pse+0x8e>
    1d7c:	66 0f       	add	r22, r22
    1d7e:	77 1f       	adc	r23, r23
    1d80:	88 1f       	adc	r24, r24
    1d82:	bb 1f       	adc	r27, r27
    1d84:	26 17       	cp	r18, r22
    1d86:	37 07       	cpc	r19, r23
    1d88:	48 07       	cpc	r20, r24
    1d8a:	ab 07       	cpc	r26, r27
    1d8c:	b0 e8       	ldi	r27, 0x80	; 128
    1d8e:	09 f0       	breq	.+2      	; 0x1d92 <__divsf3_pse+0x56>
    1d90:	bb 0b       	sbc	r27, r27
    1d92:	80 2d       	mov	r24, r0
    1d94:	bf 01       	movw	r22, r30
    1d96:	ff 27       	eor	r31, r31
    1d98:	93 58       	subi	r25, 0x83	; 131
    1d9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1d9c:	2a f0       	brmi	.+10     	; 0x1da8 <__divsf3_pse+0x6c>
    1d9e:	9e 3f       	cpi	r25, 0xFE	; 254
    1da0:	51 05       	cpc	r21, r1
    1da2:	68 f0       	brcs	.+26     	; 0x1dbe <__divsf3_pse+0x82>
    1da4:	92 c0       	rjmp	.+292    	; 0x1eca <__fp_inf>
    1da6:	dc c0       	rjmp	.+440    	; 0x1f60 <__fp_szero>
    1da8:	5f 3f       	cpi	r21, 0xFF	; 255
    1daa:	ec f3       	brlt	.-6      	; 0x1da6 <__divsf3_pse+0x6a>
    1dac:	98 3e       	cpi	r25, 0xE8	; 232
    1dae:	dc f3       	brlt	.-10     	; 0x1da6 <__divsf3_pse+0x6a>
    1db0:	86 95       	lsr	r24
    1db2:	77 95       	ror	r23
    1db4:	67 95       	ror	r22
    1db6:	b7 95       	ror	r27
    1db8:	f7 95       	ror	r31
    1dba:	9f 5f       	subi	r25, 0xFF	; 255
    1dbc:	c9 f7       	brne	.-14     	; 0x1db0 <__divsf3_pse+0x74>
    1dbe:	88 0f       	add	r24, r24
    1dc0:	91 1d       	adc	r25, r1
    1dc2:	96 95       	lsr	r25
    1dc4:	87 95       	ror	r24
    1dc6:	97 f9       	bld	r25, 7
    1dc8:	08 95       	ret
    1dca:	e1 e0       	ldi	r30, 0x01	; 1
    1dcc:	66 0f       	add	r22, r22
    1dce:	77 1f       	adc	r23, r23
    1dd0:	88 1f       	adc	r24, r24
    1dd2:	bb 1f       	adc	r27, r27
    1dd4:	62 17       	cp	r22, r18
    1dd6:	73 07       	cpc	r23, r19
    1dd8:	84 07       	cpc	r24, r20
    1dda:	ba 07       	cpc	r27, r26
    1ddc:	20 f0       	brcs	.+8      	; 0x1de6 <__divsf3_pse+0xaa>
    1dde:	62 1b       	sub	r22, r18
    1de0:	73 0b       	sbc	r23, r19
    1de2:	84 0b       	sbc	r24, r20
    1de4:	ba 0b       	sbc	r27, r26
    1de6:	ee 1f       	adc	r30, r30
    1de8:	88 f7       	brcc	.-30     	; 0x1dcc <__divsf3_pse+0x90>
    1dea:	e0 95       	com	r30
    1dec:	08 95       	ret

00001dee <__fixsfsi>:
    1dee:	04 d0       	rcall	.+8      	; 0x1df8 <__fixunssfsi>
    1df0:	68 94       	set
    1df2:	b1 11       	cpse	r27, r1
    1df4:	b5 c0       	rjmp	.+362    	; 0x1f60 <__fp_szero>
    1df6:	08 95       	ret

00001df8 <__fixunssfsi>:
    1df8:	98 d0       	rcall	.+304    	; 0x1f2a <__fp_splitA>
    1dfa:	88 f0       	brcs	.+34     	; 0x1e1e <__fixunssfsi+0x26>
    1dfc:	9f 57       	subi	r25, 0x7F	; 127
    1dfe:	90 f0       	brcs	.+36     	; 0x1e24 <__fixunssfsi+0x2c>
    1e00:	b9 2f       	mov	r27, r25
    1e02:	99 27       	eor	r25, r25
    1e04:	b7 51       	subi	r27, 0x17	; 23
    1e06:	a0 f0       	brcs	.+40     	; 0x1e30 <__fixunssfsi+0x38>
    1e08:	d1 f0       	breq	.+52     	; 0x1e3e <__fixunssfsi+0x46>
    1e0a:	66 0f       	add	r22, r22
    1e0c:	77 1f       	adc	r23, r23
    1e0e:	88 1f       	adc	r24, r24
    1e10:	99 1f       	adc	r25, r25
    1e12:	1a f0       	brmi	.+6      	; 0x1e1a <__fixunssfsi+0x22>
    1e14:	ba 95       	dec	r27
    1e16:	c9 f7       	brne	.-14     	; 0x1e0a <__fixunssfsi+0x12>
    1e18:	12 c0       	rjmp	.+36     	; 0x1e3e <__fixunssfsi+0x46>
    1e1a:	b1 30       	cpi	r27, 0x01	; 1
    1e1c:	81 f0       	breq	.+32     	; 0x1e3e <__fixunssfsi+0x46>
    1e1e:	9f d0       	rcall	.+318    	; 0x1f5e <__fp_zero>
    1e20:	b1 e0       	ldi	r27, 0x01	; 1
    1e22:	08 95       	ret
    1e24:	9c c0       	rjmp	.+312    	; 0x1f5e <__fp_zero>
    1e26:	67 2f       	mov	r22, r23
    1e28:	78 2f       	mov	r23, r24
    1e2a:	88 27       	eor	r24, r24
    1e2c:	b8 5f       	subi	r27, 0xF8	; 248
    1e2e:	39 f0       	breq	.+14     	; 0x1e3e <__fixunssfsi+0x46>
    1e30:	b9 3f       	cpi	r27, 0xF9	; 249
    1e32:	cc f3       	brlt	.-14     	; 0x1e26 <__fixunssfsi+0x2e>
    1e34:	86 95       	lsr	r24
    1e36:	77 95       	ror	r23
    1e38:	67 95       	ror	r22
    1e3a:	b3 95       	inc	r27
    1e3c:	d9 f7       	brne	.-10     	; 0x1e34 <__fixunssfsi+0x3c>
    1e3e:	3e f4       	brtc	.+14     	; 0x1e4e <__fixunssfsi+0x56>
    1e40:	90 95       	com	r25
    1e42:	80 95       	com	r24
    1e44:	70 95       	com	r23
    1e46:	61 95       	neg	r22
    1e48:	7f 4f       	sbci	r23, 0xFF	; 255
    1e4a:	8f 4f       	sbci	r24, 0xFF	; 255
    1e4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e4e:	08 95       	ret

00001e50 <__floatunsisf>:
    1e50:	e8 94       	clt
    1e52:	09 c0       	rjmp	.+18     	; 0x1e66 <__floatsisf+0x12>

00001e54 <__floatsisf>:
    1e54:	97 fb       	bst	r25, 7
    1e56:	3e f4       	brtc	.+14     	; 0x1e66 <__floatsisf+0x12>
    1e58:	90 95       	com	r25
    1e5a:	80 95       	com	r24
    1e5c:	70 95       	com	r23
    1e5e:	61 95       	neg	r22
    1e60:	7f 4f       	sbci	r23, 0xFF	; 255
    1e62:	8f 4f       	sbci	r24, 0xFF	; 255
    1e64:	9f 4f       	sbci	r25, 0xFF	; 255
    1e66:	99 23       	and	r25, r25
    1e68:	a9 f0       	breq	.+42     	; 0x1e94 <__floatsisf+0x40>
    1e6a:	f9 2f       	mov	r31, r25
    1e6c:	96 e9       	ldi	r25, 0x96	; 150
    1e6e:	bb 27       	eor	r27, r27
    1e70:	93 95       	inc	r25
    1e72:	f6 95       	lsr	r31
    1e74:	87 95       	ror	r24
    1e76:	77 95       	ror	r23
    1e78:	67 95       	ror	r22
    1e7a:	b7 95       	ror	r27
    1e7c:	f1 11       	cpse	r31, r1
    1e7e:	f8 cf       	rjmp	.-16     	; 0x1e70 <__floatsisf+0x1c>
    1e80:	fa f4       	brpl	.+62     	; 0x1ec0 <__floatsisf+0x6c>
    1e82:	bb 0f       	add	r27, r27
    1e84:	11 f4       	brne	.+4      	; 0x1e8a <__floatsisf+0x36>
    1e86:	60 ff       	sbrs	r22, 0
    1e88:	1b c0       	rjmp	.+54     	; 0x1ec0 <__floatsisf+0x6c>
    1e8a:	6f 5f       	subi	r22, 0xFF	; 255
    1e8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e8e:	8f 4f       	sbci	r24, 0xFF	; 255
    1e90:	9f 4f       	sbci	r25, 0xFF	; 255
    1e92:	16 c0       	rjmp	.+44     	; 0x1ec0 <__floatsisf+0x6c>
    1e94:	88 23       	and	r24, r24
    1e96:	11 f0       	breq	.+4      	; 0x1e9c <__floatsisf+0x48>
    1e98:	96 e9       	ldi	r25, 0x96	; 150
    1e9a:	11 c0       	rjmp	.+34     	; 0x1ebe <__floatsisf+0x6a>
    1e9c:	77 23       	and	r23, r23
    1e9e:	21 f0       	breq	.+8      	; 0x1ea8 <__floatsisf+0x54>
    1ea0:	9e e8       	ldi	r25, 0x8E	; 142
    1ea2:	87 2f       	mov	r24, r23
    1ea4:	76 2f       	mov	r23, r22
    1ea6:	05 c0       	rjmp	.+10     	; 0x1eb2 <__floatsisf+0x5e>
    1ea8:	66 23       	and	r22, r22
    1eaa:	71 f0       	breq	.+28     	; 0x1ec8 <__floatsisf+0x74>
    1eac:	96 e8       	ldi	r25, 0x86	; 134
    1eae:	86 2f       	mov	r24, r22
    1eb0:	70 e0       	ldi	r23, 0x00	; 0
    1eb2:	60 e0       	ldi	r22, 0x00	; 0
    1eb4:	2a f0       	brmi	.+10     	; 0x1ec0 <__floatsisf+0x6c>
    1eb6:	9a 95       	dec	r25
    1eb8:	66 0f       	add	r22, r22
    1eba:	77 1f       	adc	r23, r23
    1ebc:	88 1f       	adc	r24, r24
    1ebe:	da f7       	brpl	.-10     	; 0x1eb6 <__floatsisf+0x62>
    1ec0:	88 0f       	add	r24, r24
    1ec2:	96 95       	lsr	r25
    1ec4:	87 95       	ror	r24
    1ec6:	97 f9       	bld	r25, 7
    1ec8:	08 95       	ret

00001eca <__fp_inf>:
    1eca:	97 f9       	bld	r25, 7
    1ecc:	9f 67       	ori	r25, 0x7F	; 127
    1ece:	80 e8       	ldi	r24, 0x80	; 128
    1ed0:	70 e0       	ldi	r23, 0x00	; 0
    1ed2:	60 e0       	ldi	r22, 0x00	; 0
    1ed4:	08 95       	ret

00001ed6 <__fp_nan>:
    1ed6:	9f ef       	ldi	r25, 0xFF	; 255
    1ed8:	80 ec       	ldi	r24, 0xC0	; 192
    1eda:	08 95       	ret

00001edc <__fp_pscA>:
    1edc:	00 24       	eor	r0, r0
    1ede:	0a 94       	dec	r0
    1ee0:	16 16       	cp	r1, r22
    1ee2:	17 06       	cpc	r1, r23
    1ee4:	18 06       	cpc	r1, r24
    1ee6:	09 06       	cpc	r0, r25
    1ee8:	08 95       	ret

00001eea <__fp_pscB>:
    1eea:	00 24       	eor	r0, r0
    1eec:	0a 94       	dec	r0
    1eee:	12 16       	cp	r1, r18
    1ef0:	13 06       	cpc	r1, r19
    1ef2:	14 06       	cpc	r1, r20
    1ef4:	05 06       	cpc	r0, r21
    1ef6:	08 95       	ret

00001ef8 <__fp_round>:
    1ef8:	09 2e       	mov	r0, r25
    1efa:	03 94       	inc	r0
    1efc:	00 0c       	add	r0, r0
    1efe:	11 f4       	brne	.+4      	; 0x1f04 <__fp_round+0xc>
    1f00:	88 23       	and	r24, r24
    1f02:	52 f0       	brmi	.+20     	; 0x1f18 <__fp_round+0x20>
    1f04:	bb 0f       	add	r27, r27
    1f06:	40 f4       	brcc	.+16     	; 0x1f18 <__fp_round+0x20>
    1f08:	bf 2b       	or	r27, r31
    1f0a:	11 f4       	brne	.+4      	; 0x1f10 <__fp_round+0x18>
    1f0c:	60 ff       	sbrs	r22, 0
    1f0e:	04 c0       	rjmp	.+8      	; 0x1f18 <__fp_round+0x20>
    1f10:	6f 5f       	subi	r22, 0xFF	; 255
    1f12:	7f 4f       	sbci	r23, 0xFF	; 255
    1f14:	8f 4f       	sbci	r24, 0xFF	; 255
    1f16:	9f 4f       	sbci	r25, 0xFF	; 255
    1f18:	08 95       	ret

00001f1a <__fp_split3>:
    1f1a:	57 fd       	sbrc	r21, 7
    1f1c:	90 58       	subi	r25, 0x80	; 128
    1f1e:	44 0f       	add	r20, r20
    1f20:	55 1f       	adc	r21, r21
    1f22:	59 f0       	breq	.+22     	; 0x1f3a <__fp_splitA+0x10>
    1f24:	5f 3f       	cpi	r21, 0xFF	; 255
    1f26:	71 f0       	breq	.+28     	; 0x1f44 <__fp_splitA+0x1a>
    1f28:	47 95       	ror	r20

00001f2a <__fp_splitA>:
    1f2a:	88 0f       	add	r24, r24
    1f2c:	97 fb       	bst	r25, 7
    1f2e:	99 1f       	adc	r25, r25
    1f30:	61 f0       	breq	.+24     	; 0x1f4a <__fp_splitA+0x20>
    1f32:	9f 3f       	cpi	r25, 0xFF	; 255
    1f34:	79 f0       	breq	.+30     	; 0x1f54 <__fp_splitA+0x2a>
    1f36:	87 95       	ror	r24
    1f38:	08 95       	ret
    1f3a:	12 16       	cp	r1, r18
    1f3c:	13 06       	cpc	r1, r19
    1f3e:	14 06       	cpc	r1, r20
    1f40:	55 1f       	adc	r21, r21
    1f42:	f2 cf       	rjmp	.-28     	; 0x1f28 <__fp_split3+0xe>
    1f44:	46 95       	lsr	r20
    1f46:	f1 df       	rcall	.-30     	; 0x1f2a <__fp_splitA>
    1f48:	08 c0       	rjmp	.+16     	; 0x1f5a <__fp_splitA+0x30>
    1f4a:	16 16       	cp	r1, r22
    1f4c:	17 06       	cpc	r1, r23
    1f4e:	18 06       	cpc	r1, r24
    1f50:	99 1f       	adc	r25, r25
    1f52:	f1 cf       	rjmp	.-30     	; 0x1f36 <__fp_splitA+0xc>
    1f54:	86 95       	lsr	r24
    1f56:	71 05       	cpc	r23, r1
    1f58:	61 05       	cpc	r22, r1
    1f5a:	08 94       	sec
    1f5c:	08 95       	ret

00001f5e <__fp_zero>:
    1f5e:	e8 94       	clt

00001f60 <__fp_szero>:
    1f60:	bb 27       	eor	r27, r27
    1f62:	66 27       	eor	r22, r22
    1f64:	77 27       	eor	r23, r23
    1f66:	cb 01       	movw	r24, r22
    1f68:	97 f9       	bld	r25, 7
    1f6a:	08 95       	ret

00001f6c <__gesf2>:
    1f6c:	66 d0       	rcall	.+204    	; 0x203a <__fp_cmp>
    1f6e:	08 f4       	brcc	.+2      	; 0x1f72 <__gesf2+0x6>
    1f70:	8f ef       	ldi	r24, 0xFF	; 255
    1f72:	08 95       	ret

00001f74 <__mulsf3>:
    1f74:	0b d0       	rcall	.+22     	; 0x1f8c <__mulsf3x>
    1f76:	c0 cf       	rjmp	.-128    	; 0x1ef8 <__fp_round>
    1f78:	b1 df       	rcall	.-158    	; 0x1edc <__fp_pscA>
    1f7a:	28 f0       	brcs	.+10     	; 0x1f86 <__mulsf3+0x12>
    1f7c:	b6 df       	rcall	.-148    	; 0x1eea <__fp_pscB>
    1f7e:	18 f0       	brcs	.+6      	; 0x1f86 <__mulsf3+0x12>
    1f80:	95 23       	and	r25, r21
    1f82:	09 f0       	breq	.+2      	; 0x1f86 <__mulsf3+0x12>
    1f84:	a2 cf       	rjmp	.-188    	; 0x1eca <__fp_inf>
    1f86:	a7 cf       	rjmp	.-178    	; 0x1ed6 <__fp_nan>
    1f88:	11 24       	eor	r1, r1
    1f8a:	ea cf       	rjmp	.-44     	; 0x1f60 <__fp_szero>

00001f8c <__mulsf3x>:
    1f8c:	c6 df       	rcall	.-116    	; 0x1f1a <__fp_split3>
    1f8e:	a0 f3       	brcs	.-24     	; 0x1f78 <__mulsf3+0x4>

00001f90 <__mulsf3_pse>:
    1f90:	95 9f       	mul	r25, r21
    1f92:	d1 f3       	breq	.-12     	; 0x1f88 <__mulsf3+0x14>
    1f94:	95 0f       	add	r25, r21
    1f96:	50 e0       	ldi	r21, 0x00	; 0
    1f98:	55 1f       	adc	r21, r21
    1f9a:	62 9f       	mul	r22, r18
    1f9c:	f0 01       	movw	r30, r0
    1f9e:	72 9f       	mul	r23, r18
    1fa0:	bb 27       	eor	r27, r27
    1fa2:	f0 0d       	add	r31, r0
    1fa4:	b1 1d       	adc	r27, r1
    1fa6:	63 9f       	mul	r22, r19
    1fa8:	aa 27       	eor	r26, r26
    1faa:	f0 0d       	add	r31, r0
    1fac:	b1 1d       	adc	r27, r1
    1fae:	aa 1f       	adc	r26, r26
    1fb0:	64 9f       	mul	r22, r20
    1fb2:	66 27       	eor	r22, r22
    1fb4:	b0 0d       	add	r27, r0
    1fb6:	a1 1d       	adc	r26, r1
    1fb8:	66 1f       	adc	r22, r22
    1fba:	82 9f       	mul	r24, r18
    1fbc:	22 27       	eor	r18, r18
    1fbe:	b0 0d       	add	r27, r0
    1fc0:	a1 1d       	adc	r26, r1
    1fc2:	62 1f       	adc	r22, r18
    1fc4:	73 9f       	mul	r23, r19
    1fc6:	b0 0d       	add	r27, r0
    1fc8:	a1 1d       	adc	r26, r1
    1fca:	62 1f       	adc	r22, r18
    1fcc:	83 9f       	mul	r24, r19
    1fce:	a0 0d       	add	r26, r0
    1fd0:	61 1d       	adc	r22, r1
    1fd2:	22 1f       	adc	r18, r18
    1fd4:	74 9f       	mul	r23, r20
    1fd6:	33 27       	eor	r19, r19
    1fd8:	a0 0d       	add	r26, r0
    1fda:	61 1d       	adc	r22, r1
    1fdc:	23 1f       	adc	r18, r19
    1fde:	84 9f       	mul	r24, r20
    1fe0:	60 0d       	add	r22, r0
    1fe2:	21 1d       	adc	r18, r1
    1fe4:	82 2f       	mov	r24, r18
    1fe6:	76 2f       	mov	r23, r22
    1fe8:	6a 2f       	mov	r22, r26
    1fea:	11 24       	eor	r1, r1
    1fec:	9f 57       	subi	r25, 0x7F	; 127
    1fee:	50 40       	sbci	r21, 0x00	; 0
    1ff0:	8a f0       	brmi	.+34     	; 0x2014 <__mulsf3_pse+0x84>
    1ff2:	e1 f0       	breq	.+56     	; 0x202c <__mulsf3_pse+0x9c>
    1ff4:	88 23       	and	r24, r24
    1ff6:	4a f0       	brmi	.+18     	; 0x200a <__mulsf3_pse+0x7a>
    1ff8:	ee 0f       	add	r30, r30
    1ffa:	ff 1f       	adc	r31, r31
    1ffc:	bb 1f       	adc	r27, r27
    1ffe:	66 1f       	adc	r22, r22
    2000:	77 1f       	adc	r23, r23
    2002:	88 1f       	adc	r24, r24
    2004:	91 50       	subi	r25, 0x01	; 1
    2006:	50 40       	sbci	r21, 0x00	; 0
    2008:	a9 f7       	brne	.-22     	; 0x1ff4 <__mulsf3_pse+0x64>
    200a:	9e 3f       	cpi	r25, 0xFE	; 254
    200c:	51 05       	cpc	r21, r1
    200e:	70 f0       	brcs	.+28     	; 0x202c <__mulsf3_pse+0x9c>
    2010:	5c cf       	rjmp	.-328    	; 0x1eca <__fp_inf>
    2012:	a6 cf       	rjmp	.-180    	; 0x1f60 <__fp_szero>
    2014:	5f 3f       	cpi	r21, 0xFF	; 255
    2016:	ec f3       	brlt	.-6      	; 0x2012 <__mulsf3_pse+0x82>
    2018:	98 3e       	cpi	r25, 0xE8	; 232
    201a:	dc f3       	brlt	.-10     	; 0x2012 <__mulsf3_pse+0x82>
    201c:	86 95       	lsr	r24
    201e:	77 95       	ror	r23
    2020:	67 95       	ror	r22
    2022:	b7 95       	ror	r27
    2024:	f7 95       	ror	r31
    2026:	e7 95       	ror	r30
    2028:	9f 5f       	subi	r25, 0xFF	; 255
    202a:	c1 f7       	brne	.-16     	; 0x201c <__mulsf3_pse+0x8c>
    202c:	fe 2b       	or	r31, r30
    202e:	88 0f       	add	r24, r24
    2030:	91 1d       	adc	r25, r1
    2032:	96 95       	lsr	r25
    2034:	87 95       	ror	r24
    2036:	97 f9       	bld	r25, 7
    2038:	08 95       	ret

0000203a <__fp_cmp>:
    203a:	99 0f       	add	r25, r25
    203c:	00 08       	sbc	r0, r0
    203e:	55 0f       	add	r21, r21
    2040:	aa 0b       	sbc	r26, r26
    2042:	e0 e8       	ldi	r30, 0x80	; 128
    2044:	fe ef       	ldi	r31, 0xFE	; 254
    2046:	16 16       	cp	r1, r22
    2048:	17 06       	cpc	r1, r23
    204a:	e8 07       	cpc	r30, r24
    204c:	f9 07       	cpc	r31, r25
    204e:	c0 f0       	brcs	.+48     	; 0x2080 <__fp_cmp+0x46>
    2050:	12 16       	cp	r1, r18
    2052:	13 06       	cpc	r1, r19
    2054:	e4 07       	cpc	r30, r20
    2056:	f5 07       	cpc	r31, r21
    2058:	98 f0       	brcs	.+38     	; 0x2080 <__fp_cmp+0x46>
    205a:	62 1b       	sub	r22, r18
    205c:	73 0b       	sbc	r23, r19
    205e:	84 0b       	sbc	r24, r20
    2060:	95 0b       	sbc	r25, r21
    2062:	39 f4       	brne	.+14     	; 0x2072 <__fp_cmp+0x38>
    2064:	0a 26       	eor	r0, r26
    2066:	61 f0       	breq	.+24     	; 0x2080 <__fp_cmp+0x46>
    2068:	23 2b       	or	r18, r19
    206a:	24 2b       	or	r18, r20
    206c:	25 2b       	or	r18, r21
    206e:	21 f4       	brne	.+8      	; 0x2078 <__fp_cmp+0x3e>
    2070:	08 95       	ret
    2072:	0a 26       	eor	r0, r26
    2074:	09 f4       	brne	.+2      	; 0x2078 <__fp_cmp+0x3e>
    2076:	a1 40       	sbci	r26, 0x01	; 1
    2078:	a6 95       	lsr	r26
    207a:	8f ef       	ldi	r24, 0xFF	; 255
    207c:	81 1d       	adc	r24, r1
    207e:	81 1d       	adc	r24, r1
    2080:	08 95       	ret

00002082 <__eerd_byte_m328p>:
    2082:	f9 99       	sbic	0x1f, 1	; 31
    2084:	fe cf       	rjmp	.-4      	; 0x2082 <__eerd_byte_m328p>
    2086:	92 bd       	out	0x22, r25	; 34
    2088:	81 bd       	out	0x21, r24	; 33
    208a:	f8 9a       	sbi	0x1f, 0	; 31
    208c:	99 27       	eor	r25, r25
    208e:	80 b5       	in	r24, 0x20	; 32
    2090:	08 95       	ret

00002092 <__eewr_byte_m328p>:
    2092:	26 2f       	mov	r18, r22

00002094 <__eewr_r18_m328p>:
    2094:	f9 99       	sbic	0x1f, 1	; 31
    2096:	fe cf       	rjmp	.-4      	; 0x2094 <__eewr_r18_m328p>
    2098:	1f ba       	out	0x1f, r1	; 31
    209a:	92 bd       	out	0x22, r25	; 34
    209c:	81 bd       	out	0x21, r24	; 33
    209e:	20 bd       	out	0x20, r18	; 32
    20a0:	0f b6       	in	r0, 0x3f	; 63
    20a2:	f8 94       	cli
    20a4:	fa 9a       	sbi	0x1f, 2	; 31
    20a6:	f9 9a       	sbi	0x1f, 1	; 31
    20a8:	0f be       	out	0x3f, r0	; 63
    20aa:	01 96       	adiw	r24, 0x01	; 1
    20ac:	08 95       	ret

000020ae <_exit>:
    20ae:	f8 94       	cli

000020b0 <__stop_program>:
    20b0:	ff cf       	rjmp	.-2      	; 0x20b0 <__stop_program>
