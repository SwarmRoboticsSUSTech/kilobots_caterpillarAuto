
build/caterpillarAuto.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
       8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
       c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      18:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__vector_6>
      1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      2c:	0c 94 6b 0c 	jmp	0x18d6	; 0x18d6 <__vector_11>
      30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      38:	0c 94 cb 0b 	jmp	0x1796	; 0x1796 <__vector_14>
      3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      5c:	0c 94 8d 0c 	jmp	0x191a	; 0x191a <__vector_23>
      60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      68:	08 07       	cpc	r16, r24
      6a:	84 07       	cpc	r24, r20
      6c:	dc 06       	cpc	r13, r28
      6e:	d2 06       	cpc	r13, r18
      70:	d9 06       	cpc	r13, r25
      72:	66 07       	cpc	r22, r22
      74:	5b 07       	cpc	r21, r27
      76:	e9 0d       	add	r30, r9
      78:	cd 0c       	add	r12, r13
      7a:	cd 0c       	add	r12, r13
      7c:	e6 0d       	add	r30, r6
      7e:	f2 0d       	add	r31, r2
      80:	e2 0d       	add	r30, r2
      82:	f9 0d       	add	r31, r9
      84:	f5 0d       	add	r31, r5
      86:	fd 0d       	add	r31, r13
      88:	b6 0d       	add	r27, r6
      8a:	88 0d       	add	r24, r8

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
    wdt_disable();
      9a:	88 e1       	ldi	r24, 0x18	; 24
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	80 93 60 00 	sts	0x0060, r24
      a4:	10 92 60 00 	sts	0x0060, r1
      a8:	0f be       	out	0x3f, r0	; 63

000000aa <__do_copy_data>:
      aa:	11 e0       	ldi	r17, 0x01	; 1
      ac:	a0 e0       	ldi	r26, 0x00	; 0
      ae:	b1 e0       	ldi	r27, 0x01	; 1
      b0:	e2 ec       	ldi	r30, 0xC2	; 194
      b2:	f4 e2       	ldi	r31, 0x24	; 36
      b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x10>
      b6:	05 90       	lpm	r0, Z+
      b8:	0d 92       	st	X+, r0
      ba:	aa 32       	cpi	r26, 0x2A	; 42
      bc:	b1 07       	cpc	r27, r17
      be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0xc>

000000c0 <__do_clear_bss>:
      c0:	21 e0       	ldi	r18, 0x01	; 1
      c2:	aa e2       	ldi	r26, 0x2A	; 42
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
      c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
      ca:	a0 3c       	cpi	r26, 0xC0	; 192
      cc:	b2 07       	cpc	r27, r18
      ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
      d0:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <main>
      d4:	0c 94 5f 12 	jmp	0x24be	; 0x24be <_exit>

000000d8 <__bad_interrupt>:
      d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <setup>:

void setup()
{
    //If the robot is the seed, its gradient should be 0: overwrite the
    // previously set value of GRADIENT_MAX.
    if (kilo_uid == SEED_ID)
      dc:	80 91 bb 01 	lds	r24, 0x01BB
      e0:	90 91 bc 01 	lds	r25, 0x01BC
      e4:	89 2b       	or	r24, r25
      e6:	b1 f5       	brne	.+108    	; 0x154 <setup+0x78>
    {
        own_gradient = 0;
      e8:	10 92 1d 01 	sts	0x011D, r1
      ec:	10 92 1c 01 	sts	0x011C, r1
		distance_to_motivator = DISTANCE_COLLIDE;
      f0:	88 e2       	ldi	r24, 0x28	; 40
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	90 93 19 01 	sts	0x0119, r25
      f8:	80 93 18 01 	sts	0x0118, r24
		update_distance_to_motivator = UPDATE;
      fc:	81 e0       	ldi	r24, 0x01	; 1
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	90 93 2f 01 	sts	0x012F, r25
     104:	80 93 2e 01 	sts	0x012E, r24
		state_motivator = COMPLETED;
     108:	25 e0       	ldi	r18, 0x05	; 5
     10a:	30 e0       	ldi	r19, 0x00	; 0
     10c:	30 93 3b 01 	sts	0x013B, r19
     110:	20 93 3a 01 	sts	0x013A, r18
		update_state_motivator = UPDATE;
     114:	90 93 2b 01 	sts	0x012B, r25
     118:	80 93 2a 01 	sts	0x012A, r24
		flag_minor = YES;
     11c:	90 93 35 01 	sts	0x0135, r25
     120:	80 93 34 01 	sts	0x0134, r24
     124:	88 e2       	ldi	r24, 0x28	; 40
     126:	95 e0       	ldi	r25, 0x05	; 5
     128:	20 e0       	ldi	r18, 0x00	; 0
    }

    // Set the transmission message.
    message.type = NORMAL;
     12a:	10 92 4f 01 	sts	0x014F, r1
    message.data[0] = own_gradient;
     12e:	20 93 46 01 	sts	0x0146, r18
	// Sequence has not been formed completely.
	message.data[1] = formed_state;
     132:	20 91 32 01 	lds	r18, 0x0132
     136:	20 93 47 01 	sts	0x0147, r18
	message.data[2] = state_motivator;
     13a:	90 93 48 01 	sts	0x0148, r25
	message.data[3] = distance_to_motivator;
     13e:	80 93 49 01 	sts	0x0149, r24
	message.crc = message_crc(&message);
     142:	86 e4       	ldi	r24, 0x46	; 70
     144:	91 e0       	ldi	r25, 0x01	; 1
     146:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <message_crc>
     14a:	90 93 51 01 	sts	0x0151, r25
     14e:	80 93 50 01 	sts	0x0150, r24
     152:	08 95       	ret
     154:	20 91 1c 01 	lds	r18, 0x011C
     158:	90 91 3a 01 	lds	r25, 0x013A
     15c:	80 91 18 01 	lds	r24, 0x0118
     160:	e4 cf       	rjmp	.-56     	; 0x12a <setup+0x4e>

00000162 <message_tx>:
}


message_t *message_tx()
{
	message.data[0] = own_gradient;
     162:	80 91 1c 01 	lds	r24, 0x011C
     166:	80 93 46 01 	sts	0x0146, r24
	message.data[1] = formed_state;
     16a:	80 91 32 01 	lds	r24, 0x0132
     16e:	80 93 47 01 	sts	0x0147, r24
	message.data[2] = state_myself;
     172:	80 91 38 01 	lds	r24, 0x0138
     176:	80 93 48 01 	sts	0x0148, r24
	message.data[3] = distance_to_motivator;
     17a:	80 91 18 01 	lds	r24, 0x0118
     17e:	80 93 49 01 	sts	0x0149, r24
        default:
             set_color(RGB(0, 1, 1));
             break;
    }
*/
	message.crc = message_crc(&message);
     182:	86 e4       	ldi	r24, 0x46	; 70
     184:	91 e0       	ldi	r25, 0x01	; 1
     186:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <message_crc>
     18a:	90 93 51 01 	sts	0x0151, r25
     18e:	80 93 50 01 	sts	0x0150, r24
    return &message;
}
     192:	86 e4       	ldi	r24, 0x46	; 70
     194:	91 e0       	ldi	r25, 0x01	; 1
     196:	08 95       	ret

00000198 <message_rx>:

void message_rx(message_t *m, distance_measurement_t *d)
{
     198:	cf 92       	push	r12
     19a:	df 92       	push	r13
     19c:	ef 92       	push	r14
     19e:	ff 92       	push	r15
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
     1a4:	ec 01       	movw	r28, r24
     1a6:	cb 01       	movw	r24, r22
	//set_color(RGB(0, 0, 0));
	//set_color(RGB(1, 0, 0));
    received_gradient = m->data[0];
     1a8:	28 81       	ld	r18, Y
     1aa:	30 e0       	ldi	r19, 0x00	; 0
     1ac:	30 93 41 01 	sts	0x0141, r19
     1b0:	20 93 40 01 	sts	0x0140, r18
    distance = estimate_distance(d);
     1b4:	0e 94 04 09 	call	0x1208	; 0x1208 <estimate_distance>
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	90 93 1b 01 	sts	0x011B, r25
     1be:	80 93 1a 01 	sts	0x011A, r24
	// In the valid distance.
	// This distance can be a constraint condition if needed.
	if (distance <= DISTANCE_GRADIENT)
     1c2:	85 36       	cpi	r24, 0x65	; 101
     1c4:	91 05       	cpc	r25, r1
     1c6:	0c f0       	brlt	.+2      	; 0x1ca <message_rx+0x32>
     1c8:	6e c0       	rjmp	.+220    	; 0x2a6 <message_rx+0x10e>
	{
		// I have neighbours. Mark it.
		last_gradient_anchored = kilo_ticks;
     1ca:	40 91 85 01 	lds	r20, 0x0185
     1ce:	50 91 86 01 	lds	r21, 0x0186
     1d2:	60 91 87 01 	lds	r22, 0x0187
     1d6:	70 91 88 01 	lds	r23, 0x0188
     1da:	40 93 56 01 	sts	0x0156, r20
     1de:	50 93 57 01 	sts	0x0157, r21
     1e2:	60 93 58 01 	sts	0x0158, r22
     1e6:	70 93 59 01 	sts	0x0159, r23
		// The message was sent by my motivated.
		// I found someone's gradient maxer than mine in the world.
		// My formed state is determined by my motivated.
		if (received_gradient > own_gradient)
     1ea:	20 91 40 01 	lds	r18, 0x0140
     1ee:	30 91 41 01 	lds	r19, 0x0141
     1f2:	e0 91 1c 01 	lds	r30, 0x011C
     1f6:	f0 91 1d 01 	lds	r31, 0x011D
     1fa:	e2 17       	cp	r30, r18
     1fc:	f3 07       	cpc	r31, r19
     1fe:	0c f0       	brlt	.+2      	; 0x202 <message_rx+0x6a>
     200:	59 c0       	rjmp	.+178    	; 0x2b4 <message_rx+0x11c>
		{
			last_found_maxer = kilo_ticks;
     202:	40 91 85 01 	lds	r20, 0x0185
     206:	50 91 86 01 	lds	r21, 0x0186
     20a:	60 91 87 01 	lds	r22, 0x0187
     20e:	70 91 88 01 	lds	r23, 0x0188
     212:	40 93 5a 01 	sts	0x015A, r20
     216:	50 93 5b 01 	sts	0x015B, r21
     21a:	60 93 5c 01 	sts	0x015C, r22
     21e:	70 93 5d 01 	sts	0x015D, r23
			flag_maxest = NO;
     222:	10 92 37 01 	sts	0x0137, r1
     226:	10 92 36 01 	sts	0x0136, r1
			if (received_gradient == (own_gradient + 1))
     22a:	31 96       	adiw	r30, 0x01	; 1
     22c:	2e 17       	cp	r18, r30
     22e:	3f 07       	cpc	r19, r31
     230:	09 f4       	brne	.+2      	; 0x234 <message_rx+0x9c>
     232:	ba c0       	rjmp	.+372    	; 0x3a8 <message_rx+0x210>
     234:	80 91 bb 01 	lds	r24, 0x01BB
     238:	90 91 bc 01 	lds	r25, 0x01BC
		}

		// I have neighbours whose gradient is minor than mine.
		// Meanwhile long time no find gradient maxer than mine.
		// I am the maxest one in my local world.
		if((kilo_uid != SEED_ID) && (kilo_ticks > (last_found_maxer + TIME_CHECK_MAXER)))
     23c:	89 2b       	or	r24, r25
     23e:	99 f1       	breq	.+102    	; 0x2a6 <message_rx+0x10e>
     240:	40 91 85 01 	lds	r20, 0x0185
     244:	50 91 86 01 	lds	r21, 0x0186
     248:	60 91 87 01 	lds	r22, 0x0187
     24c:	70 91 88 01 	lds	r23, 0x0188
     250:	80 91 5a 01 	lds	r24, 0x015A
     254:	90 91 5b 01 	lds	r25, 0x015B
     258:	a0 91 5c 01 	lds	r26, 0x015C
     25c:	b0 91 5d 01 	lds	r27, 0x015D
     260:	80 56       	subi	r24, 0x60	; 96
     262:	9f 4f       	sbci	r25, 0xFF	; 255
     264:	af 4f       	sbci	r26, 0xFF	; 255
     266:	bf 4f       	sbci	r27, 0xFF	; 255
     268:	84 17       	cp	r24, r20
     26a:	95 07       	cpc	r25, r21
     26c:	a6 07       	cpc	r26, r22
     26e:	b7 07       	cpc	r27, r23
     270:	d0 f4       	brcc	.+52     	; 0x2a6 <message_rx+0x10e>
		{
			flag_maxest = YES;
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	90 93 37 01 	sts	0x0137, r25
     27a:	80 93 36 01 	sts	0x0136, r24
			formed_state = FORMED_OK;
     27e:	90 93 33 01 	sts	0x0133, r25
     282:	80 93 32 01 	sts	0x0132, r24
			state_motivated = COMPLETED;
     286:	25 e0       	ldi	r18, 0x05	; 5
     288:	30 e0       	ldi	r19, 0x00	; 0
     28a:	30 93 3d 01 	sts	0x013D, r19
     28e:	20 93 3c 01 	sts	0x013C, r18
			distance_to_motivated = DISTANCE_MAX;
     292:	24 e6       	ldi	r18, 0x64	; 100
     294:	30 e0       	ldi	r19, 0x00	; 0
     296:	30 93 13 01 	sts	0x0113, r19
     29a:	20 93 12 01 	sts	0x0112, r18
			update_distance_to_motivated = UPDATE;
     29e:	90 93 31 01 	sts	0x0131, r25
     2a2:	80 93 30 01 	sts	0x0130, r24
			update_state_motivator = UPDATE;
			set_color(RGB(1, 0, 1));
		}
		*/
	}
}
     2a6:	df 91       	pop	r29
     2a8:	cf 91       	pop	r28
     2aa:	ff 90       	pop	r15
     2ac:	ef 90       	pop	r14
     2ae:	df 90       	pop	r13
     2b0:	cf 90       	pop	r12
     2b2:	08 95       	ret
				update_distance_to_motivated = UPDATE;
			}
		}
		// That guy has the same gradient with mine.
		// There needs a comparison between us.
		else if ((received_gradient == own_gradient) && (received_gradient != GRADIENT_MAX))
     2b4:	2e 17       	cp	r18, r30
     2b6:	3f 07       	cpc	r19, r31
     2b8:	b9 f1       	breq	.+110    	; 0x328 <message_rx+0x190>
				update_distance_to_motivator = UPDATE;
			}
		}
		// received_gradient < own_gradient
		// The message was sent by my motivator.
		else if (kilo_uid != SEED_ID)
     2ba:	40 91 bb 01 	lds	r20, 0x01BB
     2be:	50 91 bc 01 	lds	r21, 0x01BC
     2c2:	45 2b       	or	r20, r21
     2c4:	81 f3       	breq	.-32     	; 0x2a6 <message_rx+0x10e>
			// For example, own_gradient = 3;
			// my_motivator = 2;
			// my_motivator's motivator = 1;
			// my_motivator's motivator's motivator = 0;
			// 0, 1, 2, 3
			if (((own_gradient - received_gradient) == 2) || ((own_gradient - received_gradient) == 3))
     2c6:	e2 1b       	sub	r30, r18
     2c8:	f3 0b       	sbc	r31, r19
     2ca:	32 97       	sbiw	r30, 0x02	; 2
     2cc:	32 97       	sbiw	r30, 0x02	; 2
     2ce:	08 f4       	brcc	.+2      	; 0x2d2 <message_rx+0x13a>
     2d0:	9e c0       	rjmp	.+316    	; 0x40e <message_rx+0x276>
			}
			// This is the formal situation, my gradient is based on 
			// a miner.
			else
			{
				last_found_minor = kilo_ticks;
     2d2:	40 91 85 01 	lds	r20, 0x0185
     2d6:	50 91 86 01 	lds	r21, 0x0186
     2da:	60 91 87 01 	lds	r22, 0x0187
     2de:	70 91 88 01 	lds	r23, 0x0188
     2e2:	40 93 5e 01 	sts	0x015E, r20
     2e6:	50 93 5f 01 	sts	0x015F, r21
     2ea:	60 93 60 01 	sts	0x0160, r22
     2ee:	70 93 61 01 	sts	0x0161, r23
				own_gradient = received_gradient + 1;
     2f2:	2f 5f       	subi	r18, 0xFF	; 255
     2f4:	3f 4f       	sbci	r19, 0xFF	; 255
     2f6:	30 93 1d 01 	sts	0x011D, r19
     2fa:	20 93 1c 01 	sts	0x011C, r18
				state_motivator =  m->data[2];
     2fe:	2a 81       	ldd	r18, Y+2	; 0x02
     300:	30 e0       	ldi	r19, 0x00	; 0
     302:	30 93 3b 01 	sts	0x013B, r19
     306:	20 93 3a 01 	sts	0x013A, r18
				update_state_motivator = UPDATE;
     30a:	21 e0       	ldi	r18, 0x01	; 1
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	30 93 2b 01 	sts	0x012B, r19
     312:	20 93 2a 01 	sts	0x012A, r18
				distance_to_motivator = distance;
     316:	90 93 19 01 	sts	0x0119, r25
     31a:	80 93 18 01 	sts	0x0118, r24
				update_distance_to_motivator = UPDATE;
     31e:	30 93 2f 01 	sts	0x012F, r19
     322:	20 93 2e 01 	sts	0x012E, r18
     326:	8c cf       	rjmp	.-232    	; 0x240 <message_rx+0xa8>
				update_distance_to_motivated = UPDATE;
			}
		}
		// That guy has the same gradient with mine.
		// There needs a comparison between us.
		else if ((received_gradient == own_gradient) && (received_gradient != GRADIENT_MAX))
     328:	2f 3f       	cpi	r18, 0xFF	; 255
     32a:	31 05       	cpc	r19, r1
     32c:	31 f2       	breq	.-116    	; 0x2ba <message_rx+0x122>
		{
			distance_to_motivator_pair = m->data[3];
     32e:	4b 81       	ldd	r20, Y+3	; 0x03
     330:	50 e0       	ldi	r21, 0x00	; 0
     332:	50 93 17 01 	sts	0x0117, r21
     336:	40 93 16 01 	sts	0x0116, r20
			if (distance_to_motivator_pair < distance_to_motivator)
     33a:	60 91 18 01 	lds	r22, 0x0118
     33e:	70 91 19 01 	lds	r23, 0x0119
     342:	46 17       	cp	r20, r22
     344:	57 07       	cpc	r21, r23
     346:	0c f0       	brlt	.+2      	; 0x34a <message_rx+0x1b2>
     348:	75 cf       	rjmp	.-278    	; 0x234 <message_rx+0x9c>
			{
				last_found_minor = kilo_ticks;
     34a:	40 91 85 01 	lds	r20, 0x0185
     34e:	50 91 86 01 	lds	r21, 0x0186
     352:	60 91 87 01 	lds	r22, 0x0187
     356:	70 91 88 01 	lds	r23, 0x0188
     35a:	40 93 5e 01 	sts	0x015E, r20
     35e:	50 93 5f 01 	sts	0x015F, r21
     362:	60 93 60 01 	sts	0x0160, r22
     366:	70 93 61 01 	sts	0x0161, r23
				own_gradient = received_gradient + 1;
     36a:	2f 5f       	subi	r18, 0xFF	; 255
     36c:	3f 4f       	sbci	r19, 0xFF	; 255
     36e:	30 93 1d 01 	sts	0x011D, r19
     372:	20 93 1c 01 	sts	0x011C, r18
				state_motivator =  m->data[2];
     376:	2a 81       	ldd	r18, Y+2	; 0x02
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	30 93 3b 01 	sts	0x013B, r19
     37e:	20 93 3a 01 	sts	0x013A, r18
				update_state_motivator = UPDATE;
     382:	21 e0       	ldi	r18, 0x01	; 1
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	30 93 2b 01 	sts	0x012B, r19
     38a:	20 93 2a 01 	sts	0x012A, r18
				distance_to_motivator = distance;
     38e:	90 93 19 01 	sts	0x0119, r25
     392:	80 93 18 01 	sts	0x0118, r24
				update_distance_to_motivator = UPDATE;
     396:	30 93 2f 01 	sts	0x012F, r19
     39a:	20 93 2e 01 	sts	0x012E, r18
     39e:	80 91 bb 01 	lds	r24, 0x01BB
     3a2:	90 91 bc 01 	lds	r25, 0x01BC
     3a6:	4a cf       	rjmp	.-364    	; 0x23c <message_rx+0xa4>
		{
			last_found_maxer = kilo_ticks;
			flag_maxest = NO;
			if (received_gradient == (own_gradient + 1))
			{
				formed_state = m->data[1];
     3a8:	29 81       	ldd	r18, Y+1	; 0x01
     3aa:	30 e0       	ldi	r19, 0x00	; 0
     3ac:	30 93 33 01 	sts	0x0133, r19
     3b0:	20 93 32 01 	sts	0x0132, r18
				state_motivated =  m->data[2];
     3b4:	2a 81       	ldd	r18, Y+2	; 0x02
     3b6:	30 e0       	ldi	r19, 0x00	; 0
     3b8:	30 93 3d 01 	sts	0x013D, r19
     3bc:	20 93 3c 01 	sts	0x013C, r18
				update_state_motivated = UPDATE;
     3c0:	41 e0       	ldi	r20, 0x01	; 1
     3c2:	50 e0       	ldi	r21, 0x00	; 0
     3c4:	50 93 2d 01 	sts	0x012D, r21
     3c8:	40 93 2c 01 	sts	0x012C, r20
				if (state_motivated != MOVE)
     3cc:	24 30       	cpi	r18, 0x04	; 4
     3ce:	31 05       	cpc	r19, r1
     3d0:	09 f4       	brne	.+2      	; 0x3d4 <message_rx+0x23c>
     3d2:	47 c0       	rjmp	.+142    	; 0x462 <message_rx+0x2ca>
					// the distance_to_motivated becomes larger is due to
					// the motion of my motivated in the last moment,
					// not my wrong decision making. 
					// This is important because I can only make
					// the right decision only when I know the truth.
					if ((++num_stop) == 1)
     3d4:	20 91 3e 01 	lds	r18, 0x013E
     3d8:	30 91 3f 01 	lds	r19, 0x013F
     3dc:	2f 5f       	subi	r18, 0xFF	; 255
     3de:	3f 4f       	sbci	r19, 0xFF	; 255
     3e0:	30 93 3f 01 	sts	0x013F, r19
     3e4:	20 93 3e 01 	sts	0x013E, r18
     3e8:	21 30       	cpi	r18, 0x01	; 1
     3ea:	31 05       	cpc	r19, r1
     3ec:	59 f0       	breq	.+22     	; 0x404 <message_rx+0x26c>
				}
				else
				{
					num_stop = 0;
				}
				distance_to_motivated = distance;
     3ee:	90 93 13 01 	sts	0x0113, r25
     3f2:	80 93 12 01 	sts	0x0112, r24
				update_distance_to_motivated = UPDATE;
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	90 93 31 01 	sts	0x0131, r25
     3fe:	80 93 30 01 	sts	0x0130, r24
     402:	18 cf       	rjmp	.-464    	; 0x234 <message_rx+0x9c>
					// not my wrong decision making. 
					// This is important because I can only make
					// the right decision only when I know the truth.
					if ((++num_stop) == 1)
					{
						my_fault = NO;
     404:	10 92 07 01 	sts	0x0107, r1
     408:	10 92 06 01 	sts	0x0106, r1
     40c:	f0 cf       	rjmp	.-32     	; 0x3ee <message_rx+0x256>
			if (((own_gradient - received_gradient) == 2) || ((own_gradient - received_gradient) == 3))
			{
				// The message sender is closer, and meanwhile the last
				// time I found a minor is too long ago (TIME_CHECK_MINOR).
				// Thus I need  to find a new motivator.
				if ((distance < distance_to_motivator) && (kilo_ticks > (last_found_minor + TIME_CHECK_MINOR)))
     40e:	40 91 18 01 	lds	r20, 0x0118
     412:	50 91 19 01 	lds	r21, 0x0119
     416:	84 17       	cp	r24, r20
     418:	95 07       	cpc	r25, r21
     41a:	d4 f4       	brge	.+52     	; 0x450 <message_rx+0x2b8>
     41c:	c0 90 85 01 	lds	r12, 0x0185
     420:	d0 90 86 01 	lds	r13, 0x0186
     424:	e0 90 87 01 	lds	r14, 0x0187
     428:	f0 90 88 01 	lds	r15, 0x0188
     42c:	40 91 5e 01 	lds	r20, 0x015E
     430:	50 91 5f 01 	lds	r21, 0x015F
     434:	60 91 60 01 	lds	r22, 0x0160
     438:	70 91 61 01 	lds	r23, 0x0161
     43c:	40 58       	subi	r20, 0x80	; 128
     43e:	5f 4f       	sbci	r21, 0xFF	; 255
     440:	6f 4f       	sbci	r22, 0xFF	; 255
     442:	7f 4f       	sbci	r23, 0xFF	; 255
     444:	4c 15       	cp	r20, r12
     446:	5d 05       	cpc	r21, r13
     448:	6e 05       	cpc	r22, r14
     44a:	7f 05       	cpc	r23, r15
     44c:	08 f4       	brcc	.+2      	; 0x450 <message_rx+0x2b8>
     44e:	41 cf       	rjmp	.-382    	; 0x2d2 <message_rx+0x13a>
				}
				// Due to the message transfer delay, the following wrong
				// gradient formation may occure,  0, 2, 1.
				// The following code auotmatically modify this.
				// This code occures when 2 first find 1 and then find 0.
				else if (distance < distance_to_motivator_pair)
     450:	40 91 16 01 	lds	r20, 0x0116
     454:	50 91 17 01 	lds	r21, 0x0117
     458:	84 17       	cp	r24, r20
     45a:	95 07       	cpc	r25, r21
     45c:	0c f4       	brge	.+2      	; 0x460 <message_rx+0x2c8>
     45e:	39 cf       	rjmp	.-398    	; 0x2d2 <message_rx+0x13a>
     460:	ef ce       	rjmp	.-546    	; 0x240 <message_rx+0xa8>
						my_fault = NO;
					}
				}
				else
				{
					num_stop = 0;
     462:	10 92 3f 01 	sts	0x013F, r1
     466:	10 92 3e 01 	sts	0x013E, r1
     46a:	c1 cf       	rjmp	.-126    	; 0x3ee <message_rx+0x256>

0000046c <randBinary>:


// Generate 0 or 1 randomly
int randBinary(){
    // Generate an 8-bit random number (between 0 and 2^8 - 1 = 255).
    int random_number = rand_hard();
     46c:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <rand_hard>
    // Compute the remainder of random_number when divided by 2.
    // This gives a new random number in the set {0, 1}.
    int random_direction = (random_number % 2);

    return random_direction;
}
     470:	81 70       	andi	r24, 0x01	; 1
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	08 95       	ret

00000476 <set_led>:

// Function to set led states
void set_led()
{
    // Set the LED color based on the gradient.
    switch (own_gradient) {
     476:	80 91 1c 01 	lds	r24, 0x011C
     47a:	90 91 1d 01 	lds	r25, 0x011D
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	91 05       	cpc	r25, r1
     482:	c9 f0       	breq	.+50     	; 0x4b6 <set_led+0x40>
     484:	3c f4       	brge	.+14     	; 0x494 <set_led+0x1e>
     486:	00 97       	sbiw	r24, 0x00	; 0
     488:	99 f0       	breq	.+38     	; 0x4b0 <set_led+0x3a>
     48a:	01 97       	sbiw	r24, 0x01	; 1
     48c:	59 f4       	brne	.+22     	; 0x4a4 <set_led+0x2e>
        case 0:
            set_color(RGB(1, 1, 1)); // White
            break;
        case 1:
            set_color(RGB(1, 0, 0)); // Red
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	0c 94 47 0c 	jmp	0x188e	; 0x188e <set_color>

// Function to set led states
void set_led()
{
    // Set the LED color based on the gradient.
    switch (own_gradient) {
     494:	83 30       	cpi	r24, 0x03	; 3
     496:	91 05       	cpc	r25, r1
     498:	41 f0       	breq	.+16     	; 0x4aa <set_led+0x34>
     49a:	04 97       	sbiw	r24, 0x04	; 4
     49c:	19 f4       	brne	.+6      	; 0x4a4 <set_led+0x2e>
            break;
        case 3:
            set_color(RGB(0, 0, 1)); // Blue
            break;
        case 4:
            set_color(RGB(1, 1, 0)); // Yellow
     49e:	85 e0       	ldi	r24, 0x05	; 5
     4a0:	0c 94 47 0c 	jmp	0x188e	; 0x188e <set_color>
            break;
        default:
            set_color(RGB(1, 0, 1)); // Magneta
     4a4:	81 e1       	ldi	r24, 0x11	; 17
     4a6:	0c 94 47 0c 	jmp	0x188e	; 0x188e <set_color>
            break;
        case 2:
            set_color(RGB(0, 1, 0)); // Green
            break;
        case 3:
            set_color(RGB(0, 0, 1)); // Blue
     4aa:	80 e1       	ldi	r24, 0x10	; 16
     4ac:	0c 94 47 0c 	jmp	0x188e	; 0x188e <set_color>
void set_led()
{
    // Set the LED color based on the gradient.
    switch (own_gradient) {
        case 0:
            set_color(RGB(1, 1, 1)); // White
     4b0:	85 e1       	ldi	r24, 0x15	; 21
     4b2:	0c 94 47 0c 	jmp	0x188e	; 0x188e <set_color>
            break;
        case 1:
            set_color(RGB(1, 0, 0)); // Red
            break;
        case 2:
            set_color(RGB(0, 1, 0)); // Green
     4b6:	84 e0       	ldi	r24, 0x04	; 4
     4b8:	0c 94 47 0c 	jmp	0x188e	; 0x188e <set_color>

000004bc <set_motion>:

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an an action if the motion is being changed.
    if (current_motion != new_motion)
     4bc:	20 91 0a 01 	lds	r18, 0x010A
     4c0:	30 91 0b 01 	lds	r19, 0x010B
     4c4:	28 17       	cp	r18, r24
     4c6:	39 07       	cpc	r19, r25
     4c8:	71 f0       	breq	.+28     	; 0x4e6 <set_motion+0x2a>
    {
        current_motion = new_motion;
     4ca:	90 93 0b 01 	sts	0x010B, r25
     4ce:	80 93 0a 01 	sts	0x010A, r24

        if (current_motion == STOP)
     4d2:	00 97       	sbiw	r24, 0x00	; 0
     4d4:	81 f0       	breq	.+32     	; 0x4f6 <set_motion+0x3a>
        {
			set_color(RGB(0, 0, 0));
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
     4d6:	81 30       	cpi	r24, 0x01	; 1
     4d8:	91 05       	cpc	r25, r1
     4da:	a1 f0       	breq	.+40     	; 0x504 <set_motion+0x48>
        {
			//set_color(RGB(1, 0, 0));
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
     4dc:	82 30       	cpi	r24, 0x02	; 2
     4de:	91 05       	cpc	r25, r1
     4e0:	c9 f0       	breq	.+50     	; 0x514 <set_motion+0x58>
        {
			//set_color(RGB(0, 1, 0));
            spinup_motors();
            set_motors(kilo_turn_left, 0);
        }
        else if (current_motion == RIGHT)
     4e2:	03 97       	sbiw	r24, 0x03	; 3
     4e4:	09 f0       	breq	.+2      	; 0x4e8 <set_motion+0x2c>
     4e6:	08 95       	ret
        {
			//set_color(RGB(0, 0, 1));
            spinup_motors();
     4e8:	0e 94 21 08 	call	0x1042	; 0x1042 <spinup_motors>
            set_motors(0, kilo_turn_right);
     4ec:	60 91 ab 01 	lds	r22, 0x01AB
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <set_motors>
    {
        current_motion = new_motion;

        if (current_motion == STOP)
        {
			set_color(RGB(0, 0, 0));
     4f6:	80 e0       	ldi	r24, 0x00	; 0
     4f8:	0e 94 47 0c 	call	0x188e	; 0x188e <set_color>
            set_motors(0, 0);
     4fc:	60 e0       	ldi	r22, 0x00	; 0
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <set_motors>
        }
        else if (current_motion == FORWARD)
        {
			//set_color(RGB(1, 0, 0));
            spinup_motors();
     504:	0e 94 21 08 	call	0x1042	; 0x1042 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     508:	60 91 be 01 	lds	r22, 0x01BE
     50c:	80 91 bd 01 	lds	r24, 0x01BD
     510:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <set_motors>
        }
        else if (current_motion == LEFT)
        {
			//set_color(RGB(0, 1, 0));
            spinup_motors();
     514:	0e 94 21 08 	call	0x1042	; 0x1042 <spinup_motors>
            set_motors(kilo_turn_left, 0);
     518:	60 e0       	ldi	r22, 0x00	; 0
     51a:	80 91 bf 01 	lds	r24, 0x01BF
     51e:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <set_motors>

00000522 <check_own_gradient>:
// If I am lost from all the others in the world, there should be mechnism
// allowing me to find this serious thing since I am gregarious.
void check_own_gradient() {
	// If no neighbors detected within TIME_LAST_GRADIENT seconds
	// then sleep waiting for be activated.
    if ( (kilo_uid != SEED_ID) && (kilo_ticks > (last_found_minor + TIME_LAST_GRADIENT)) && (own_gradient < GRADIENT_MAX))
     522:	80 91 bb 01 	lds	r24, 0x01BB
     526:	90 91 bc 01 	lds	r25, 0x01BC
     52a:	89 2b       	or	r24, r25
     52c:	51 f1       	breq	.+84     	; 0x582 <check_own_gradient+0x60>
     52e:	40 91 85 01 	lds	r20, 0x0185
     532:	50 91 86 01 	lds	r21, 0x0186
     536:	60 91 87 01 	lds	r22, 0x0187
     53a:	70 91 88 01 	lds	r23, 0x0188
     53e:	80 91 5e 01 	lds	r24, 0x015E
     542:	90 91 5f 01 	lds	r25, 0x015F
     546:	a0 91 60 01 	lds	r26, 0x0160
     54a:	b0 91 61 01 	lds	r27, 0x0161
     54e:	80 56       	subi	r24, 0x60	; 96
     550:	9f 4f       	sbci	r25, 0xFF	; 255
     552:	af 4f       	sbci	r26, 0xFF	; 255
     554:	bf 4f       	sbci	r27, 0xFF	; 255
     556:	84 17       	cp	r24, r20
     558:	95 07       	cpc	r25, r21
     55a:	a6 07       	cpc	r26, r22
     55c:	b7 07       	cpc	r27, r23
     55e:	88 f4       	brcc	.+34     	; 0x582 <check_own_gradient+0x60>
     560:	80 91 1c 01 	lds	r24, 0x011C
     564:	90 91 1d 01 	lds	r25, 0x011D
     568:	8f 3f       	cpi	r24, 0xFF	; 255
     56a:	91 05       	cpc	r25, r1
     56c:	54 f4       	brge	.+20     	; 0x582 <check_own_gradient+0x60>
    {
        own_gradient = GRADIENT_MAX;
     56e:	8f ef       	ldi	r24, 0xFF	; 255
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	90 93 1d 01 	sts	0x011D, r25
     576:	80 93 1c 01 	sts	0x011C, r24
		formed_state = FORMED_NO;
     57a:	10 92 33 01 	sts	0x0133, r1
     57e:	10 92 32 01 	sts	0x0132, r1
     582:	08 95       	ret

00000584 <opposite_move>:
}


// Convert the current motion to its opposite one.
int opposite_move(int offspring)
{
     584:	cf 93       	push	r28
     586:	df 93       	push	r29
     588:	ec 01       	movw	r28, r24
	set_color(RGB(1, 1, 1));
     58a:	85 e1       	ldi	r24, 0x15	; 21
     58c:	0e 94 47 0c 	call	0x188e	; 0x188e <set_color>
	int next_motion = offspring;
	switch (offspring)
     590:	c2 30       	cpi	r28, 0x02	; 2
     592:	d1 05       	cpc	r29, r1
     594:	71 f0       	breq	.+28     	; 0x5b2 <opposite_move+0x2e>
     596:	c3 30       	cpi	r28, 0x03	; 3
     598:	d1 05       	cpc	r29, r1
     59a:	89 f0       	breq	.+34     	; 0x5be <opposite_move+0x3a>
     59c:	c1 30       	cpi	r28, 0x01	; 1
     59e:	d1 05       	cpc	r29, r1
     5a0:	21 f0       	breq	.+8      	; 0x5aa <opposite_move+0x26>
			break;
		default:
			break;
	}
	return next_motion;
}
     5a2:	ce 01       	movw	r24, r28
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	08 95       	ret


// Generate 0 or 1 randomly
int randBinary(){
    // Generate an 8-bit random number (between 0 and 2^8 - 1 = 255).
    int random_number = rand_hard();
     5aa:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <rand_hard>
			break;
		case RIGHT:
			next_motion = LEFT;
			break;
		case FORWARD:
			if (randBinary() == 1)
     5ae:	80 fd       	sbrc	r24, 0
     5b0:	06 c0       	rjmp	.+12     	; 0x5be <opposite_move+0x3a>
			{
				next_motion = LEFT;
			}
			else
			{
				next_motion = RIGHT;
     5b2:	c3 e0       	ldi	r28, 0x03	; 3
     5b4:	d0 e0       	ldi	r29, 0x00	; 0
			break;
		default:
			break;
	}
	return next_motion;
}
     5b6:	ce 01       	movw	r24, r28
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	08 95       	ret
			next_motion = LEFT;
			break;
		case FORWARD:
			if (randBinary() == 1)
			{
				next_motion = LEFT;
     5be:	c2 e0       	ldi	r28, 0x02	; 2
     5c0:	d0 e0       	ldi	r29, 0x00	; 0
			break;
		default:
			break;
	}
	return next_motion;
}
     5c2:	ce 01       	movw	r24, r28
     5c4:	df 91       	pop	r29
     5c6:	cf 91       	pop	r28
     5c8:	08 95       	ret

000005ca <move>:

void move() {
     5ca:	cf 93       	push	r28
     5cc:	df 93       	push	r29
	int next_motion = offspring;
     5ce:	c0 91 04 01 	lds	r28, 0x0104
     5d2:	d0 91 05 01 	lds	r29, 0x0105

	// If My gradient is the maxest one, the only motion I need to execute
	// is to step forward.
	// Otherwise, I make my next motion decision based on a 6 * 6 matrix.
	if (flag_maxest == YES)
     5d6:	80 91 36 01 	lds	r24, 0x0136
     5da:	90 91 37 01 	lds	r25, 0x0137
     5de:	01 97       	sbiw	r24, 0x01	; 1
     5e0:	09 f4       	brne	.+2      	; 0x5e4 <move+0x1a>
     5e2:	12 c1       	rjmp	.+548    	; 0x808 <move+0x23e>
	{
		next_motion = FORWARD;
	}
	// case 1:
	else if (NEARER_INLINE)
     5e4:	20 91 12 01 	lds	r18, 0x0112
     5e8:	30 91 13 01 	lds	r19, 0x0113
     5ec:	80 91 10 01 	lds	r24, 0x0110
     5f0:	90 91 11 01 	lds	r25, 0x0111
     5f4:	28 17       	cp	r18, r24
     5f6:	39 07       	cpc	r19, r25
     5f8:	0c f0       	brlt	.+2      	; 0x5fc <move+0x32>
     5fa:	56 c0       	rjmp	.+172    	; 0x6a8 <move+0xde>
     5fc:	20 91 0e 01 	lds	r18, 0x010E
     600:	30 91 0f 01 	lds	r19, 0x010F
     604:	80 91 0c 01 	lds	r24, 0x010C
     608:	90 91 0d 01 	lds	r25, 0x010D
     60c:	82 17       	cp	r24, r18
     60e:	93 07       	cpc	r25, r19
     610:	0c f0       	brlt	.+2      	; 0x614 <move+0x4a>
     612:	0f c1       	rjmp	.+542    	; 0x832 <move+0x268>
		last_logic_2 = LOGIC_INLINE;
	}
	// case 2:
	else if (NEARER_OUTLINE)
	{
		set_color(RGB(0, 1, 0));
     614:	84 e0       	ldi	r24, 0x04	; 4
     616:	0e 94 47 0c 	call	0x188e	; 0x188e <set_color>
		if (last_logic_2 == LOGIC_OUTLINE)
     61a:	80 91 00 01 	lds	r24, 0x0100
     61e:	90 91 01 01 	lds	r25, 0x0101
		{
			//set_color(RGB(0, 1, 0));
			next_motion = offspring;
     622:	c0 91 04 01 	lds	r28, 0x0104
     626:	d0 91 05 01 	lds	r29, 0x0105
	}
	// case 2:
	else if (NEARER_OUTLINE)
	{
		set_color(RGB(0, 1, 0));
		if (last_logic_2 == LOGIC_OUTLINE)
     62a:	04 97       	sbiw	r24, 0x04	; 4
     62c:	99 f0       	breq	.+38     	; 0x654 <move+0x8a>


// Convert the current motion to its opposite one.
int opposite_move(int offspring)
{
	set_color(RGB(1, 1, 1));
     62e:	85 e1       	ldi	r24, 0x15	; 21
     630:	0e 94 47 0c 	call	0x188e	; 0x188e <set_color>
	int next_motion = offspring;
	switch (offspring)
     634:	c2 30       	cpi	r28, 0x02	; 2
     636:	d1 05       	cpc	r29, r1
     638:	59 f0       	breq	.+22     	; 0x650 <move+0x86>
     63a:	c3 30       	cpi	r28, 0x03	; 3
     63c:	d1 05       	cpc	r29, r1
     63e:	09 f4       	brne	.+2      	; 0x642 <move+0x78>
     640:	3a c1       	rjmp	.+628    	; 0x8b6 <move+0x2ec>
     642:	c1 30       	cpi	r28, 0x01	; 1
     644:	d1 05       	cpc	r29, r1
     646:	31 f4       	brne	.+12     	; 0x654 <move+0x8a>


// Generate 0 or 1 randomly
int randBinary(){
    // Generate an 8-bit random number (between 0 and 2^8 - 1 = 255).
    int random_number = rand_hard();
     648:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <rand_hard>
			break;
		case RIGHT:
			next_motion = LEFT;
			break;
		case FORWARD:
			if (randBinary() == 1)
     64c:	80 fd       	sbrc	r24, 0
     64e:	33 c1       	rjmp	.+614    	; 0x8b6 <move+0x2ec>
			{
				next_motion = LEFT;
			}
			else
			{
				next_motion = RIGHT;
     650:	c3 e0       	ldi	r28, 0x03	; 3
     652:	d0 e0       	ldi	r29, 0x00	; 0
		else
		{
			//set_color(RGB(0, 1, 0));
			next_motion = opposite_move(offspring);
		}
		last_logic_1 = LOGIC_NEARER;
     654:	10 92 03 01 	sts	0x0103, r1
     658:	10 92 02 01 	sts	0x0102, r1
		last_logic_2 = LOGIC_OUTLINE;
     65c:	84 e0       	ldi	r24, 0x04	; 4
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	90 93 01 01 	sts	0x0101, r25
     664:	80 93 00 01 	sts	0x0100, r24
		last_logic_1 = LOGIC_FARER;
		last_logic_2 = LOGIC_OUTLINE;
	}

	// Update and carry out the decision maked above.
	offspring = next_motion;
     668:	d0 93 05 01 	sts	0x0105, r29
     66c:	c0 93 04 01 	sts	0x0104, r28

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an an action if the motion is being changed.
    if (current_motion != new_motion)
     670:	80 91 0a 01 	lds	r24, 0x010A
     674:	90 91 0b 01 	lds	r25, 0x010B
     678:	c8 17       	cp	r28, r24
     67a:	d9 07       	cpc	r29, r25
     67c:	91 f0       	breq	.+36     	; 0x6a2 <move+0xd8>
    {
        current_motion = new_motion;
     67e:	d0 93 0b 01 	sts	0x010B, r29
     682:	c0 93 0a 01 	sts	0x010A, r28

        if (current_motion == STOP)
     686:	20 97       	sbiw	r28, 0x00	; 0
     688:	09 f4       	brne	.+2      	; 0x68c <move+0xc2>
     68a:	c1 c0       	rjmp	.+386    	; 0x80e <move+0x244>
        {
			set_color(RGB(0, 0, 0));
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
     68c:	c1 30       	cpi	r28, 0x01	; 1
     68e:	d1 05       	cpc	r29, r1
     690:	09 f4       	brne	.+2      	; 0x694 <move+0xca>
     692:	e1 c0       	rjmp	.+450    	; 0x856 <move+0x28c>
        {
			//set_color(RGB(1, 0, 0));
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
     694:	c2 30       	cpi	r28, 0x02	; 2
     696:	d1 05       	cpc	r29, r1
     698:	09 f4       	brne	.+2      	; 0x69c <move+0xd2>
     69a:	e7 c0       	rjmp	.+462    	; 0x86a <move+0x2a0>
        {
			//set_color(RGB(0, 1, 0));
            spinup_motors();
            set_motors(kilo_turn_left, 0);
        }
        else if (current_motion == RIGHT)
     69c:	23 97       	sbiw	r28, 0x03	; 3
     69e:	09 f4       	brne	.+2      	; 0x6a2 <move+0xd8>
     6a0:	bf c0       	rjmp	.+382    	; 0x820 <move+0x256>
	}

	// Update and carry out the decision maked above.
	offspring = next_motion;
	set_motion(offspring);
}
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	08 95       	ret
		}
		last_logic_1 = LOGIC_NEARER;
		last_logic_2 = LOGIC_OUTLINE;
	}
	// case 3:
	else if (EQUAL_INLINE)
     6a8:	28 17       	cp	r18, r24
     6aa:	39 07       	cpc	r19, r25
     6ac:	e9 f1       	breq	.+122    	; 0x728 <move+0x15e>
		}
		last_logic_1 = LOGIC_EQUAL;
		last_logic_2 = LOGIC_OUTLINE;
	}
	// case 5:
	else if (FARER_INLINE)
     6ae:	82 17       	cp	r24, r18
     6b0:	93 07       	cpc	r25, r19
     6b2:	d4 f6       	brge	.-76     	; 0x668 <move+0x9e>
     6b4:	20 91 0e 01 	lds	r18, 0x010E
     6b8:	30 91 0f 01 	lds	r19, 0x010F
     6bc:	80 91 0c 01 	lds	r24, 0x010C
     6c0:	90 91 0d 01 	lds	r25, 0x010D
     6c4:	82 17       	cp	r24, r18
     6c6:	93 07       	cpc	r25, r19
     6c8:	0c f0       	brlt	.+2      	; 0x6cc <move+0x102>
     6ca:	71 c0       	rjmp	.+226    	; 0x7ae <move+0x1e4>
		last_logic_2 = LOGIC_INLINE;
	}
	// case 6:
	else if (FARER_OUTLINE)
	{
		set_color(RGB(0, 1, 1));
     6cc:	84 e1       	ldi	r24, 0x14	; 20
     6ce:	0e 94 47 0c 	call	0x188e	; 0x188e <set_color>
		if ((last_logic_1 == LOGIC_FARER) && (last_logic_2 == LOGIC_OUTLINE))
     6d2:	80 91 02 01 	lds	r24, 0x0102
     6d6:	90 91 03 01 	lds	r25, 0x0103
		{
			//set_color(RGB(1, 0, 0));
			next_motion = offspring;
     6da:	c0 91 04 01 	lds	r28, 0x0104
     6de:	d0 91 05 01 	lds	r29, 0x0105
	}
	// case 6:
	else if (FARER_OUTLINE)
	{
		set_color(RGB(0, 1, 1));
		if ((last_logic_1 == LOGIC_FARER) && (last_logic_2 == LOGIC_OUTLINE))
     6e2:	02 97       	sbiw	r24, 0x02	; 2
     6e4:	09 f4       	brne	.+2      	; 0x6e8 <move+0x11e>
     6e6:	5b c0       	rjmp	.+182    	; 0x79e <move+0x1d4>


// Convert the current motion to its opposite one.
int opposite_move(int offspring)
{
	set_color(RGB(1, 1, 1));
     6e8:	85 e1       	ldi	r24, 0x15	; 21
     6ea:	0e 94 47 0c 	call	0x188e	; 0x188e <set_color>
	int next_motion = offspring;
	switch (offspring)
     6ee:	c2 30       	cpi	r28, 0x02	; 2
     6f0:	d1 05       	cpc	r29, r1
     6f2:	59 f0       	breq	.+22     	; 0x70a <move+0x140>
     6f4:	c3 30       	cpi	r28, 0x03	; 3
     6f6:	d1 05       	cpc	r29, r1
     6f8:	09 f4       	brne	.+2      	; 0x6fc <move+0x132>
     6fa:	c0 c0       	rjmp	.+384    	; 0x87c <move+0x2b2>
     6fc:	c1 30       	cpi	r28, 0x01	; 1
     6fe:	d1 05       	cpc	r29, r1
     700:	31 f4       	brne	.+12     	; 0x70e <move+0x144>


// Generate 0 or 1 randomly
int randBinary(){
    // Generate an 8-bit random number (between 0 and 2^8 - 1 = 255).
    int random_number = rand_hard();
     702:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <rand_hard>
			break;
		case RIGHT:
			next_motion = LEFT;
			break;
		case FORWARD:
			if (randBinary() == 1)
     706:	80 fd       	sbrc	r24, 0
     708:	b9 c0       	rjmp	.+370    	; 0x87c <move+0x2b2>
			{
				next_motion = LEFT;
			}
			else
			{
				next_motion = RIGHT;
     70a:	c3 e0       	ldi	r28, 0x03	; 3
     70c:	d0 e0       	ldi	r29, 0x00	; 0
		else
		{
			//set_color(RGB(0, 1, 0));
			next_motion = opposite_move(offspring);
		}
		last_logic_1 = LOGIC_FARER;
     70e:	82 e0       	ldi	r24, 0x02	; 2
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	90 93 03 01 	sts	0x0103, r25
     716:	80 93 02 01 	sts	0x0102, r24
		last_logic_2 = LOGIC_OUTLINE;
     71a:	84 e0       	ldi	r24, 0x04	; 4
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	90 93 01 01 	sts	0x0101, r25
     722:	80 93 00 01 	sts	0x0100, r24
     726:	a0 cf       	rjmp	.-192    	; 0x668 <move+0x9e>
		}
		last_logic_1 = LOGIC_NEARER;
		last_logic_2 = LOGIC_OUTLINE;
	}
	// case 3:
	else if (EQUAL_INLINE)
     728:	20 91 0e 01 	lds	r18, 0x010E
     72c:	30 91 0f 01 	lds	r19, 0x010F
     730:	80 91 0c 01 	lds	r24, 0x010C
     734:	90 91 0d 01 	lds	r25, 0x010D
     738:	82 17       	cp	r24, r18
     73a:	93 07       	cpc	r25, r19
     73c:	0c f0       	brlt	.+2      	; 0x740 <move+0x176>
     73e:	a1 c0       	rjmp	.+322    	; 0x882 <move+0x2b8>
		last_logic_2 = LOGIC_INLINE;
	}
	// case 4:
	else if (EQUAL_OUTLINE)
	{
		set_color(RGB(1, 1, 0));
     740:	85 e0       	ldi	r24, 0x05	; 5
     742:	0e 94 47 0c 	call	0x188e	; 0x188e <set_color>
		if ((last_logic_1 != LOGIC_NEARER) && (last_logic_2 == LOGIC_OUTLINE))
     746:	80 91 02 01 	lds	r24, 0x0102
     74a:	90 91 03 01 	lds	r25, 0x0103
		{
			//set_color(RGB(1, 0, 0));
			next_motion = offspring;
     74e:	c0 91 04 01 	lds	r28, 0x0104
     752:	d0 91 05 01 	lds	r29, 0x0105
	}
	// case 4:
	else if (EQUAL_OUTLINE)
	{
		set_color(RGB(1, 1, 0));
		if ((last_logic_1 != LOGIC_NEARER) && (last_logic_2 == LOGIC_OUTLINE))
     756:	89 2b       	or	r24, r25
     758:	31 f0       	breq	.+12     	; 0x766 <move+0x19c>
     75a:	80 91 00 01 	lds	r24, 0x0100
     75e:	90 91 01 01 	lds	r25, 0x0101
     762:	04 97       	sbiw	r24, 0x04	; 4
     764:	79 f0       	breq	.+30     	; 0x784 <move+0x1ba>


// Convert the current motion to its opposite one.
int opposite_move(int offspring)
{
	set_color(RGB(1, 1, 1));
     766:	85 e1       	ldi	r24, 0x15	; 21
     768:	0e 94 47 0c 	call	0x188e	; 0x188e <set_color>
	int next_motion = offspring;
	switch (offspring)
     76c:	c2 30       	cpi	r28, 0x02	; 2
     76e:	d1 05       	cpc	r29, r1
     770:	09 f4       	brne	.+2      	; 0x774 <move+0x1aa>
     772:	a8 c0       	rjmp	.+336    	; 0x8c4 <move+0x2fa>
     774:	c3 30       	cpi	r28, 0x03	; 3
     776:	d1 05       	cpc	r29, r1
     778:	09 f4       	brne	.+2      	; 0x77c <move+0x1b2>
     77a:	bd c0       	rjmp	.+378    	; 0x8f6 <move+0x32c>
     77c:	c1 30       	cpi	r28, 0x01	; 1
     77e:	d1 05       	cpc	r29, r1
     780:	09 f4       	brne	.+2      	; 0x784 <move+0x1ba>
     782:	9c c0       	rjmp	.+312    	; 0x8bc <move+0x2f2>
		else
		{
			//set_color(RGB(0, 1, 0));
			next_motion = opposite_move(offspring);
		}
		last_logic_1 = LOGIC_EQUAL;
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	90 93 03 01 	sts	0x0103, r25
     78c:	80 93 02 01 	sts	0x0102, r24
		last_logic_2 = LOGIC_OUTLINE;
     790:	84 e0       	ldi	r24, 0x04	; 4
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	90 93 01 01 	sts	0x0101, r25
     798:	80 93 00 01 	sts	0x0100, r24
     79c:	65 cf       	rjmp	.-310    	; 0x668 <move+0x9e>
	}
	// case 6:
	else if (FARER_OUTLINE)
	{
		set_color(RGB(0, 1, 1));
		if ((last_logic_1 == LOGIC_FARER) && (last_logic_2 == LOGIC_OUTLINE))
     79e:	80 91 00 01 	lds	r24, 0x0100
     7a2:	90 91 01 01 	lds	r25, 0x0101
     7a6:	04 97       	sbiw	r24, 0x04	; 4
     7a8:	09 f0       	breq	.+2      	; 0x7ac <move+0x1e2>
     7aa:	9e cf       	rjmp	.-196    	; 0x6e8 <move+0x11e>
     7ac:	b0 cf       	rjmp	.-160    	; 0x70e <move+0x144>
		last_logic_2 = LOGIC_OUTLINE;
	}
	// case 5:
	else if (FARER_INLINE)
	{
		set_color(RGB(1, 0, 1));
     7ae:	81 e1       	ldi	r24, 0x11	; 17
     7b0:	0e 94 47 0c 	call	0x188e	; 0x188e <set_color>
		if (last_logic_1 == LOGIC_FARER)
     7b4:	80 91 02 01 	lds	r24, 0x0102
     7b8:	90 91 03 01 	lds	r25, 0x0103
		{
			//set_color(RGB(1, 0, 0));
			next_motion = offspring;
     7bc:	c0 91 04 01 	lds	r28, 0x0104
     7c0:	d0 91 05 01 	lds	r29, 0x0105
	}
	// case 5:
	else if (FARER_INLINE)
	{
		set_color(RGB(1, 0, 1));
		if (last_logic_1 == LOGIC_FARER)
     7c4:	02 97       	sbiw	r24, 0x02	; 2
     7c6:	99 f0       	breq	.+38     	; 0x7ee <move+0x224>


// Convert the current motion to its opposite one.
int opposite_move(int offspring)
{
	set_color(RGB(1, 1, 1));
     7c8:	85 e1       	ldi	r24, 0x15	; 21
     7ca:	0e 94 47 0c 	call	0x188e	; 0x188e <set_color>
	int next_motion = offspring;
	switch (offspring)
     7ce:	c2 30       	cpi	r28, 0x02	; 2
     7d0:	d1 05       	cpc	r29, r1
     7d2:	59 f0       	breq	.+22     	; 0x7ea <move+0x220>
     7d4:	c3 30       	cpi	r28, 0x03	; 3
     7d6:	d1 05       	cpc	r29, r1
     7d8:	09 f4       	brne	.+2      	; 0x7dc <move+0x212>
     7da:	8a c0       	rjmp	.+276    	; 0x8f0 <move+0x326>
     7dc:	c1 30       	cpi	r28, 0x01	; 1
     7de:	d1 05       	cpc	r29, r1
     7e0:	31 f4       	brne	.+12     	; 0x7ee <move+0x224>


// Generate 0 or 1 randomly
int randBinary(){
    // Generate an 8-bit random number (between 0 and 2^8 - 1 = 255).
    int random_number = rand_hard();
     7e2:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <rand_hard>
			break;
		case RIGHT:
			next_motion = LEFT;
			break;
		case FORWARD:
			if (randBinary() == 1)
     7e6:	80 fd       	sbrc	r24, 0
     7e8:	83 c0       	rjmp	.+262    	; 0x8f0 <move+0x326>
			{
				next_motion = LEFT;
			}
			else
			{
				next_motion = RIGHT;
     7ea:	c3 e0       	ldi	r28, 0x03	; 3
     7ec:	d0 e0       	ldi	r29, 0x00	; 0
		else
		{
			//set_color(RGB(0, 1, 0));
			next_motion = opposite_move(offspring);
		}
		last_logic_1 = LOGIC_FARER;
     7ee:	82 e0       	ldi	r24, 0x02	; 2
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	90 93 03 01 	sts	0x0103, r25
     7f6:	80 93 02 01 	sts	0x0102, r24
		last_logic_2 = LOGIC_INLINE;
     7fa:	83 e0       	ldi	r24, 0x03	; 3
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	90 93 01 01 	sts	0x0101, r25
     802:	80 93 00 01 	sts	0x0100, r24
     806:	30 cf       	rjmp	.-416    	; 0x668 <move+0x9e>
	// If My gradient is the maxest one, the only motion I need to execute
	// is to step forward.
	// Otherwise, I make my next motion decision based on a 6 * 6 matrix.
	if (flag_maxest == YES)
	{
		next_motion = FORWARD;
     808:	c1 e0       	ldi	r28, 0x01	; 1
     80a:	d0 e0       	ldi	r29, 0x00	; 0
     80c:	2d cf       	rjmp	.-422    	; 0x668 <move+0x9e>
    {
        current_motion = new_motion;

        if (current_motion == STOP)
        {
			set_color(RGB(0, 0, 0));
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	0e 94 47 0c 	call	0x188e	; 0x188e <set_color>
            set_motors(0, 0);
     814:	60 e0       	ldi	r22, 0x00	; 0
     816:	80 e0       	ldi	r24, 0x00	; 0
	}

	// Update and carry out the decision maked above.
	offspring = next_motion;
	set_motion(offspring);
}
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
        current_motion = new_motion;

        if (current_motion == STOP)
        {
			set_color(RGB(0, 0, 0));
            set_motors(0, 0);
     81c:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <set_motors>
            set_motors(kilo_turn_left, 0);
        }
        else if (current_motion == RIGHT)
        {
			//set_color(RGB(0, 0, 1));
            spinup_motors();
     820:	0e 94 21 08 	call	0x1042	; 0x1042 <spinup_motors>
            set_motors(0, kilo_turn_right);
     824:	60 91 ab 01 	lds	r22, 0x01AB
     828:	80 e0       	ldi	r24, 0x00	; 0
	}

	// Update and carry out the decision maked above.
	offspring = next_motion;
	set_motion(offspring);
}
     82a:	df 91       	pop	r29
     82c:	cf 91       	pop	r28
        }
        else if (current_motion == RIGHT)
        {
			//set_color(RGB(0, 0, 1));
            spinup_motors();
            set_motors(0, kilo_turn_right);
     82e:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <set_motors>
		next_motion = FORWARD;
	}
	// case 1:
	else if (NEARER_INLINE)
	{
		set_color(RGB(1, 0, 0));
     832:	81 e0       	ldi	r24, 0x01	; 1
     834:	0e 94 47 0c 	call	0x188e	; 0x188e <set_color>
		next_motion = offspring;
     838:	c0 91 04 01 	lds	r28, 0x0104
     83c:	d0 91 05 01 	lds	r29, 0x0105
		last_logic_1 = LOGIC_NEARER;
     840:	10 92 03 01 	sts	0x0103, r1
     844:	10 92 02 01 	sts	0x0102, r1
		last_logic_2 = LOGIC_INLINE;
     848:	83 e0       	ldi	r24, 0x03	; 3
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	90 93 01 01 	sts	0x0101, r25
     850:	80 93 00 01 	sts	0x0100, r24
     854:	09 cf       	rjmp	.-494    	; 0x668 <move+0x9e>
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
        {
			//set_color(RGB(1, 0, 0));
            spinup_motors();
     856:	0e 94 21 08 	call	0x1042	; 0x1042 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     85a:	60 91 be 01 	lds	r22, 0x01BE
     85e:	80 91 bd 01 	lds	r24, 0x01BD
	}

	// Update and carry out the decision maked above.
	offspring = next_motion;
	set_motion(offspring);
}
     862:	df 91       	pop	r29
     864:	cf 91       	pop	r28
        }
        else if (current_motion == FORWARD)
        {
			//set_color(RGB(1, 0, 0));
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
     866:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <set_motors>
        }
        else if (current_motion == LEFT)
        {
			//set_color(RGB(0, 1, 0));
            spinup_motors();
     86a:	0e 94 21 08 	call	0x1042	; 0x1042 <spinup_motors>
            set_motors(kilo_turn_left, 0);
     86e:	60 e0       	ldi	r22, 0x00	; 0
     870:	80 91 bf 01 	lds	r24, 0x01BF
	}

	// Update and carry out the decision maked above.
	offspring = next_motion;
	set_motion(offspring);
}
     874:	df 91       	pop	r29
     876:	cf 91       	pop	r28
        }
        else if (current_motion == LEFT)
        {
			//set_color(RGB(0, 1, 0));
            spinup_motors();
            set_motors(kilo_turn_left, 0);
     878:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <set_motors>
			next_motion = LEFT;
			break;
		case FORWARD:
			if (randBinary() == 1)
			{
				next_motion = LEFT;
     87c:	c2 e0       	ldi	r28, 0x02	; 2
     87e:	d0 e0       	ldi	r29, 0x00	; 0
     880:	46 cf       	rjmp	.-372    	; 0x70e <move+0x144>
		last_logic_2 = LOGIC_OUTLINE;
	}
	// case 3:
	else if (EQUAL_INLINE)
	{
        set_color(RGB(0, 0, 1));
     882:	80 e1       	ldi	r24, 0x10	; 16
     884:	0e 94 47 0c 	call	0x188e	; 0x188e <set_color>
		if (last_logic_1 == LOGIC_NEARER)
     888:	80 91 02 01 	lds	r24, 0x0102
     88c:	90 91 03 01 	lds	r25, 0x0103
		{
			//set_color(RGB(0, 1, 0));
			next_motion = opposite_move(offspring);
     890:	c0 91 04 01 	lds	r28, 0x0104
     894:	d0 91 05 01 	lds	r29, 0x0105
	}
	// case 3:
	else if (EQUAL_INLINE)
	{
        set_color(RGB(0, 0, 1));
		if (last_logic_1 == LOGIC_NEARER)
     898:	89 2b       	or	r24, r25
     89a:	b9 f0       	breq	.+46     	; 0x8ca <move+0x300>
		else
		{
			//set_color(RGB(1, 0, 0));
			next_motion = offspring;
		}
		last_logic_1 = LOGIC_EQUAL;
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	90 93 03 01 	sts	0x0103, r25
     8a4:	80 93 02 01 	sts	0x0102, r24
		last_logic_2 = LOGIC_INLINE;
     8a8:	83 e0       	ldi	r24, 0x03	; 3
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	90 93 01 01 	sts	0x0101, r25
     8b0:	80 93 00 01 	sts	0x0100, r24
     8b4:	d9 ce       	rjmp	.-590    	; 0x668 <move+0x9e>
			next_motion = LEFT;
			break;
		case FORWARD:
			if (randBinary() == 1)
			{
				next_motion = LEFT;
     8b6:	c2 e0       	ldi	r28, 0x02	; 2
     8b8:	d0 e0       	ldi	r29, 0x00	; 0
     8ba:	cc ce       	rjmp	.-616    	; 0x654 <move+0x8a>


// Generate 0 or 1 randomly
int randBinary(){
    // Generate an 8-bit random number (between 0 and 2^8 - 1 = 255).
    int random_number = rand_hard();
     8bc:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <rand_hard>
			break;
		case RIGHT:
			next_motion = LEFT;
			break;
		case FORWARD:
			if (randBinary() == 1)
     8c0:	80 fd       	sbrc	r24, 0
     8c2:	19 c0       	rjmp	.+50     	; 0x8f6 <move+0x32c>
			{
				next_motion = LEFT;
			}
			else
			{
				next_motion = RIGHT;
     8c4:	c3 e0       	ldi	r28, 0x03	; 3
     8c6:	d0 e0       	ldi	r29, 0x00	; 0
     8c8:	5d cf       	rjmp	.-326    	; 0x784 <move+0x1ba>


// Convert the current motion to its opposite one.
int opposite_move(int offspring)
{
	set_color(RGB(1, 1, 1));
     8ca:	85 e1       	ldi	r24, 0x15	; 21
     8cc:	0e 94 47 0c 	call	0x188e	; 0x188e <set_color>
	int next_motion = offspring;
	switch (offspring)
     8d0:	c2 30       	cpi	r28, 0x02	; 2
     8d2:	d1 05       	cpc	r29, r1
     8d4:	51 f0       	breq	.+20     	; 0x8ea <move+0x320>
     8d6:	c3 30       	cpi	r28, 0x03	; 3
     8d8:	d1 05       	cpc	r29, r1
     8da:	81 f0       	breq	.+32     	; 0x8fc <move+0x332>
     8dc:	c1 30       	cpi	r28, 0x01	; 1
     8de:	d1 05       	cpc	r29, r1
     8e0:	e9 f6       	brne	.-70     	; 0x89c <move+0x2d2>


// Generate 0 or 1 randomly
int randBinary(){
    // Generate an 8-bit random number (between 0 and 2^8 - 1 = 255).
    int random_number = rand_hard();
     8e2:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <rand_hard>
			break;
		case RIGHT:
			next_motion = LEFT;
			break;
		case FORWARD:
			if (randBinary() == 1)
     8e6:	80 fd       	sbrc	r24, 0
     8e8:	09 c0       	rjmp	.+18     	; 0x8fc <move+0x332>
			{
				next_motion = LEFT;
			}
			else
			{
				next_motion = RIGHT;
     8ea:	c3 e0       	ldi	r28, 0x03	; 3
     8ec:	d0 e0       	ldi	r29, 0x00	; 0
     8ee:	d6 cf       	rjmp	.-84     	; 0x89c <move+0x2d2>
			next_motion = LEFT;
			break;
		case FORWARD:
			if (randBinary() == 1)
			{
				next_motion = LEFT;
     8f0:	c2 e0       	ldi	r28, 0x02	; 2
     8f2:	d0 e0       	ldi	r29, 0x00	; 0
     8f4:	7c cf       	rjmp	.-264    	; 0x7ee <move+0x224>
     8f6:	c2 e0       	ldi	r28, 0x02	; 2
     8f8:	d0 e0       	ldi	r29, 0x00	; 0
     8fa:	44 cf       	rjmp	.-376    	; 0x784 <move+0x1ba>
     8fc:	c2 e0       	ldi	r28, 0x02	; 2
     8fe:	d0 e0       	ldi	r29, 0x00	; 0
     900:	cd cf       	rjmp	.-102    	; 0x89c <move+0x2d2>

00000902 <loop>:
	offspring = next_motion;
	set_motion(offspring);
}


void loop() {
     902:	cf 92       	push	r12
     904:	df 92       	push	r13
     906:	ef 92       	push	r14
     908:	ff 92       	push	r15
// If I am lost from all the others in the world, there should be mechnism
// allowing me to find this serious thing since I am gregarious.
void check_own_gradient() {
	// If no neighbors detected within TIME_LAST_GRADIENT seconds
	// then sleep waiting for be activated.
    if ( (kilo_uid != SEED_ID) && (kilo_ticks > (last_found_minor + TIME_LAST_GRADIENT)) && (own_gradient < GRADIENT_MAX))
     90a:	80 91 bb 01 	lds	r24, 0x01BB
     90e:	90 91 bc 01 	lds	r25, 0x01BC
     912:	89 2b       	or	r24, r25
     914:	09 f4       	brne	.+2      	; 0x918 <loop+0x16>
     916:	46 c0       	rjmp	.+140    	; 0x9a4 <loop+0xa2>
     918:	40 91 85 01 	lds	r20, 0x0185
     91c:	50 91 86 01 	lds	r21, 0x0186
     920:	60 91 87 01 	lds	r22, 0x0187
     924:	70 91 88 01 	lds	r23, 0x0188
     928:	80 91 5e 01 	lds	r24, 0x015E
     92c:	90 91 5f 01 	lds	r25, 0x015F
     930:	a0 91 60 01 	lds	r26, 0x0160
     934:	b0 91 61 01 	lds	r27, 0x0161
     938:	80 56       	subi	r24, 0x60	; 96
     93a:	9f 4f       	sbci	r25, 0xFF	; 255
     93c:	af 4f       	sbci	r26, 0xFF	; 255
     93e:	bf 4f       	sbci	r27, 0xFF	; 255
     940:	84 17       	cp	r24, r20
     942:	95 07       	cpc	r25, r21
     944:	a6 07       	cpc	r26, r22
     946:	b7 07       	cpc	r27, r23
     948:	68 f5       	brcc	.+90     	; 0x9a4 <loop+0xa2>
     94a:	80 91 1c 01 	lds	r24, 0x011C
     94e:	90 91 1d 01 	lds	r25, 0x011D
     952:	8f 3f       	cpi	r24, 0xFF	; 255
     954:	91 05       	cpc	r25, r1
     956:	34 f5       	brge	.+76     	; 0x9a4 <loop+0xa2>
    {
        own_gradient = GRADIENT_MAX;
     958:	8f ef       	ldi	r24, 0xFF	; 255
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	90 93 1d 01 	sts	0x011D, r25
     960:	80 93 1c 01 	sts	0x011C, r24
		formed_state = FORMED_NO;
     964:	10 92 33 01 	sts	0x0133, r1
     968:	10 92 32 01 	sts	0x0132, r1
	// Stop when the sequence has not formed, or my motivator or motivated
	// is/are in the MOVE state.
	else
	{
		//set_color(RGB(0, 0, 0));
		state_myself = COMPLETED;
     96c:	85 e0       	ldi	r24, 0x05	; 5
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	90 93 39 01 	sts	0x0139, r25
     974:	80 93 38 01 	sts	0x0138, r24

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an an action if the motion is being changed.
    if (current_motion != new_motion)
     978:	80 91 0a 01 	lds	r24, 0x010A
     97c:	90 91 0b 01 	lds	r25, 0x010B
     980:	89 2b       	or	r24, r25
     982:	09 f4       	brne	.+2      	; 0x986 <loop+0x84>
     984:	74 c0       	rjmp	.+232    	; 0xa6e <loop+0x16c>
    {
        current_motion = new_motion;
     986:	10 92 0b 01 	sts	0x010B, r1
     98a:	10 92 0a 01 	sts	0x010A, r1

        if (current_motion == STOP)
        {
			set_color(RGB(0, 0, 0));
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	0e 94 47 0c 	call	0x188e	; 0x188e <set_color>
            set_motors(0, 0);
     994:	60 e0       	ldi	r22, 0x00	; 0
     996:	80 e0       	ldi	r24, 0x00	; 0
	{
		//set_color(RGB(0, 0, 0));
		state_myself = COMPLETED;
		set_motion(STOP);
	}
}
     998:	ff 90       	pop	r15
     99a:	ef 90       	pop	r14
     99c:	df 90       	pop	r13
     99e:	cf 90       	pop	r12
        current_motion = new_motion;

        if (current_motion == STOP)
        {
			set_color(RGB(0, 0, 0));
            set_motors(0, 0);
     9a0:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <set_motors>
	check_own_gradient();
	// Move only when the sequence has already formed.
	// Move can only occured when the movitvator and motivated member
	// is stationary. This can assure the kilobot make the right
	// decision based on the measured changing distance.
	if ((formed_state == FORMED_OK) && (state_motivator == COMPLETED) && (state_motivated != MOVE))
     9a4:	80 91 32 01 	lds	r24, 0x0132
     9a8:	90 91 33 01 	lds	r25, 0x0133
     9ac:	01 97       	sbiw	r24, 0x01	; 1
     9ae:	f1 f6       	brne	.-68     	; 0x96c <loop+0x6a>
     9b0:	80 91 3a 01 	lds	r24, 0x013A
     9b4:	90 91 3b 01 	lds	r25, 0x013B
     9b8:	85 30       	cpi	r24, 0x05	; 5
     9ba:	91 05       	cpc	r25, r1
     9bc:	b9 f6       	brne	.-82     	; 0x96c <loop+0x6a>
     9be:	20 91 3c 01 	lds	r18, 0x013C
     9c2:	30 91 3d 01 	lds	r19, 0x013D
     9c6:	24 30       	cpi	r18, 0x04	; 4
     9c8:	31 05       	cpc	r19, r1
     9ca:	81 f2       	breq	.-96     	; 0x96c <loop+0x6a>
	{
		if (flag_maxest == YES)
     9cc:	20 91 36 01 	lds	r18, 0x0136
     9d0:	30 91 37 01 	lds	r19, 0x0137
     9d4:	21 30       	cpi	r18, 0x01	; 1
     9d6:	31 05       	cpc	r19, r1
     9d8:	09 f4       	brne	.+2      	; 0x9dc <loop+0xda>
     9da:	4e c0       	rjmp	.+156    	; 0xa78 <loop+0x176>
		// My gradient is not the maxest.
		else
		{
			// When my motivator is closer enough can I move
			// to assure my motivator is not lost.
			if (distance_to_motivator <= DISTANCE_MOVE)
     9dc:	80 91 18 01 	lds	r24, 0x0118
     9e0:	90 91 19 01 	lds	r25, 0x0119
     9e4:	8b 32       	cpi	r24, 0x2B	; 43
     9e6:	91 05       	cpc	r25, r1
     9e8:	34 f4       	brge	.+12     	; 0x9f6 <loop+0xf4>
			{
				state_myself = MOVE;
     9ea:	44 e0       	ldi	r20, 0x04	; 4
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	50 93 39 01 	sts	0x0139, r21
     9f2:	40 93 38 01 	sts	0x0138, r20
			}
			// The stop condition is independent.
			if (distance_to_motivated <= DISTANCE_COLLIDE)
     9f6:	40 91 12 01 	lds	r20, 0x0112
     9fa:	50 91 13 01 	lds	r21, 0x0113
     9fe:	49 32       	cpi	r20, 0x29	; 41
     a00:	51 05       	cpc	r21, r1
     a02:	0c f4       	brge	.+2      	; 0xa06 <loop+0x104>
     a04:	b3 cf       	rjmp	.-154    	; 0x96c <loop+0x6a>
			{
				state_myself = COMPLETED;
			}
		}
		// Move can only occure when I am in the MOVE state.
		if (state_myself == MOVE)
     a06:	40 91 38 01 	lds	r20, 0x0138
     a0a:	50 91 39 01 	lds	r21, 0x0139
     a0e:	44 30       	cpi	r20, 0x04	; 4
     a10:	51 05       	cpc	r21, r1
     a12:	09 f0       	breq	.+2      	; 0xa16 <loop+0x114>
     a14:	b1 cf       	rjmp	.-158    	; 0x978 <loop+0x76>
			// TIME_LAST_MOTION_UPDATE.
			// This can assure the fixed distance kilobot move
			// in a fixed speed.
			// If distance is updated, then I can move according to
			// strategies.
			if ((update_distance_to_motivated == UPDATE) && (update_distance_to_motivator == UPDATE))
     a16:	40 91 30 01 	lds	r20, 0x0130
     a1a:	50 91 31 01 	lds	r21, 0x0131
     a1e:	41 30       	cpi	r20, 0x01	; 1
     a20:	51 05       	cpc	r21, r1
     a22:	d1 f1       	breq	.+116    	; 0xa98 <loop+0x196>
				}
			}
			// If the distance is long-term no updated, 
			// then I stop and wait.
			// This can assure my motion is determined by the strategy.
			else if (kilo_ticks > (last_motion_update + TIME_LAST_MOTION_UPDATE))
     a24:	60 91 85 01 	lds	r22, 0x0185
     a28:	70 91 86 01 	lds	r23, 0x0186
     a2c:	80 91 87 01 	lds	r24, 0x0187
     a30:	90 91 88 01 	lds	r25, 0x0188
     a34:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__floatunsisf>
     a38:	6b 01       	movw	r12, r22
     a3a:	7c 01       	movw	r14, r24
     a3c:	60 91 52 01 	lds	r22, 0x0152
     a40:	70 91 53 01 	lds	r23, 0x0153
     a44:	80 91 54 01 	lds	r24, 0x0154
     a48:	90 91 55 01 	lds	r25, 0x0155
     a4c:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__floatunsisf>
     a50:	23 e3       	ldi	r18, 0x33	; 51
     a52:	33 e3       	ldi	r19, 0x33	; 51
     a54:	43 eb       	ldi	r20, 0xB3	; 179
     a56:	51 e4       	ldi	r21, 0x41	; 65
     a58:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <__addsf3>
     a5c:	9b 01       	movw	r18, r22
     a5e:	ac 01       	movw	r20, r24
     a60:	c7 01       	movw	r24, r14
     a62:	b6 01       	movw	r22, r12
     a64:	0e 94 0c 11 	call	0x2218	; 0x2218 <__gesf2>
     a68:	18 16       	cp	r1, r24
     a6a:	0c f4       	brge	.+2      	; 0xa6e <loop+0x16c>
     a6c:	85 cf       	rjmp	.-246    	; 0x978 <loop+0x76>
	{
		//set_color(RGB(0, 0, 0));
		state_myself = COMPLETED;
		set_motion(STOP);
	}
}
     a6e:	ff 90       	pop	r15
     a70:	ef 90       	pop	r14
     a72:	df 90       	pop	r13
     a74:	cf 90       	pop	r12
     a76:	08 95       	ret
	{
		if (flag_maxest == YES)
		{
			// When my motivator is closer enough can I move
			// to assure my motivator is not lost.
			if (distance_to_motivator <= DISTANCE_MOVE)
     a78:	40 91 18 01 	lds	r20, 0x0118
     a7c:	50 91 19 01 	lds	r21, 0x0119
     a80:	42 33       	cpi	r20, 0x32	; 50
     a82:	51 05       	cpc	r21, r1
     a84:	0c f0       	brlt	.+2      	; 0xa88 <loop+0x186>
     a86:	74 cf       	rjmp	.-280    	; 0x970 <loop+0x6e>
			{
				state_myself = MOVE;
     a88:	84 e0       	ldi	r24, 0x04	; 4
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	90 93 39 01 	sts	0x0139, r25
     a90:	80 93 38 01 	sts	0x0138, r24
     a94:	ca 01       	movw	r24, r20
     a96:	bf cf       	rjmp	.-130    	; 0xa16 <loop+0x114>
			// TIME_LAST_MOTION_UPDATE.
			// This can assure the fixed distance kilobot move
			// in a fixed speed.
			// If distance is updated, then I can move according to
			// strategies.
			if ((update_distance_to_motivated == UPDATE) && (update_distance_to_motivator == UPDATE))
     a98:	40 91 2e 01 	lds	r20, 0x012E
     a9c:	50 91 2f 01 	lds	r21, 0x012F
     aa0:	41 30       	cpi	r20, 0x01	; 1
     aa2:	51 05       	cpc	r21, r1
     aa4:	09 f0       	breq	.+2      	; 0xaa8 <loop+0x1a6>
     aa6:	be cf       	rjmp	.-132    	; 0xa24 <loop+0x122>
			{
				// Update.
				if (flag_minor == NO)
     aa8:	40 91 34 01 	lds	r20, 0x0134
     aac:	50 91 35 01 	lds	r21, 0x0135
     ab0:	45 2b       	or	r20, r21
     ab2:	21 f4       	brne	.+8      	; 0xabc <loop+0x1ba>
				{
					update_distance_to_motivator = UNUPDATE;
     ab4:	10 92 2f 01 	sts	0x012F, r1
     ab8:	10 92 2e 01 	sts	0x012E, r1
				}
				if (flag_maxest == NO)
     abc:	23 2b       	or	r18, r19
     abe:	21 f4       	brne	.+8      	; 0xac8 <loop+0x1c6>
				{
					update_distance_to_motivated = UNUPDATE;
     ac0:	10 92 31 01 	sts	0x0131, r1
     ac4:	10 92 30 01 	sts	0x0130, r1
				}

				distance_line = distance_to_motivated + distance_to_motivator;
     ac8:	20 91 12 01 	lds	r18, 0x0112
     acc:	30 91 13 01 	lds	r19, 0x0113
     ad0:	82 0f       	add	r24, r18
     ad2:	93 1f       	adc	r25, r19
     ad4:	90 93 0f 01 	sts	0x010F, r25
     ad8:	80 93 0e 01 	sts	0x010E, r24
				// My motivated stops for the first time.
				// So the distance_to_motivated becomes larger is due to
				// the motion of my motivated and not my fault.
				// Hence, the best values for distance_to_motivated_best and
				// distance_line_best needed to be initialized here.
				if (my_fault == NO)
     adc:	40 91 06 01 	lds	r20, 0x0106
     ae0:	50 91 07 01 	lds	r21, 0x0107
     ae4:	45 2b       	or	r20, r21
     ae6:	71 f4       	brne	.+28     	; 0xb04 <loop+0x202>
				{
					//set_color(RGB(1, 0, 0));
					//delay(50);
					my_fault = YES;
     ae8:	41 e0       	ldi	r20, 0x01	; 1
     aea:	50 e0       	ldi	r21, 0x00	; 0
     aec:	50 93 07 01 	sts	0x0107, r21
     af0:	40 93 06 01 	sts	0x0106, r20
					distance_to_motivated_best = distance_to_motivated;
     af4:	30 93 11 01 	sts	0x0111, r19
     af8:	20 93 10 01 	sts	0x0110, r18
					distance_line_best = distance_line;
     afc:	90 93 0d 01 	sts	0x010D, r25
     b00:	80 93 0c 01 	sts	0x010C, r24
				}

				//set_color(RGB(0, 1, 0));	
				move();
     b04:	0e 94 e5 02 	call	0x5ca	; 0x5ca <move>
				last_motion_update = kilo_ticks;
     b08:	80 91 85 01 	lds	r24, 0x0185
     b0c:	90 91 86 01 	lds	r25, 0x0186
     b10:	a0 91 87 01 	lds	r26, 0x0187
     b14:	b0 91 88 01 	lds	r27, 0x0188
     b18:	80 93 52 01 	sts	0x0152, r24
     b1c:	90 93 53 01 	sts	0x0153, r25
     b20:	a0 93 54 01 	sts	0x0154, r26
     b24:	b0 93 55 01 	sts	0x0155, r27

				if (my_fault == YES)
     b28:	80 91 06 01 	lds	r24, 0x0106
     b2c:	90 91 07 01 	lds	r25, 0x0107
     b30:	01 97       	sbiw	r24, 0x01	; 1
     b32:	09 f0       	breq	.+2      	; 0xb36 <loop+0x234>
     b34:	9c cf       	rjmp	.-200    	; 0xa6e <loop+0x16c>
				{
					// Update distance_to_motivated_best
					if (distance_to_motivated < distance_to_motivated_best)
     b36:	80 91 12 01 	lds	r24, 0x0112
     b3a:	90 91 13 01 	lds	r25, 0x0113
     b3e:	20 91 10 01 	lds	r18, 0x0110
     b42:	30 91 11 01 	lds	r19, 0x0111
     b46:	82 17       	cp	r24, r18
     b48:	93 07       	cpc	r25, r19
     b4a:	24 f4       	brge	.+8      	; 0xb54 <loop+0x252>
					{
						distance_to_motivated_best = distance_to_motivated;
     b4c:	90 93 11 01 	sts	0x0111, r25
     b50:	80 93 10 01 	sts	0x0110, r24
					}
					// Update distance_line_best
					if (distance_line < distance_line_best)
     b54:	80 91 0e 01 	lds	r24, 0x010E
     b58:	90 91 0f 01 	lds	r25, 0x010F
     b5c:	20 91 0c 01 	lds	r18, 0x010C
     b60:	30 91 0d 01 	lds	r19, 0x010D
     b64:	82 17       	cp	r24, r18
     b66:	93 07       	cpc	r25, r19
     b68:	0c f0       	brlt	.+2      	; 0xb6c <loop+0x26a>
     b6a:	81 cf       	rjmp	.-254    	; 0xa6e <loop+0x16c>
					{
						distance_line_best = distance_line;
     b6c:	90 93 0d 01 	sts	0x010D, r25
     b70:	80 93 0c 01 	sts	0x010C, r24
     b74:	7c cf       	rjmp	.-264    	; 0xa6e <loop+0x16c>

00000b76 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     b76:	08 95       	ret

00000b78 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	08 95       	ret

00000b7e <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     b7e:	08 95       	ret

00000b80 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     b80:	df 92       	push	r13
     b82:	ef 92       	push	r14
     b84:	ff 92       	push	r15
     b86:	0f 93       	push	r16
     b88:	1f 93       	push	r17
     b8a:	cf 93       	push	r28
     b8c:	df 93       	push	r29
    cli();
     b8e:	f8 94       	cli

    ports_off();
     b90:	14 b8       	out	0x04, r1	; 4
     b92:	17 b8       	out	0x07, r1	; 7
     b94:	1a b8       	out	0x0a, r1	; 10
     b96:	15 b8       	out	0x05, r1	; 5
     b98:	18 b8       	out	0x08, r1	; 8
     b9a:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     b9c:	52 9a       	sbi	0x0a, 2	; 10
     b9e:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     ba0:	14 bc       	out	0x24, r1	; 36
     ba2:	85 e0       	ldi	r24, 0x05	; 5
     ba4:	85 bd       	out	0x25, r24	; 37
     ba6:	8f ef       	ldi	r24, 0xFF	; 255
     ba8:	87 bd       	out	0x27, r24	; 39
     baa:	22 e0       	ldi	r18, 0x02	; 2
     bac:	20 93 6e 00 	sts	0x006E, r18
    rx_timer_setup();
     bb0:	10 92 80 00 	sts	0x0080, r1
     bb4:	10 92 81 00 	sts	0x0081, r1
     bb8:	8f e8       	ldi	r24, 0x8F	; 143
     bba:	9b e0       	ldi	r25, 0x0B	; 11
     bbc:	90 93 89 00 	sts	0x0089, r25
     bc0:	80 93 88 00 	sts	0x0088, r24
     bc4:	20 93 6f 00 	sts	0x006F, r18
    motors_setup();
     bc8:	53 98       	cbi	0x0a, 3	; 10
     bca:	23 98       	cbi	0x04, 3	; 4
     bcc:	81 ea       	ldi	r24, 0xA1	; 161
     bce:	80 93 b0 00 	sts	0x00B0, r24
     bd2:	20 93 b1 00 	sts	0x00B1, r18
     bd6:	10 92 b4 00 	sts	0x00B4, r1
     bda:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     bde:	8b e0       	ldi	r24, 0x0B	; 11
     be0:	80 bf       	out	0x30, r24	; 48
     be2:	83 e0       	ldi	r24, 0x03	; 3
     be4:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     be8:	86 e0       	ldi	r24, 0x06	; 6
     bea:	80 93 7c 00 	sts	0x007C, r24
     bee:	83 e8       	ldi	r24, 0x83	; 131
     bf0:	80 93 7a 00 	sts	0x007A, r24
     bf4:	80 91 7a 00 	lds	r24, 0x007A
     bf8:	80 64       	ori	r24, 0x40	; 64
     bfa:	80 93 7a 00 	sts	0x007A, r24
     bfe:	80 91 7a 00 	lds	r24, 0x007A
     c02:	86 fd       	sbrc	r24, 6
     c04:	fc cf       	rjmp	.-8      	; 0xbfe <kilo_init+0x7e>
    adc_trigger_high_gain();
     c06:	10 92 7c 00 	sts	0x007C, r1
     c0a:	83 ea       	ldi	r24, 0xA3	; 163
     c0c:	80 93 7a 00 	sts	0x007A, r24
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__eerd_byte_m328p>
    if (osccal != 0xFF)
     c1e:	8f 3f       	cpi	r24, 0xFF	; 255
     c20:	11 f0       	breq	.+4      	; 0xc26 <kilo_init+0xa6>
        OSCCAL = osccal;
     c22:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     c26:	10 92 89 01 	sts	0x0189, r1
    rx_leadingbit = 1;
     c2a:	c1 e0       	ldi	r28, 0x01	; 1
     c2c:	c0 93 62 01 	sts	0x0162, r28
    rx_leadingbyte = 1;
     c30:	c0 93 a6 01 	sts	0x01A6, r28
    rx_byteindex = 0;
     c34:	10 92 80 01 	sts	0x0180, r1
    rx_bytevalue = 0;
     c38:	10 92 ba 01 	sts	0x01BA, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     c3c:	80 e9       	ldi	r24, 0x90	; 144
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__eerd_byte_m328p>
     c44:	80 93 7f 01 	sts	0x017F, r24
    if (tx_mask & ~TX_MASK_MAX)
     c48:	80 91 7f 01 	lds	r24, 0x017F
     c4c:	88 73       	andi	r24, 0x38	; 56
     c4e:	11 f0       	breq	.+4      	; 0xc54 <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     c50:	c0 93 7f 01 	sts	0x017F, r28
    tx_clock = 0;
     c54:	10 92 aa 01 	sts	0x01AA, r1
     c58:	10 92 a9 01 	sts	0x01A9, r1
    tx_increment = 255;
     c5c:	8f ef       	ldi	r24, 0xFF	; 255
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	90 93 a8 01 	sts	0x01A8, r25
     c64:	80 93 a7 01 	sts	0x01A7, r24
    kilo_ticks = 0;
     c68:	10 92 85 01 	sts	0x0185, r1
     c6c:	10 92 86 01 	sts	0x0186, r1
     c70:	10 92 87 01 	sts	0x0187, r1
     c74:	10 92 88 01 	sts	0x0188, r1
    kilo_state = IDLE;
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	80 93 45 01 	sts	0x0145, r24
    kilo_tx_period = 3906;
     c7e:	82 e4       	ldi	r24, 0x42	; 66
     c80:	9f e0       	ldi	r25, 0x0F	; 15
     c82:	90 93 b9 01 	sts	0x01B9, r25
     c86:	80 93 b8 01 	sts	0x01B8, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     c8a:	80 eb       	ldi	r24, 0xB0	; 176
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__eerd_byte_m328p>
     c92:	c8 2f       	mov	r28, r24
     c94:	81 eb       	ldi	r24, 0xB1	; 177
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__eerd_byte_m328p>
     c9c:	2c 2f       	mov	r18, r28
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	38 2b       	or	r19, r24
     ca2:	30 93 bc 01 	sts	0x01BC, r19
     ca6:	20 93 bb 01 	sts	0x01BB, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     caa:	85 e0       	ldi	r24, 0x05	; 5
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__eerd_byte_m328p>
     cb2:	80 93 bf 01 	sts	0x01BF, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     cb6:	89 e0       	ldi	r24, 0x09	; 9
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__eerd_byte_m328p>
     cbe:	80 93 ab 01 	sts	0x01AB, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     cc2:	8c e0       	ldi	r24, 0x0C	; 12
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__eerd_byte_m328p>
     cca:	80 93 bd 01 	sts	0x01BD, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     cce:	84 e1       	ldi	r24, 0x14	; 20
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__eerd_byte_m328p>
     cd6:	80 93 be 01 	sts	0x01BE, r24
     cda:	5a e8       	ldi	r21, 0x8A	; 138
     cdc:	e5 2e       	mov	r14, r21
     cde:	51 e0       	ldi	r21, 0x01	; 1
     ce0:	f5 2e       	mov	r15, r21
     ce2:	03 e6       	ldi	r16, 0x63	; 99
     ce4:	11 e0       	ldi	r17, 0x01	; 1
     ce6:	c0 e2       	ldi	r28, 0x20	; 32
     ce8:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     cea:	ce 01       	movw	r24, r28
     cec:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__eerd_byte_m328p>
     cf0:	d8 2e       	mov	r13, r24
     cf2:	ce 01       	movw	r24, r28
     cf4:	01 96       	adiw	r24, 0x01	; 1
     cf6:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__eerd_byte_m328p>
     cfa:	2d 2d       	mov	r18, r13
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	32 2f       	mov	r19, r18
     d00:	22 27       	eor	r18, r18
     d02:	28 2b       	or	r18, r24
     d04:	f7 01       	movw	r30, r14
     d06:	21 93       	st	Z+, r18
     d08:	31 93       	st	Z+, r19
     d0a:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     d0c:	ce 01       	movw	r24, r28
     d0e:	c0 96       	adiw	r24, 0x30	; 48
     d10:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__eerd_byte_m328p>
     d14:	d8 2e       	mov	r13, r24
     d16:	ce 01       	movw	r24, r28
     d18:	c1 96       	adiw	r24, 0x31	; 49
     d1a:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__eerd_byte_m328p>
     d1e:	2d 2d       	mov	r18, r13
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	32 2f       	mov	r19, r18
     d24:	22 27       	eor	r18, r18
     d26:	28 2b       	or	r18, r24
     d28:	f8 01       	movw	r30, r16
     d2a:	21 93       	st	Z+, r18
     d2c:	31 93       	st	Z+, r19
     d2e:	8f 01       	movw	r16, r30
     d30:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     d32:	cc 33       	cpi	r28, 0x3C	; 60
     d34:	d1 05       	cpc	r29, r1
     d36:	c9 f6       	brne	.-78     	; 0xcea <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     d38:	78 94       	sei
}
     d3a:	df 91       	pop	r29
     d3c:	cf 91       	pop	r28
     d3e:	1f 91       	pop	r17
     d40:	0f 91       	pop	r16
     d42:	ff 90       	pop	r15
     d44:	ef 90       	pop	r14
     d46:	df 90       	pop	r13
     d48:	08 95       	ret

00000d4a <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     d4a:	1f 92       	push	r1
     d4c:	0f 92       	push	r0
     d4e:	0f b6       	in	r0, 0x3f	; 63
     d50:	0f 92       	push	r0
     d52:	11 24       	eor	r1, r1
     d54:	8f 93       	push	r24
    wdt_disable();
     d56:	88 e1       	ldi	r24, 0x18	; 24
     d58:	0f b6       	in	r0, 0x3f	; 63
     d5a:	f8 94       	cli
     d5c:	80 93 60 00 	sts	0x0060, r24
     d60:	10 92 60 00 	sts	0x0060, r1
     d64:	0f be       	out	0x3f, r0	; 63
}
     d66:	8f 91       	pop	r24
     d68:	0f 90       	pop	r0
     d6a:	0f be       	out	0x3f, r0	; 63
     d6c:	0f 90       	pop	r0
     d6e:	1f 90       	pop	r1
     d70:	18 95       	reti

00000d72 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     d72:	7c 01       	movw	r14, r24
     d74:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     d76:	d1 2c       	mov	r13, r1
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     d78:	88 24       	eor	r8, r8
     d7a:	8a 94       	dec	r8
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     d7c:	64 e0       	ldi	r22, 0x04	; 4
     d7e:	b6 2e       	mov	r11, r22

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     d80:	76 e0       	ldi	r23, 0x06	; 6
     d82:	97 2e       	mov	r9, r23
     d84:	e3 e8       	ldi	r30, 0x83	; 131
     d86:	ae 2e       	mov	r10, r30
            case SLEEPING:
                cli();
                acomp_off();
                adc_off();
                ports_off();
                wdt_enable(WDTO_8S);
     d88:	08 e1       	ldi	r16, 0x18	; 24
     d8a:	10 e0       	ldi	r17, 0x00	; 0
     d8c:	f9 e2       	ldi	r31, 0x29	; 41
     d8e:	cf 2e       	mov	r12, r31

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     d90:	e0 91 45 01 	lds	r30, 0x0145
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	e7 30       	cpi	r30, 0x07	; 7
     d98:	f1 05       	cpc	r31, r1
     d9a:	d0 f7       	brcc	.-12     	; 0xd90 <kilo_start+0x1e>
     d9c:	ec 5c       	subi	r30, 0xCC	; 204
     d9e:	ff 4f       	sbci	r31, 0xFF	; 255
     da0:	0c 94 57 0f 	jmp	0x1eae	; 0x1eae <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     da4:	dd 20       	and	r13, r13
     da6:	09 f4       	brne	.+2      	; 0xdaa <kilo_start+0x38>
     da8:	fd c0       	rjmp	.+506    	; 0xfa4 <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     daa:	b0 92 45 01 	sts	0x0145, r11
     dae:	dd 24       	eor	r13, r13
     db0:	d3 94       	inc	r13
            case RUNNING:
                loop();
     db2:	fe 01       	movw	r30, r28
     db4:	09 95       	icall
                break;
     db6:	ec cf       	rjmp	.-40     	; 0xd90 <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     db8:	80 91 89 01 	lds	r24, 0x0189
     dbc:	81 11       	cpse	r24, r1
     dbe:	eb c0       	rjmp	.+470    	; 0xf96 <kilo_start+0x224>
        cli();                                    // disable interrupts
     dc0:	f8 94       	cli
        adc_setup_conversion(6);
     dc2:	90 92 7c 00 	sts	0x007C, r9
     dc6:	a0 92 7a 00 	sts	0x007A, r10
        adc_start_conversion();
     dca:	80 91 7a 00 	lds	r24, 0x007A
     dce:	80 64       	ori	r24, 0x40	; 64
     dd0:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     dd4:	80 91 7a 00 	lds	r24, 0x007A
     dd8:	86 fd       	sbrc	r24, 6
     dda:	fc cf       	rjmp	.-8      	; 0xdd4 <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     ddc:	20 91 78 00 	lds	r18, 0x0078
     de0:	30 91 79 00 	lds	r19, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     de4:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     de6:	2b 3a       	cpi	r18, 0xAB	; 171
     de8:	92 e0       	ldi	r25, 0x02	; 2
     dea:	39 07       	cpc	r19, r25
     dec:	0c f0       	brlt	.+2      	; 0xdf0 <kilo_start+0x7e>
     dee:	ed c0       	rjmp	.+474    	; 0xfca <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     df0:	29 38       	cpi	r18, 0x89	; 137
     df2:	e2 e0       	ldi	r30, 0x02	; 2
     df4:	3e 07       	cpc	r19, r30
     df6:	0c f0       	brlt	.+2      	; 0xdfa <kilo_start+0x88>
     df8:	ef c0       	rjmp	.+478    	; 0xfd8 <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     dfa:	27 36       	cpi	r18, 0x67	; 103
     dfc:	32 40       	sbci	r19, 0x02	; 2
     dfe:	0c f4       	brge	.+2      	; 0xe02 <kilo_start+0x90>
     e00:	ca c0       	rjmp	.+404    	; 0xf96 <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     e02:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     e04:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     e06:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     e08:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     e0a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     e0c:	3c 98       	cbi	0x07, 4	; 7
     e0e:	c0 cf       	rjmp	.-128    	; 0xd90 <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     e10:	f8 94       	cli
                acomp_off();
     e12:	80 b7       	in	r24, 0x30	; 48
     e14:	87 7f       	andi	r24, 0xF7	; 247
     e16:	80 bf       	out	0x30, r24	; 48
                adc_off();
     e18:	80 91 7a 00 	lds	r24, 0x007A
     e1c:	8f 77       	andi	r24, 0x7F	; 127
     e1e:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     e22:	14 b8       	out	0x04, r1	; 4
     e24:	17 b8       	out	0x07, r1	; 7
     e26:	1a b8       	out	0x0a, r1	; 10
     e28:	15 b8       	out	0x05, r1	; 5
     e2a:	18 b8       	out	0x08, r1	; 8
     e2c:	1b b8       	out	0x0b, r1	; 11
                wdt_enable(WDTO_8S);
     e2e:	0f b6       	in	r0, 0x3f	; 63
     e30:	f8 94       	cli
     e32:	a8 95       	wdr
     e34:	00 93 60 00 	sts	0x0060, r16
     e38:	0f be       	out	0x3f, r0	; 63
     e3a:	c0 92 60 00 	sts	0x0060, r12
                WDTCSR |= (1<<WDIE);
     e3e:	80 91 60 00 	lds	r24, 0x0060
     e42:	80 64       	ori	r24, 0x40	; 64
     e44:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     e48:	83 b7       	in	r24, 0x33	; 51
     e4a:	81 7f       	andi	r24, 0xF1	; 241
     e4c:	84 60       	ori	r24, 0x04	; 4
     e4e:	83 bf       	out	0x33, r24	; 51
                cli();
     e50:	f8 94       	cli
                sleep_enable();
     e52:	83 b7       	in	r24, 0x33	; 51
     e54:	81 60       	ori	r24, 0x01	; 1
     e56:	83 bf       	out	0x33, r24	; 51
                sei();
     e58:	78 94       	sei
                sleep_cpu();
     e5a:	88 95       	sleep
                sleep_disable();
     e5c:	83 b7       	in	r24, 0x33	; 51
     e5e:	8e 7f       	andi	r24, 0xFE	; 254
     e60:	83 bf       	out	0x33, r24	; 51
                sei();
     e62:	78 94       	sei
                rx_busy = 0;
     e64:	10 92 89 01 	sts	0x0189, r1
                ports_on();
     e68:	52 9a       	sbi	0x0a, 2	; 10
     e6a:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     e6c:	80 91 7a 00 	lds	r24, 0x007A
     e70:	80 68       	ori	r24, 0x80	; 128
     e72:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e76:	87 e5       	ldi	r24, 0x57	; 87
     e78:	92 e0       	ldi	r25, 0x02	; 2
     e7a:	01 97       	sbiw	r24, 0x01	; 1
     e7c:	f1 f7       	brne	.-4      	; 0xe7a <kilo_start+0x108>
     e7e:	00 c0       	rjmp	.+0      	; 0xe80 <kilo_start+0x10e>
     e80:	00 00       	nop
                _delay_us(300);
                acomp_on();
     e82:	80 b7       	in	r24, 0x30	; 48
     e84:	88 61       	ori	r24, 0x18	; 24
     e86:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     e88:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     e8a:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     e8c:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     e8e:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     e90:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     e92:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e94:	ef e1       	ldi	r30, 0x1F	; 31
     e96:	fe e4       	ldi	r31, 0x4E	; 78
     e98:	31 97       	sbiw	r30, 0x01	; 1
     e9a:	f1 f7       	brne	.-4      	; 0xe98 <kilo_start+0x126>
     e9c:	00 c0       	rjmp	.+0      	; 0xe9e <kilo_start+0x12c>
     e9e:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     ea0:	80 91 89 01 	lds	r24, 0x0189
     ea4:	81 11       	cpse	r24, r1
     ea6:	81 c0       	rjmp	.+258    	; 0xfaa <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     ea8:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     eaa:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     eac:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     eae:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     eb0:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     eb2:	3c 98       	cbi	0x07, 4	; 7
     eb4:	6d cf       	rjmp	.-294    	; 0xd90 <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     eb6:	80 91 43 01 	lds	r24, 0x0143
     eba:	81 11       	cpse	r24, r1
     ebc:	41 c0       	rjmp	.+130    	; 0xf40 <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     ebe:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     ec2:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     ec6:	10 92 44 01 	sts	0x0144, r1
     eca:	62 cf       	rjmp	.-316    	; 0xd90 <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     ecc:	48 99       	sbic	0x09, 0	; 9
     ece:	ec cf       	rjmp	.-40     	; 0xea8 <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     ed0:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     ed2:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     ed4:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     ed6:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     ed8:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     eda:	3c 98       	cbi	0x07, 4	; 7
     edc:	8f ec       	ldi	r24, 0xCF	; 207
     ede:	97 e0       	ldi	r25, 0x07	; 7
     ee0:	01 97       	sbiw	r24, 0x01	; 1
     ee2:	f1 f7       	brne	.-4      	; 0xee0 <kilo_start+0x16e>
     ee4:	00 c0       	rjmp	.+0      	; 0xee6 <kilo_start+0x174>
     ee6:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     ee8:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     eea:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     eec:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     eee:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     ef0:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     ef2:	3c 98       	cbi	0x07, 4	; 7
     ef4:	9f ef       	ldi	r25, 0xFF	; 255
     ef6:	e1 ee       	ldi	r30, 0xE1	; 225
     ef8:	f4 e0       	ldi	r31, 0x04	; 4
     efa:	91 50       	subi	r25, 0x01	; 1
     efc:	e0 40       	sbci	r30, 0x00	; 0
     efe:	f0 40       	sbci	r31, 0x00	; 0
     f00:	e1 f7       	brne	.-8      	; 0xefa <kilo_start+0x188>
     f02:	00 c0       	rjmp	.+0      	; 0xf04 <kilo_start+0x192>
     f04:	00 00       	nop
     f06:	44 cf       	rjmp	.-376    	; 0xd90 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     f08:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     f0a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     f0c:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     f0e:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     f10:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     f12:	3c 98       	cbi	0x07, 4	; 7
     f14:	ef ec       	ldi	r30, 0xCF	; 207
     f16:	f7 e0       	ldi	r31, 0x07	; 7
     f18:	31 97       	sbiw	r30, 0x01	; 1
     f1a:	f1 f7       	brne	.-4      	; 0xf18 <kilo_start+0x1a6>
     f1c:	00 c0       	rjmp	.+0      	; 0xf1e <kilo_start+0x1ac>
     f1e:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     f20:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     f22:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     f24:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     f26:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     f28:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     f2a:	3c 98       	cbi	0x07, 4	; 7
     f2c:	ff ef       	ldi	r31, 0xFF	; 255
     f2e:	21 ee       	ldi	r18, 0xE1	; 225
     f30:	84 e0       	ldi	r24, 0x04	; 4
     f32:	f1 50       	subi	r31, 0x01	; 1
     f34:	20 40       	sbci	r18, 0x00	; 0
     f36:	80 40       	sbci	r24, 0x00	; 0
     f38:	e1 f7       	brne	.-8      	; 0xf32 <kilo_start+0x1c0>
     f3a:	00 c0       	rjmp	.+0      	; 0xf3c <kilo_start+0x1ca>
     f3c:	00 00       	nop
     f3e:	28 cf       	rjmp	.-432    	; 0xd90 <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     f40:	90 91 43 01 	lds	r25, 0x0143
     f44:	80 91 44 01 	lds	r24, 0x0144
     f48:	98 17       	cp	r25, r24
     f4a:	09 f4       	brne	.+2      	; 0xf4e <kilo_start+0x1dc>
     f4c:	21 cf       	rjmp	.-446    	; 0xd90 <kilo_start+0x1e>
                        prev_motion = cur_motion;
     f4e:	80 91 43 01 	lds	r24, 0x0143
     f52:	80 93 44 01 	sts	0x0144, r24
                        if (cur_motion == MOVE_LEFT) {
     f56:	80 91 43 01 	lds	r24, 0x0143
     f5a:	81 30       	cpi	r24, 0x01	; 1
     f5c:	09 f4       	brne	.+2      	; 0xf60 <kilo_start+0x1ee>
     f5e:	50 c0       	rjmp	.+160    	; 0x1000 <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     f60:	80 91 43 01 	lds	r24, 0x0143
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     f64:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     f68:	80 92 b4 00 	sts	0x00B4, r8
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     f6c:	82 30       	cpi	r24, 0x02	; 2
     f6e:	d9 f1       	breq	.+118    	; 0xfe6 <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     f70:	80 92 b3 00 	sts	0x00B3, r8
    OCR2B = cw;
     f74:	80 92 b4 00 	sts	0x00B4, r8
     f78:	8f e2       	ldi	r24, 0x2F	; 47
     f7a:	95 e7       	ldi	r25, 0x75	; 117
     f7c:	01 97       	sbiw	r24, 0x01	; 1
     f7e:	f1 f7       	brne	.-4      	; 0xf7c <kilo_start+0x20a>
     f80:	00 c0       	rjmp	.+0      	; 0xf82 <kilo_start+0x210>
     f82:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     f84:	80 91 be 01 	lds	r24, 0x01BE
     f88:	90 91 bd 01 	lds	r25, 0x01BD
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     f8c:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     f90:	80 93 b4 00 	sts	0x00B4, r24
     f94:	fd ce       	rjmp	.-518    	; 0xd90 <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     f96:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     f98:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     f9a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     f9c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     f9e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     fa0:	3c 98       	cbi	0x07, 4	; 7
     fa2:	f6 ce       	rjmp	.-532    	; 0xd90 <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     fa4:	f7 01       	movw	r30, r14
     fa6:	09 95       	icall
     fa8:	00 cf       	rjmp	.-512    	; 0xdaa <kilo_start+0x38>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     faa:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     fac:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     fae:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     fb0:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     fb2:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     fb4:	3c 98       	cbi	0x07, 4	; 7
     fb6:	ff ef       	ldi	r31, 0xFF	; 255
     fb8:	20 e7       	ldi	r18, 0x70	; 112
     fba:	82 e0       	ldi	r24, 0x02	; 2
     fbc:	f1 50       	subi	r31, 0x01	; 1
     fbe:	20 40       	sbci	r18, 0x00	; 0
     fc0:	80 40       	sbci	r24, 0x00	; 0
     fc2:	e1 f7       	brne	.-8      	; 0xfbc <kilo_start+0x24a>
     fc4:	00 c0       	rjmp	.+0      	; 0xfc6 <kilo_start+0x254>
     fc6:	00 00       	nop
     fc8:	6f cf       	rjmp	.-290    	; 0xea8 <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     fca:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     fcc:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     fce:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     fd0:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     fd2:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     fd4:	3c 98       	cbi	0x07, 4	; 7
     fd6:	dc ce       	rjmp	.-584    	; 0xd90 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     fd8:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     fda:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     fdc:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     fde:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     fe0:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     fe2:	3c 9a       	sbi	0x07, 4	; 7
     fe4:	d5 ce       	rjmp	.-598    	; 0xd90 <kilo_start+0x1e>
     fe6:	ef e2       	ldi	r30, 0x2F	; 47
     fe8:	f5 e7       	ldi	r31, 0x75	; 117
     fea:	31 97       	sbiw	r30, 0x01	; 1
     fec:	f1 f7       	brne	.-4      	; 0xfea <kilo_start+0x278>
     fee:	00 c0       	rjmp	.+0      	; 0xff0 <kilo_start+0x27e>
     ff0:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     ff2:	80 91 ab 01 	lds	r24, 0x01AB
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     ff6:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     ffa:	80 93 b4 00 	sts	0x00B4, r24
     ffe:	c8 ce       	rjmp	.-624    	; 0xd90 <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    1000:	80 92 b3 00 	sts	0x00B3, r8
    OCR2B = cw;
    1004:	10 92 b4 00 	sts	0x00B4, r1
    1008:	8f e2       	ldi	r24, 0x2F	; 47
    100a:	95 e7       	ldi	r25, 0x75	; 117
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	f1 f7       	brne	.-4      	; 0x100c <kilo_start+0x29a>
    1010:	00 c0       	rjmp	.+0      	; 0x1012 <kilo_start+0x2a0>
    1012:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
    1014:	80 91 bf 01 	lds	r24, 0x01BF
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    1018:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
    101c:	10 92 b4 00 	sts	0x00B4, r1
    1020:	b7 ce       	rjmp	.-658    	; 0xd90 <kilo_start+0x1e>

00001022 <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
    1022:	07 c0       	rjmp	.+14     	; 0x1032 <delay+0x10>
    1024:	ef ec       	ldi	r30, 0xCF	; 207
    1026:	f7 e0       	ldi	r31, 0x07	; 7
    1028:	31 97       	sbiw	r30, 0x01	; 1
    102a:	f1 f7       	brne	.-4      	; 0x1028 <delay+0x6>
    102c:	00 c0       	rjmp	.+0      	; 0x102e <delay+0xc>
    102e:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
    1030:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
    1032:	00 97       	sbiw	r24, 0x00	; 0
    1034:	b9 f7       	brne	.-18     	; 0x1024 <delay+0x2>
    1036:	08 95       	ret

00001038 <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    1038:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
    103c:	60 93 b4 00 	sts	0x00B4, r22
    1040:	08 95       	ret

00001042 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    1042:	8f ef       	ldi	r24, 0xFF	; 255
    1044:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
    1048:	80 93 b4 00 	sts	0x00B4, r24
    104c:	8f e0       	ldi	r24, 0x0F	; 15
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	ef ec       	ldi	r30, 0xCF	; 207
    1052:	f7 e0       	ldi	r31, 0x07	; 7
    1054:	31 97       	sbiw	r30, 0x01	; 1
    1056:	f1 f7       	brne	.-4      	; 0x1054 <spinup_motors+0x12>
    1058:	00 c0       	rjmp	.+0      	; 0x105a <spinup_motors+0x18>
    105a:	00 00       	nop
    105c:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
    105e:	00 97       	sbiw	r24, 0x00	; 0
    1060:	b9 f7       	brne	.-18     	; 0x1050 <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
    1062:	08 95       	ret

00001064 <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
    1064:	80 91 89 01 	lds	r24, 0x0189
    1068:	81 11       	cpse	r24, r1
    106a:	1e c0       	rjmp	.+60     	; 0x10a8 <get_ambientlight+0x44>
        cli();
    106c:	f8 94       	cli
        adc_setup_conversion(7);
    106e:	87 e0       	ldi	r24, 0x07	; 7
    1070:	80 93 7c 00 	sts	0x007C, r24
    1074:	83 e8       	ldi	r24, 0x83	; 131
    1076:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
    107a:	80 91 7a 00 	lds	r24, 0x007A
    107e:	80 64       	ori	r24, 0x40	; 64
    1080:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
    1084:	80 91 7a 00 	lds	r24, 0x007A
    1088:	86 fd       	sbrc	r24, 6
    108a:	fc cf       	rjmp	.-8      	; 0x1084 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
    108c:	80 91 78 00 	lds	r24, 0x0078
    1090:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
    1094:	10 92 7c 00 	sts	0x007C, r1
    1098:	23 ea       	ldi	r18, 0xA3	; 163
    109a:	20 93 7a 00 	sts	0x007A, r18
    109e:	21 e0       	ldi	r18, 0x01	; 1
    10a0:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
    10a4:	78 94       	sei
    10a6:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
    10a8:	8f ef       	ldi	r24, 0xFF	; 255
    10aa:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
    10ac:	08 95       	ret

000010ae <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
    10ae:	80 91 89 01 	lds	r24, 0x0189
    10b2:	81 11       	cpse	r24, r1
    10b4:	1e c0       	rjmp	.+60     	; 0x10f2 <get_temperature+0x44>
        cli();
    10b6:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
    10b8:	88 ec       	ldi	r24, 0xC8	; 200
    10ba:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
    10be:	87 e8       	ldi	r24, 0x87	; 135
    10c0:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
    10c4:	80 91 7a 00 	lds	r24, 0x007A
    10c8:	80 64       	ori	r24, 0x40	; 64
    10ca:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
    10ce:	80 91 7a 00 	lds	r24, 0x007A
    10d2:	86 fd       	sbrc	r24, 6
    10d4:	fc cf       	rjmp	.-8      	; 0x10ce <get_temperature+0x20>
        temp = ADCW;                             // store AD result
    10d6:	80 91 78 00 	lds	r24, 0x0078
    10da:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
    10de:	10 92 7c 00 	sts	0x007C, r1
    10e2:	23 ea       	ldi	r18, 0xA3	; 163
    10e4:	20 93 7a 00 	sts	0x007A, r18
    10e8:	21 e0       	ldi	r18, 0x01	; 1
    10ea:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
    10ee:	78 94       	sei
    10f0:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
    10f2:	8f ef       	ldi	r24, 0xFF	; 255
    10f4:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
    10f6:	08 95       	ret

000010f8 <rand_hard>:

uint8_t rand_hard() {
    10f8:	1f 93       	push	r17
    10fa:	cf 93       	push	r28
    10fc:	df 93       	push	r29
    10fe:	60 e0       	ldi	r22, 0x00	; 0
    1100:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t num = 0;
    1102:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
    1104:	13 ea       	ldi	r17, 0xA3	; 163
    1106:	d1 e0       	ldi	r29, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
    1108:	c6 e0       	ldi	r28, 0x06	; 6
    110a:	b3 e8       	ldi	r27, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    110c:	e1 e0       	ldi	r30, 0x01	; 1
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
    1110:	20 e8       	ldi	r18, 0x80	; 128
    1112:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
    1114:	f8 94       	cli
            adc_setup_conversion(6);
    1116:	c0 93 7c 00 	sts	0x007C, r28
    111a:	b0 93 7a 00 	sts	0x007A, r27
            adc_start_conversion();
    111e:	90 91 7a 00 	lds	r25, 0x007A
    1122:	90 64       	ori	r25, 0x40	; 64
    1124:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
    1128:	90 91 7a 00 	lds	r25, 0x007A
    112c:	96 fd       	sbrc	r25, 6
    112e:	fc cf       	rjmp	.-8      	; 0x1128 <rand_hard+0x30>
            a = ADCW&0x1;
    1130:	40 91 78 00 	lds	r20, 0x0078
    1134:	50 91 79 00 	lds	r21, 0x0079
    1138:	a4 2f       	mov	r26, r20
    113a:	a1 70       	andi	r26, 0x01	; 1
            adc_start_conversion();
    113c:	90 91 7a 00 	lds	r25, 0x007A
    1140:	90 64       	ori	r25, 0x40	; 64
    1142:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
    1146:	90 91 7a 00 	lds	r25, 0x007A
    114a:	96 fd       	sbrc	r25, 6
    114c:	fc cf       	rjmp	.-8      	; 0x1146 <rand_hard+0x4e>
            b = ADCW&0x1;
    114e:	40 91 78 00 	lds	r20, 0x0078
    1152:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
    1156:	10 92 7c 00 	sts	0x007C, r1
    115a:	10 93 7a 00 	sts	0x007A, r17
    115e:	d0 93 7b 00 	sts	0x007B, r29
            sei();
    1162:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
    1164:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
    1166:	a4 13       	cpse	r26, r20
    1168:	05 c0       	rjmp	.+10     	; 0x1174 <rand_hard+0x7c>
    116a:	21 50       	subi	r18, 0x01	; 1
    116c:	31 09       	sbc	r19, r1
    116e:	21 15       	cp	r18, r1
    1170:	31 05       	cpc	r19, r1
    1172:	81 f6       	brne	.-96     	; 0x1114 <rand_hard+0x1c>
        if (a)
    1174:	aa 23       	and	r26, r26
    1176:	39 f0       	breq	.+14     	; 0x1186 <rand_hard+0x8e>
            num |= (1<<i);
    1178:	9f 01       	movw	r18, r30
    117a:	06 2e       	mov	r0, r22
    117c:	01 c0       	rjmp	.+2      	; 0x1180 <rand_hard+0x88>
    117e:	22 0f       	add	r18, r18
    1180:	0a 94       	dec	r0
    1182:	ea f7       	brpl	.-6      	; 0x117e <rand_hard+0x86>
    1184:	82 2b       	or	r24, r18
    1186:	6f 5f       	subi	r22, 0xFF	; 255
    1188:	7f 4f       	sbci	r23, 0xFF	; 255
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
    118a:	68 30       	cpi	r22, 0x08	; 8
    118c:	71 05       	cpc	r23, r1
    118e:	09 f0       	breq	.+2      	; 0x1192 <rand_hard+0x9a>
    1190:	bf cf       	rjmp	.-130    	; 0x1110 <rand_hard+0x18>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
    1192:	df 91       	pop	r29
    1194:	cf 91       	pop	r28
    1196:	1f 91       	pop	r17
    1198:	08 95       	ret

0000119a <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    119a:	80 91 1e 01 	lds	r24, 0x011E
    119e:	98 2f       	mov	r25, r24
    11a0:	99 0f       	add	r25, r25
    11a2:	99 0f       	add	r25, r25
    11a4:	99 0f       	add	r25, r25
    11a6:	98 27       	eor	r25, r24
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
    11a8:	80 91 42 01 	lds	r24, 0x0142
    11ac:	21 e0       	ldi	r18, 0x01	; 1
    11ae:	28 0f       	add	r18, r24
    11b0:	20 93 42 01 	sts	0x0142, r18
    11b4:	86 95       	lsr	r24
    11b6:	86 95       	lsr	r24

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
    11b8:	89 27       	eor	r24, r25
    11ba:	92 95       	swap	r25
    11bc:	96 95       	lsr	r25
    11be:	97 70       	andi	r25, 0x07	; 7
    seed ^= accumulator++>>2;
    11c0:	89 27       	eor	r24, r25
    11c2:	80 93 1e 01 	sts	0x011E, r24
    return seed;
}
    11c6:	08 95       	ret

000011c8 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
    11c8:	80 93 1e 01 	sts	0x011E, r24
    11cc:	08 95       	ret

000011ce <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
    11ce:	80 91 89 01 	lds	r24, 0x0189
    11d2:	81 11       	cpse	r24, r1
    11d4:	16 c0       	rjmp	.+44     	; 0x1202 <get_voltage+0x34>
        cli();                                    // disable interrupts
    11d6:	f8 94       	cli
        adc_setup_conversion(6);
    11d8:	86 e0       	ldi	r24, 0x06	; 6
    11da:	80 93 7c 00 	sts	0x007C, r24
    11de:	83 e8       	ldi	r24, 0x83	; 131
    11e0:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
    11e4:	80 91 7a 00 	lds	r24, 0x007A
    11e8:	80 64       	ori	r24, 0x40	; 64
    11ea:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
    11ee:	80 91 7a 00 	lds	r24, 0x007A
    11f2:	86 fd       	sbrc	r24, 6
    11f4:	fc cf       	rjmp	.-8      	; 0x11ee <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
    11f6:	80 91 78 00 	lds	r24, 0x0078
    11fa:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    11fe:	78 94       	sei
    1200:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    1202:	8f ef       	ldi	r24, 0xFF	; 255
    1204:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
    1206:	08 95       	ret

00001208 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
    1208:	2f 92       	push	r2
    120a:	3f 92       	push	r3
    120c:	4f 92       	push	r4
    120e:	5f 92       	push	r5
    1210:	6f 92       	push	r6
    1212:	7f 92       	push	r7
    1214:	8f 92       	push	r8
    1216:	9f 92       	push	r9
    1218:	af 92       	push	r10
    121a:	bf 92       	push	r11
    121c:	cf 92       	push	r12
    121e:	df 92       	push	r13
    1220:	ef 92       	push	r14
    1222:	ff 92       	push	r15
    1224:	0f 93       	push	r16
    1226:	1f 93       	push	r17
    1228:	cf 93       	push	r28
    122a:	df 93       	push	r29
    122c:	00 d0       	rcall	.+0      	; 0x122e <estimate_distance+0x26>
    122e:	00 d0       	rcall	.+0      	; 0x1230 <estimate_distance+0x28>
    1230:	00 d0       	rcall	.+0      	; 0x1232 <estimate_distance+0x2a>
    1232:	cd b7       	in	r28, 0x3d	; 61
    1234:	de b7       	in	r29, 0x3e	; 62
    1236:	8c 01       	movw	r16, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
    1238:	dc 01       	movw	r26, r24
    123a:	12 96       	adiw	r26, 0x02	; 2
    123c:	0d 90       	ld	r0, X+
    123e:	bc 91       	ld	r27, X
    1240:	a0 2d       	mov	r26, r0
    1242:	be 83       	std	Y+6, r27	; 0x06
    1244:	ad 83       	std	Y+5, r26	; 0x05
    1246:	a4 38       	cpi	r26, 0x84	; 132
    1248:	e3 e0       	ldi	r30, 0x03	; 3
    124a:	be 07       	cpc	r27, r30
    124c:	0c f0       	brlt	.+2      	; 0x1250 <estimate_distance+0x48>
    124e:	ca c0       	rjmp	.+404    	; 0x13e4 <estimate_distance+0x1dc>
        if (dist->high_gain > kilo_irhigh[0]) {
    1250:	80 91 63 01 	lds	r24, 0x0163
    1254:	90 91 64 01 	lds	r25, 0x0164
    1258:	8a 17       	cp	r24, r26
    125a:	9b 07       	cpc	r25, r27
    125c:	08 f4       	brcc	.+2      	; 0x1260 <estimate_distance+0x58>
    125e:	a9 c1       	rjmp	.+850    	; 0x15b2 <estimate_distance+0x3aa>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
    1260:	60 90 65 01 	lds	r6, 0x0165
    1264:	70 90 66 01 	lds	r7, 0x0166
    1268:	6a 16       	cp	r6, r26
    126a:	7b 06       	cpc	r7, r27
    126c:	08 f4       	brcc	.+2      	; 0x1270 <estimate_distance+0x68>
    126e:	27 c2       	rjmp	.+1102   	; 0x16be <estimate_distance+0x4b6>
    1270:	60 90 67 01 	lds	r6, 0x0167
    1274:	70 90 68 01 	lds	r7, 0x0168
    1278:	6a 16       	cp	r6, r26
    127a:	7b 06       	cpc	r7, r27
    127c:	08 f4       	brcc	.+2      	; 0x1280 <estimate_distance+0x78>
    127e:	28 c2       	rjmp	.+1104   	; 0x16d0 <estimate_distance+0x4c8>
    1280:	60 90 69 01 	lds	r6, 0x0169
    1284:	70 90 6a 01 	lds	r7, 0x016A
    1288:	6a 16       	cp	r6, r26
    128a:	7b 06       	cpc	r7, r27
    128c:	08 f4       	brcc	.+2      	; 0x1290 <estimate_distance+0x88>
    128e:	29 c2       	rjmp	.+1106   	; 0x16e2 <estimate_distance+0x4da>
    1290:	60 90 6b 01 	lds	r6, 0x016B
    1294:	70 90 6c 01 	lds	r7, 0x016C
    1298:	6a 16       	cp	r6, r26
    129a:	7b 06       	cpc	r7, r27
    129c:	08 f4       	brcc	.+2      	; 0x12a0 <estimate_distance+0x98>
    129e:	2a c2       	rjmp	.+1108   	; 0x16f4 <estimate_distance+0x4ec>
    12a0:	60 90 6d 01 	lds	r6, 0x016D
    12a4:	70 90 6e 01 	lds	r7, 0x016E
    12a8:	6a 16       	cp	r6, r26
    12aa:	7b 06       	cpc	r7, r27
    12ac:	08 f4       	brcc	.+2      	; 0x12b0 <estimate_distance+0xa8>
    12ae:	8b c1       	rjmp	.+790    	; 0x15c6 <estimate_distance+0x3be>
    12b0:	60 90 6f 01 	lds	r6, 0x016F
    12b4:	70 90 70 01 	lds	r7, 0x0170
    12b8:	6a 16       	cp	r6, r26
    12ba:	7b 06       	cpc	r7, r27
    12bc:	08 f4       	brcc	.+2      	; 0x12c0 <estimate_distance+0xb8>
    12be:	23 c2       	rjmp	.+1094   	; 0x1706 <estimate_distance+0x4fe>
    12c0:	60 90 71 01 	lds	r6, 0x0171
    12c4:	70 90 72 01 	lds	r7, 0x0172
    12c8:	6a 16       	cp	r6, r26
    12ca:	7b 06       	cpc	r7, r27
    12cc:	08 f4       	brcc	.+2      	; 0x12d0 <estimate_distance+0xc8>
    12ce:	24 c2       	rjmp	.+1096   	; 0x1718 <estimate_distance+0x510>
    12d0:	60 90 73 01 	lds	r6, 0x0173
    12d4:	70 90 74 01 	lds	r7, 0x0174
    12d8:	6a 16       	cp	r6, r26
    12da:	7b 06       	cpc	r7, r27
    12dc:	08 f4       	brcc	.+2      	; 0x12e0 <estimate_distance+0xd8>
    12de:	25 c2       	rjmp	.+1098   	; 0x172a <estimate_distance+0x522>
    12e0:	60 90 75 01 	lds	r6, 0x0175
    12e4:	70 90 76 01 	lds	r7, 0x0176
    12e8:	6a 16       	cp	r6, r26
    12ea:	7b 06       	cpc	r7, r27
    12ec:	08 f4       	brcc	.+2      	; 0x12f0 <estimate_distance+0xe8>
    12ee:	26 c2       	rjmp	.+1100   	; 0x173c <estimate_distance+0x534>
    12f0:	60 90 77 01 	lds	r6, 0x0177
    12f4:	70 90 78 01 	lds	r7, 0x0178
    12f8:	6a 16       	cp	r6, r26
    12fa:	7b 06       	cpc	r7, r27
    12fc:	08 f4       	brcc	.+2      	; 0x1300 <estimate_distance+0xf8>
    12fe:	27 c2       	rjmp	.+1102   	; 0x174e <estimate_distance+0x546>
    1300:	60 90 79 01 	lds	r6, 0x0179
    1304:	70 90 7a 01 	lds	r7, 0x017A
    1308:	6a 16       	cp	r6, r26
    130a:	7b 06       	cpc	r7, r27
    130c:	08 f4       	brcc	.+2      	; 0x1310 <estimate_distance+0x108>
    130e:	2d c2       	rjmp	.+1114   	; 0x176a <estimate_distance+0x562>
    1310:	60 90 7b 01 	lds	r6, 0x017B
    1314:	70 90 7c 01 	lds	r7, 0x017C
    1318:	6a 16       	cp	r6, r26
    131a:	7b 06       	cpc	r7, r27
    131c:	08 f4       	brcc	.+2      	; 0x1320 <estimate_distance+0x118>
    131e:	2e c2       	rjmp	.+1116   	; 0x177c <estimate_distance+0x574>
    1320:	60 90 7d 01 	lds	r6, 0x017D
    1324:	70 90 7e 01 	lds	r7, 0x017E
    1328:	6a 16       	cp	r6, r26
    132a:	7b 06       	cpc	r7, r27
    132c:	08 f4       	brcc	.+2      	; 0x1330 <estimate_distance+0x128>
    132e:	2f c2       	rjmp	.+1118   	; 0x178e <estimate_distance+0x586>
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	a0 ed       	ldi	r26, 0xD0	; 208
    1336:	b0 e4       	ldi	r27, 0x40	; 64
    1338:	89 83       	std	Y+1, r24	; 0x01
    133a:	9a 83       	std	Y+2, r25	; 0x02
    133c:	ab 83       	std	Y+3, r26	; 0x03
    133e:	bc 83       	std	Y+4, r27	; 0x04
    1340:	8c e0       	ldi	r24, 0x0C	; 12
    1342:	e8 2e       	mov	r14, r24
    1344:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
    1346:	f7 01       	movw	r30, r14
    1348:	ee 0f       	add	r30, r30
    134a:	ff 1f       	adc	r31, r31
    134c:	ed 59       	subi	r30, 0x9D	; 157
    134e:	fe 4f       	sbci	r31, 0xFE	; 254
    1350:	80 81       	ld	r24, Z
    1352:	91 81       	ldd	r25, Z+1	; 0x01
    1354:	b3 01       	movw	r22, r6
    1356:	68 1b       	sub	r22, r24
    1358:	79 0b       	sbc	r23, r25
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__floatunsisf>
    1362:	9b 01       	movw	r18, r22
    1364:	ac 01       	movw	r20, r24
    1366:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <__addsf3>
    136a:	6b 01       	movw	r12, r22
    136c:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
    136e:	ad 81       	ldd	r26, Y+5	; 0x05
    1370:	be 81       	ldd	r27, Y+6	; 0x06
    1372:	bd 01       	movw	r22, r26
    1374:	88 27       	eor	r24, r24
    1376:	77 fd       	sbrc	r23, 7
    1378:	80 95       	com	r24
    137a:	98 2f       	mov	r25, r24
    137c:	0e 94 80 10 	call	0x2100	; 0x2100 <__floatsisf>
    1380:	4b 01       	movw	r8, r22
    1382:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
    1384:	b3 01       	movw	r22, r6
    1386:	80 e0       	ldi	r24, 0x00	; 0
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__floatunsisf>
    138e:	2b 01       	movw	r4, r22
    1390:	3c 01       	movw	r6, r24
    1392:	29 81       	ldd	r18, Y+1	; 0x01
    1394:	3a 81       	ldd	r19, Y+2	; 0x02
    1396:	4b 81       	ldd	r20, Y+3	; 0x03
    1398:	5c 81       	ldd	r21, Y+4	; 0x04
    139a:	c7 01       	movw	r24, r14
    139c:	b6 01       	movw	r22, r12
    139e:	0e 94 10 11 	call	0x2220	; 0x2220 <__mulsf3>
    13a2:	9b 01       	movw	r18, r22
    13a4:	ac 01       	movw	r20, r24
    13a6:	c3 01       	movw	r24, r6
    13a8:	b2 01       	movw	r22, r4
    13aa:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <__subsf3>
    13ae:	9b 01       	movw	r18, r22
    13b0:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
    13b2:	c5 01       	movw	r24, r10
    13b4:	b4 01       	movw	r22, r8
    13b6:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <__subsf3>
    13ba:	20 e0       	ldi	r18, 0x00	; 0
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	40 e2       	ldi	r20, 0x20	; 32
    13c0:	51 e4       	ldi	r21, 0x41	; 65
    13c2:	0e 94 10 11 	call	0x2220	; 0x2220 <__mulsf3>
            b=((int)((int)b/(int)slope));
    13c6:	0e 94 4d 10 	call	0x209a	; 0x209a <__fixsfsi>
    13ca:	5b 01       	movw	r10, r22
    13cc:	c7 01       	movw	r24, r14
    13ce:	b6 01       	movw	r22, r12
    13d0:	0e 94 4d 10 	call	0x209a	; 0x209a <__fixsfsi>
    13d4:	ab 01       	movw	r20, r22
    13d6:	bc 01       	movw	r22, r24
    13d8:	c5 01       	movw	r24, r10
    13da:	ba 01       	movw	r22, r20
    13dc:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__divmodhi4>
            dist_high=b;
    13e0:	76 2e       	mov	r7, r22
    13e2:	e8 c0       	rjmp	.+464    	; 0x15b4 <estimate_distance+0x3ac>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    13e4:	77 24       	eor	r7, r7
    13e6:	7a 94       	dec	r7
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
    13e8:	d8 01       	movw	r26, r16
    13ea:	ad 90       	ld	r10, X+
    13ec:	bc 90       	ld	r11, X
    13ee:	80 91 8a 01 	lds	r24, 0x018A
    13f2:	90 91 8b 01 	lds	r25, 0x018B
    13f6:	8a 15       	cp	r24, r10
    13f8:	9b 05       	cpc	r25, r11
    13fa:	08 f4       	brcc	.+2      	; 0x13fe <estimate_distance+0x1f6>
    13fc:	6f c0       	rjmp	.+222    	; 0x14dc <estimate_distance+0x2d4>
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
    13fe:	00 91 8c 01 	lds	r16, 0x018C
    1402:	10 91 8d 01 	lds	r17, 0x018D
    1406:	0a 15       	cp	r16, r10
    1408:	1b 05       	cpc	r17, r11
    140a:	08 f4       	brcc	.+2      	; 0x140e <estimate_distance+0x206>
    140c:	5c c1       	rjmp	.+696    	; 0x16c6 <estimate_distance+0x4be>
    140e:	00 91 8e 01 	lds	r16, 0x018E
    1412:	10 91 8f 01 	lds	r17, 0x018F
    1416:	0a 15       	cp	r16, r10
    1418:	1b 05       	cpc	r17, r11
    141a:	08 f4       	brcc	.+2      	; 0x141e <estimate_distance+0x216>
    141c:	5d c1       	rjmp	.+698    	; 0x16d8 <estimate_distance+0x4d0>
    141e:	00 91 90 01 	lds	r16, 0x0190
    1422:	10 91 91 01 	lds	r17, 0x0191
    1426:	0a 15       	cp	r16, r10
    1428:	1b 05       	cpc	r17, r11
    142a:	08 f4       	brcc	.+2      	; 0x142e <estimate_distance+0x226>
    142c:	5e c1       	rjmp	.+700    	; 0x16ea <estimate_distance+0x4e2>
    142e:	00 91 92 01 	lds	r16, 0x0192
    1432:	10 91 93 01 	lds	r17, 0x0193
    1436:	0a 15       	cp	r16, r10
    1438:	1b 05       	cpc	r17, r11
    143a:	08 f4       	brcc	.+2      	; 0x143e <estimate_distance+0x236>
    143c:	5f c1       	rjmp	.+702    	; 0x16fc <estimate_distance+0x4f4>
    143e:	00 91 94 01 	lds	r16, 0x0194
    1442:	10 91 95 01 	lds	r17, 0x0195
    1446:	0a 15       	cp	r16, r10
    1448:	1b 05       	cpc	r17, r11
    144a:	08 f4       	brcc	.+2      	; 0x144e <estimate_distance+0x246>
    144c:	d8 c0       	rjmp	.+432    	; 0x15fe <estimate_distance+0x3f6>
    144e:	00 91 96 01 	lds	r16, 0x0196
    1452:	10 91 97 01 	lds	r17, 0x0197
    1456:	0a 15       	cp	r16, r10
    1458:	1b 05       	cpc	r17, r11
    145a:	08 f4       	brcc	.+2      	; 0x145e <estimate_distance+0x256>
    145c:	58 c1       	rjmp	.+688    	; 0x170e <estimate_distance+0x506>
    145e:	00 91 98 01 	lds	r16, 0x0198
    1462:	10 91 99 01 	lds	r17, 0x0199
    1466:	0a 15       	cp	r16, r10
    1468:	1b 05       	cpc	r17, r11
    146a:	08 f4       	brcc	.+2      	; 0x146e <estimate_distance+0x266>
    146c:	59 c1       	rjmp	.+690    	; 0x1720 <estimate_distance+0x518>
    146e:	00 91 9a 01 	lds	r16, 0x019A
    1472:	10 91 9b 01 	lds	r17, 0x019B
    1476:	0a 15       	cp	r16, r10
    1478:	1b 05       	cpc	r17, r11
    147a:	08 f4       	brcc	.+2      	; 0x147e <estimate_distance+0x276>
    147c:	5a c1       	rjmp	.+692    	; 0x1732 <estimate_distance+0x52a>
    147e:	00 91 9c 01 	lds	r16, 0x019C
    1482:	10 91 9d 01 	lds	r17, 0x019D
    1486:	0a 15       	cp	r16, r10
    1488:	1b 05       	cpc	r17, r11
    148a:	08 f4       	brcc	.+2      	; 0x148e <estimate_distance+0x286>
    148c:	5b c1       	rjmp	.+694    	; 0x1744 <estimate_distance+0x53c>
    148e:	00 91 9e 01 	lds	r16, 0x019E
    1492:	10 91 9f 01 	lds	r17, 0x019F
    1496:	0a 15       	cp	r16, r10
    1498:	1b 05       	cpc	r17, r11
    149a:	08 f4       	brcc	.+2      	; 0x149e <estimate_distance+0x296>
    149c:	5c c1       	rjmp	.+696    	; 0x1756 <estimate_distance+0x54e>
    149e:	00 91 a0 01 	lds	r16, 0x01A0
    14a2:	10 91 a1 01 	lds	r17, 0x01A1
    14a6:	0a 15       	cp	r16, r10
    14a8:	1b 05       	cpc	r17, r11
    14aa:	08 f4       	brcc	.+2      	; 0x14ae <estimate_distance+0x2a6>
    14ac:	59 c1       	rjmp	.+690    	; 0x1760 <estimate_distance+0x558>
    14ae:	00 91 a2 01 	lds	r16, 0x01A2
    14b2:	10 91 a3 01 	lds	r17, 0x01A3
    14b6:	0a 15       	cp	r16, r10
    14b8:	1b 05       	cpc	r17, r11
    14ba:	08 f4       	brcc	.+2      	; 0x14be <estimate_distance+0x2b6>
    14bc:	5a c1       	rjmp	.+692    	; 0x1772 <estimate_distance+0x56a>
    14be:	00 91 a4 01 	lds	r16, 0x01A4
    14c2:	10 91 a5 01 	lds	r17, 0x01A5
    14c6:	0a 15       	cp	r16, r10
    14c8:	1b 05       	cpc	r17, r11
    14ca:	08 f4       	brcc	.+2      	; 0x14ce <estimate_distance+0x2c6>
    14cc:	5b c1       	rjmp	.+694    	; 0x1784 <estimate_distance+0x57c>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
    14ce:	1a e5       	ldi	r17, 0x5A	; 90
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
    14d0:	bf ef       	ldi	r27, 0xFF	; 255
    14d2:	7b 12       	cpse	r7, r27
    14d4:	07 c0       	rjmp	.+14     	; 0x14e4 <estimate_distance+0x2dc>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
    14d6:	81 e2       	ldi	r24, 0x21	; 33
    14d8:	81 0f       	add	r24, r17
    14da:	52 c0       	rjmp	.+164    	; 0x1580 <estimate_distance+0x378>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
    14dc:	10 e0       	ldi	r17, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
    14de:	bf ef       	ldi	r27, 0xFF	; 255
    14e0:	7b 16       	cp	r7, r27
    14e2:	c9 f3       	breq	.-14     	; 0x14d6 <estimate_distance+0x2ce>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
    14e4:	ed 81       	ldd	r30, Y+5	; 0x05
    14e6:	fe 81       	ldd	r31, Y+6	; 0x06
    14e8:	bf 01       	movw	r22, r30
    14ea:	88 27       	eor	r24, r24
    14ec:	77 fd       	sbrc	r23, 7
    14ee:	80 95       	com	r24
    14f0:	98 2f       	mov	r25, r24
    14f2:	0e 94 80 10 	call	0x2100	; 0x2100 <__floatsisf>
    14f6:	6b 01       	movw	r12, r22
    14f8:	7c 01       	movw	r14, r24
    14fa:	67 2d       	mov	r22, r7
    14fc:	70 e0       	ldi	r23, 0x00	; 0
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__floatunsisf>
    1506:	4b 01       	movw	r8, r22
    1508:	5c 01       	movw	r10, r24
    150a:	a7 01       	movw	r20, r14
    150c:	96 01       	movw	r18, r12
    150e:	60 e0       	ldi	r22, 0x00	; 0
    1510:	70 e0       	ldi	r23, 0x00	; 0
    1512:	81 e6       	ldi	r24, 0x61	; 97
    1514:	94 e4       	ldi	r25, 0x44	; 68
    1516:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <__subsf3>
    151a:	9b 01       	movw	r18, r22
    151c:	ac 01       	movw	r20, r24
    151e:	c5 01       	movw	r24, r10
    1520:	b4 01       	movw	r22, r8
    1522:	0e 94 10 11 	call	0x2220	; 0x2220 <__mulsf3>
    1526:	4b 01       	movw	r8, r22
    1528:	5c 01       	movw	r10, r24
    152a:	61 2f       	mov	r22, r17
    152c:	70 e0       	ldi	r23, 0x00	; 0
    152e:	80 e0       	ldi	r24, 0x00	; 0
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__floatunsisf>
    1536:	2b 01       	movw	r4, r22
    1538:	3c 01       	movw	r6, r24
    153a:	20 e0       	ldi	r18, 0x00	; 0
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	4f e2       	ldi	r20, 0x2F	; 47
    1540:	54 e4       	ldi	r21, 0x44	; 68
    1542:	c7 01       	movw	r24, r14
    1544:	b6 01       	movw	r22, r12
    1546:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <__subsf3>
    154a:	9b 01       	movw	r18, r22
    154c:	ac 01       	movw	r20, r24
    154e:	c3 01       	movw	r24, r6
    1550:	b2 01       	movw	r22, r4
    1552:	0e 94 10 11 	call	0x2220	; 0x2220 <__mulsf3>
    1556:	9b 01       	movw	r18, r22
    1558:	ac 01       	movw	r20, r24
    155a:	c5 01       	movw	r24, r10
    155c:	b4 01       	movw	r22, r8
    155e:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <__addsf3>
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	48 e4       	ldi	r20, 0x48	; 72
    1568:	53 e4       	ldi	r21, 0x43	; 67
    156a:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <__divsf3>
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	44 e0       	ldi	r20, 0x04	; 4
    1574:	52 e4       	ldi	r21, 0x42	; 66
    1576:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <__addsf3>
    157a:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__fixunssfsi>
    157e:	86 2f       	mov	r24, r22
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
    }
}
    1580:	26 96       	adiw	r28, 0x06	; 6
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	f8 94       	cli
    1586:	de bf       	out	0x3e, r29	; 62
    1588:	0f be       	out	0x3f, r0	; 63
    158a:	cd bf       	out	0x3d, r28	; 61
    158c:	df 91       	pop	r29
    158e:	cf 91       	pop	r28
    1590:	1f 91       	pop	r17
    1592:	0f 91       	pop	r16
    1594:	ff 90       	pop	r15
    1596:	ef 90       	pop	r14
    1598:	df 90       	pop	r13
    159a:	cf 90       	pop	r12
    159c:	bf 90       	pop	r11
    159e:	af 90       	pop	r10
    15a0:	9f 90       	pop	r9
    15a2:	8f 90       	pop	r8
    15a4:	7f 90       	pop	r7
    15a6:	6f 90       	pop	r6
    15a8:	5f 90       	pop	r5
    15aa:	4f 90       	pop	r4
    15ac:	3f 90       	pop	r3
    15ae:	2f 90       	pop	r2
    15b0:	08 95       	ret
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
    15b2:	71 2c       	mov	r7, r1
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
    15b4:	ed 81       	ldd	r30, Y+5	; 0x05
    15b6:	fe 81       	ldd	r31, Y+6	; 0x06
    15b8:	ed 3b       	cpi	r30, 0xBD	; 189
    15ba:	f2 40       	sbci	r31, 0x02	; 2
    15bc:	0c f0       	brlt	.+2      	; 0x15c0 <estimate_distance+0x3b8>
    15be:	14 cf       	rjmp	.-472    	; 0x13e8 <estimate_distance+0x1e0>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
    15c0:	81 e2       	ldi	r24, 0x21	; 33
    15c2:	87 0d       	add	r24, r7
    15c4:	dd cf       	rjmp	.-70     	; 0x1580 <estimate_distance+0x378>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    15c6:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
    15c8:	85 e0       	ldi	r24, 0x05	; 5
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	7c 01       	movw	r14, r24
    15ce:	f1 e0       	ldi	r31, 0x01	; 1
    15d0:	ef 1a       	sub	r14, r31
    15d2:	f1 08       	sbc	r15, r1
    15d4:	70 e0       	ldi	r23, 0x00	; 0
    15d6:	80 e0       	ldi	r24, 0x00	; 0
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__floatunsisf>
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	40 e0       	ldi	r20, 0x00	; 0
    15e4:	5f e3       	ldi	r21, 0x3F	; 63
    15e6:	0e 94 10 11 	call	0x2220	; 0x2220 <__mulsf3>
    15ea:	20 e0       	ldi	r18, 0x00	; 0
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	a9 01       	movw	r20, r18
    15f0:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <__addsf3>
    15f4:	69 83       	std	Y+1, r22	; 0x01
    15f6:	7a 83       	std	Y+2, r23	; 0x02
    15f8:	8b 83       	std	Y+3, r24	; 0x03
    15fa:	9c 83       	std	Y+4, r25	; 0x04
    15fc:	a4 ce       	rjmp	.-696    	; 0x1346 <estimate_distance+0x13e>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    15fe:	75 e0       	ldi	r23, 0x05	; 5
    1600:	67 2e       	mov	r6, r23
                if(dist->low_gain > kilo_irlow[i]) {
    1602:	e5 e0       	ldi	r30, 0x05	; 5
    1604:	f0 e0       	ldi	r31, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
    1606:	ee 0f       	add	r30, r30
    1608:	ff 1f       	adc	r31, r31
    160a:	e8 57       	subi	r30, 0x78	; 120
    160c:	fe 4f       	sbci	r31, 0xFE	; 254
    160e:	80 81       	ld	r24, Z
    1610:	91 81       	ldd	r25, Z+1	; 0x01
    1612:	b8 01       	movw	r22, r16
    1614:	68 1b       	sub	r22, r24
    1616:	79 0b       	sbc	r23, r25
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__floatunsisf>
    1620:	9b 01       	movw	r18, r22
    1622:	ac 01       	movw	r20, r24
    1624:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <__addsf3>
    1628:	6b 01       	movw	r12, r22
    162a:	7c 01       	movw	r14, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
    162c:	b5 01       	movw	r22, r10
    162e:	88 27       	eor	r24, r24
    1630:	77 fd       	sbrc	r23, 7
    1632:	80 95       	com	r24
    1634:	98 2f       	mov	r25, r24
    1636:	0e 94 80 10 	call	0x2100	; 0x2100 <__floatsisf>
    163a:	4b 01       	movw	r8, r22
    163c:	5c 01       	movw	r10, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
    163e:	b8 01       	movw	r22, r16
    1640:	80 e0       	ldi	r24, 0x00	; 0
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__floatunsisf>
    1648:	1b 01       	movw	r2, r22
    164a:	2c 01       	movw	r4, r24
    164c:	66 2d       	mov	r22, r6
    164e:	70 e0       	ldi	r23, 0x00	; 0
    1650:	80 e0       	ldi	r24, 0x00	; 0
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__floatunsisf>
    1658:	20 e0       	ldi	r18, 0x00	; 0
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	40 e0       	ldi	r20, 0x00	; 0
    165e:	5f e3       	ldi	r21, 0x3F	; 63
    1660:	0e 94 10 11 	call	0x2220	; 0x2220 <__mulsf3>
    1664:	20 e0       	ldi	r18, 0x00	; 0
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	a9 01       	movw	r20, r18
    166a:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <__addsf3>
    166e:	a7 01       	movw	r20, r14
    1670:	96 01       	movw	r18, r12
    1672:	0e 94 10 11 	call	0x2220	; 0x2220 <__mulsf3>
    1676:	9b 01       	movw	r18, r22
    1678:	ac 01       	movw	r20, r24
    167a:	c2 01       	movw	r24, r4
    167c:	b1 01       	movw	r22, r2
    167e:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <__subsf3>
    1682:	9b 01       	movw	r18, r22
    1684:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
    1686:	c5 01       	movw	r24, r10
    1688:	b4 01       	movw	r22, r8
    168a:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <__subsf3>
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	40 e2       	ldi	r20, 0x20	; 32
    1694:	51 e4       	ldi	r21, 0x41	; 65
    1696:	0e 94 10 11 	call	0x2220	; 0x2220 <__mulsf3>
                b=((int)((int)b/(int)slope));
    169a:	0e 94 4d 10 	call	0x209a	; 0x209a <__fixsfsi>
    169e:	8b 01       	movw	r16, r22
    16a0:	c7 01       	movw	r24, r14
    16a2:	b6 01       	movw	r22, r12
    16a4:	0e 94 4d 10 	call	0x209a	; 0x209a <__fixsfsi>
    16a8:	ab 01       	movw	r20, r22
    16aa:	bc 01       	movw	r22, r24
    16ac:	c8 01       	movw	r24, r16
    16ae:	ba 01       	movw	r22, r20
    16b0:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__divmodhi4>
                dist_low=b;
    16b4:	16 2f       	mov	r17, r22
            }
        }
    }

    if (dist_low != 255) {
    16b6:	6f 3f       	cpi	r22, 0xFF	; 255
    16b8:	09 f0       	breq	.+2      	; 0x16bc <estimate_distance+0x4b4>
    16ba:	11 cf       	rjmp	.-478    	; 0x14de <estimate_distance+0x2d6>
    16bc:	81 cf       	rjmp	.-254    	; 0x15c0 <estimate_distance+0x3b8>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
    16be:	61 e0       	ldi	r22, 0x01	; 1
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	83 cf       	rjmp	.-250    	; 0x15cc <estimate_distance+0x3c4>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
    16c6:	66 24       	eor	r6, r6
    16c8:	63 94       	inc	r6
    16ca:	e1 e0       	ldi	r30, 0x01	; 1
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	9b cf       	rjmp	.-202    	; 0x1606 <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    16d0:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
    16d2:	82 e0       	ldi	r24, 0x02	; 2
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	7a cf       	rjmp	.-268    	; 0x15cc <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    16d8:	a2 e0       	ldi	r26, 0x02	; 2
    16da:	6a 2e       	mov	r6, r26
                if(dist->low_gain > kilo_irlow[i]) {
    16dc:	e2 e0       	ldi	r30, 0x02	; 2
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	92 cf       	rjmp	.-220    	; 0x1606 <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    16e2:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
    16e4:	83 e0       	ldi	r24, 0x03	; 3
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	71 cf       	rjmp	.-286    	; 0x15cc <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    16ea:	f3 e0       	ldi	r31, 0x03	; 3
    16ec:	6f 2e       	mov	r6, r31
                if(dist->low_gain > kilo_irlow[i]) {
    16ee:	e3 e0       	ldi	r30, 0x03	; 3
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	89 cf       	rjmp	.-238    	; 0x1606 <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    16f4:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
    16f6:	84 e0       	ldi	r24, 0x04	; 4
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	68 cf       	rjmp	.-304    	; 0x15cc <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    16fc:	e4 e0       	ldi	r30, 0x04	; 4
    16fe:	6e 2e       	mov	r6, r30
                if(dist->low_gain > kilo_irlow[i]) {
    1700:	e4 e0       	ldi	r30, 0x04	; 4
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 cf       	rjmp	.-256    	; 0x1606 <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1706:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
    1708:	86 e0       	ldi	r24, 0x06	; 6
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	5f cf       	rjmp	.-322    	; 0x15cc <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    170e:	66 e0       	ldi	r22, 0x06	; 6
    1710:	66 2e       	mov	r6, r22
                if(dist->low_gain > kilo_irlow[i]) {
    1712:	e6 e0       	ldi	r30, 0x06	; 6
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	77 cf       	rjmp	.-274    	; 0x1606 <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1718:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
    171a:	87 e0       	ldi	r24, 0x07	; 7
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	56 cf       	rjmp	.-340    	; 0x15cc <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1720:	57 e0       	ldi	r21, 0x07	; 7
    1722:	65 2e       	mov	r6, r21
                if(dist->low_gain > kilo_irlow[i]) {
    1724:	e7 e0       	ldi	r30, 0x07	; 7
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	6e cf       	rjmp	.-292    	; 0x1606 <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    172a:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
    172c:	88 e0       	ldi	r24, 0x08	; 8
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	4d cf       	rjmp	.-358    	; 0x15cc <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1732:	48 e0       	ldi	r20, 0x08	; 8
    1734:	64 2e       	mov	r6, r20
                if(dist->low_gain > kilo_irlow[i]) {
    1736:	e8 e0       	ldi	r30, 0x08	; 8
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	65 cf       	rjmp	.-310    	; 0x1606 <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    173c:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
    173e:	89 e0       	ldi	r24, 0x09	; 9
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	44 cf       	rjmp	.-376    	; 0x15cc <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1744:	39 e0       	ldi	r19, 0x09	; 9
    1746:	63 2e       	mov	r6, r19
                if(dist->low_gain > kilo_irlow[i]) {
    1748:	e9 e0       	ldi	r30, 0x09	; 9
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	5c cf       	rjmp	.-328    	; 0x1606 <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    174e:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
    1750:	8a e0       	ldi	r24, 0x0A	; 10
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	3b cf       	rjmp	.-394    	; 0x15cc <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1756:	2a e0       	ldi	r18, 0x0A	; 10
    1758:	62 2e       	mov	r6, r18
                if(dist->low_gain > kilo_irlow[i]) {
    175a:	ea e0       	ldi	r30, 0x0A	; 10
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	53 cf       	rjmp	.-346    	; 0x1606 <estimate_distance+0x3fe>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1760:	9b e0       	ldi	r25, 0x0B	; 11
    1762:	69 2e       	mov	r6, r25
                if(dist->low_gain > kilo_irlow[i]) {
    1764:	eb e0       	ldi	r30, 0x0B	; 11
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	4e cf       	rjmp	.-356    	; 0x1606 <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    176a:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
    176c:	8b e0       	ldi	r24, 0x0B	; 11
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	2d cf       	rjmp	.-422    	; 0x15cc <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1772:	8c e0       	ldi	r24, 0x0C	; 12
    1774:	68 2e       	mov	r6, r24
                if(dist->low_gain > kilo_irlow[i]) {
    1776:	ec e0       	ldi	r30, 0x0C	; 12
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	45 cf       	rjmp	.-374    	; 0x1606 <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    177c:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
    177e:	8c e0       	ldi	r24, 0x0C	; 12
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	24 cf       	rjmp	.-440    	; 0x15cc <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1784:	bd e0       	ldi	r27, 0x0D	; 13
    1786:	6b 2e       	mov	r6, r27
                if(dist->low_gain > kilo_irlow[i]) {
    1788:	ed e0       	ldi	r30, 0x0D	; 13
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	3c cf       	rjmp	.-392    	; 0x1606 <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    178e:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
    1790:	8d e0       	ldi	r24, 0x0D	; 13
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	1b cf       	rjmp	.-458    	; 0x15cc <estimate_distance+0x3c4>

00001796 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
    1796:	1f 92       	push	r1
    1798:	0f 92       	push	r0
    179a:	0f b6       	in	r0, 0x3f	; 63
    179c:	0f 92       	push	r0
    179e:	11 24       	eor	r1, r1
    17a0:	2f 93       	push	r18
    17a2:	3f 93       	push	r19
    17a4:	4f 93       	push	r20
    17a6:	5f 93       	push	r21
    17a8:	6f 93       	push	r22
    17aa:	7f 93       	push	r23
    17ac:	8f 93       	push	r24
    17ae:	9f 93       	push	r25
    17b0:	af 93       	push	r26
    17b2:	bf 93       	push	r27
    17b4:	ef 93       	push	r30
    17b6:	ff 93       	push	r31
    tx_clock += tx_increment;
    17b8:	80 91 a9 01 	lds	r24, 0x01A9
    17bc:	90 91 aa 01 	lds	r25, 0x01AA
    17c0:	20 91 a7 01 	lds	r18, 0x01A7
    17c4:	30 91 a8 01 	lds	r19, 0x01A8
    17c8:	82 0f       	add	r24, r18
    17ca:	93 1f       	adc	r25, r19
    17cc:	90 93 aa 01 	sts	0x01AA, r25
    17d0:	80 93 a9 01 	sts	0x01A9, r24
    tx_increment = 0xFF;
    17d4:	8f ef       	ldi	r24, 0xFF	; 255
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	90 93 a8 01 	sts	0x01A8, r25
    17dc:	80 93 a7 01 	sts	0x01A7, r24
    OCR0A = tx_increment;
    17e0:	8f ef       	ldi	r24, 0xFF	; 255
    17e2:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
    17e4:	80 91 85 01 	lds	r24, 0x0185
    17e8:	90 91 86 01 	lds	r25, 0x0186
    17ec:	a0 91 87 01 	lds	r26, 0x0187
    17f0:	b0 91 88 01 	lds	r27, 0x0188
    17f4:	01 96       	adiw	r24, 0x01	; 1
    17f6:	a1 1d       	adc	r26, r1
    17f8:	b1 1d       	adc	r27, r1
    17fa:	80 93 85 01 	sts	0x0185, r24
    17fe:	90 93 86 01 	sts	0x0186, r25
    1802:	a0 93 87 01 	sts	0x0187, r26
    1806:	b0 93 88 01 	sts	0x0188, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
    180a:	80 91 89 01 	lds	r24, 0x0189
    180e:	81 11       	cpse	r24, r1
    1810:	0f c0       	rjmp	.+30     	; 0x1830 <__vector_14+0x9a>
    1812:	80 91 b8 01 	lds	r24, 0x01B8
    1816:	90 91 b9 01 	lds	r25, 0x01B9
    181a:	20 91 a9 01 	lds	r18, 0x01A9
    181e:	30 91 aa 01 	lds	r19, 0x01AA
    1822:	82 17       	cp	r24, r18
    1824:	93 07       	cpc	r25, r19
    1826:	20 f4       	brcc	.+8      	; 0x1830 <__vector_14+0x9a>
    1828:	80 91 45 01 	lds	r24, 0x0145
    182c:	84 30       	cpi	r24, 0x04	; 4
    182e:	89 f0       	breq	.+34     	; 0x1852 <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
    1830:	ff 91       	pop	r31
    1832:	ef 91       	pop	r30
    1834:	bf 91       	pop	r27
    1836:	af 91       	pop	r26
    1838:	9f 91       	pop	r25
    183a:	8f 91       	pop	r24
    183c:	7f 91       	pop	r23
    183e:	6f 91       	pop	r22
    1840:	5f 91       	pop	r21
    1842:	4f 91       	pop	r20
    1844:	3f 91       	pop	r19
    1846:	2f 91       	pop	r18
    1848:	0f 90       	pop	r0
    184a:	0f be       	out	0x3f, r0	; 63
    184c:	0f 90       	pop	r0
    184e:	1f 90       	pop	r1
    1850:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
    1852:	e0 91 21 01 	lds	r30, 0x0121
    1856:	f0 91 22 01 	lds	r31, 0x0122
    185a:	09 95       	icall
        if (msg) {
    185c:	00 97       	sbiw	r24, 0x00	; 0
    185e:	41 f3       	breq	.-48     	; 0x1830 <__vector_14+0x9a>
            if (message_send(msg)) {
    1860:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <message_send>
    1864:	81 11       	cpse	r24, r1
    1866:	09 c0       	rjmp	.+18     	; 0x187a <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
    1868:	0e 94 e5 11 	call	0x23ca	; 0x23ca <rand>
    186c:	99 27       	eor	r25, r25
    186e:	90 93 a8 01 	sts	0x01A8, r25
    1872:	80 93 a7 01 	sts	0x01A7, r24
                OCR0A = tx_increment;
    1876:	87 bd       	out	0x27, r24	; 39
    1878:	db cf       	rjmp	.-74     	; 0x1830 <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
    187a:	e0 91 1f 01 	lds	r30, 0x011F
    187e:	f0 91 20 01 	lds	r31, 0x0120
    1882:	09 95       	icall
                tx_clock = 0;
    1884:	10 92 aa 01 	sts	0x01AA, r1
    1888:	10 92 a9 01 	sts	0x01A9, r1
    188c:	d1 cf       	rjmp	.-94     	; 0x1830 <__vector_14+0x9a>

0000188e <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
    188e:	80 ff       	sbrs	r24, 0
    1890:	11 c0       	rjmp	.+34     	; 0x18b4 <set_color+0x26>
        DDRD |= (1<<5);
    1892:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
    1894:	81 ff       	sbrs	r24, 1
    1896:	11 c0       	rjmp	.+34     	; 0x18ba <set_color+0x2c>
        DDRD |= (1<<4);
    1898:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
    189a:	82 ff       	sbrs	r24, 2
    189c:	11 c0       	rjmp	.+34     	; 0x18c0 <set_color+0x32>
        DDRC |= (1<<3);
    189e:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
    18a0:	83 ff       	sbrs	r24, 3
    18a2:	11 c0       	rjmp	.+34     	; 0x18c6 <set_color+0x38>
        DDRC |= (1<<2);
    18a4:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
    18a6:	84 ff       	sbrs	r24, 4
    18a8:	11 c0       	rjmp	.+34     	; 0x18cc <set_color+0x3e>
        DDRC |= (1<<5);
    18aa:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
    18ac:	85 fd       	sbrc	r24, 5
    18ae:	11 c0       	rjmp	.+34     	; 0x18d2 <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    18b0:	3c 98       	cbi	0x07, 4	; 7
    18b2:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    18b4:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
    18b6:	81 fd       	sbrc	r24, 1
    18b8:	ef cf       	rjmp	.-34     	; 0x1898 <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    18ba:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
    18bc:	82 fd       	sbrc	r24, 2
    18be:	ef cf       	rjmp	.-34     	; 0x189e <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    18c0:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
    18c2:	83 fd       	sbrc	r24, 3
    18c4:	ef cf       	rjmp	.-34     	; 0x18a4 <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    18c6:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
    18c8:	84 fd       	sbrc	r24, 4
    18ca:	ef cf       	rjmp	.-34     	; 0x18aa <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    18cc:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
    18ce:	85 ff       	sbrs	r24, 5
    18d0:	ef cf       	rjmp	.-34     	; 0x18b0 <set_color+0x22>
        DDRC |= (1<<4);
    18d2:	3c 9a       	sbi	0x07, 4	; 7
    18d4:	08 95       	ret

000018d6 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
    18d6:	1f 92       	push	r1
    18d8:	0f 92       	push	r0
    18da:	0f b6       	in	r0, 0x3f	; 63
    18dc:	0f 92       	push	r0
    18de:	11 24       	eor	r1, r1
    18e0:	8f 93       	push	r24
    18e2:	9f 93       	push	r25
    rx_timer_off();
    18e4:	10 92 81 00 	sts	0x0081, r1
    18e8:	10 92 85 00 	sts	0x0085, r1
    18ec:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	80 93 62 01 	sts	0x0162, r24
    rx_leadingbyte = 1;
    18f6:	80 93 a6 01 	sts	0x01A6, r24
    rx_busy = 0;
    18fa:	10 92 89 01 	sts	0x0189, r1
    adc_trigger_high_gain();
    18fe:	10 92 7c 00 	sts	0x007C, r1
    1902:	93 ea       	ldi	r25, 0xA3	; 163
    1904:	90 93 7a 00 	sts	0x007A, r25
    1908:	80 93 7b 00 	sts	0x007B, r24
}
    190c:	9f 91       	pop	r25
    190e:	8f 91       	pop	r24
    1910:	0f 90       	pop	r0
    1912:	0f be       	out	0x3f, r0	; 63
    1914:	0f 90       	pop	r0
    1916:	1f 90       	pop	r1
    1918:	18 95       	reti

0000191a <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
    191a:	1f 92       	push	r1
    191c:	0f 92       	push	r0
    191e:	0f b6       	in	r0, 0x3f	; 63
    1920:	0f 92       	push	r0
    1922:	11 24       	eor	r1, r1
    1924:	2f 93       	push	r18
    1926:	3f 93       	push	r19
    1928:	4f 93       	push	r20
    192a:	5f 93       	push	r21
    192c:	6f 93       	push	r22
    192e:	7f 93       	push	r23
    1930:	8f 93       	push	r24
    1932:	9f 93       	push	r25
    1934:	af 93       	push	r26
    1936:	bf 93       	push	r27
    1938:	cf 93       	push	r28
    193a:	df 93       	push	r29
    193c:	ef 93       	push	r30
    193e:	ff 93       	push	r31
    uint16_t timer = TCNT1;
    1940:	20 91 84 00 	lds	r18, 0x0084
    1944:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
    1948:	41 e0       	ldi	r20, 0x01	; 1
    194a:	40 93 89 01 	sts	0x0189, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
    194e:	80 91 62 01 	lds	r24, 0x0162
    1952:	88 23       	and	r24, r24
    1954:	a9 f1       	breq	.+106    	; 0x19c0 <__vector_23+0xa6>
        rx_timer_on();
    1956:	10 92 85 00 	sts	0x0085, r1
    195a:	10 92 84 00 	sts	0x0084, r1
    195e:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
    1962:	10 92 ba 01 	sts	0x01BA, r1
        rx_leadingbit = 0;
    1966:	10 92 62 01 	sts	0x0162, r1
        if (rx_leadingbyte) {
    196a:	80 91 a6 01 	lds	r24, 0x01A6
    196e:	88 23       	and	r24, r24
    1970:	a1 f0       	breq	.+40     	; 0x199a <__vector_23+0x80>
            adc_finish_conversion();
    1972:	80 91 7a 00 	lds	r24, 0x007A
    1976:	86 fd       	sbrc	r24, 6
    1978:	fc cf       	rjmp	.-8      	; 0x1972 <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
    197a:	80 91 78 00 	lds	r24, 0x0078
    197e:	90 91 79 00 	lds	r25, 0x0079
    1982:	90 93 84 01 	sts	0x0184, r25
    1986:	80 93 83 01 	sts	0x0183, r24
            adc_trigger_low_gain();
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	80 93 7c 00 	sts	0x007C, r24
    1990:	93 ea       	ldi	r25, 0xA3	; 163
    1992:	90 93 7a 00 	sts	0x007A, r25
    1996:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
    199a:	ff 91       	pop	r31
    199c:	ef 91       	pop	r30
    199e:	df 91       	pop	r29
    19a0:	cf 91       	pop	r28
    19a2:	bf 91       	pop	r27
    19a4:	af 91       	pop	r26
    19a6:	9f 91       	pop	r25
    19a8:	8f 91       	pop	r24
    19aa:	7f 91       	pop	r23
    19ac:	6f 91       	pop	r22
    19ae:	5f 91       	pop	r21
    19b0:	4f 91       	pop	r20
    19b2:	3f 91       	pop	r19
    19b4:	2f 91       	pop	r18
    19b6:	0f 90       	pop	r0
    19b8:	0f be       	out	0x3f, r0	; 63
    19ba:	0f 90       	pop	r0
    19bc:	1f 90       	pop	r1
    19be:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    19c0:	c9 01       	movw	r24, r18
    19c2:	87 58       	subi	r24, 0x87	; 135
    19c4:	91 09       	sbc	r25, r1
    19c6:	84 37       	cpi	r24, 0x74	; 116
    19c8:	99 40       	sbci	r25, 0x09	; 9
    19ca:	08 f0       	brcs	.+2      	; 0x19ce <__vector_23+0xb4>
    19cc:	4f c0       	rjmp	.+158    	; 0x1a6c <__vector_23+0x152>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    19ce:	26 58       	subi	r18, 0x86	; 134
    19d0:	31 09       	sbc	r19, r1
    19d2:	a4 ef       	ldi	r26, 0xF4	; 244
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <__umulhisi3>
    19da:	aa 27       	eor	r26, r26
    19dc:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
    19de:	88 30       	cpi	r24, 0x08	; 8
    19e0:	08 f4       	brcc	.+2      	; 0x19e4 <__vector_23+0xca>
    19e2:	7b c0       	rjmp	.+246    	; 0x1ada <__vector_23+0x1c0>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    19e4:	40 93 62 01 	sts	0x0162, r20
                if (rx_leadingbyte) {
    19e8:	80 91 a6 01 	lds	r24, 0x01A6
    19ec:	81 11       	cpse	r24, r1
    19ee:	52 c0       	rjmp	.+164    	; 0x1a94 <__vector_23+0x17a>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    19f0:	80 91 80 01 	lds	r24, 0x0180
    19f4:	e8 2f       	mov	r30, r24
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	e4 55       	subi	r30, 0x54	; 84
    19fa:	fe 4f       	sbci	r31, 0xFE	; 254
    19fc:	90 91 ba 01 	lds	r25, 0x01BA
    1a00:	90 83       	st	Z, r25
                    rx_byteindex++;
    1a02:	8f 5f       	subi	r24, 0xFF	; 255
    1a04:	80 93 80 01 	sts	0x0180, r24
                    if (rx_byteindex == sizeof(message_t)) {
    1a08:	8c 30       	cpi	r24, 0x0C	; 12
    1a0a:	39 f6       	brne	.-114    	; 0x199a <__vector_23+0x80>
                        rx_timer_off();
    1a0c:	10 92 81 00 	sts	0x0081, r1
    1a10:	10 92 85 00 	sts	0x0085, r1
    1a14:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1a18:	40 93 a6 01 	sts	0x01A6, r20
                        rx_busy = 0;
    1a1c:	10 92 89 01 	sts	0x0189, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    1a20:	c0 91 b6 01 	lds	r28, 0x01B6
    1a24:	d0 91 b7 01 	lds	r29, 0x01B7
    1a28:	8c ea       	ldi	r24, 0xAC	; 172
    1a2a:	91 e0       	ldi	r25, 0x01	; 1
    1a2c:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <message_crc>
    1a30:	c8 17       	cp	r28, r24
    1a32:	d9 07       	cpc	r29, r25
    1a34:	09 f0       	breq	.+2      	; 0x1a38 <__vector_23+0x11e>
    1a36:	b1 cf       	rjmp	.-158    	; 0x199a <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    1a38:	80 91 b5 01 	lds	r24, 0x01B5
    1a3c:	87 ff       	sbrs	r24, 7
    1a3e:	5e c0       	rjmp	.+188    	; 0x1afc <__vector_23+0x1e2>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    1a40:	98 e7       	ldi	r25, 0x78	; 120
    1a42:	98 0f       	add	r25, r24
    1a44:	93 30       	cpi	r25, 0x03	; 3
    1a46:	30 f0       	brcs	.+12     	; 0x1a54 <__vector_23+0x13a>
        motors_off();
    1a48:	53 98       	cbi	0x0a, 3	; 10
    1a4a:	23 98       	cbi	0x04, 3	; 4
    1a4c:	10 92 b4 00 	sts	0x00B4, r1
    1a50:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	fc 01       	movw	r30, r24
    1a58:	e0 58       	subi	r30, 0x80	; 128
    1a5a:	f1 09       	sbc	r31, r1
    1a5c:	eb 30       	cpi	r30, 0x0B	; 11
    1a5e:	f1 05       	cpc	r31, r1
    1a60:	08 f0       	brcs	.+2      	; 0x1a64 <__vector_23+0x14a>
    1a62:	9b cf       	rjmp	.-202    	; 0x199a <__vector_23+0x80>
    1a64:	e5 5c       	subi	r30, 0xC5	; 197
    1a66:	ff 4f       	sbci	r31, 0xFF	; 255
    1a68:	0c 94 57 0f 	jmp	0x1eae	; 0x1eae <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    1a6c:	10 92 81 00 	sts	0x0081, r1
    1a70:	10 92 85 00 	sts	0x0085, r1
    1a74:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    1a78:	40 93 62 01 	sts	0x0162, r20
            rx_leadingbyte = 1;
    1a7c:	40 93 a6 01 	sts	0x01A6, r20
            rx_busy = 0;
    1a80:	10 92 89 01 	sts	0x0189, r1
            adc_trigger_high_gain();
    1a84:	10 92 7c 00 	sts	0x007C, r1
    1a88:	83 ea       	ldi	r24, 0xA3	; 163
    1a8a:	80 93 7a 00 	sts	0x007A, r24
    1a8e:	40 93 7b 00 	sts	0x007B, r20
    1a92:	83 cf       	rjmp	.-250    	; 0x199a <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    1a94:	80 91 7a 00 	lds	r24, 0x007A
    1a98:	86 fd       	sbrc	r24, 6
    1a9a:	fc cf       	rjmp	.-8      	; 0x1a94 <__vector_23+0x17a>
                    rx_dist.low_gain = ADCW;
    1a9c:	80 91 78 00 	lds	r24, 0x0078
    1aa0:	90 91 79 00 	lds	r25, 0x0079
    1aa4:	90 93 82 01 	sts	0x0182, r25
    1aa8:	80 93 81 01 	sts	0x0181, r24
                    adc_trigger_high_gain();
    1aac:	10 92 7c 00 	sts	0x007C, r1
    1ab0:	83 ea       	ldi	r24, 0xA3	; 163
    1ab2:	80 93 7a 00 	sts	0x007A, r24
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    1abc:	90 91 ba 01 	lds	r25, 0x01BA
    1ac0:	99 23       	and	r25, r25
    1ac2:	b9 f0       	breq	.+46     	; 0x1af2 <__vector_23+0x1d8>
                        rx_timer_off();
    1ac4:	10 92 81 00 	sts	0x0081, r1
    1ac8:	10 92 85 00 	sts	0x0085, r1
    1acc:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1ad0:	80 93 a6 01 	sts	0x01A6, r24
                        rx_busy = 0;
    1ad4:	10 92 89 01 	sts	0x0189, r1
    1ad8:	60 cf       	rjmp	.-320    	; 0x199a <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    1ada:	21 e0       	ldi	r18, 0x01	; 1
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	01 c0       	rjmp	.+2      	; 0x1ae2 <__vector_23+0x1c8>
    1ae0:	22 0f       	add	r18, r18
    1ae2:	8a 95       	dec	r24
    1ae4:	ea f7       	brpl	.-6      	; 0x1ae0 <__vector_23+0x1c6>
    1ae6:	80 91 ba 01 	lds	r24, 0x01BA
    1aea:	82 2b       	or	r24, r18
    1aec:	80 93 ba 01 	sts	0x01BA, r24
    1af0:	54 cf       	rjmp	.-344    	; 0x199a <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    1af2:	10 92 a6 01 	sts	0x01A6, r1
                        rx_byteindex = 0;
    1af6:	10 92 80 01 	sts	0x0180, r1
    1afa:	4f cf       	rjmp	.-354    	; 0x199a <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    1afc:	e0 91 23 01 	lds	r30, 0x0123
    1b00:	f0 91 24 01 	lds	r31, 0x0124
    1b04:	61 e8       	ldi	r22, 0x81	; 129
    1b06:	71 e0       	ldi	r23, 0x01	; 1
    1b08:	8c ea       	ldi	r24, 0xAC	; 172
    1b0a:	91 e0       	ldi	r25, 0x01	; 1
    1b0c:	09 95       	icall
    1b0e:	45 cf       	rjmp	.-374    	; 0x199a <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1b10:	80 91 ac 01 	lds	r24, 0x01AC
    1b14:	82 30       	cpi	r24, 0x02	; 2
    1b16:	09 f4       	brne	.+2      	; 0x1b1a <__vector_23+0x200>
    1b18:	dc c0       	rjmp	.+440    	; 0x1cd2 <__vector_23+0x3b8>
    1b1a:	08 f4       	brcc	.+2      	; 0x1b1e <__vector_23+0x204>
    1b1c:	b9 c0       	rjmp	.+370    	; 0x1c90 <__vector_23+0x376>
    1b1e:	83 30       	cpi	r24, 0x03	; 3
    1b20:	09 f4       	brne	.+2      	; 0x1b24 <__vector_23+0x20a>
    1b22:	c5 c0       	rjmp	.+394    	; 0x1cae <__vector_23+0x394>
    1b24:	84 30       	cpi	r24, 0x04	; 4
    1b26:	09 f0       	breq	.+2      	; 0x1b2a <__vector_23+0x210>
    1b28:	b0 c0       	rjmp	.+352    	; 0x1c8a <__vector_23+0x370>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1b2a:	80 91 43 01 	lds	r24, 0x0143
    1b2e:	90 91 b2 01 	lds	r25, 0x01B2
    1b32:	83 30       	cpi	r24, 0x03	; 3
    1b34:	09 f4       	brne	.+2      	; 0x1b38 <__vector_23+0x21e>
    1b36:	e2 c0       	rjmp	.+452    	; 0x1cfc <__vector_23+0x3e2>
    1b38:	80 91 b1 01 	lds	r24, 0x01B1
                        prev_motion = MOVE_STOP;
    1b3c:	10 92 44 01 	sts	0x0144, r1
                        cur_motion = MOVE_STRAIGHT;
    1b40:	23 e0       	ldi	r18, 0x03	; 3
    1b42:	20 93 43 01 	sts	0x0143, r18
                        kilo_straight_left = calibmsg->straight_left;
    1b46:	80 93 bd 01 	sts	0x01BD, r24
                        kilo_straight_right = calibmsg->straight_right;
    1b4a:	90 93 be 01 	sts	0x01BE, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1b4e:	80 91 45 01 	lds	r24, 0x0145
    1b52:	86 30       	cpi	r24, 0x06	; 6
    1b54:	09 f4       	brne	.+2      	; 0x1b58 <__vector_23+0x23e>
    1b56:	21 cf       	rjmp	.-446    	; 0x199a <__vector_23+0x80>
                motors_on();
    1b58:	53 9a       	sbi	0x0a, 3	; 10
    1b5a:	23 9a       	sbi	0x04, 3	; 4
    1b5c:	10 92 b4 00 	sts	0x00B4, r1
    1b60:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    1b64:	86 e0       	ldi	r24, 0x06	; 6
    1b66:	80 93 45 01 	sts	0x0145, r24
    1b6a:	17 cf       	rjmp	.-466    	; 0x199a <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    1b6c:	80 91 45 01 	lds	r24, 0x0145
    1b70:	86 30       	cpi	r24, 0x06	; 6
    1b72:	99 f0       	breq	.+38     	; 0x1b9a <__vector_23+0x280>
                motors_on();
    1b74:	53 9a       	sbi	0x0a, 3	; 10
    1b76:	23 9a       	sbi	0x04, 3	; 4
    1b78:	10 92 b4 00 	sts	0x00B4, r1
    1b7c:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1b80:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1b82:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1b84:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    1b86:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1b88:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1b8a:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    1b8c:	10 92 43 01 	sts	0x0143, r1
    1b90:	10 92 44 01 	sts	0x0144, r1
                kilo_state = MOVING;
    1b94:	86 e0       	ldi	r24, 0x06	; 6
    1b96:	80 93 45 01 	sts	0x0145, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	00 90 ac 01 	lds	r0, 0x01AC
    1ba2:	02 c0       	rjmp	.+4      	; 0x1ba8 <__vector_23+0x28e>
    1ba4:	88 0f       	add	r24, r24
    1ba6:	99 1f       	adc	r25, r25
    1ba8:	0a 94       	dec	r0
    1baa:	e2 f7       	brpl	.-8      	; 0x1ba4 <__vector_23+0x28a>
    1bac:	20 91 bb 01 	lds	r18, 0x01BB
    1bb0:	30 91 bc 01 	lds	r19, 0x01BC
    1bb4:	82 23       	and	r24, r18
    1bb6:	93 23       	and	r25, r19
    1bb8:	89 2b       	or	r24, r25
    1bba:	09 f0       	breq	.+2      	; 0x1bbe <__vector_23+0x2a4>
    1bbc:	86 c0       	rjmp	.+268    	; 0x1cca <__vector_23+0x3b0>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    1bbe:	10 92 43 01 	sts	0x0143, r1
    1bc2:	eb ce       	rjmp	.-554    	; 0x199a <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	80 93 45 01 	sts	0x0145, r24
    1bca:	e7 ce       	rjmp	.-562    	; 0x199a <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    1bcc:	e0 e0       	ldi	r30, 0x00	; 0
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    1bd2:	80 91 6e 00 	lds	r24, 0x006E
    1bd6:	8d 7f       	andi	r24, 0xFD	; 253
    1bd8:	80 93 6e 00 	sts	0x006E, r24
    1bdc:	16 bc       	out	0x26, r1	; 38
            bootload();
    1bde:	e0 e0       	ldi	r30, 0x00	; 0
    1be0:	f0 e7       	ldi	r31, 0x70	; 112
    1be2:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    1be4:	10 92 45 01 	sts	0x0145, r1
    1be8:	d8 ce       	rjmp	.-592    	; 0x199a <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    1bea:	82 e0       	ldi	r24, 0x02	; 2
    1bec:	80 93 45 01 	sts	0x0145, r24
    1bf0:	d4 ce       	rjmp	.-600    	; 0x199a <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    1bf2:	85 e0       	ldi	r24, 0x05	; 5
    1bf4:	80 93 45 01 	sts	0x0145, r24
    1bf8:	d0 ce       	rjmp	.-608    	; 0x199a <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    1bfa:	80 91 45 01 	lds	r24, 0x0145
    1bfe:	83 30       	cpi	r24, 0x03	; 3
    1c00:	09 f4       	brne	.+2      	; 0x1c04 <__vector_23+0x2ea>
    1c02:	cb ce       	rjmp	.-618    	; 0x199a <__vector_23+0x80>
    1c04:	80 91 45 01 	lds	r24, 0x0145
    1c08:	84 30       	cpi	r24, 0x04	; 4
    1c0a:	09 f4       	brne	.+2      	; 0x1c0e <__vector_23+0x2f4>
    1c0c:	c6 ce       	rjmp	.-628    	; 0x199a <__vector_23+0x80>
                motors_on();
    1c0e:	53 9a       	sbi	0x0a, 3	; 10
    1c10:	23 9a       	sbi	0x04, 3	; 4
    1c12:	10 92 b4 00 	sts	0x00B4, r1
    1c16:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    1c1a:	83 e0       	ldi	r24, 0x03	; 3
    1c1c:	80 93 45 01 	sts	0x0145, r24
    1c20:	bc ce       	rjmp	.-648    	; 0x199a <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    1c22:	80 91 45 01 	lds	r24, 0x0145
    1c26:	86 30       	cpi	r24, 0x06	; 6
    1c28:	09 f0       	breq	.+2      	; 0x1c2c <__vector_23+0x312>
    1c2a:	b7 ce       	rjmp	.-658    	; 0x199a <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    1c2c:	60 91 bb 01 	lds	r22, 0x01BB
    1c30:	80 eb       	ldi	r24, 0xB0	; 176
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	0e 94 fd 11 	call	0x23fa	; 0x23fa <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    1c38:	60 91 bc 01 	lds	r22, 0x01BC
    1c3c:	81 eb       	ldi	r24, 0xB1	; 177
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	0e 94 fd 11 	call	0x23fa	; 0x23fa <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    1c44:	60 91 bf 01 	lds	r22, 0x01BF
    1c48:	85 e0       	ldi	r24, 0x05	; 5
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	0e 94 fd 11 	call	0x23fa	; 0x23fa <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    1c50:	60 91 ab 01 	lds	r22, 0x01AB
    1c54:	89 e0       	ldi	r24, 0x09	; 9
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	0e 94 fd 11 	call	0x23fa	; 0x23fa <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    1c5c:	60 91 bd 01 	lds	r22, 0x01BD
    1c60:	8c e0       	ldi	r24, 0x0C	; 12
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	0e 94 fd 11 	call	0x23fa	; 0x23fa <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    1c68:	60 91 be 01 	lds	r22, 0x01BE
    1c6c:	84 e1       	ldi	r24, 0x14	; 20
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	0e 94 fd 11 	call	0x23fa	; 0x23fa <__eewr_byte_m328p>
                        motors_off();
    1c74:	53 98       	cbi	0x0a, 3	; 10
    1c76:	23 98       	cbi	0x04, 3	; 4
    1c78:	10 92 b4 00 	sts	0x00B4, r1
    1c7c:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	80 93 45 01 	sts	0x0145, r24
    1c86:	80 91 ac 01 	lds	r24, 0x01AC
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1c8a:	81 11       	cpse	r24, r1
    1c8c:	60 cf       	rjmp	.-320    	; 0x1b4e <__vector_23+0x234>
    1c8e:	85 ce       	rjmp	.-758    	; 0x199a <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1c90:	88 23       	and	r24, r24
    1c92:	39 f2       	breq	.-114    	; 0x1c22 <__vector_23+0x308>
    1c94:	81 30       	cpi	r24, 0x01	; 1
    1c96:	c9 f7       	brne	.-14     	; 0x1c8a <__vector_23+0x370>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    1c98:	80 91 ad 01 	lds	r24, 0x01AD
    1c9c:	90 91 ae 01 	lds	r25, 0x01AE
    1ca0:	90 93 bc 01 	sts	0x01BC, r25
    1ca4:	80 93 bb 01 	sts	0x01BB, r24
                    cur_motion = MOVE_STOP;
    1ca8:	10 92 43 01 	sts	0x0143, r1
    1cac:	50 cf       	rjmp	.-352    	; 0x1b4e <__vector_23+0x234>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1cae:	80 91 43 01 	lds	r24, 0x0143
    1cb2:	82 30       	cpi	r24, 0x02	; 2
    1cb4:	71 f1       	breq	.+92     	; 0x1d12 <__vector_23+0x3f8>
    1cb6:	80 91 b0 01 	lds	r24, 0x01B0
                        prev_motion = MOVE_STOP;
    1cba:	10 92 44 01 	sts	0x0144, r1
                        cur_motion = MOVE_RIGHT;
    1cbe:	92 e0       	ldi	r25, 0x02	; 2
    1cc0:	90 93 43 01 	sts	0x0143, r25
                        kilo_turn_right = calibmsg->turn_right;
    1cc4:	80 93 ab 01 	sts	0x01AB, r24
    1cc8:	42 cf       	rjmp	.-380    	; 0x1b4e <__vector_23+0x234>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	80 93 43 01 	sts	0x0143, r24
    1cd0:	64 ce       	rjmp	.-824    	; 0x199a <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1cd2:	80 91 43 01 	lds	r24, 0x0143
    1cd6:	81 30       	cpi	r24, 0x01	; 1
    1cd8:	51 f0       	breq	.+20     	; 0x1cee <__vector_23+0x3d4>
    1cda:	80 91 af 01 	lds	r24, 0x01AF
                        prev_motion = MOVE_STOP;
    1cde:	10 92 44 01 	sts	0x0144, r1
                        cur_motion = MOVE_LEFT;
    1ce2:	91 e0       	ldi	r25, 0x01	; 1
    1ce4:	90 93 43 01 	sts	0x0143, r25
                        kilo_turn_left = calibmsg->turn_left;
    1ce8:	80 93 bf 01 	sts	0x01BF, r24
    1cec:	30 cf       	rjmp	.-416    	; 0x1b4e <__vector_23+0x234>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1cee:	80 91 af 01 	lds	r24, 0x01AF
    1cf2:	90 91 bf 01 	lds	r25, 0x01BF
    1cf6:	89 13       	cpse	r24, r25
    1cf8:	f2 cf       	rjmp	.-28     	; 0x1cde <__vector_23+0x3c4>
    1cfa:	29 cf       	rjmp	.-430    	; 0x1b4e <__vector_23+0x234>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1cfc:	80 91 be 01 	lds	r24, 0x01BE
    1d00:	98 13       	cpse	r25, r24
    1d02:	1a cf       	rjmp	.-460    	; 0x1b38 <__vector_23+0x21e>
    1d04:	80 91 b1 01 	lds	r24, 0x01B1
    1d08:	20 91 bd 01 	lds	r18, 0x01BD
    1d0c:	82 13       	cpse	r24, r18
    1d0e:	16 cf       	rjmp	.-468    	; 0x1b3c <__vector_23+0x222>
    1d10:	1e cf       	rjmp	.-452    	; 0x1b4e <__vector_23+0x234>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1d12:	80 91 b0 01 	lds	r24, 0x01B0
    1d16:	90 91 ab 01 	lds	r25, 0x01AB
    1d1a:	89 13       	cpse	r24, r25
    1d1c:	ce cf       	rjmp	.-100    	; 0x1cba <__vector_23+0x3a0>
    1d1e:	17 cf       	rjmp	.-466    	; 0x1b4e <__vector_23+0x234>

00001d20 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    1d20:	fc 01       	movw	r30, r24
    1d22:	2a e0       	ldi	r18, 0x0A	; 10
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    1d24:	8f ef       	ldi	r24, 0xFF	; 255
    1d26:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    1d28:	31 91       	ld	r19, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    1d2a:	83 27       	eor	r24, r19
    1d2c:	08 2e       	mov	r0, r24
    1d2e:	82 95       	swap	r24
    1d30:	80 7f       	andi	r24, 0xF0	; 240
    1d32:	80 25       	eor	r24, r0
    1d34:	09 2e       	mov	r0, r25
    1d36:	98 2f       	mov	r25, r24
    1d38:	82 95       	swap	r24
    1d3a:	8f 70       	andi	r24, 0x0F	; 15
    1d3c:	08 26       	eor	r0, r24
    1d3e:	86 95       	lsr	r24
    1d40:	98 27       	eor	r25, r24
    1d42:	89 27       	eor	r24, r25
    1d44:	88 0f       	add	r24, r24
    1d46:	88 0f       	add	r24, r24
    1d48:	88 0f       	add	r24, r24
    1d4a:	80 25       	eor	r24, r0
    1d4c:	21 50       	subi	r18, 0x01	; 1

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    1d4e:	61 f7       	brne	.-40     	; 0x1d28 <message_crc+0x8>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    1d50:	08 95       	ret

00001d52 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    1d52:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    1d54:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    1d56:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    1d58:	20 91 7f 01 	lds	r18, 0x017F
    or tmpreg1, ddrreg
    1d5c:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    1d5e:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    1d60:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1d62:	30 91 7f 01 	lds	r19, 0x017F
    1d66:	20 30       	cpi	r18, 0x00	; 0
    1d68:	29 f0       	breq	.+10     	; 0x1d74 <message_send+0x22>
    1d6a:	00 00       	nop
    1d6c:	25 b1       	in	r18, 0x05	; 5
    1d6e:	23 2b       	or	r18, r19
    1d70:	25 b9       	out	0x05, r18	; 5
    1d72:	04 c0       	rjmp	.+8      	; 0x1d7c <message_send+0x2a>
    1d74:	00 00       	nop
    1d76:	00 00       	nop
    1d78:	00 00       	nop
    1d7a:	00 c0       	rjmp	.+0      	; 0x1d7c <message_send+0x2a>
    1d7c:	00 00       	nop
    1d7e:	00 00       	nop
    1d80:	00 00       	nop
    1d82:	30 95       	com	r19
    1d84:	25 b1       	in	r18, 0x05	; 5
    1d86:	23 23       	and	r18, r19
    1d88:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    1d8a:	2e ea       	ldi	r18, 0xAE	; 174
    1d8c:	2a 95       	dec	r18
    1d8e:	f1 f7       	brne	.-4      	; 0x1d8c <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    1d90:	2b ee       	ldi	r18, 0xEB	; 235

00001d92 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    1d92:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    1d94:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1d96:	0a c0       	rjmp	.+20     	; 0x1dac <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1d98:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1d9a:	30 91 7f 01 	lds	r19, 0x017F
    com tmpreg2
    1d9e:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1da0:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1da2:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1da4:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1da6:	0f be       	out	0x3f, r0	; 63
    return 0
    1da8:	80 e0       	ldi	r24, 0x00	; 0
    1daa:	08 95       	ret

00001dac <nocollision>:
nocollision:
    nop
    1dac:	00 00       	nop
    dec tmpreg1
    1dae:	2a 95       	dec	r18
    brne checkcollision
    1db0:	81 f7       	brne	.-32     	; 0x1d92 <checkcollision>

    ldi tmpreg1, 0x01
    1db2:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1db4:	30 91 7f 01 	lds	r19, 0x017F
    1db8:	20 30       	cpi	r18, 0x00	; 0
    1dba:	29 f0       	breq	.+10     	; 0x1dc6 <nocollision+0x1a>
    1dbc:	00 00       	nop
    1dbe:	25 b1       	in	r18, 0x05	; 5
    1dc0:	23 2b       	or	r18, r19
    1dc2:	25 b9       	out	0x05, r18	; 5
    1dc4:	04 c0       	rjmp	.+8      	; 0x1dce <nocollision+0x22>
    1dc6:	00 00       	nop
    1dc8:	00 00       	nop
    1dca:	00 00       	nop
    1dcc:	00 c0       	rjmp	.+0      	; 0x1dce <nocollision+0x22>
    1dce:	00 00       	nop
    1dd0:	00 00       	nop
    1dd2:	00 00       	nop
    1dd4:	30 95       	com	r19
    1dd6:	25 b1       	in	r18, 0x05	; 5
    1dd8:	23 23       	and	r18, r19
    1dda:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    1ddc:	00 00       	nop
    1dde:	24 e5       	ldi	r18, 0x54	; 84
    1de0:	2a 95       	dec	r18
    1de2:	f1 f7       	brne	.-4      	; 0x1de0 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    1de4:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    1de6:	8c e0       	ldi	r24, 0x0C	; 12

00001de8 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    1de8:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    1dea:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    1dec:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    1dee:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    1df0:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    1df2:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    1df4:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    1df6:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    1df8:	50 e0       	ldi	r21, 0x00	; 0

00001dfa <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    1dfa:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    1dfc:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    1dfe:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    1e00:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    1e02:	30 91 7f 01 	lds	r19, 0x017F
    1e06:	20 30       	cpi	r18, 0x00	; 0
    1e08:	29 f0       	breq	.+10     	; 0x1e14 <sendbit+0x1a>
    1e0a:	00 00       	nop
    1e0c:	25 b1       	in	r18, 0x05	; 5
    1e0e:	23 2b       	or	r18, r19
    1e10:	25 b9       	out	0x05, r18	; 5
    1e12:	04 c0       	rjmp	.+8      	; 0x1e1c <sendbit+0x22>
    1e14:	00 00       	nop
    1e16:	00 00       	nop
    1e18:	00 00       	nop
    1e1a:	00 c0       	rjmp	.+0      	; 0x1e1c <sendbit+0x22>
    1e1c:	00 00       	nop
    1e1e:	00 00       	nop
    1e20:	00 00       	nop
    1e22:	30 95       	com	r19
    1e24:	25 b1       	in	r18, 0x05	; 5
    1e26:	23 23       	and	r18, r19
    1e28:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    1e2a:	00 00       	nop
    1e2c:	21 e5       	ldi	r18, 0x51	; 81
    1e2e:	2a 95       	dec	r18
    1e30:	f1 f7       	brne	.-4      	; 0x1e2e <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    1e32:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    1e34:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    1e36:	9a 95       	dec	r25
    brne sendbit
    1e38:	01 f7       	brne	.-64     	; 0x1dfa <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    1e3a:	8a 95       	dec	r24
    brne sendbyte
    1e3c:	a9 f6       	brne	.-86     	; 0x1de8 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    1e3e:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    1e40:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    1e42:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1e44:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1e46:	30 91 7f 01 	lds	r19, 0x017F
    com tmpreg2
    1e4a:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1e4c:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1e4e:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1e50:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1e52:	0f be       	out	0x3f, r0	; 63
    return 1
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	08 95       	ret

00001e58 <main>:



int main()
{
    kilo_init();
    1e58:	0e 94 c0 05 	call	0xb80	; 0xb80 <kilo_init>
    kilo_message_rx = message_rx;
    1e5c:	8c ec       	ldi	r24, 0xCC	; 204
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	90 93 24 01 	sts	0x0124, r25
    1e64:	80 93 23 01 	sts	0x0123, r24
    kilo_message_tx = message_tx;
    1e68:	81 eb       	ldi	r24, 0xB1	; 177
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	90 93 22 01 	sts	0x0122, r25
    1e70:	80 93 21 01 	sts	0x0121, r24
    kilo_start(setup, loop);
    1e74:	61 e8       	ldi	r22, 0x81	; 129
    1e76:	74 e0       	ldi	r23, 0x04	; 4
    1e78:	8e e6       	ldi	r24, 0x6E	; 110
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	0e 94 b9 06 	call	0xd72	; 0xd72 <kilo_start>

    return 0;
}
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	08 95       	ret

00001e86 <__divmodhi4>:
    1e86:	97 fb       	bst	r25, 7
    1e88:	07 2e       	mov	r0, r23
    1e8a:	16 f4       	brtc	.+4      	; 0x1e90 <__divmodhi4+0xa>
    1e8c:	00 94       	com	r0
    1e8e:	07 d0       	rcall	.+14     	; 0x1e9e <__divmodhi4_neg1>
    1e90:	77 fd       	sbrc	r23, 7
    1e92:	09 d0       	rcall	.+18     	; 0x1ea6 <__divmodhi4_neg2>
    1e94:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__udivmodhi4>
    1e98:	07 fc       	sbrc	r0, 7
    1e9a:	05 d0       	rcall	.+10     	; 0x1ea6 <__divmodhi4_neg2>
    1e9c:	3e f4       	brtc	.+14     	; 0x1eac <__divmodhi4_exit>

00001e9e <__divmodhi4_neg1>:
    1e9e:	90 95       	com	r25
    1ea0:	81 95       	neg	r24
    1ea2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ea4:	08 95       	ret

00001ea6 <__divmodhi4_neg2>:
    1ea6:	70 95       	com	r23
    1ea8:	61 95       	neg	r22
    1eaa:	7f 4f       	sbci	r23, 0xFF	; 255

00001eac <__divmodhi4_exit>:
    1eac:	08 95       	ret

00001eae <__tablejump2__>:
    1eae:	ee 0f       	add	r30, r30
    1eb0:	ff 1f       	adc	r31, r31

00001eb2 <__tablejump__>:
    1eb2:	05 90       	lpm	r0, Z+
    1eb4:	f4 91       	lpm	r31, Z
    1eb6:	e0 2d       	mov	r30, r0
    1eb8:	09 94       	ijmp

00001eba <__umulhisi3>:
    1eba:	a2 9f       	mul	r26, r18
    1ebc:	b0 01       	movw	r22, r0
    1ebe:	b3 9f       	mul	r27, r19
    1ec0:	c0 01       	movw	r24, r0
    1ec2:	a3 9f       	mul	r26, r19
    1ec4:	70 0d       	add	r23, r0
    1ec6:	81 1d       	adc	r24, r1
    1ec8:	11 24       	eor	r1, r1
    1eca:	91 1d       	adc	r25, r1
    1ecc:	b2 9f       	mul	r27, r18
    1ece:	70 0d       	add	r23, r0
    1ed0:	81 1d       	adc	r24, r1
    1ed2:	11 24       	eor	r1, r1
    1ed4:	91 1d       	adc	r25, r1
    1ed6:	08 95       	ret

00001ed8 <__udivmodhi4>:
    1ed8:	aa 1b       	sub	r26, r26
    1eda:	bb 1b       	sub	r27, r27
    1edc:	51 e1       	ldi	r21, 0x11	; 17
    1ede:	07 c0       	rjmp	.+14     	; 0x1eee <__udivmodhi4_ep>

00001ee0 <__udivmodhi4_loop>:
    1ee0:	aa 1f       	adc	r26, r26
    1ee2:	bb 1f       	adc	r27, r27
    1ee4:	a6 17       	cp	r26, r22
    1ee6:	b7 07       	cpc	r27, r23
    1ee8:	10 f0       	brcs	.+4      	; 0x1eee <__udivmodhi4_ep>
    1eea:	a6 1b       	sub	r26, r22
    1eec:	b7 0b       	sbc	r27, r23

00001eee <__udivmodhi4_ep>:
    1eee:	88 1f       	adc	r24, r24
    1ef0:	99 1f       	adc	r25, r25
    1ef2:	5a 95       	dec	r21
    1ef4:	a9 f7       	brne	.-22     	; 0x1ee0 <__udivmodhi4_loop>
    1ef6:	80 95       	com	r24
    1ef8:	90 95       	com	r25
    1efa:	bc 01       	movw	r22, r24
    1efc:	cd 01       	movw	r24, r26
    1efe:	08 95       	ret

00001f00 <__subsf3>:
    1f00:	50 58       	subi	r21, 0x80	; 128

00001f02 <__addsf3>:
    1f02:	bb 27       	eor	r27, r27
    1f04:	aa 27       	eor	r26, r26
    1f06:	0e d0       	rcall	.+28     	; 0x1f24 <__addsf3x>
    1f08:	4d c1       	rjmp	.+666    	; 0x21a4 <__fp_round>
    1f0a:	3e d1       	rcall	.+636    	; 0x2188 <__fp_pscA>
    1f0c:	30 f0       	brcs	.+12     	; 0x1f1a <__addsf3+0x18>
    1f0e:	43 d1       	rcall	.+646    	; 0x2196 <__fp_pscB>
    1f10:	20 f0       	brcs	.+8      	; 0x1f1a <__addsf3+0x18>
    1f12:	31 f4       	brne	.+12     	; 0x1f20 <__addsf3+0x1e>
    1f14:	9f 3f       	cpi	r25, 0xFF	; 255
    1f16:	11 f4       	brne	.+4      	; 0x1f1c <__addsf3+0x1a>
    1f18:	1e f4       	brtc	.+6      	; 0x1f20 <__addsf3+0x1e>
    1f1a:	33 c1       	rjmp	.+614    	; 0x2182 <__fp_nan>
    1f1c:	0e f4       	brtc	.+2      	; 0x1f20 <__addsf3+0x1e>
    1f1e:	e0 95       	com	r30
    1f20:	e7 fb       	bst	r30, 7
    1f22:	29 c1       	rjmp	.+594    	; 0x2176 <__fp_inf>

00001f24 <__addsf3x>:
    1f24:	e9 2f       	mov	r30, r25
    1f26:	4f d1       	rcall	.+670    	; 0x21c6 <__fp_split3>
    1f28:	80 f3       	brcs	.-32     	; 0x1f0a <__addsf3+0x8>
    1f2a:	ba 17       	cp	r27, r26
    1f2c:	62 07       	cpc	r22, r18
    1f2e:	73 07       	cpc	r23, r19
    1f30:	84 07       	cpc	r24, r20
    1f32:	95 07       	cpc	r25, r21
    1f34:	18 f0       	brcs	.+6      	; 0x1f3c <__addsf3x+0x18>
    1f36:	71 f4       	brne	.+28     	; 0x1f54 <__addsf3x+0x30>
    1f38:	9e f5       	brtc	.+102    	; 0x1fa0 <__addsf3x+0x7c>
    1f3a:	67 c1       	rjmp	.+718    	; 0x220a <__fp_zero>
    1f3c:	0e f4       	brtc	.+2      	; 0x1f40 <__addsf3x+0x1c>
    1f3e:	e0 95       	com	r30
    1f40:	0b 2e       	mov	r0, r27
    1f42:	ba 2f       	mov	r27, r26
    1f44:	a0 2d       	mov	r26, r0
    1f46:	0b 01       	movw	r0, r22
    1f48:	b9 01       	movw	r22, r18
    1f4a:	90 01       	movw	r18, r0
    1f4c:	0c 01       	movw	r0, r24
    1f4e:	ca 01       	movw	r24, r20
    1f50:	a0 01       	movw	r20, r0
    1f52:	11 24       	eor	r1, r1
    1f54:	ff 27       	eor	r31, r31
    1f56:	59 1b       	sub	r21, r25
    1f58:	99 f0       	breq	.+38     	; 0x1f80 <__addsf3x+0x5c>
    1f5a:	59 3f       	cpi	r21, 0xF9	; 249
    1f5c:	50 f4       	brcc	.+20     	; 0x1f72 <__addsf3x+0x4e>
    1f5e:	50 3e       	cpi	r21, 0xE0	; 224
    1f60:	68 f1       	brcs	.+90     	; 0x1fbc <__addsf3x+0x98>
    1f62:	1a 16       	cp	r1, r26
    1f64:	f0 40       	sbci	r31, 0x00	; 0
    1f66:	a2 2f       	mov	r26, r18
    1f68:	23 2f       	mov	r18, r19
    1f6a:	34 2f       	mov	r19, r20
    1f6c:	44 27       	eor	r20, r20
    1f6e:	58 5f       	subi	r21, 0xF8	; 248
    1f70:	f3 cf       	rjmp	.-26     	; 0x1f58 <__addsf3x+0x34>
    1f72:	46 95       	lsr	r20
    1f74:	37 95       	ror	r19
    1f76:	27 95       	ror	r18
    1f78:	a7 95       	ror	r26
    1f7a:	f0 40       	sbci	r31, 0x00	; 0
    1f7c:	53 95       	inc	r21
    1f7e:	c9 f7       	brne	.-14     	; 0x1f72 <__addsf3x+0x4e>
    1f80:	7e f4       	brtc	.+30     	; 0x1fa0 <__addsf3x+0x7c>
    1f82:	1f 16       	cp	r1, r31
    1f84:	ba 0b       	sbc	r27, r26
    1f86:	62 0b       	sbc	r22, r18
    1f88:	73 0b       	sbc	r23, r19
    1f8a:	84 0b       	sbc	r24, r20
    1f8c:	ba f0       	brmi	.+46     	; 0x1fbc <__addsf3x+0x98>
    1f8e:	91 50       	subi	r25, 0x01	; 1
    1f90:	a1 f0       	breq	.+40     	; 0x1fba <__addsf3x+0x96>
    1f92:	ff 0f       	add	r31, r31
    1f94:	bb 1f       	adc	r27, r27
    1f96:	66 1f       	adc	r22, r22
    1f98:	77 1f       	adc	r23, r23
    1f9a:	88 1f       	adc	r24, r24
    1f9c:	c2 f7       	brpl	.-16     	; 0x1f8e <__addsf3x+0x6a>
    1f9e:	0e c0       	rjmp	.+28     	; 0x1fbc <__addsf3x+0x98>
    1fa0:	ba 0f       	add	r27, r26
    1fa2:	62 1f       	adc	r22, r18
    1fa4:	73 1f       	adc	r23, r19
    1fa6:	84 1f       	adc	r24, r20
    1fa8:	48 f4       	brcc	.+18     	; 0x1fbc <__addsf3x+0x98>
    1faa:	87 95       	ror	r24
    1fac:	77 95       	ror	r23
    1fae:	67 95       	ror	r22
    1fb0:	b7 95       	ror	r27
    1fb2:	f7 95       	ror	r31
    1fb4:	9e 3f       	cpi	r25, 0xFE	; 254
    1fb6:	08 f0       	brcs	.+2      	; 0x1fba <__addsf3x+0x96>
    1fb8:	b3 cf       	rjmp	.-154    	; 0x1f20 <__addsf3+0x1e>
    1fba:	93 95       	inc	r25
    1fbc:	88 0f       	add	r24, r24
    1fbe:	08 f0       	brcs	.+2      	; 0x1fc2 <__addsf3x+0x9e>
    1fc0:	99 27       	eor	r25, r25
    1fc2:	ee 0f       	add	r30, r30
    1fc4:	97 95       	ror	r25
    1fc6:	87 95       	ror	r24
    1fc8:	08 95       	ret

00001fca <__divsf3>:
    1fca:	0c d0       	rcall	.+24     	; 0x1fe4 <__divsf3x>
    1fcc:	eb c0       	rjmp	.+470    	; 0x21a4 <__fp_round>
    1fce:	e3 d0       	rcall	.+454    	; 0x2196 <__fp_pscB>
    1fd0:	40 f0       	brcs	.+16     	; 0x1fe2 <__divsf3+0x18>
    1fd2:	da d0       	rcall	.+436    	; 0x2188 <__fp_pscA>
    1fd4:	30 f0       	brcs	.+12     	; 0x1fe2 <__divsf3+0x18>
    1fd6:	21 f4       	brne	.+8      	; 0x1fe0 <__divsf3+0x16>
    1fd8:	5f 3f       	cpi	r21, 0xFF	; 255
    1fda:	19 f0       	breq	.+6      	; 0x1fe2 <__divsf3+0x18>
    1fdc:	cc c0       	rjmp	.+408    	; 0x2176 <__fp_inf>
    1fde:	51 11       	cpse	r21, r1
    1fe0:	15 c1       	rjmp	.+554    	; 0x220c <__fp_szero>
    1fe2:	cf c0       	rjmp	.+414    	; 0x2182 <__fp_nan>

00001fe4 <__divsf3x>:
    1fe4:	f0 d0       	rcall	.+480    	; 0x21c6 <__fp_split3>
    1fe6:	98 f3       	brcs	.-26     	; 0x1fce <__divsf3+0x4>

00001fe8 <__divsf3_pse>:
    1fe8:	99 23       	and	r25, r25
    1fea:	c9 f3       	breq	.-14     	; 0x1fde <__divsf3+0x14>
    1fec:	55 23       	and	r21, r21
    1fee:	b1 f3       	breq	.-20     	; 0x1fdc <__divsf3+0x12>
    1ff0:	95 1b       	sub	r25, r21
    1ff2:	55 0b       	sbc	r21, r21
    1ff4:	bb 27       	eor	r27, r27
    1ff6:	aa 27       	eor	r26, r26
    1ff8:	62 17       	cp	r22, r18
    1ffa:	73 07       	cpc	r23, r19
    1ffc:	84 07       	cpc	r24, r20
    1ffe:	38 f0       	brcs	.+14     	; 0x200e <__divsf3_pse+0x26>
    2000:	9f 5f       	subi	r25, 0xFF	; 255
    2002:	5f 4f       	sbci	r21, 0xFF	; 255
    2004:	22 0f       	add	r18, r18
    2006:	33 1f       	adc	r19, r19
    2008:	44 1f       	adc	r20, r20
    200a:	aa 1f       	adc	r26, r26
    200c:	a9 f3       	breq	.-22     	; 0x1ff8 <__divsf3_pse+0x10>
    200e:	33 d0       	rcall	.+102    	; 0x2076 <__divsf3_pse+0x8e>
    2010:	0e 2e       	mov	r0, r30
    2012:	3a f0       	brmi	.+14     	; 0x2022 <__divsf3_pse+0x3a>
    2014:	e0 e8       	ldi	r30, 0x80	; 128
    2016:	30 d0       	rcall	.+96     	; 0x2078 <__divsf3_pse+0x90>
    2018:	91 50       	subi	r25, 0x01	; 1
    201a:	50 40       	sbci	r21, 0x00	; 0
    201c:	e6 95       	lsr	r30
    201e:	00 1c       	adc	r0, r0
    2020:	ca f7       	brpl	.-14     	; 0x2014 <__divsf3_pse+0x2c>
    2022:	29 d0       	rcall	.+82     	; 0x2076 <__divsf3_pse+0x8e>
    2024:	fe 2f       	mov	r31, r30
    2026:	27 d0       	rcall	.+78     	; 0x2076 <__divsf3_pse+0x8e>
    2028:	66 0f       	add	r22, r22
    202a:	77 1f       	adc	r23, r23
    202c:	88 1f       	adc	r24, r24
    202e:	bb 1f       	adc	r27, r27
    2030:	26 17       	cp	r18, r22
    2032:	37 07       	cpc	r19, r23
    2034:	48 07       	cpc	r20, r24
    2036:	ab 07       	cpc	r26, r27
    2038:	b0 e8       	ldi	r27, 0x80	; 128
    203a:	09 f0       	breq	.+2      	; 0x203e <__divsf3_pse+0x56>
    203c:	bb 0b       	sbc	r27, r27
    203e:	80 2d       	mov	r24, r0
    2040:	bf 01       	movw	r22, r30
    2042:	ff 27       	eor	r31, r31
    2044:	93 58       	subi	r25, 0x83	; 131
    2046:	5f 4f       	sbci	r21, 0xFF	; 255
    2048:	2a f0       	brmi	.+10     	; 0x2054 <__divsf3_pse+0x6c>
    204a:	9e 3f       	cpi	r25, 0xFE	; 254
    204c:	51 05       	cpc	r21, r1
    204e:	68 f0       	brcs	.+26     	; 0x206a <__divsf3_pse+0x82>
    2050:	92 c0       	rjmp	.+292    	; 0x2176 <__fp_inf>
    2052:	dc c0       	rjmp	.+440    	; 0x220c <__fp_szero>
    2054:	5f 3f       	cpi	r21, 0xFF	; 255
    2056:	ec f3       	brlt	.-6      	; 0x2052 <__divsf3_pse+0x6a>
    2058:	98 3e       	cpi	r25, 0xE8	; 232
    205a:	dc f3       	brlt	.-10     	; 0x2052 <__divsf3_pse+0x6a>
    205c:	86 95       	lsr	r24
    205e:	77 95       	ror	r23
    2060:	67 95       	ror	r22
    2062:	b7 95       	ror	r27
    2064:	f7 95       	ror	r31
    2066:	9f 5f       	subi	r25, 0xFF	; 255
    2068:	c9 f7       	brne	.-14     	; 0x205c <__divsf3_pse+0x74>
    206a:	88 0f       	add	r24, r24
    206c:	91 1d       	adc	r25, r1
    206e:	96 95       	lsr	r25
    2070:	87 95       	ror	r24
    2072:	97 f9       	bld	r25, 7
    2074:	08 95       	ret
    2076:	e1 e0       	ldi	r30, 0x01	; 1
    2078:	66 0f       	add	r22, r22
    207a:	77 1f       	adc	r23, r23
    207c:	88 1f       	adc	r24, r24
    207e:	bb 1f       	adc	r27, r27
    2080:	62 17       	cp	r22, r18
    2082:	73 07       	cpc	r23, r19
    2084:	84 07       	cpc	r24, r20
    2086:	ba 07       	cpc	r27, r26
    2088:	20 f0       	brcs	.+8      	; 0x2092 <__divsf3_pse+0xaa>
    208a:	62 1b       	sub	r22, r18
    208c:	73 0b       	sbc	r23, r19
    208e:	84 0b       	sbc	r24, r20
    2090:	ba 0b       	sbc	r27, r26
    2092:	ee 1f       	adc	r30, r30
    2094:	88 f7       	brcc	.-30     	; 0x2078 <__divsf3_pse+0x90>
    2096:	e0 95       	com	r30
    2098:	08 95       	ret

0000209a <__fixsfsi>:
    209a:	04 d0       	rcall	.+8      	; 0x20a4 <__fixunssfsi>
    209c:	68 94       	set
    209e:	b1 11       	cpse	r27, r1
    20a0:	b5 c0       	rjmp	.+362    	; 0x220c <__fp_szero>
    20a2:	08 95       	ret

000020a4 <__fixunssfsi>:
    20a4:	98 d0       	rcall	.+304    	; 0x21d6 <__fp_splitA>
    20a6:	88 f0       	brcs	.+34     	; 0x20ca <__fixunssfsi+0x26>
    20a8:	9f 57       	subi	r25, 0x7F	; 127
    20aa:	90 f0       	brcs	.+36     	; 0x20d0 <__fixunssfsi+0x2c>
    20ac:	b9 2f       	mov	r27, r25
    20ae:	99 27       	eor	r25, r25
    20b0:	b7 51       	subi	r27, 0x17	; 23
    20b2:	a0 f0       	brcs	.+40     	; 0x20dc <__fixunssfsi+0x38>
    20b4:	d1 f0       	breq	.+52     	; 0x20ea <__fixunssfsi+0x46>
    20b6:	66 0f       	add	r22, r22
    20b8:	77 1f       	adc	r23, r23
    20ba:	88 1f       	adc	r24, r24
    20bc:	99 1f       	adc	r25, r25
    20be:	1a f0       	brmi	.+6      	; 0x20c6 <__fixunssfsi+0x22>
    20c0:	ba 95       	dec	r27
    20c2:	c9 f7       	brne	.-14     	; 0x20b6 <__fixunssfsi+0x12>
    20c4:	12 c0       	rjmp	.+36     	; 0x20ea <__fixunssfsi+0x46>
    20c6:	b1 30       	cpi	r27, 0x01	; 1
    20c8:	81 f0       	breq	.+32     	; 0x20ea <__fixunssfsi+0x46>
    20ca:	9f d0       	rcall	.+318    	; 0x220a <__fp_zero>
    20cc:	b1 e0       	ldi	r27, 0x01	; 1
    20ce:	08 95       	ret
    20d0:	9c c0       	rjmp	.+312    	; 0x220a <__fp_zero>
    20d2:	67 2f       	mov	r22, r23
    20d4:	78 2f       	mov	r23, r24
    20d6:	88 27       	eor	r24, r24
    20d8:	b8 5f       	subi	r27, 0xF8	; 248
    20da:	39 f0       	breq	.+14     	; 0x20ea <__fixunssfsi+0x46>
    20dc:	b9 3f       	cpi	r27, 0xF9	; 249
    20de:	cc f3       	brlt	.-14     	; 0x20d2 <__fixunssfsi+0x2e>
    20e0:	86 95       	lsr	r24
    20e2:	77 95       	ror	r23
    20e4:	67 95       	ror	r22
    20e6:	b3 95       	inc	r27
    20e8:	d9 f7       	brne	.-10     	; 0x20e0 <__fixunssfsi+0x3c>
    20ea:	3e f4       	brtc	.+14     	; 0x20fa <__fixunssfsi+0x56>
    20ec:	90 95       	com	r25
    20ee:	80 95       	com	r24
    20f0:	70 95       	com	r23
    20f2:	61 95       	neg	r22
    20f4:	7f 4f       	sbci	r23, 0xFF	; 255
    20f6:	8f 4f       	sbci	r24, 0xFF	; 255
    20f8:	9f 4f       	sbci	r25, 0xFF	; 255
    20fa:	08 95       	ret

000020fc <__floatunsisf>:
    20fc:	e8 94       	clt
    20fe:	09 c0       	rjmp	.+18     	; 0x2112 <__floatsisf+0x12>

00002100 <__floatsisf>:
    2100:	97 fb       	bst	r25, 7
    2102:	3e f4       	brtc	.+14     	; 0x2112 <__floatsisf+0x12>
    2104:	90 95       	com	r25
    2106:	80 95       	com	r24
    2108:	70 95       	com	r23
    210a:	61 95       	neg	r22
    210c:	7f 4f       	sbci	r23, 0xFF	; 255
    210e:	8f 4f       	sbci	r24, 0xFF	; 255
    2110:	9f 4f       	sbci	r25, 0xFF	; 255
    2112:	99 23       	and	r25, r25
    2114:	a9 f0       	breq	.+42     	; 0x2140 <__floatsisf+0x40>
    2116:	f9 2f       	mov	r31, r25
    2118:	96 e9       	ldi	r25, 0x96	; 150
    211a:	bb 27       	eor	r27, r27
    211c:	93 95       	inc	r25
    211e:	f6 95       	lsr	r31
    2120:	87 95       	ror	r24
    2122:	77 95       	ror	r23
    2124:	67 95       	ror	r22
    2126:	b7 95       	ror	r27
    2128:	f1 11       	cpse	r31, r1
    212a:	f8 cf       	rjmp	.-16     	; 0x211c <__floatsisf+0x1c>
    212c:	fa f4       	brpl	.+62     	; 0x216c <__floatsisf+0x6c>
    212e:	bb 0f       	add	r27, r27
    2130:	11 f4       	brne	.+4      	; 0x2136 <__floatsisf+0x36>
    2132:	60 ff       	sbrs	r22, 0
    2134:	1b c0       	rjmp	.+54     	; 0x216c <__floatsisf+0x6c>
    2136:	6f 5f       	subi	r22, 0xFF	; 255
    2138:	7f 4f       	sbci	r23, 0xFF	; 255
    213a:	8f 4f       	sbci	r24, 0xFF	; 255
    213c:	9f 4f       	sbci	r25, 0xFF	; 255
    213e:	16 c0       	rjmp	.+44     	; 0x216c <__floatsisf+0x6c>
    2140:	88 23       	and	r24, r24
    2142:	11 f0       	breq	.+4      	; 0x2148 <__floatsisf+0x48>
    2144:	96 e9       	ldi	r25, 0x96	; 150
    2146:	11 c0       	rjmp	.+34     	; 0x216a <__floatsisf+0x6a>
    2148:	77 23       	and	r23, r23
    214a:	21 f0       	breq	.+8      	; 0x2154 <__floatsisf+0x54>
    214c:	9e e8       	ldi	r25, 0x8E	; 142
    214e:	87 2f       	mov	r24, r23
    2150:	76 2f       	mov	r23, r22
    2152:	05 c0       	rjmp	.+10     	; 0x215e <__floatsisf+0x5e>
    2154:	66 23       	and	r22, r22
    2156:	71 f0       	breq	.+28     	; 0x2174 <__floatsisf+0x74>
    2158:	96 e8       	ldi	r25, 0x86	; 134
    215a:	86 2f       	mov	r24, r22
    215c:	70 e0       	ldi	r23, 0x00	; 0
    215e:	60 e0       	ldi	r22, 0x00	; 0
    2160:	2a f0       	brmi	.+10     	; 0x216c <__floatsisf+0x6c>
    2162:	9a 95       	dec	r25
    2164:	66 0f       	add	r22, r22
    2166:	77 1f       	adc	r23, r23
    2168:	88 1f       	adc	r24, r24
    216a:	da f7       	brpl	.-10     	; 0x2162 <__floatsisf+0x62>
    216c:	88 0f       	add	r24, r24
    216e:	96 95       	lsr	r25
    2170:	87 95       	ror	r24
    2172:	97 f9       	bld	r25, 7
    2174:	08 95       	ret

00002176 <__fp_inf>:
    2176:	97 f9       	bld	r25, 7
    2178:	9f 67       	ori	r25, 0x7F	; 127
    217a:	80 e8       	ldi	r24, 0x80	; 128
    217c:	70 e0       	ldi	r23, 0x00	; 0
    217e:	60 e0       	ldi	r22, 0x00	; 0
    2180:	08 95       	ret

00002182 <__fp_nan>:
    2182:	9f ef       	ldi	r25, 0xFF	; 255
    2184:	80 ec       	ldi	r24, 0xC0	; 192
    2186:	08 95       	ret

00002188 <__fp_pscA>:
    2188:	00 24       	eor	r0, r0
    218a:	0a 94       	dec	r0
    218c:	16 16       	cp	r1, r22
    218e:	17 06       	cpc	r1, r23
    2190:	18 06       	cpc	r1, r24
    2192:	09 06       	cpc	r0, r25
    2194:	08 95       	ret

00002196 <__fp_pscB>:
    2196:	00 24       	eor	r0, r0
    2198:	0a 94       	dec	r0
    219a:	12 16       	cp	r1, r18
    219c:	13 06       	cpc	r1, r19
    219e:	14 06       	cpc	r1, r20
    21a0:	05 06       	cpc	r0, r21
    21a2:	08 95       	ret

000021a4 <__fp_round>:
    21a4:	09 2e       	mov	r0, r25
    21a6:	03 94       	inc	r0
    21a8:	00 0c       	add	r0, r0
    21aa:	11 f4       	brne	.+4      	; 0x21b0 <__fp_round+0xc>
    21ac:	88 23       	and	r24, r24
    21ae:	52 f0       	brmi	.+20     	; 0x21c4 <__fp_round+0x20>
    21b0:	bb 0f       	add	r27, r27
    21b2:	40 f4       	brcc	.+16     	; 0x21c4 <__fp_round+0x20>
    21b4:	bf 2b       	or	r27, r31
    21b6:	11 f4       	brne	.+4      	; 0x21bc <__fp_round+0x18>
    21b8:	60 ff       	sbrs	r22, 0
    21ba:	04 c0       	rjmp	.+8      	; 0x21c4 <__fp_round+0x20>
    21bc:	6f 5f       	subi	r22, 0xFF	; 255
    21be:	7f 4f       	sbci	r23, 0xFF	; 255
    21c0:	8f 4f       	sbci	r24, 0xFF	; 255
    21c2:	9f 4f       	sbci	r25, 0xFF	; 255
    21c4:	08 95       	ret

000021c6 <__fp_split3>:
    21c6:	57 fd       	sbrc	r21, 7
    21c8:	90 58       	subi	r25, 0x80	; 128
    21ca:	44 0f       	add	r20, r20
    21cc:	55 1f       	adc	r21, r21
    21ce:	59 f0       	breq	.+22     	; 0x21e6 <__fp_splitA+0x10>
    21d0:	5f 3f       	cpi	r21, 0xFF	; 255
    21d2:	71 f0       	breq	.+28     	; 0x21f0 <__fp_splitA+0x1a>
    21d4:	47 95       	ror	r20

000021d6 <__fp_splitA>:
    21d6:	88 0f       	add	r24, r24
    21d8:	97 fb       	bst	r25, 7
    21da:	99 1f       	adc	r25, r25
    21dc:	61 f0       	breq	.+24     	; 0x21f6 <__fp_splitA+0x20>
    21de:	9f 3f       	cpi	r25, 0xFF	; 255
    21e0:	79 f0       	breq	.+30     	; 0x2200 <__fp_splitA+0x2a>
    21e2:	87 95       	ror	r24
    21e4:	08 95       	ret
    21e6:	12 16       	cp	r1, r18
    21e8:	13 06       	cpc	r1, r19
    21ea:	14 06       	cpc	r1, r20
    21ec:	55 1f       	adc	r21, r21
    21ee:	f2 cf       	rjmp	.-28     	; 0x21d4 <__fp_split3+0xe>
    21f0:	46 95       	lsr	r20
    21f2:	f1 df       	rcall	.-30     	; 0x21d6 <__fp_splitA>
    21f4:	08 c0       	rjmp	.+16     	; 0x2206 <__fp_splitA+0x30>
    21f6:	16 16       	cp	r1, r22
    21f8:	17 06       	cpc	r1, r23
    21fa:	18 06       	cpc	r1, r24
    21fc:	99 1f       	adc	r25, r25
    21fe:	f1 cf       	rjmp	.-30     	; 0x21e2 <__fp_splitA+0xc>
    2200:	86 95       	lsr	r24
    2202:	71 05       	cpc	r23, r1
    2204:	61 05       	cpc	r22, r1
    2206:	08 94       	sec
    2208:	08 95       	ret

0000220a <__fp_zero>:
    220a:	e8 94       	clt

0000220c <__fp_szero>:
    220c:	bb 27       	eor	r27, r27
    220e:	66 27       	eor	r22, r22
    2210:	77 27       	eor	r23, r23
    2212:	cb 01       	movw	r24, r22
    2214:	97 f9       	bld	r25, 7
    2216:	08 95       	ret

00002218 <__gesf2>:
    2218:	66 d0       	rcall	.+204    	; 0x22e6 <__fp_cmp>
    221a:	08 f4       	brcc	.+2      	; 0x221e <__gesf2+0x6>
    221c:	8f ef       	ldi	r24, 0xFF	; 255
    221e:	08 95       	ret

00002220 <__mulsf3>:
    2220:	0b d0       	rcall	.+22     	; 0x2238 <__mulsf3x>
    2222:	c0 cf       	rjmp	.-128    	; 0x21a4 <__fp_round>
    2224:	b1 df       	rcall	.-158    	; 0x2188 <__fp_pscA>
    2226:	28 f0       	brcs	.+10     	; 0x2232 <__mulsf3+0x12>
    2228:	b6 df       	rcall	.-148    	; 0x2196 <__fp_pscB>
    222a:	18 f0       	brcs	.+6      	; 0x2232 <__mulsf3+0x12>
    222c:	95 23       	and	r25, r21
    222e:	09 f0       	breq	.+2      	; 0x2232 <__mulsf3+0x12>
    2230:	a2 cf       	rjmp	.-188    	; 0x2176 <__fp_inf>
    2232:	a7 cf       	rjmp	.-178    	; 0x2182 <__fp_nan>
    2234:	11 24       	eor	r1, r1
    2236:	ea cf       	rjmp	.-44     	; 0x220c <__fp_szero>

00002238 <__mulsf3x>:
    2238:	c6 df       	rcall	.-116    	; 0x21c6 <__fp_split3>
    223a:	a0 f3       	brcs	.-24     	; 0x2224 <__mulsf3+0x4>

0000223c <__mulsf3_pse>:
    223c:	95 9f       	mul	r25, r21
    223e:	d1 f3       	breq	.-12     	; 0x2234 <__mulsf3+0x14>
    2240:	95 0f       	add	r25, r21
    2242:	50 e0       	ldi	r21, 0x00	; 0
    2244:	55 1f       	adc	r21, r21
    2246:	62 9f       	mul	r22, r18
    2248:	f0 01       	movw	r30, r0
    224a:	72 9f       	mul	r23, r18
    224c:	bb 27       	eor	r27, r27
    224e:	f0 0d       	add	r31, r0
    2250:	b1 1d       	adc	r27, r1
    2252:	63 9f       	mul	r22, r19
    2254:	aa 27       	eor	r26, r26
    2256:	f0 0d       	add	r31, r0
    2258:	b1 1d       	adc	r27, r1
    225a:	aa 1f       	adc	r26, r26
    225c:	64 9f       	mul	r22, r20
    225e:	66 27       	eor	r22, r22
    2260:	b0 0d       	add	r27, r0
    2262:	a1 1d       	adc	r26, r1
    2264:	66 1f       	adc	r22, r22
    2266:	82 9f       	mul	r24, r18
    2268:	22 27       	eor	r18, r18
    226a:	b0 0d       	add	r27, r0
    226c:	a1 1d       	adc	r26, r1
    226e:	62 1f       	adc	r22, r18
    2270:	73 9f       	mul	r23, r19
    2272:	b0 0d       	add	r27, r0
    2274:	a1 1d       	adc	r26, r1
    2276:	62 1f       	adc	r22, r18
    2278:	83 9f       	mul	r24, r19
    227a:	a0 0d       	add	r26, r0
    227c:	61 1d       	adc	r22, r1
    227e:	22 1f       	adc	r18, r18
    2280:	74 9f       	mul	r23, r20
    2282:	33 27       	eor	r19, r19
    2284:	a0 0d       	add	r26, r0
    2286:	61 1d       	adc	r22, r1
    2288:	23 1f       	adc	r18, r19
    228a:	84 9f       	mul	r24, r20
    228c:	60 0d       	add	r22, r0
    228e:	21 1d       	adc	r18, r1
    2290:	82 2f       	mov	r24, r18
    2292:	76 2f       	mov	r23, r22
    2294:	6a 2f       	mov	r22, r26
    2296:	11 24       	eor	r1, r1
    2298:	9f 57       	subi	r25, 0x7F	; 127
    229a:	50 40       	sbci	r21, 0x00	; 0
    229c:	8a f0       	brmi	.+34     	; 0x22c0 <__mulsf3_pse+0x84>
    229e:	e1 f0       	breq	.+56     	; 0x22d8 <__mulsf3_pse+0x9c>
    22a0:	88 23       	and	r24, r24
    22a2:	4a f0       	brmi	.+18     	; 0x22b6 <__mulsf3_pse+0x7a>
    22a4:	ee 0f       	add	r30, r30
    22a6:	ff 1f       	adc	r31, r31
    22a8:	bb 1f       	adc	r27, r27
    22aa:	66 1f       	adc	r22, r22
    22ac:	77 1f       	adc	r23, r23
    22ae:	88 1f       	adc	r24, r24
    22b0:	91 50       	subi	r25, 0x01	; 1
    22b2:	50 40       	sbci	r21, 0x00	; 0
    22b4:	a9 f7       	brne	.-22     	; 0x22a0 <__mulsf3_pse+0x64>
    22b6:	9e 3f       	cpi	r25, 0xFE	; 254
    22b8:	51 05       	cpc	r21, r1
    22ba:	70 f0       	brcs	.+28     	; 0x22d8 <__mulsf3_pse+0x9c>
    22bc:	5c cf       	rjmp	.-328    	; 0x2176 <__fp_inf>
    22be:	a6 cf       	rjmp	.-180    	; 0x220c <__fp_szero>
    22c0:	5f 3f       	cpi	r21, 0xFF	; 255
    22c2:	ec f3       	brlt	.-6      	; 0x22be <__mulsf3_pse+0x82>
    22c4:	98 3e       	cpi	r25, 0xE8	; 232
    22c6:	dc f3       	brlt	.-10     	; 0x22be <__mulsf3_pse+0x82>
    22c8:	86 95       	lsr	r24
    22ca:	77 95       	ror	r23
    22cc:	67 95       	ror	r22
    22ce:	b7 95       	ror	r27
    22d0:	f7 95       	ror	r31
    22d2:	e7 95       	ror	r30
    22d4:	9f 5f       	subi	r25, 0xFF	; 255
    22d6:	c1 f7       	brne	.-16     	; 0x22c8 <__mulsf3_pse+0x8c>
    22d8:	fe 2b       	or	r31, r30
    22da:	88 0f       	add	r24, r24
    22dc:	91 1d       	adc	r25, r1
    22de:	96 95       	lsr	r25
    22e0:	87 95       	ror	r24
    22e2:	97 f9       	bld	r25, 7
    22e4:	08 95       	ret

000022e6 <__fp_cmp>:
    22e6:	99 0f       	add	r25, r25
    22e8:	00 08       	sbc	r0, r0
    22ea:	55 0f       	add	r21, r21
    22ec:	aa 0b       	sbc	r26, r26
    22ee:	e0 e8       	ldi	r30, 0x80	; 128
    22f0:	fe ef       	ldi	r31, 0xFE	; 254
    22f2:	16 16       	cp	r1, r22
    22f4:	17 06       	cpc	r1, r23
    22f6:	e8 07       	cpc	r30, r24
    22f8:	f9 07       	cpc	r31, r25
    22fa:	c0 f0       	brcs	.+48     	; 0x232c <__fp_cmp+0x46>
    22fc:	12 16       	cp	r1, r18
    22fe:	13 06       	cpc	r1, r19
    2300:	e4 07       	cpc	r30, r20
    2302:	f5 07       	cpc	r31, r21
    2304:	98 f0       	brcs	.+38     	; 0x232c <__fp_cmp+0x46>
    2306:	62 1b       	sub	r22, r18
    2308:	73 0b       	sbc	r23, r19
    230a:	84 0b       	sbc	r24, r20
    230c:	95 0b       	sbc	r25, r21
    230e:	39 f4       	brne	.+14     	; 0x231e <__fp_cmp+0x38>
    2310:	0a 26       	eor	r0, r26
    2312:	61 f0       	breq	.+24     	; 0x232c <__fp_cmp+0x46>
    2314:	23 2b       	or	r18, r19
    2316:	24 2b       	or	r18, r20
    2318:	25 2b       	or	r18, r21
    231a:	21 f4       	brne	.+8      	; 0x2324 <__fp_cmp+0x3e>
    231c:	08 95       	ret
    231e:	0a 26       	eor	r0, r26
    2320:	09 f4       	brne	.+2      	; 0x2324 <__fp_cmp+0x3e>
    2322:	a1 40       	sbci	r26, 0x01	; 1
    2324:	a6 95       	lsr	r26
    2326:	8f ef       	ldi	r24, 0xFF	; 255
    2328:	81 1d       	adc	r24, r1
    232a:	81 1d       	adc	r24, r1
    232c:	08 95       	ret

0000232e <do_rand>:
    232e:	8f 92       	push	r8
    2330:	9f 92       	push	r9
    2332:	af 92       	push	r10
    2334:	bf 92       	push	r11
    2336:	cf 92       	push	r12
    2338:	df 92       	push	r13
    233a:	ef 92       	push	r14
    233c:	ff 92       	push	r15
    233e:	cf 93       	push	r28
    2340:	df 93       	push	r29
    2342:	ec 01       	movw	r28, r24
    2344:	68 81       	ld	r22, Y
    2346:	79 81       	ldd	r23, Y+1	; 0x01
    2348:	8a 81       	ldd	r24, Y+2	; 0x02
    234a:	9b 81       	ldd	r25, Y+3	; 0x03
    234c:	61 15       	cp	r22, r1
    234e:	71 05       	cpc	r23, r1
    2350:	81 05       	cpc	r24, r1
    2352:	91 05       	cpc	r25, r1
    2354:	21 f4       	brne	.+8      	; 0x235e <do_rand+0x30>
    2356:	64 e2       	ldi	r22, 0x24	; 36
    2358:	79 ed       	ldi	r23, 0xD9	; 217
    235a:	8b e5       	ldi	r24, 0x5B	; 91
    235c:	97 e0       	ldi	r25, 0x07	; 7
    235e:	2d e1       	ldi	r18, 0x1D	; 29
    2360:	33 ef       	ldi	r19, 0xF3	; 243
    2362:	41 e0       	ldi	r20, 0x01	; 1
    2364:	50 e0       	ldi	r21, 0x00	; 0
    2366:	0e 94 0b 12 	call	0x2416	; 0x2416 <__divmodsi4>
    236a:	49 01       	movw	r8, r18
    236c:	5a 01       	movw	r10, r20
    236e:	9b 01       	movw	r18, r22
    2370:	ac 01       	movw	r20, r24
    2372:	a7 ea       	ldi	r26, 0xA7	; 167
    2374:	b1 e4       	ldi	r27, 0x41	; 65
    2376:	0e 94 2a 12 	call	0x2454	; 0x2454 <__muluhisi3>
    237a:	6b 01       	movw	r12, r22
    237c:	7c 01       	movw	r14, r24
    237e:	ac ee       	ldi	r26, 0xEC	; 236
    2380:	b4 ef       	ldi	r27, 0xF4	; 244
    2382:	a5 01       	movw	r20, r10
    2384:	94 01       	movw	r18, r8
    2386:	0e 94 38 12 	call	0x2470	; 0x2470 <__mulohisi3>
    238a:	c6 0e       	add	r12, r22
    238c:	d7 1e       	adc	r13, r23
    238e:	e8 1e       	adc	r14, r24
    2390:	f9 1e       	adc	r15, r25
    2392:	f7 fe       	sbrs	r15, 7
    2394:	06 c0       	rjmp	.+12     	; 0x23a2 <do_rand+0x74>
    2396:	81 e0       	ldi	r24, 0x01	; 1
    2398:	c8 1a       	sub	r12, r24
    239a:	d1 08       	sbc	r13, r1
    239c:	e1 08       	sbc	r14, r1
    239e:	80 e8       	ldi	r24, 0x80	; 128
    23a0:	f8 0a       	sbc	r15, r24
    23a2:	c8 82       	st	Y, r12
    23a4:	d9 82       	std	Y+1, r13	; 0x01
    23a6:	ea 82       	std	Y+2, r14	; 0x02
    23a8:	fb 82       	std	Y+3, r15	; 0x03
    23aa:	c6 01       	movw	r24, r12
    23ac:	9f 77       	andi	r25, 0x7F	; 127
    23ae:	df 91       	pop	r29
    23b0:	cf 91       	pop	r28
    23b2:	ff 90       	pop	r15
    23b4:	ef 90       	pop	r14
    23b6:	df 90       	pop	r13
    23b8:	cf 90       	pop	r12
    23ba:	bf 90       	pop	r11
    23bc:	af 90       	pop	r10
    23be:	9f 90       	pop	r9
    23c0:	8f 90       	pop	r8
    23c2:	08 95       	ret

000023c4 <rand_r>:
    23c4:	0e 94 97 11 	call	0x232e	; 0x232e <do_rand>
    23c8:	08 95       	ret

000023ca <rand>:
    23ca:	85 e2       	ldi	r24, 0x25	; 37
    23cc:	91 e0       	ldi	r25, 0x01	; 1
    23ce:	0e 94 97 11 	call	0x232e	; 0x232e <do_rand>
    23d2:	08 95       	ret

000023d4 <srand>:
    23d4:	a0 e0       	ldi	r26, 0x00	; 0
    23d6:	b0 e0       	ldi	r27, 0x00	; 0
    23d8:	80 93 25 01 	sts	0x0125, r24
    23dc:	90 93 26 01 	sts	0x0126, r25
    23e0:	a0 93 27 01 	sts	0x0127, r26
    23e4:	b0 93 28 01 	sts	0x0128, r27
    23e8:	08 95       	ret

000023ea <__eerd_byte_m328p>:
    23ea:	f9 99       	sbic	0x1f, 1	; 31
    23ec:	fe cf       	rjmp	.-4      	; 0x23ea <__eerd_byte_m328p>
    23ee:	92 bd       	out	0x22, r25	; 34
    23f0:	81 bd       	out	0x21, r24	; 33
    23f2:	f8 9a       	sbi	0x1f, 0	; 31
    23f4:	99 27       	eor	r25, r25
    23f6:	80 b5       	in	r24, 0x20	; 32
    23f8:	08 95       	ret

000023fa <__eewr_byte_m328p>:
    23fa:	26 2f       	mov	r18, r22

000023fc <__eewr_r18_m328p>:
    23fc:	f9 99       	sbic	0x1f, 1	; 31
    23fe:	fe cf       	rjmp	.-4      	; 0x23fc <__eewr_r18_m328p>
    2400:	1f ba       	out	0x1f, r1	; 31
    2402:	92 bd       	out	0x22, r25	; 34
    2404:	81 bd       	out	0x21, r24	; 33
    2406:	20 bd       	out	0x20, r18	; 32
    2408:	0f b6       	in	r0, 0x3f	; 63
    240a:	f8 94       	cli
    240c:	fa 9a       	sbi	0x1f, 2	; 31
    240e:	f9 9a       	sbi	0x1f, 1	; 31
    2410:	0f be       	out	0x3f, r0	; 63
    2412:	01 96       	adiw	r24, 0x01	; 1
    2414:	08 95       	ret

00002416 <__divmodsi4>:
    2416:	05 2e       	mov	r0, r21
    2418:	97 fb       	bst	r25, 7
    241a:	1e f4       	brtc	.+6      	; 0x2422 <__divmodsi4+0xc>
    241c:	00 94       	com	r0
    241e:	0e 94 22 12 	call	0x2444	; 0x2444 <__negsi2>
    2422:	57 fd       	sbrc	r21, 7
    2424:	07 d0       	rcall	.+14     	; 0x2434 <__divmodsi4_neg2>
    2426:	0e 94 3d 12 	call	0x247a	; 0x247a <__udivmodsi4>
    242a:	07 fc       	sbrc	r0, 7
    242c:	03 d0       	rcall	.+6      	; 0x2434 <__divmodsi4_neg2>
    242e:	4e f4       	brtc	.+18     	; 0x2442 <__divmodsi4_exit>
    2430:	0c 94 22 12 	jmp	0x2444	; 0x2444 <__negsi2>

00002434 <__divmodsi4_neg2>:
    2434:	50 95       	com	r21
    2436:	40 95       	com	r20
    2438:	30 95       	com	r19
    243a:	21 95       	neg	r18
    243c:	3f 4f       	sbci	r19, 0xFF	; 255
    243e:	4f 4f       	sbci	r20, 0xFF	; 255
    2440:	5f 4f       	sbci	r21, 0xFF	; 255

00002442 <__divmodsi4_exit>:
    2442:	08 95       	ret

00002444 <__negsi2>:
    2444:	90 95       	com	r25
    2446:	80 95       	com	r24
    2448:	70 95       	com	r23
    244a:	61 95       	neg	r22
    244c:	7f 4f       	sbci	r23, 0xFF	; 255
    244e:	8f 4f       	sbci	r24, 0xFF	; 255
    2450:	9f 4f       	sbci	r25, 0xFF	; 255
    2452:	08 95       	ret

00002454 <__muluhisi3>:
    2454:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <__umulhisi3>
    2458:	a5 9f       	mul	r26, r21
    245a:	90 0d       	add	r25, r0
    245c:	b4 9f       	mul	r27, r20
    245e:	90 0d       	add	r25, r0
    2460:	a4 9f       	mul	r26, r20
    2462:	80 0d       	add	r24, r0
    2464:	91 1d       	adc	r25, r1
    2466:	11 24       	eor	r1, r1
    2468:	08 95       	ret

0000246a <__mulshisi3>:
    246a:	b7 ff       	sbrs	r27, 7
    246c:	0c 94 2a 12 	jmp	0x2454	; 0x2454 <__muluhisi3>

00002470 <__mulohisi3>:
    2470:	0e 94 2a 12 	call	0x2454	; 0x2454 <__muluhisi3>
    2474:	82 1b       	sub	r24, r18
    2476:	93 0b       	sbc	r25, r19
    2478:	08 95       	ret

0000247a <__udivmodsi4>:
    247a:	a1 e2       	ldi	r26, 0x21	; 33
    247c:	1a 2e       	mov	r1, r26
    247e:	aa 1b       	sub	r26, r26
    2480:	bb 1b       	sub	r27, r27
    2482:	fd 01       	movw	r30, r26
    2484:	0d c0       	rjmp	.+26     	; 0x24a0 <__udivmodsi4_ep>

00002486 <__udivmodsi4_loop>:
    2486:	aa 1f       	adc	r26, r26
    2488:	bb 1f       	adc	r27, r27
    248a:	ee 1f       	adc	r30, r30
    248c:	ff 1f       	adc	r31, r31
    248e:	a2 17       	cp	r26, r18
    2490:	b3 07       	cpc	r27, r19
    2492:	e4 07       	cpc	r30, r20
    2494:	f5 07       	cpc	r31, r21
    2496:	20 f0       	brcs	.+8      	; 0x24a0 <__udivmodsi4_ep>
    2498:	a2 1b       	sub	r26, r18
    249a:	b3 0b       	sbc	r27, r19
    249c:	e4 0b       	sbc	r30, r20
    249e:	f5 0b       	sbc	r31, r21

000024a0 <__udivmodsi4_ep>:
    24a0:	66 1f       	adc	r22, r22
    24a2:	77 1f       	adc	r23, r23
    24a4:	88 1f       	adc	r24, r24
    24a6:	99 1f       	adc	r25, r25
    24a8:	1a 94       	dec	r1
    24aa:	69 f7       	brne	.-38     	; 0x2486 <__udivmodsi4_loop>
    24ac:	60 95       	com	r22
    24ae:	70 95       	com	r23
    24b0:	80 95       	com	r24
    24b2:	90 95       	com	r25
    24b4:	9b 01       	movw	r18, r22
    24b6:	ac 01       	movw	r20, r24
    24b8:	bd 01       	movw	r22, r26
    24ba:	cf 01       	movw	r24, r30
    24bc:	08 95       	ret

000024be <_exit>:
    24be:	f8 94       	cli

000024c0 <__stop_program>:
    24c0:	ff cf       	rjmp	.-2      	; 0x24c0 <__stop_program>
