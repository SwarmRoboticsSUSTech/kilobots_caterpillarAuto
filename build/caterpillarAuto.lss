
build/caterpillarAuto.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
       8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
       c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      18:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__vector_6>
      1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      2c:	0c 94 bd 0a 	jmp	0x157a	; 0x157a <__vector_11>
      30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      38:	0c 94 1d 0a 	jmp	0x143a	; 0x143a <__vector_14>
      3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      5c:	0c 94 df 0a 	jmp	0x15be	; 0x15be <__vector_23>
      60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      68:	5a 05       	cpc	r21, r10
      6a:	d6 05       	cpc	r29, r6
      6c:	2e 05       	cpc	r18, r14
      6e:	24 05       	cpc	r18, r4
      70:	2b 05       	cpc	r18, r11
      72:	b8 05       	cpc	r27, r8
      74:	ad 05       	cpc	r26, r13
      76:	3b 0c       	add	r3, r11
      78:	1f 0b       	sbc	r17, r31
      7a:	1f 0b       	sbc	r17, r31
      7c:	38 0c       	add	r3, r8
      7e:	44 0c       	add	r4, r4
      80:	34 0c       	add	r3, r4
      82:	4b 0c       	add	r4, r11
      84:	47 0c       	add	r4, r7
      86:	4f 0c       	add	r4, r15
      88:	08 0c       	add	r0, r8
      8a:	da 0b       	sbc	r29, r26

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
    wdt_disable();
      9a:	88 e1       	ldi	r24, 0x18	; 24
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	80 93 60 00 	sts	0x0060, r24
      a4:	10 92 60 00 	sts	0x0060, r1
      a8:	0f be       	out	0x3f, r0	; 63

000000aa <__do_copy_data>:
      aa:	11 e0       	ldi	r17, 0x01	; 1
      ac:	a0 e0       	ldi	r26, 0x00	; 0
      ae:	b1 e0       	ldi	r27, 0x01	; 1
      b0:	e2 eb       	ldi	r30, 0xB2	; 178
      b2:	ff e1       	ldi	r31, 0x1F	; 31
      b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x10>
      b6:	05 90       	lpm	r0, Z+
      b8:	0d 92       	st	X+, r0
      ba:	a6 32       	cpi	r26, 0x26	; 38
      bc:	b1 07       	cpc	r27, r17
      be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0xc>

000000c0 <__do_clear_bss>:
      c0:	21 e0       	ldi	r18, 0x01	; 1
      c2:	a6 e2       	ldi	r26, 0x26	; 38
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
      c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
      ca:	ae 3b       	cpi	r26, 0xBE	; 190
      cc:	b2 07       	cpc	r27, r18
      ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
      d0:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <main>
      d4:	0c 94 d7 0f 	jmp	0x1fae	; 0x1fae <_exit>

000000d8 <__bad_interrupt>:
      d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <setup>:

void setup()
{   
    //If the robot is the seed, its gradient should be 0: overwrite the 
    // previously set value of GRADIENT_MAX.
    if (kilo_uid == SEED_ID)
      dc:	80 91 b9 01 	lds	r24, 0x01B9
      e0:	90 91 ba 01 	lds	r25, 0x01BA
      e4:	89 2b       	or	r24, r25
      e6:	b1 f5       	brne	.+108    	; 0x154 <setup+0x78>
    {   
        own_gradient = 0;
      e8:	10 92 19 01 	sts	0x0119, r1
      ec:	10 92 18 01 	sts	0x0118, r1
		distance_to_motivator = DISTANCE_COLLIDE;
      f0:	88 e2       	ldi	r24, 0x28	; 40
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	90 93 0d 01 	sts	0x010D, r25
      f8:	80 93 0c 01 	sts	0x010C, r24
		update_distance_to_motivator = UPDATE;
      fc:	81 e0       	ldi	r24, 0x01	; 1
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	90 93 39 01 	sts	0x0139, r25
     104:	80 93 38 01 	sts	0x0138, r24
		update_state_motivator = UPDATE;
     108:	90 93 35 01 	sts	0x0135, r25
     10c:	80 93 34 01 	sts	0x0134, r24
		flag_minor = YES;
     110:	90 93 3d 01 	sts	0x013D, r25
     114:	80 93 3c 01 	sts	0x013C, r24
		state_motivator = COMPLETED;
     118:	85 e0       	ldi	r24, 0x05	; 5
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	90 93 2f 01 	sts	0x012F, r25
     120:	80 93 2e 01 	sts	0x012E, r24
     124:	88 e2       	ldi	r24, 0x28	; 40
     126:	95 e0       	ldi	r25, 0x05	; 5
     128:	20 e0       	ldi	r18, 0x00	; 0
    }   
        
    // Set the transmission message.
    message.type = NORMAL;
     12a:	10 92 4d 01 	sts	0x014D, r1
    message.data[0] = own_gradient;
     12e:	20 93 44 01 	sts	0x0144, r18
	// Sequence has not been formed completely.
	message.data[1] = formed_state;
     132:	20 91 26 01 	lds	r18, 0x0126
     136:	20 93 45 01 	sts	0x0145, r18
	message.data[2] = state_motivator;
     13a:	90 93 46 01 	sts	0x0146, r25
	message.data[3] = distance_to_motivator;
     13e:	80 93 47 01 	sts	0x0147, r24
	message.crc = message_crc(&message);
     142:	84 e4       	ldi	r24, 0x44	; 68
     144:	91 e0       	ldi	r25, 0x01	; 1
     146:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <message_crc>
     14a:	90 93 4f 01 	sts	0x014F, r25
     14e:	80 93 4e 01 	sts	0x014E, r24
     152:	08 95       	ret
     154:	20 91 18 01 	lds	r18, 0x0118
     158:	90 91 2e 01 	lds	r25, 0x012E
     15c:	80 91 0c 01 	lds	r24, 0x010C
     160:	e4 cf       	rjmp	.-56     	; 0x12a <setup+0x4e>

00000162 <message_tx>:
}


message_t *message_tx()
{
	message.data[0] = own_gradient;
     162:	80 91 18 01 	lds	r24, 0x0118
     166:	80 93 44 01 	sts	0x0144, r24
	message.data[1] = formed_state;
     16a:	80 91 26 01 	lds	r24, 0x0126
     16e:	80 93 45 01 	sts	0x0145, r24
	message.data[2] = state_myself;
     172:	80 91 2c 01 	lds	r24, 0x012C
     176:	80 93 46 01 	sts	0x0146, r24
	message.data[3] = distance_to_motivator;
     17a:	80 91 0c 01 	lds	r24, 0x010C
     17e:	80 93 47 01 	sts	0x0147, r24
        default:
             set_color(RGB(0, 1, 1));
             break;
    }
*/	
	message.crc = message_crc(&message);
     182:	84 e4       	ldi	r24, 0x44	; 68
     184:	91 e0       	ldi	r25, 0x01	; 1
     186:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <message_crc>
     18a:	90 93 4f 01 	sts	0x014F, r25
     18e:	80 93 4e 01 	sts	0x014E, r24
    return &message;
}
     192:	84 e4       	ldi	r24, 0x44	; 68
     194:	91 e0       	ldi	r25, 0x01	; 1
     196:	08 95       	ret

00000198 <message_rx>:

void message_rx(message_t *m, distance_measurement_t *d)
{
     198:	cf 93       	push	r28
     19a:	df 93       	push	r29
     19c:	ec 01       	movw	r28, r24
     19e:	cb 01       	movw	r24, r22
	//set_color(RGB(0, 0, 0));
	//set_color(RGB(1, 0, 0));
    received_gradient = m->data[0];
     1a0:	28 81       	ld	r18, Y
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	30 93 33 01 	sts	0x0133, r19
     1a8:	20 93 32 01 	sts	0x0132, r18
    distance = estimate_distance(d);
     1ac:	0e 94 56 07 	call	0xeac	; 0xeac <estimate_distance>
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	90 93 0f 01 	sts	0x010F, r25
     1b6:	80 93 0e 01 	sts	0x010E, r24
	// In the valid distance.
	if (distance <= DISTANCE_GRADIENT)
     1ba:	87 34       	cpi	r24, 0x47	; 71
     1bc:	91 05       	cpc	r25, r1
     1be:	0c f0       	brlt	.+2      	; 0x1c2 <message_rx+0x2a>
     1c0:	6a c0       	rjmp	.+212    	; 0x296 <message_rx+0xfe>
	{
		// Assure that the received data is valid.
		if (received_gradient != own_gradient)  
     1c2:	20 91 32 01 	lds	r18, 0x0132
     1c6:	30 91 33 01 	lds	r19, 0x0133
     1ca:	e0 91 18 01 	lds	r30, 0x0118
     1ce:	f0 91 19 01 	lds	r31, 0x0119
     1d2:	2e 17       	cp	r18, r30
     1d4:	3f 07       	cpc	r19, r31
     1d6:	09 f4       	brne	.+2      	; 0x1da <message_rx+0x42>
     1d8:	88 c0       	rjmp	.+272    	; 0x2ea <message_rx+0x152>
		{
			last_gradient_anchored = kilo_ticks;
     1da:	40 91 83 01 	lds	r20, 0x0183
     1de:	50 91 84 01 	lds	r21, 0x0184
     1e2:	60 91 85 01 	lds	r22, 0x0185
     1e6:	70 91 86 01 	lds	r23, 0x0186
     1ea:	40 93 54 01 	sts	0x0154, r20
     1ee:	50 93 55 01 	sts	0x0155, r21
     1f2:	60 93 56 01 	sts	0x0156, r22
     1f6:	70 93 57 01 	sts	0x0157, r23
			// The message was sent by my motivated.
			// I found someone's gradient maxer than mine in the world.
			// My formed state is determined by my maxer.
			if (received_gradient > own_gradient)
			{
				last_found_maxer = kilo_ticks;
     1fa:	40 91 83 01 	lds	r20, 0x0183
     1fe:	50 91 84 01 	lds	r21, 0x0184
     202:	60 91 85 01 	lds	r22, 0x0185
     206:	70 91 86 01 	lds	r23, 0x0186
		{
			last_gradient_anchored = kilo_ticks;
			// The message was sent by my motivated.
			// I found someone's gradient maxer than mine in the world.
			// My formed state is determined by my maxer.
			if (received_gradient > own_gradient)
     20a:	e2 17       	cp	r30, r18
     20c:	f3 07       	cpc	r31, r19
     20e:	0c f0       	brlt	.+2      	; 0x212 <message_rx+0x7a>
     210:	45 c0       	rjmp	.+138    	; 0x29c <message_rx+0x104>
			{
				last_found_maxer = kilo_ticks;
     212:	40 93 58 01 	sts	0x0158, r20
     216:	50 93 59 01 	sts	0x0159, r21
     21a:	60 93 5a 01 	sts	0x015A, r22
     21e:	70 93 5b 01 	sts	0x015B, r23
				if (received_gradient == (own_gradient + 1))
     222:	31 96       	adiw	r30, 0x01	; 1
     224:	2e 17       	cp	r18, r30
     226:	3f 07       	cpc	r19, r31
     228:	09 f4       	brne	.+2      	; 0x22c <message_rx+0x94>
     22a:	84 c0       	rjmp	.+264    	; 0x334 <message_rx+0x19c>
		//flag_maxest = NO;
		
		// I have neighbours whose gradient is minor than mine.
		// Meanwhile long time no find gradient maxer than mine.
		// I am the maxest one in my local world.
		if((kilo_uid != SEED_ID) && (kilo_ticks > (last_found_maxer + TIME_CHECK_MAXER)))
     22c:	80 91 b9 01 	lds	r24, 0x01B9
     230:	90 91 ba 01 	lds	r25, 0x01BA
     234:	89 2b       	or	r24, r25
     236:	79 f1       	breq	.+94     	; 0x296 <message_rx+0xfe>
     238:	40 91 83 01 	lds	r20, 0x0183
     23c:	50 91 84 01 	lds	r21, 0x0184
     240:	60 91 85 01 	lds	r22, 0x0185
     244:	70 91 86 01 	lds	r23, 0x0186
     248:	80 91 58 01 	lds	r24, 0x0158
     24c:	90 91 59 01 	lds	r25, 0x0159
     250:	a0 91 5a 01 	lds	r26, 0x015A
     254:	b0 91 5b 01 	lds	r27, 0x015B
     258:	80 56       	subi	r24, 0x60	; 96
     25a:	9f 4f       	sbci	r25, 0xFF	; 255
     25c:	af 4f       	sbci	r26, 0xFF	; 255
     25e:	bf 4f       	sbci	r27, 0xFF	; 255
     260:	84 17       	cp	r24, r20
     262:	95 07       	cpc	r25, r21
     264:	a6 07       	cpc	r26, r22
     266:	b7 07       	cpc	r27, r23
     268:	b0 f4       	brcc	.+44     	; 0x296 <message_rx+0xfe>
		{
			formed_state = FORMED_OK;
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	90 93 27 01 	sts	0x0127, r25
     272:	80 93 26 01 	sts	0x0126, r24
			state_motivated = COMPLETED;
     276:	25 e0       	ldi	r18, 0x05	; 5
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	30 93 31 01 	sts	0x0131, r19
     27e:	20 93 30 01 	sts	0x0130, r18
			flag_maxest = YES;
     282:	90 93 3f 01 	sts	0x013F, r25
     286:	80 93 3e 01 	sts	0x013E, r24
			distance_to_motivated = DISTANCE_MAX;
     28a:	84 e6       	ldi	r24, 0x64	; 100
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	90 93 07 01 	sts	0x0107, r25
     292:	80 93 06 01 	sts	0x0106, r24
			update_state_motivator = UPDATE;
			set_color(RGB(1, 0, 1));
		}
		*/
	}	
}
     296:	df 91       	pop	r29
     298:	cf 91       	pop	r28
     29a:	08 95       	ret
			}
			// The message was sent by my motivator.
			// (received_gradient < own_gradient)
			else
			{
				last_found_minor = kilo_ticks;
     29c:	40 93 5c 01 	sts	0x015C, r20
     2a0:	50 93 5d 01 	sts	0x015D, r21
     2a4:	60 93 5e 01 	sts	0x015E, r22
     2a8:	70 93 5f 01 	sts	0x015F, r23
				own_gradient = received_gradient + 1;
     2ac:	2f 5f       	subi	r18, 0xFF	; 255
     2ae:	3f 4f       	sbci	r19, 0xFF	; 255
     2b0:	30 93 19 01 	sts	0x0119, r19
     2b4:	20 93 18 01 	sts	0x0118, r18
				state_motivator =  m->data[2];
     2b8:	2a 81       	ldd	r18, Y+2	; 0x02
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	30 93 2f 01 	sts	0x012F, r19
     2c0:	20 93 2e 01 	sts	0x012E, r18
				update_state_motivator = UPDATE;
     2c4:	41 e0       	ldi	r20, 0x01	; 1
     2c6:	50 e0       	ldi	r21, 0x00	; 0
     2c8:	50 93 35 01 	sts	0x0135, r21
     2cc:	40 93 34 01 	sts	0x0134, r20
				if (state_motivator != MOVE)
     2d0:	24 30       	cpi	r18, 0x04	; 4
     2d2:	31 05       	cpc	r19, r1
     2d4:	09 f4       	brne	.+2      	; 0x2d8 <message_rx+0x140>
     2d6:	aa cf       	rjmp	.-172    	; 0x22c <message_rx+0x94>
				{
					distance_to_motivator = distance;
     2d8:	90 93 0d 01 	sts	0x010D, r25
     2dc:	80 93 0c 01 	sts	0x010C, r24
					update_distance_to_motivator = UPDATE;
     2e0:	50 93 39 01 	sts	0x0139, r21
     2e4:	40 93 38 01 	sts	0x0138, r20
     2e8:	a1 cf       	rjmp	.-190    	; 0x22c <message_rx+0x94>
				}
			}
		}
		else
		{	
			distance_to_motivator_pair = m->data[3];
     2ea:	8b 81       	ldd	r24, Y+3	; 0x03
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	90 93 0b 01 	sts	0x010B, r25
     2f2:	80 93 0a 01 	sts	0x010A, r24
			if (distance_to_motivator_pair < distance_to_motivator)
     2f6:	40 91 0c 01 	lds	r20, 0x010C
     2fa:	50 91 0d 01 	lds	r21, 0x010D
     2fe:	84 17       	cp	r24, r20
     300:	95 07       	cpc	r25, r21
     302:	0c f0       	brlt	.+2      	; 0x306 <message_rx+0x16e>
     304:	93 cf       	rjmp	.-218    	; 0x22c <message_rx+0x94>
			{
				own_gradient = own_gradient + 1;
     306:	2f 5f       	subi	r18, 0xFF	; 255
     308:	3f 4f       	sbci	r19, 0xFF	; 255
     30a:	30 93 19 01 	sts	0x0119, r19
     30e:	20 93 18 01 	sts	0x0118, r18
				last_found_minor = kilo_ticks;
     312:	80 91 83 01 	lds	r24, 0x0183
     316:	90 91 84 01 	lds	r25, 0x0184
     31a:	a0 91 85 01 	lds	r26, 0x0185
     31e:	b0 91 86 01 	lds	r27, 0x0186
     322:	80 93 5c 01 	sts	0x015C, r24
     326:	90 93 5d 01 	sts	0x015D, r25
     32a:	a0 93 5e 01 	sts	0x015E, r26
     32e:	b0 93 5f 01 	sts	0x015F, r27
     332:	7c cf       	rjmp	.-264    	; 0x22c <message_rx+0x94>
			if (received_gradient > own_gradient)
			{
				last_found_maxer = kilo_ticks;
				if (received_gradient == (own_gradient + 1))
				{
					formed_state = m->data[1];
     334:	29 81       	ldd	r18, Y+1	; 0x01
     336:	30 e0       	ldi	r19, 0x00	; 0
     338:	30 93 27 01 	sts	0x0127, r19
     33c:	20 93 26 01 	sts	0x0126, r18
					state_motivated =  m->data[2];
     340:	2a 81       	ldd	r18, Y+2	; 0x02
     342:	30 e0       	ldi	r19, 0x00	; 0
     344:	30 93 31 01 	sts	0x0131, r19
     348:	20 93 30 01 	sts	0x0130, r18
					update_state_motivated = UPDATE;
     34c:	41 e0       	ldi	r20, 0x01	; 1
     34e:	50 e0       	ldi	r21, 0x00	; 0
     350:	50 93 37 01 	sts	0x0137, r21
     354:	40 93 36 01 	sts	0x0136, r20
					if (state_motivated != MOVE) {
     358:	24 30       	cpi	r18, 0x04	; 4
     35a:	31 05       	cpc	r19, r1
     35c:	c9 f0       	breq	.+50     	; 0x390 <message_rx+0x1f8>
						if ((num_stop ++) == 1) 
     35e:	20 91 2a 01 	lds	r18, 0x012A
     362:	30 91 2b 01 	lds	r19, 0x012B
     366:	a9 01       	movw	r20, r18
     368:	4f 5f       	subi	r20, 0xFF	; 255
     36a:	5f 4f       	sbci	r21, 0xFF	; 255
     36c:	50 93 2b 01 	sts	0x012B, r21
     370:	40 93 2a 01 	sts	0x012A, r20
     374:	21 30       	cpi	r18, 0x01	; 1
     376:	31 05       	cpc	r19, r1
     378:	81 f0       	breq	.+32     	; 0x39a <message_rx+0x202>
						{
							my_fault = NO;
						}
						distance_to_motivated = distance;
     37a:	90 93 07 01 	sts	0x0107, r25
     37e:	80 93 06 01 	sts	0x0106, r24
						update_distance_to_motivated = UPDATE;
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	90 93 3b 01 	sts	0x013B, r25
     38a:	80 93 3a 01 	sts	0x013A, r24
     38e:	4e cf       	rjmp	.-356    	; 0x22c <message_rx+0x94>
					}
					else
					{
						num_stop = 0;
     390:	10 92 2b 01 	sts	0x012B, r1
     394:	10 92 2a 01 	sts	0x012A, r1
     398:	49 cf       	rjmp	.-366    	; 0x22c <message_rx+0x94>
					state_motivated =  m->data[2];
					update_state_motivated = UPDATE;
					if (state_motivated != MOVE) {
						if ((num_stop ++) == 1) 
						{
							my_fault = NO;
     39a:	10 92 13 01 	sts	0x0113, r1
     39e:	10 92 12 01 	sts	0x0112, r1
     3a2:	eb cf       	rjmp	.-42     	; 0x37a <message_rx+0x1e2>

000003a4 <randBinary>:


// Generate 0 or 1 randomly
int randBinary(){
    // Generate an 8-bit random number (between 0 and 2^8 - 1 = 255).
    int random_number = rand_hard();
     3a4:	0e 94 ce 06 	call	0xd9c	; 0xd9c <rand_hard>
    // Compute the remainder of random_number when divided by 2.
    // This gives a new random number in the set {0, 1}.
    int random_direction = (random_number % 2);

    return random_direction;
}
     3a8:	81 70       	andi	r24, 0x01	; 1
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	08 95       	ret

000003ae <rand>:

// Generate a random number in the closed interval (0, 1).
float rand(){
    // Generate an 8-bit random number (between 0 and 2^8 - 1 = 255).
    int random_number = rand_hard();
     3ae:	0e 94 ce 06 	call	0xd9c	; 0xd9c <rand_hard>
     3b2:	90 e0       	ldi	r25, 0x00	; 0

    float result = random_number / 255;
     3b4:	6f ef       	ldi	r22, 0xFF	; 255
     3b6:	70 e0       	ldi	r23, 0x00	; 0
     3b8:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <__divmodhi4>
     3bc:	88 27       	eor	r24, r24
     3be:	77 fd       	sbrc	r23, 7
     3c0:	80 95       	com	r24
     3c2:	98 2f       	mov	r25, r24
     3c4:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <__floatsisf>

    return result;
}
     3c8:	08 95       	ret

000003ca <set_led>:

// Function to set led states
void set_led()
{
    // Set the LED color based on the gradient.
    switch (own_gradient) {
     3ca:	80 91 18 01 	lds	r24, 0x0118
     3ce:	90 91 19 01 	lds	r25, 0x0119
     3d2:	82 30       	cpi	r24, 0x02	; 2
     3d4:	91 05       	cpc	r25, r1
     3d6:	c9 f0       	breq	.+50     	; 0x40a <set_led+0x40>
     3d8:	3c f4       	brge	.+14     	; 0x3e8 <set_led+0x1e>
     3da:	00 97       	sbiw	r24, 0x00	; 0
     3dc:	99 f0       	breq	.+38     	; 0x404 <set_led+0x3a>
     3de:	01 97       	sbiw	r24, 0x01	; 1
     3e0:	59 f4       	brne	.+22     	; 0x3f8 <set_led+0x2e>
        case 0:
            set_color(RGB(1, 1, 1)); // White
            break;
        case 1:
            set_color(RGB(1, 0, 0)); // Red
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	0c 94 99 0a 	jmp	0x1532	; 0x1532 <set_color>

// Function to set led states
void set_led()
{
    // Set the LED color based on the gradient.
    switch (own_gradient) {
     3e8:	83 30       	cpi	r24, 0x03	; 3
     3ea:	91 05       	cpc	r25, r1
     3ec:	41 f0       	breq	.+16     	; 0x3fe <set_led+0x34>
     3ee:	04 97       	sbiw	r24, 0x04	; 4
     3f0:	19 f4       	brne	.+6      	; 0x3f8 <set_led+0x2e>
            break;
        case 3:
            set_color(RGB(0, 0, 1)); // Blue
            break;
        case 4:
            set_color(RGB(1, 1, 0)); // Yellow
     3f2:	85 e0       	ldi	r24, 0x05	; 5
     3f4:	0c 94 99 0a 	jmp	0x1532	; 0x1532 <set_color>
            break;
        default:
            set_color(RGB(1, 0, 1)); // Magneta
     3f8:	81 e1       	ldi	r24, 0x11	; 17
     3fa:	0c 94 99 0a 	jmp	0x1532	; 0x1532 <set_color>
            break;
        case 2:
            set_color(RGB(0, 1, 0)); // Green
            break;
        case 3:
            set_color(RGB(0, 0, 1)); // Blue
     3fe:	80 e1       	ldi	r24, 0x10	; 16
     400:	0c 94 99 0a 	jmp	0x1532	; 0x1532 <set_color>
void set_led()
{
    // Set the LED color based on the gradient.
    switch (own_gradient) {
        case 0:
            set_color(RGB(1, 1, 1)); // White
     404:	85 e1       	ldi	r24, 0x15	; 21
     406:	0c 94 99 0a 	jmp	0x1532	; 0x1532 <set_color>
            break;
        case 1:
            set_color(RGB(1, 0, 0)); // Red
            break;
        case 2:
            set_color(RGB(0, 1, 0)); // Green
     40a:	84 e0       	ldi	r24, 0x04	; 4
     40c:	0c 94 99 0a 	jmp	0x1532	; 0x1532 <set_color>

00000410 <set_motion>:

// Function to handle motion.
void set_motion(int new_motion)
{   
    // Only take an an action if the motion is being changed.
    if (current_motion != new_motion)
     410:	20 91 16 01 	lds	r18, 0x0116
     414:	30 91 17 01 	lds	r19, 0x0117
     418:	28 17       	cp	r18, r24
     41a:	39 07       	cpc	r19, r25
     41c:	71 f0       	breq	.+28     	; 0x43a <set_motion+0x2a>
    {   
        current_motion = new_motion;
     41e:	90 93 17 01 	sts	0x0117, r25
     422:	80 93 16 01 	sts	0x0116, r24
        
        if (current_motion == STOP)
     426:	00 97       	sbiw	r24, 0x00	; 0
     428:	81 f0       	breq	.+32     	; 0x44a <set_motion+0x3a>
        {   
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
     42a:	81 30       	cpi	r24, 0x01	; 1
     42c:	91 05       	cpc	r25, r1
     42e:	89 f0       	breq	.+34     	; 0x452 <set_motion+0x42>
        {   
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
     430:	82 30       	cpi	r24, 0x02	; 2
     432:	91 05       	cpc	r25, r1
     434:	b1 f0       	breq	.+44     	; 0x462 <set_motion+0x52>
        {   
            spinup_motors();
            set_motors(kilo_turn_left, 0);
        }
        else if (current_motion == RIGHT)
     436:	03 97       	sbiw	r24, 0x03	; 3
     438:	09 f0       	breq	.+2      	; 0x43c <set_motion+0x2c>
     43a:	08 95       	ret
        {   
            spinup_motors();
     43c:	0e 94 73 06 	call	0xce6	; 0xce6 <spinup_motors>
            set_motors(0, kilo_turn_right);
     440:	60 91 a9 01 	lds	r22, 0x01A9
     444:	80 e0       	ldi	r24, 0x00	; 0
     446:	0c 94 6e 06 	jmp	0xcdc	; 0xcdc <set_motors>
    {   
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {   
            set_motors(0, 0);
     44a:	60 e0       	ldi	r22, 0x00	; 0
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	0c 94 6e 06 	jmp	0xcdc	; 0xcdc <set_motors>
        }
        else if (current_motion == FORWARD)
        {   
            spinup_motors();
     452:	0e 94 73 06 	call	0xce6	; 0xce6 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     456:	60 91 bc 01 	lds	r22, 0x01BC
     45a:	80 91 bb 01 	lds	r24, 0x01BB
     45e:	0c 94 6e 06 	jmp	0xcdc	; 0xcdc <set_motors>
        }
        else if (current_motion == LEFT)
        {   
            spinup_motors();
     462:	0e 94 73 06 	call	0xce6	; 0xce6 <spinup_motors>
            set_motors(kilo_turn_left, 0);
     466:	60 e0       	ldi	r22, 0x00	; 0
     468:	80 91 bd 01 	lds	r24, 0x01BD
     46c:	0c 94 6e 06 	jmp	0xcdc	; 0xcdc <set_motors>

00000470 <check_own_gradient>:
}

void check_own_gradient() {
	// If no neighbors detected within TIME_LAST_GRADIENT seconds
	// then sleep waiting for be activated.
    if ( (kilo_uid != SEED_ID) && (kilo_ticks > (last_gradient_anchored + TIME_LAST_GRADIENT)) && (own_gradient < GRADIENT_MAX))
     470:	80 91 b9 01 	lds	r24, 0x01B9
     474:	90 91 ba 01 	lds	r25, 0x01BA
     478:	89 2b       	or	r24, r25
     47a:	51 f1       	breq	.+84     	; 0x4d0 <check_own_gradient+0x60>
     47c:	40 91 83 01 	lds	r20, 0x0183
     480:	50 91 84 01 	lds	r21, 0x0184
     484:	60 91 85 01 	lds	r22, 0x0185
     488:	70 91 86 01 	lds	r23, 0x0186
     48c:	80 91 54 01 	lds	r24, 0x0154
     490:	90 91 55 01 	lds	r25, 0x0155
     494:	a0 91 56 01 	lds	r26, 0x0156
     498:	b0 91 57 01 	lds	r27, 0x0157
     49c:	80 56       	subi	r24, 0x60	; 96
     49e:	9f 4f       	sbci	r25, 0xFF	; 255
     4a0:	af 4f       	sbci	r26, 0xFF	; 255
     4a2:	bf 4f       	sbci	r27, 0xFF	; 255
     4a4:	84 17       	cp	r24, r20
     4a6:	95 07       	cpc	r25, r21
     4a8:	a6 07       	cpc	r26, r22
     4aa:	b7 07       	cpc	r27, r23
     4ac:	88 f4       	brcc	.+34     	; 0x4d0 <check_own_gradient+0x60>
     4ae:	80 91 18 01 	lds	r24, 0x0118
     4b2:	90 91 19 01 	lds	r25, 0x0119
     4b6:	8f 3f       	cpi	r24, 0xFF	; 255
     4b8:	91 05       	cpc	r25, r1
     4ba:	54 f4       	brge	.+20     	; 0x4d0 <check_own_gradient+0x60>
    {   
        own_gradient = GRADIENT_MAX;
     4bc:	8f ef       	ldi	r24, 0xFF	; 255
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	90 93 19 01 	sts	0x0119, r25
     4c4:	80 93 18 01 	sts	0x0118, r24
		formed_state = FORMED_NO;
     4c8:	10 92 27 01 	sts	0x0127, r1
     4cc:	10 92 26 01 	sts	0x0126, r1
     4d0:	08 95       	ret

000004d2 <opposite_move>:
}

int opposite_move(int offspring)
{
	int next_motion = offspring;
	switch (offspring)
     4d2:	82 30       	cpi	r24, 0x02	; 2
     4d4:	91 05       	cpc	r25, r1
     4d6:	59 f0       	breq	.+22     	; 0x4ee <opposite_move+0x1c>
     4d8:	83 30       	cpi	r24, 0x03	; 3
     4da:	91 05       	cpc	r25, r1
     4dc:	59 f0       	breq	.+22     	; 0x4f4 <opposite_move+0x22>
     4de:	81 30       	cpi	r24, 0x01	; 1
     4e0:	91 05       	cpc	r25, r1
     4e2:	09 f0       	breq	.+2      	; 0x4e6 <opposite_move+0x14>
			break;
		default:
			break;
	}
	return next_motion;
}
     4e4:	08 95       	ret


// Generate 0 or 1 randomly
int randBinary(){
    // Generate an 8-bit random number (between 0 and 2^8 - 1 = 255).
    int random_number = rand_hard();
     4e6:	0e 94 ce 06 	call	0xd9c	; 0xd9c <rand_hard>
			break;
		case RIGHT:
			next_motion = LEFT;
			break;
		case FORWARD:
			if (randBinary() == 1) 
     4ea:	80 fd       	sbrc	r24, 0
     4ec:	03 c0       	rjmp	.+6      	; 0x4f4 <opposite_move+0x22>
			{
				next_motion = LEFT;
			} 
			else 
			{
				next_motion = RIGHT;
     4ee:	83 e0       	ldi	r24, 0x03	; 3
     4f0:	90 e0       	ldi	r25, 0x00	; 0
			break;
		default:
			break;
	}
	return next_motion;
}
     4f2:	08 95       	ret
			next_motion = LEFT;
			break;
		case FORWARD:
			if (randBinary() == 1) 
			{
				next_motion = LEFT;
     4f4:	82 e0       	ldi	r24, 0x02	; 2
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	08 95       	ret

000004fa <move>:

void move() {
	int next_motion = offspring;
	//set_color(RGB(0, 0, 0));
	// closer and closer
	if (distance_to_motivated < distance_to_motivated_parent) 
     4fa:	20 91 06 01 	lds	r18, 0x0106
     4fe:	30 91 07 01 	lds	r19, 0x0107
     502:	80 91 04 01 	lds	r24, 0x0104
     506:	90 91 05 01 	lds	r25, 0x0105
     50a:	28 17       	cp	r18, r24
     50c:	39 07       	cpc	r19, r25
     50e:	8c f5       	brge	.+98     	; 0x572 <move+0x78>
	{
		// I am keeped in the line formed by my motivator and my motivated.
		if (distance_line <= distance_line_parent)
     510:	20 91 02 01 	lds	r18, 0x0102
     514:	30 91 03 01 	lds	r19, 0x0103
     518:	80 91 00 01 	lds	r24, 0x0100
     51c:	90 91 01 01 	lds	r25, 0x0101
     520:	82 17       	cp	r24, r18
     522:	93 07       	cpc	r25, r19
     524:	0c f4       	brge	.+2      	; 0x528 <move+0x2e>
     526:	67 c0       	rjmp	.+206    	; 0x5f6 <move+0xfc>
		{
			set_color(RGB(1, 0, 0));
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	0e 94 99 0a 	call	0x1532	; 0x1532 <set_color>
			next_motion = offspring;
     52e:	80 91 10 01 	lds	r24, 0x0110
     532:	90 91 11 01 	lds	r25, 0x0111
			set_color(RGB(0, 1, 1));
			next_motion = opposite_move(offspring);			
		}
	}
	
	offspring = next_motion;
     536:	90 93 11 01 	sts	0x0111, r25
     53a:	80 93 10 01 	sts	0x0110, r24

// Function to handle motion.
void set_motion(int new_motion)
{   
    // Only take an an action if the motion is being changed.
    if (current_motion != new_motion)
     53e:	20 91 16 01 	lds	r18, 0x0116
     542:	30 91 17 01 	lds	r19, 0x0117
     546:	82 17       	cp	r24, r18
     548:	93 07       	cpc	r25, r19
     54a:	91 f0       	breq	.+36     	; 0x570 <move+0x76>
    {   
        current_motion = new_motion;
     54c:	90 93 17 01 	sts	0x0117, r25
     550:	80 93 16 01 	sts	0x0116, r24
        
        if (current_motion == STOP)
     554:	00 97       	sbiw	r24, 0x00	; 0
     556:	09 f4       	brne	.+2      	; 0x55a <move+0x60>
     558:	78 c0       	rjmp	.+240    	; 0x64a <move+0x150>
        {   
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
     55a:	81 30       	cpi	r24, 0x01	; 1
     55c:	91 05       	cpc	r25, r1
     55e:	09 f4       	brne	.+2      	; 0x562 <move+0x68>
     560:	78 c0       	rjmp	.+240    	; 0x652 <move+0x158>
        {   
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
     562:	82 30       	cpi	r24, 0x02	; 2
     564:	91 05       	cpc	r25, r1
     566:	09 f4       	brne	.+2      	; 0x56a <move+0x70>
     568:	7c c0       	rjmp	.+248    	; 0x662 <move+0x168>
        {   
            spinup_motors();
            set_motors(kilo_turn_left, 0);
        }
        else if (current_motion == RIGHT)
     56a:	03 97       	sbiw	r24, 0x03	; 3
     56c:	09 f4       	brne	.+2      	; 0x570 <move+0x76>
     56e:	5e c0       	rjmp	.+188    	; 0x62c <move+0x132>
     570:	08 95       	ret
			next_motion = opposite_move(offspring);			
		}
	}
	// farer and farer
	// If the distance_to_motivated keep unchanged, it is unusual.
	else if (distance_to_motivated > distance_to_motivated_parent)
     572:	82 17       	cp	r24, r18
     574:	93 07       	cpc	r25, r19
     576:	5c f1       	brlt	.+86     	; 0x5ce <move+0xd4>
			next_motion = opposite_move(offspring);
		}
	}
	else
	{
		if (flag_maxest == YES)
     578:	80 91 3e 01 	lds	r24, 0x013E
     57c:	90 91 3f 01 	lds	r25, 0x013F
     580:	01 97       	sbiw	r24, 0x01	; 1
     582:	09 f4       	brne	.+2      	; 0x586 <move+0x8c>
     584:	75 c0       	rjmp	.+234    	; 0x670 <move+0x176>
		{
			next_motion = FORWARD;
		}
		else if (distance_line <= distance_line_parent)
     586:	20 91 02 01 	lds	r18, 0x0102
     58a:	30 91 03 01 	lds	r19, 0x0103
     58e:	80 91 00 01 	lds	r24, 0x0100
     592:	90 91 01 01 	lds	r25, 0x0101
     596:	82 17       	cp	r24, r18
     598:	93 07       	cpc	r25, r19
     59a:	0c f0       	brlt	.+2      	; 0x59e <move+0xa4>
     59c:	4e c0       	rjmp	.+156    	; 0x63a <move+0x140>
			set_color(RGB(1, 1, 0));
			next_motion = offspring;
		}
		else
		{
			set_color(RGB(0, 1, 1));
     59e:	84 e1       	ldi	r24, 0x14	; 20
     5a0:	0e 94 99 0a 	call	0x1532	; 0x1532 <set_color>
			next_motion = opposite_move(offspring);			
     5a4:	80 91 10 01 	lds	r24, 0x0110
     5a8:	90 91 11 01 	lds	r25, 0x0111
}

int opposite_move(int offspring)
{
	int next_motion = offspring;
	switch (offspring)
     5ac:	82 30       	cpi	r24, 0x02	; 2
     5ae:	91 05       	cpc	r25, r1
     5b0:	59 f0       	breq	.+22     	; 0x5c8 <move+0xce>
     5b2:	83 30       	cpi	r24, 0x03	; 3
     5b4:	91 05       	cpc	r25, r1
     5b6:	61 f1       	breq	.+88     	; 0x610 <move+0x116>
     5b8:	81 30       	cpi	r24, 0x01	; 1
     5ba:	91 05       	cpc	r25, r1
     5bc:	09 f0       	breq	.+2      	; 0x5c0 <move+0xc6>
     5be:	bb cf       	rjmp	.-138    	; 0x536 <move+0x3c>


// Generate 0 or 1 randomly
int randBinary(){
    // Generate an 8-bit random number (between 0 and 2^8 - 1 = 255).
    int random_number = rand_hard();
     5c0:	0e 94 ce 06 	call	0xd9c	; 0xd9c <rand_hard>
			break;
		case RIGHT:
			next_motion = LEFT;
			break;
		case FORWARD:
			if (randBinary() == 1) 
     5c4:	80 fd       	sbrc	r24, 0
     5c6:	24 c0       	rjmp	.+72     	; 0x610 <move+0x116>
			{
				next_motion = LEFT;
			} 
			else 
			{
				next_motion = RIGHT;
     5c8:	83 e0       	ldi	r24, 0x03	; 3
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	b4 cf       	rjmp	.-152    	; 0x536 <move+0x3c>
	// farer and farer
	// If the distance_to_motivated keep unchanged, it is unusual.
	else if (distance_to_motivated > distance_to_motivated_parent)
	{
		// It's not my fault, so I continue my movement as before.
		if (my_fault == NO)
     5ce:	80 91 12 01 	lds	r24, 0x0112
     5d2:	90 91 13 01 	lds	r25, 0x0113
     5d6:	89 2b       	or	r24, r25
     5d8:	f1 f4       	brne	.+60     	; 0x616 <move+0x11c>
		{
			set_color(RGB(0, 1, 0));
     5da:	84 e0       	ldi	r24, 0x04	; 4
     5dc:	0e 94 99 0a 	call	0x1532	; 0x1532 <set_color>
			my_fault = YES;
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	90 93 13 01 	sts	0x0113, r25
     5e8:	80 93 12 01 	sts	0x0112, r24
			next_motion = offspring;
     5ec:	80 91 10 01 	lds	r24, 0x0110
     5f0:	90 91 11 01 	lds	r25, 0x0111
     5f4:	a0 cf       	rjmp	.-192    	; 0x536 <move+0x3c>
			set_color(RGB(1, 0, 0));
			next_motion = offspring;
		}
		else
		{
			set_color(RGB(0, 0, 0));
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	0e 94 99 0a 	call	0x1532	; 0x1532 <set_color>
			next_motion = opposite_move(offspring);			
     5fc:	80 91 10 01 	lds	r24, 0x0110
     600:	90 91 11 01 	lds	r25, 0x0111
}

int opposite_move(int offspring)
{
	int next_motion = offspring;
	switch (offspring)
     604:	82 30       	cpi	r24, 0x02	; 2
     606:	91 05       	cpc	r25, r1
     608:	f9 f2       	breq	.-66     	; 0x5c8 <move+0xce>
     60a:	83 30       	cpi	r24, 0x03	; 3
     60c:	91 05       	cpc	r25, r1
     60e:	a1 f6       	brne	.-88     	; 0x5b8 <move+0xbe>
			next_motion = LEFT;
			break;
		case FORWARD:
			if (randBinary() == 1) 
			{
				next_motion = LEFT;
     610:	82 e0       	ldi	r24, 0x02	; 2
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	90 cf       	rjmp	.-224    	; 0x536 <move+0x3c>
			my_fault = YES;
			next_motion = offspring;
		}
		else
		{
			set_color(RGB(0, 0, 1));
     616:	80 e1       	ldi	r24, 0x10	; 16
     618:	0e 94 99 0a 	call	0x1532	; 0x1532 <set_color>
			next_motion = opposite_move(offspring);
     61c:	80 91 10 01 	lds	r24, 0x0110
     620:	90 91 11 01 	lds	r25, 0x0111
}

int opposite_move(int offspring)
{
	int next_motion = offspring;
	switch (offspring)
     624:	82 30       	cpi	r24, 0x02	; 2
     626:	91 05       	cpc	r25, r1
     628:	21 f6       	brne	.-120    	; 0x5b2 <move+0xb8>
     62a:	ce cf       	rjmp	.-100    	; 0x5c8 <move+0xce>
            spinup_motors();
            set_motors(kilo_turn_left, 0);
        }
        else if (current_motion == RIGHT)
        {   
            spinup_motors();
     62c:	0e 94 73 06 	call	0xce6	; 0xce6 <spinup_motors>
            set_motors(0, kilo_turn_right);
     630:	60 91 a9 01 	lds	r22, 0x01A9
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	0c 94 6e 06 	jmp	0xcdc	; 0xcdc <set_motors>
		{
			next_motion = FORWARD;
		}
		else if (distance_line <= distance_line_parent)
		{
			set_color(RGB(1, 1, 0));
     63a:	85 e0       	ldi	r24, 0x05	; 5
     63c:	0e 94 99 0a 	call	0x1532	; 0x1532 <set_color>
			next_motion = offspring;
     640:	80 91 10 01 	lds	r24, 0x0110
     644:	90 91 11 01 	lds	r25, 0x0111
     648:	76 cf       	rjmp	.-276    	; 0x536 <move+0x3c>
    {   
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {   
            set_motors(0, 0);
     64a:	60 e0       	ldi	r22, 0x00	; 0
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	0c 94 6e 06 	jmp	0xcdc	; 0xcdc <set_motors>
        }
        else if (current_motion == FORWARD)
        {   
            spinup_motors();
     652:	0e 94 73 06 	call	0xce6	; 0xce6 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     656:	60 91 bc 01 	lds	r22, 0x01BC
     65a:	80 91 bb 01 	lds	r24, 0x01BB
     65e:	0c 94 6e 06 	jmp	0xcdc	; 0xcdc <set_motors>
        }
        else if (current_motion == LEFT)
        {   
            spinup_motors();
     662:	0e 94 73 06 	call	0xce6	; 0xce6 <spinup_motors>
            set_motors(kilo_turn_left, 0);
     666:	60 e0       	ldi	r22, 0x00	; 0
     668:	80 91 bd 01 	lds	r24, 0x01BD
     66c:	0c 94 6e 06 	jmp	0xcdc	; 0xcdc <set_motors>
	}
	else
	{
		if (flag_maxest == YES)
		{
			next_motion = FORWARD;
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	60 cf       	rjmp	.-320    	; 0x536 <move+0x3c>

00000676 <loop>:
}

void check_own_gradient() {
	// If no neighbors detected within TIME_LAST_GRADIENT seconds
	// then sleep waiting for be activated.
    if ( (kilo_uid != SEED_ID) && (kilo_ticks > (last_gradient_anchored + TIME_LAST_GRADIENT)) && (own_gradient < GRADIENT_MAX))
     676:	80 91 b9 01 	lds	r24, 0x01B9
     67a:	90 91 ba 01 	lds	r25, 0x01BA
     67e:	89 2b       	or	r24, r25
     680:	09 f4       	brne	.+2      	; 0x684 <loop+0xe>
     682:	42 c0       	rjmp	.+132    	; 0x708 <loop+0x92>
     684:	40 91 83 01 	lds	r20, 0x0183
     688:	50 91 84 01 	lds	r21, 0x0184
     68c:	60 91 85 01 	lds	r22, 0x0185
     690:	70 91 86 01 	lds	r23, 0x0186
     694:	80 91 54 01 	lds	r24, 0x0154
     698:	90 91 55 01 	lds	r25, 0x0155
     69c:	a0 91 56 01 	lds	r26, 0x0156
     6a0:	b0 91 57 01 	lds	r27, 0x0157
     6a4:	80 56       	subi	r24, 0x60	; 96
     6a6:	9f 4f       	sbci	r25, 0xFF	; 255
     6a8:	af 4f       	sbci	r26, 0xFF	; 255
     6aa:	bf 4f       	sbci	r27, 0xFF	; 255
     6ac:	84 17       	cp	r24, r20
     6ae:	95 07       	cpc	r25, r21
     6b0:	a6 07       	cpc	r26, r22
     6b2:	b7 07       	cpc	r27, r23
     6b4:	48 f5       	brcc	.+82     	; 0x708 <loop+0x92>
     6b6:	80 91 18 01 	lds	r24, 0x0118
     6ba:	90 91 19 01 	lds	r25, 0x0119
     6be:	8f 3f       	cpi	r24, 0xFF	; 255
     6c0:	91 05       	cpc	r25, r1
     6c2:	14 f5       	brge	.+68     	; 0x708 <loop+0x92>
    {   
        own_gradient = GRADIENT_MAX;
     6c4:	8f ef       	ldi	r24, 0xFF	; 255
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	90 93 19 01 	sts	0x0119, r25
     6cc:	80 93 18 01 	sts	0x0118, r24
		formed_state = FORMED_NO;
     6d0:	10 92 27 01 	sts	0x0127, r1
     6d4:	10 92 26 01 	sts	0x0126, r1
		}
    }
	// Stop when the sequence has not formed.
	else
	{
		set_color(RGB(0, 0, 0));
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	0e 94 99 0a 	call	0x1532	; 0x1532 <set_color>
		state_myself = COMPLETED;
     6de:	85 e0       	ldi	r24, 0x05	; 5
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	90 93 2d 01 	sts	0x012D, r25
     6e6:	80 93 2c 01 	sts	0x012C, r24

// Function to handle motion.
void set_motion(int new_motion)
{   
    // Only take an an action if the motion is being changed.
    if (current_motion != new_motion)
     6ea:	80 91 16 01 	lds	r24, 0x0116
     6ee:	90 91 17 01 	lds	r25, 0x0117
     6f2:	89 2b       	or	r24, r25
     6f4:	09 f4       	brne	.+2      	; 0x6f8 <loop+0x82>
     6f6:	82 c0       	rjmp	.+260    	; 0x7fc <loop+0x186>
    {   
        current_motion = new_motion;
     6f8:	10 92 17 01 	sts	0x0117, r1
     6fc:	10 92 16 01 	sts	0x0116, r1
        
        if (current_motion == STOP)
        {   
            set_motors(0, 0);
     700:	60 e0       	ldi	r22, 0x00	; 0
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	0c 94 6e 06 	jmp	0xcdc	; 0xcdc <set_motors>
	check_own_gradient();
	// Move only when the sequence has already formed.
	// Move can only occured when the movitvator and motivated member
	// is stationary. This can assure the kilobot make the right
	// decision based on the measured changing distance.
	if ((formed_state == FORMED_OK) && (state_motivator == COMPLETED) && (state_motivated != MOVE))
     708:	80 91 26 01 	lds	r24, 0x0126
     70c:	90 91 27 01 	lds	r25, 0x0127
     710:	01 97       	sbiw	r24, 0x01	; 1
     712:	11 f7       	brne	.-60     	; 0x6d8 <loop+0x62>
     714:	80 91 2e 01 	lds	r24, 0x012E
     718:	90 91 2f 01 	lds	r25, 0x012F
     71c:	85 30       	cpi	r24, 0x05	; 5
     71e:	91 05       	cpc	r25, r1
     720:	d9 f6       	brne	.-74     	; 0x6d8 <loop+0x62>
     722:	20 91 30 01 	lds	r18, 0x0130
     726:	30 91 31 01 	lds	r19, 0x0131
     72a:	24 30       	cpi	r18, 0x04	; 4
     72c:	31 05       	cpc	r19, r1
     72e:	a1 f2       	breq	.-88     	; 0x6d8 <loop+0x62>
	{
		if (flag_maxest == YES)
     730:	20 91 3e 01 	lds	r18, 0x013E
     734:	30 91 3f 01 	lds	r19, 0x013F
     738:	21 30       	cpi	r18, 0x01	; 1
     73a:	31 05       	cpc	r19, r1
     73c:	09 f4       	brne	.+2      	; 0x740 <loop+0xca>
     73e:	5f c0       	rjmp	.+190    	; 0x7fe <loop+0x188>
		// My gradient is not the maxest.
		else
		{
			// When my motivator is closer enough can I move 
			// to assure my motivator is not lost.
			if (distance_to_motivator <= DISTANCE_COLLIDE)
     740:	80 91 0c 01 	lds	r24, 0x010C
     744:	90 91 0d 01 	lds	r25, 0x010D
     748:	89 32       	cpi	r24, 0x29	; 41
     74a:	91 05       	cpc	r25, r1
     74c:	34 f4       	brge	.+12     	; 0x75a <loop+0xe4>
			{
				state_myself = MOVE;
     74e:	24 e0       	ldi	r18, 0x04	; 4
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	30 93 2d 01 	sts	0x012D, r19
     756:	20 93 2c 01 	sts	0x012C, r18
			}

			if (distance_to_motivated <= DISTANCE_COLLIDE)
     75a:	20 91 06 01 	lds	r18, 0x0106
     75e:	30 91 07 01 	lds	r19, 0x0107
     762:	29 32       	cpi	r18, 0x29	; 41
     764:	31 05       	cpc	r19, r1
     766:	d4 f1       	brlt	.+116    	; 0x7dc <loop+0x166>
			{
				state_myself = COMPLETED;
			}
		}

		if (state_myself == MOVE)
     768:	20 91 2c 01 	lds	r18, 0x012C
     76c:	30 91 2d 01 	lds	r19, 0x012D
     770:	24 30       	cpi	r18, 0x04	; 4
     772:	31 05       	cpc	r19, r1
     774:	c9 f5       	brne	.+114    	; 0x7e8 <loop+0x172>
		// My gradient is not the maxest.
		else
		{
			// When my motivator is closer enough can I move 
			// to assure my motivator is not lost.
			if (distance_to_motivator <= DISTANCE_COLLIDE)
     776:	9c 01       	movw	r18, r24
		{	
			// Motion is detected every fixed time interval
			// TIME_LAST_MOTION_UPDATE.
			// This can assure the fixed distance kilobot move 
			// in a fixed speed.
			if (kilo_ticks > (last_motion_update + TIME_LAST_MOTION_UPDATE))
     778:	40 91 83 01 	lds	r20, 0x0183
     77c:	50 91 84 01 	lds	r21, 0x0184
     780:	60 91 85 01 	lds	r22, 0x0185
     784:	70 91 86 01 	lds	r23, 0x0186
     788:	80 91 50 01 	lds	r24, 0x0150
     78c:	90 91 51 01 	lds	r25, 0x0151
     790:	a0 91 52 01 	lds	r26, 0x0152
     794:	b0 91 53 01 	lds	r27, 0x0153
     798:	84 17       	cp	r24, r20
     79a:	95 07       	cpc	r25, r21
     79c:	a6 07       	cpc	r26, r22
     79e:	b7 07       	cpc	r27, r23
     7a0:	68 f5       	brcc	.+90     	; 0x7fc <loop+0x186>
			{
				distance_line = distance_to_motivated + distance_to_motivator;
     7a2:	80 91 06 01 	lds	r24, 0x0106
     7a6:	90 91 07 01 	lds	r25, 0x0107
     7aa:	82 0f       	add	r24, r18
     7ac:	93 1f       	adc	r25, r19
     7ae:	90 93 03 01 	sts	0x0103, r25
     7b2:	80 93 02 01 	sts	0x0102, r24
				move();
     7b6:	0e 94 7d 02 	call	0x4fa	; 0x4fa <move>
				distance_to_motivated_parent = distance_to_motivated;
     7ba:	80 91 06 01 	lds	r24, 0x0106
     7be:	90 91 07 01 	lds	r25, 0x0107
     7c2:	90 93 05 01 	sts	0x0105, r25
     7c6:	80 93 04 01 	sts	0x0104, r24
				distance_line_parent = distance_line;
     7ca:	80 91 02 01 	lds	r24, 0x0102
     7ce:	90 91 03 01 	lds	r25, 0x0103
     7d2:	90 93 01 01 	sts	0x0101, r25
     7d6:	80 93 00 01 	sts	0x0100, r24
     7da:	08 95       	ret
				state_myself = MOVE;
			}

			if (distance_to_motivated <= DISTANCE_COLLIDE)
			{
				state_myself = COMPLETED;
     7dc:	85 e0       	ldi	r24, 0x05	; 5
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	90 93 2d 01 	sts	0x012D, r25
     7e4:	80 93 2c 01 	sts	0x012C, r24
				distance_line_parent = distance_line;
			}
		}
		else
		{
			set_color(RGB(0, 0, 0));
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	0e 94 99 0a 	call	0x1532	; 0x1532 <set_color>

// Function to handle motion.
void set_motion(int new_motion)
{   
    // Only take an an action if the motion is being changed.
    if (current_motion != new_motion)
     7ee:	80 91 16 01 	lds	r24, 0x0116
     7f2:	90 91 17 01 	lds	r25, 0x0117
     7f6:	89 2b       	or	r24, r25
     7f8:	09 f0       	breq	.+2      	; 0x7fc <loop+0x186>
     7fa:	7e cf       	rjmp	.-260    	; 0x6f8 <loop+0x82>
     7fc:	08 95       	ret
	{
		if (flag_maxest == YES)
		{
			// When my motivator is closer enough can I move 
			// to assure my motivator is not lost.
			if (distance_to_motivator <= DISTANCE_COLLIDE)
     7fe:	20 91 0c 01 	lds	r18, 0x010C
     802:	30 91 0d 01 	lds	r19, 0x010D
     806:	22 33       	cpi	r18, 0x32	; 50
     808:	31 05       	cpc	r19, r1
     80a:	54 f7       	brge	.-44     	; 0x7e0 <loop+0x16a>
			{
				state_myself = MOVE;
     80c:	84 e0       	ldi	r24, 0x04	; 4
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	90 93 2d 01 	sts	0x012D, r25
     814:	80 93 2c 01 	sts	0x012C, r24
     818:	af cf       	rjmp	.-162    	; 0x778 <loop+0x102>

0000081a <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     81a:	08 95       	ret

0000081c <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	08 95       	ret

00000822 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     822:	08 95       	ret

00000824 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     824:	df 92       	push	r13
     826:	ef 92       	push	r14
     828:	ff 92       	push	r15
     82a:	0f 93       	push	r16
     82c:	1f 93       	push	r17
     82e:	cf 93       	push	r28
     830:	df 93       	push	r29
    cli();
     832:	f8 94       	cli

    ports_off();
     834:	14 b8       	out	0x04, r1	; 4
     836:	17 b8       	out	0x07, r1	; 7
     838:	1a b8       	out	0x0a, r1	; 10
     83a:	15 b8       	out	0x05, r1	; 5
     83c:	18 b8       	out	0x08, r1	; 8
     83e:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     840:	52 9a       	sbi	0x0a, 2	; 10
     842:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     844:	14 bc       	out	0x24, r1	; 36
     846:	85 e0       	ldi	r24, 0x05	; 5
     848:	85 bd       	out	0x25, r24	; 37
     84a:	8f ef       	ldi	r24, 0xFF	; 255
     84c:	87 bd       	out	0x27, r24	; 39
     84e:	22 e0       	ldi	r18, 0x02	; 2
     850:	20 93 6e 00 	sts	0x006E, r18
    rx_timer_setup();
     854:	10 92 80 00 	sts	0x0080, r1
     858:	10 92 81 00 	sts	0x0081, r1
     85c:	8f e8       	ldi	r24, 0x8F	; 143
     85e:	9b e0       	ldi	r25, 0x0B	; 11
     860:	90 93 89 00 	sts	0x0089, r25
     864:	80 93 88 00 	sts	0x0088, r24
     868:	20 93 6f 00 	sts	0x006F, r18
    motors_setup();
     86c:	53 98       	cbi	0x0a, 3	; 10
     86e:	23 98       	cbi	0x04, 3	; 4
     870:	81 ea       	ldi	r24, 0xA1	; 161
     872:	80 93 b0 00 	sts	0x00B0, r24
     876:	20 93 b1 00 	sts	0x00B1, r18
     87a:	10 92 b4 00 	sts	0x00B4, r1
     87e:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     882:	8b e0       	ldi	r24, 0x0B	; 11
     884:	80 bf       	out	0x30, r24	; 48
     886:	83 e0       	ldi	r24, 0x03	; 3
     888:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     88c:	86 e0       	ldi	r24, 0x06	; 6
     88e:	80 93 7c 00 	sts	0x007C, r24
     892:	83 e8       	ldi	r24, 0x83	; 131
     894:	80 93 7a 00 	sts	0x007A, r24
     898:	80 91 7a 00 	lds	r24, 0x007A
     89c:	80 64       	ori	r24, 0x40	; 64
     89e:	80 93 7a 00 	sts	0x007A, r24
     8a2:	80 91 7a 00 	lds	r24, 0x007A
     8a6:	86 fd       	sbrc	r24, 6
     8a8:	fc cf       	rjmp	.-8      	; 0x8a2 <kilo_init+0x7e>
    adc_trigger_high_gain();
     8aa:	10 92 7c 00 	sts	0x007C, r1
     8ae:	83 ea       	ldi	r24, 0xA3	; 163
     8b0:	80 93 7a 00 	sts	0x007A, r24
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <__eerd_byte_m328p>
    if (osccal != 0xFF)
     8c2:	8f 3f       	cpi	r24, 0xFF	; 255
     8c4:	11 f0       	breq	.+4      	; 0x8ca <kilo_init+0xa6>
        OSCCAL = osccal;
     8c6:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     8ca:	10 92 87 01 	sts	0x0187, r1
    rx_leadingbit = 1;
     8ce:	c1 e0       	ldi	r28, 0x01	; 1
     8d0:	c0 93 60 01 	sts	0x0160, r28
    rx_leadingbyte = 1;
     8d4:	c0 93 a4 01 	sts	0x01A4, r28
    rx_byteindex = 0;
     8d8:	10 92 7e 01 	sts	0x017E, r1
    rx_bytevalue = 0;
     8dc:	10 92 b8 01 	sts	0x01B8, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     8e0:	80 e9       	ldi	r24, 0x90	; 144
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <__eerd_byte_m328p>
     8e8:	80 93 7d 01 	sts	0x017D, r24
    if (tx_mask & ~TX_MASK_MAX)
     8ec:	80 91 7d 01 	lds	r24, 0x017D
     8f0:	88 73       	andi	r24, 0x38	; 56
     8f2:	11 f0       	breq	.+4      	; 0x8f8 <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     8f4:	c0 93 7d 01 	sts	0x017D, r28
    tx_clock = 0;
     8f8:	10 92 a8 01 	sts	0x01A8, r1
     8fc:	10 92 a7 01 	sts	0x01A7, r1
    tx_increment = 255;
     900:	8f ef       	ldi	r24, 0xFF	; 255
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	90 93 a6 01 	sts	0x01A6, r25
     908:	80 93 a5 01 	sts	0x01A5, r24
    kilo_ticks = 0;
     90c:	10 92 83 01 	sts	0x0183, r1
     910:	10 92 84 01 	sts	0x0184, r1
     914:	10 92 85 01 	sts	0x0185, r1
     918:	10 92 86 01 	sts	0x0186, r1
    kilo_state = IDLE;
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	80 93 43 01 	sts	0x0143, r24
    kilo_tx_period = 3906;
     922:	82 e4       	ldi	r24, 0x42	; 66
     924:	9f e0       	ldi	r25, 0x0F	; 15
     926:	90 93 b7 01 	sts	0x01B7, r25
     92a:	80 93 b6 01 	sts	0x01B6, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     92e:	80 eb       	ldi	r24, 0xB0	; 176
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <__eerd_byte_m328p>
     936:	c8 2f       	mov	r28, r24
     938:	81 eb       	ldi	r24, 0xB1	; 177
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <__eerd_byte_m328p>
     940:	2c 2f       	mov	r18, r28
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	38 2b       	or	r19, r24
     946:	30 93 ba 01 	sts	0x01BA, r19
     94a:	20 93 b9 01 	sts	0x01B9, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     94e:	85 e0       	ldi	r24, 0x05	; 5
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <__eerd_byte_m328p>
     956:	80 93 bd 01 	sts	0x01BD, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     95a:	89 e0       	ldi	r24, 0x09	; 9
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <__eerd_byte_m328p>
     962:	80 93 a9 01 	sts	0x01A9, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     966:	8c e0       	ldi	r24, 0x0C	; 12
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <__eerd_byte_m328p>
     96e:	80 93 bb 01 	sts	0x01BB, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     972:	84 e1       	ldi	r24, 0x14	; 20
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <__eerd_byte_m328p>
     97a:	80 93 bc 01 	sts	0x01BC, r24
     97e:	58 e8       	ldi	r21, 0x88	; 136
     980:	e5 2e       	mov	r14, r21
     982:	51 e0       	ldi	r21, 0x01	; 1
     984:	f5 2e       	mov	r15, r21
     986:	01 e6       	ldi	r16, 0x61	; 97
     988:	11 e0       	ldi	r17, 0x01	; 1
     98a:	c0 e2       	ldi	r28, 0x20	; 32
     98c:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     98e:	ce 01       	movw	r24, r28
     990:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <__eerd_byte_m328p>
     994:	d8 2e       	mov	r13, r24
     996:	ce 01       	movw	r24, r28
     998:	01 96       	adiw	r24, 0x01	; 1
     99a:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <__eerd_byte_m328p>
     99e:	2d 2d       	mov	r18, r13
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	32 2f       	mov	r19, r18
     9a4:	22 27       	eor	r18, r18
     9a6:	28 2b       	or	r18, r24
     9a8:	f7 01       	movw	r30, r14
     9aa:	21 93       	st	Z+, r18
     9ac:	31 93       	st	Z+, r19
     9ae:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     9b0:	ce 01       	movw	r24, r28
     9b2:	c0 96       	adiw	r24, 0x30	; 48
     9b4:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <__eerd_byte_m328p>
     9b8:	d8 2e       	mov	r13, r24
     9ba:	ce 01       	movw	r24, r28
     9bc:	c1 96       	adiw	r24, 0x31	; 49
     9be:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <__eerd_byte_m328p>
     9c2:	2d 2d       	mov	r18, r13
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	32 2f       	mov	r19, r18
     9c8:	22 27       	eor	r18, r18
     9ca:	28 2b       	or	r18, r24
     9cc:	f8 01       	movw	r30, r16
     9ce:	21 93       	st	Z+, r18
     9d0:	31 93       	st	Z+, r19
     9d2:	8f 01       	movw	r16, r30
     9d4:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     9d6:	cc 33       	cpi	r28, 0x3C	; 60
     9d8:	d1 05       	cpc	r29, r1
     9da:	c9 f6       	brne	.-78     	; 0x98e <__stack+0x8f>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     9dc:	78 94       	sei
}
     9de:	df 91       	pop	r29
     9e0:	cf 91       	pop	r28
     9e2:	1f 91       	pop	r17
     9e4:	0f 91       	pop	r16
     9e6:	ff 90       	pop	r15
     9e8:	ef 90       	pop	r14
     9ea:	df 90       	pop	r13
     9ec:	08 95       	ret

000009ee <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     9ee:	1f 92       	push	r1
     9f0:	0f 92       	push	r0
     9f2:	0f b6       	in	r0, 0x3f	; 63
     9f4:	0f 92       	push	r0
     9f6:	11 24       	eor	r1, r1
     9f8:	8f 93       	push	r24
    wdt_disable();
     9fa:	88 e1       	ldi	r24, 0x18	; 24
     9fc:	0f b6       	in	r0, 0x3f	; 63
     9fe:	f8 94       	cli
     a00:	80 93 60 00 	sts	0x0060, r24
     a04:	10 92 60 00 	sts	0x0060, r1
     a08:	0f be       	out	0x3f, r0	; 63
}
     a0a:	8f 91       	pop	r24
     a0c:	0f 90       	pop	r0
     a0e:	0f be       	out	0x3f, r0	; 63
     a10:	0f 90       	pop	r0
     a12:	1f 90       	pop	r1
     a14:	18 95       	reti

00000a16 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     a16:	7c 01       	movw	r14, r24
     a18:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     a1a:	d1 2c       	mov	r13, r1
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     a1c:	88 24       	eor	r8, r8
     a1e:	8a 94       	dec	r8
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     a20:	64 e0       	ldi	r22, 0x04	; 4
     a22:	b6 2e       	mov	r11, r22

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     a24:	76 e0       	ldi	r23, 0x06	; 6
     a26:	97 2e       	mov	r9, r23
     a28:	e3 e8       	ldi	r30, 0x83	; 131
     a2a:	ae 2e       	mov	r10, r30
            case SLEEPING:
                cli();
                acomp_off();
                adc_off();
                ports_off();
                wdt_enable(WDTO_8S);
     a2c:	08 e1       	ldi	r16, 0x18	; 24
     a2e:	10 e0       	ldi	r17, 0x00	; 0
     a30:	f9 e2       	ldi	r31, 0x29	; 41
     a32:	cf 2e       	mov	r12, r31

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     a34:	e0 91 43 01 	lds	r30, 0x0143
     a38:	f0 e0       	ldi	r31, 0x00	; 0
     a3a:	e7 30       	cpi	r30, 0x07	; 7
     a3c:	f1 05       	cpc	r31, r1
     a3e:	d0 f7       	brcc	.-12     	; 0xa34 <kilo_start+0x1e>
     a40:	ec 5c       	subi	r30, 0xCC	; 204
     a42:	ff 4f       	sbci	r31, 0xFF	; 255
     a44:	0c 94 a9 0d 	jmp	0x1b52	; 0x1b52 <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     a48:	dd 20       	and	r13, r13
     a4a:	09 f4       	brne	.+2      	; 0xa4e <kilo_start+0x38>
     a4c:	fd c0       	rjmp	.+506    	; 0xc48 <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     a4e:	b0 92 43 01 	sts	0x0143, r11
     a52:	dd 24       	eor	r13, r13
     a54:	d3 94       	inc	r13
            case RUNNING:
                loop();
     a56:	fe 01       	movw	r30, r28
     a58:	09 95       	icall
                break;
     a5a:	ec cf       	rjmp	.-40     	; 0xa34 <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     a5c:	80 91 87 01 	lds	r24, 0x0187
     a60:	81 11       	cpse	r24, r1
     a62:	eb c0       	rjmp	.+470    	; 0xc3a <kilo_start+0x224>
        cli();                                    // disable interrupts
     a64:	f8 94       	cli
        adc_setup_conversion(6);
     a66:	90 92 7c 00 	sts	0x007C, r9
     a6a:	a0 92 7a 00 	sts	0x007A, r10
        adc_start_conversion();
     a6e:	80 91 7a 00 	lds	r24, 0x007A
     a72:	80 64       	ori	r24, 0x40	; 64
     a74:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     a78:	80 91 7a 00 	lds	r24, 0x007A
     a7c:	86 fd       	sbrc	r24, 6
     a7e:	fc cf       	rjmp	.-8      	; 0xa78 <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     a80:	20 91 78 00 	lds	r18, 0x0078
     a84:	30 91 79 00 	lds	r19, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     a88:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     a8a:	2b 3a       	cpi	r18, 0xAB	; 171
     a8c:	92 e0       	ldi	r25, 0x02	; 2
     a8e:	39 07       	cpc	r19, r25
     a90:	0c f0       	brlt	.+2      	; 0xa94 <kilo_start+0x7e>
     a92:	ed c0       	rjmp	.+474    	; 0xc6e <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     a94:	29 38       	cpi	r18, 0x89	; 137
     a96:	e2 e0       	ldi	r30, 0x02	; 2
     a98:	3e 07       	cpc	r19, r30
     a9a:	0c f0       	brlt	.+2      	; 0xa9e <kilo_start+0x88>
     a9c:	ef c0       	rjmp	.+478    	; 0xc7c <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     a9e:	27 36       	cpi	r18, 0x67	; 103
     aa0:	32 40       	sbci	r19, 0x02	; 2
     aa2:	0c f4       	brge	.+2      	; 0xaa6 <kilo_start+0x90>
     aa4:	ca c0       	rjmp	.+404    	; 0xc3a <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     aa6:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     aa8:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     aaa:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     aac:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     aae:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     ab0:	3c 98       	cbi	0x07, 4	; 7
     ab2:	c0 cf       	rjmp	.-128    	; 0xa34 <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     ab4:	f8 94       	cli
                acomp_off();
     ab6:	80 b7       	in	r24, 0x30	; 48
     ab8:	87 7f       	andi	r24, 0xF7	; 247
     aba:	80 bf       	out	0x30, r24	; 48
                adc_off();
     abc:	80 91 7a 00 	lds	r24, 0x007A
     ac0:	8f 77       	andi	r24, 0x7F	; 127
     ac2:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     ac6:	14 b8       	out	0x04, r1	; 4
     ac8:	17 b8       	out	0x07, r1	; 7
     aca:	1a b8       	out	0x0a, r1	; 10
     acc:	15 b8       	out	0x05, r1	; 5
     ace:	18 b8       	out	0x08, r1	; 8
     ad0:	1b b8       	out	0x0b, r1	; 11
                wdt_enable(WDTO_8S);
     ad2:	0f b6       	in	r0, 0x3f	; 63
     ad4:	f8 94       	cli
     ad6:	a8 95       	wdr
     ad8:	00 93 60 00 	sts	0x0060, r16
     adc:	0f be       	out	0x3f, r0	; 63
     ade:	c0 92 60 00 	sts	0x0060, r12
                WDTCSR |= (1<<WDIE);
     ae2:	80 91 60 00 	lds	r24, 0x0060
     ae6:	80 64       	ori	r24, 0x40	; 64
     ae8:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     aec:	83 b7       	in	r24, 0x33	; 51
     aee:	81 7f       	andi	r24, 0xF1	; 241
     af0:	84 60       	ori	r24, 0x04	; 4
     af2:	83 bf       	out	0x33, r24	; 51
                cli();
     af4:	f8 94       	cli
                sleep_enable();
     af6:	83 b7       	in	r24, 0x33	; 51
     af8:	81 60       	ori	r24, 0x01	; 1
     afa:	83 bf       	out	0x33, r24	; 51
                sei();
     afc:	78 94       	sei
                sleep_cpu();
     afe:	88 95       	sleep
                sleep_disable();
     b00:	83 b7       	in	r24, 0x33	; 51
     b02:	8e 7f       	andi	r24, 0xFE	; 254
     b04:	83 bf       	out	0x33, r24	; 51
                sei();
     b06:	78 94       	sei
                rx_busy = 0;
     b08:	10 92 87 01 	sts	0x0187, r1
                ports_on();
     b0c:	52 9a       	sbi	0x0a, 2	; 10
     b0e:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     b10:	80 91 7a 00 	lds	r24, 0x007A
     b14:	80 68       	ori	r24, 0x80	; 128
     b16:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b1a:	87 e5       	ldi	r24, 0x57	; 87
     b1c:	92 e0       	ldi	r25, 0x02	; 2
     b1e:	01 97       	sbiw	r24, 0x01	; 1
     b20:	f1 f7       	brne	.-4      	; 0xb1e <kilo_start+0x108>
     b22:	00 c0       	rjmp	.+0      	; 0xb24 <kilo_start+0x10e>
     b24:	00 00       	nop
                _delay_us(300);
                acomp_on();
     b26:	80 b7       	in	r24, 0x30	; 48
     b28:	88 61       	ori	r24, 0x18	; 24
     b2a:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     b2c:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     b2e:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     b30:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     b32:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     b34:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     b36:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b38:	ef e1       	ldi	r30, 0x1F	; 31
     b3a:	fe e4       	ldi	r31, 0x4E	; 78
     b3c:	31 97       	sbiw	r30, 0x01	; 1
     b3e:	f1 f7       	brne	.-4      	; 0xb3c <kilo_start+0x126>
     b40:	00 c0       	rjmp	.+0      	; 0xb42 <kilo_start+0x12c>
     b42:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     b44:	80 91 87 01 	lds	r24, 0x0187
     b48:	81 11       	cpse	r24, r1
     b4a:	81 c0       	rjmp	.+258    	; 0xc4e <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     b4c:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     b4e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     b50:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     b52:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     b54:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     b56:	3c 98       	cbi	0x07, 4	; 7
     b58:	6d cf       	rjmp	.-294    	; 0xa34 <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     b5a:	80 91 41 01 	lds	r24, 0x0141
     b5e:	81 11       	cpse	r24, r1
     b60:	41 c0       	rjmp	.+130    	; 0xbe4 <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b62:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     b66:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     b6a:	10 92 42 01 	sts	0x0142, r1
     b6e:	62 cf       	rjmp	.-316    	; 0xa34 <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     b70:	48 99       	sbic	0x09, 0	; 9
     b72:	ec cf       	rjmp	.-40     	; 0xb4c <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     b74:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     b76:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     b78:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     b7a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     b7c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     b7e:	3c 98       	cbi	0x07, 4	; 7
     b80:	8f ec       	ldi	r24, 0xCF	; 207
     b82:	97 e0       	ldi	r25, 0x07	; 7
     b84:	01 97       	sbiw	r24, 0x01	; 1
     b86:	f1 f7       	brne	.-4      	; 0xb84 <kilo_start+0x16e>
     b88:	00 c0       	rjmp	.+0      	; 0xb8a <kilo_start+0x174>
     b8a:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     b8c:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     b8e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     b90:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     b92:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     b94:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     b96:	3c 98       	cbi	0x07, 4	; 7
     b98:	9f ef       	ldi	r25, 0xFF	; 255
     b9a:	e1 ee       	ldi	r30, 0xE1	; 225
     b9c:	f4 e0       	ldi	r31, 0x04	; 4
     b9e:	91 50       	subi	r25, 0x01	; 1
     ba0:	e0 40       	sbci	r30, 0x00	; 0
     ba2:	f0 40       	sbci	r31, 0x00	; 0
     ba4:	e1 f7       	brne	.-8      	; 0xb9e <kilo_start+0x188>
     ba6:	00 c0       	rjmp	.+0      	; 0xba8 <kilo_start+0x192>
     ba8:	00 00       	nop
     baa:	44 cf       	rjmp	.-376    	; 0xa34 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     bac:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     bae:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     bb0:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     bb2:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     bb4:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     bb6:	3c 98       	cbi	0x07, 4	; 7
     bb8:	ef ec       	ldi	r30, 0xCF	; 207
     bba:	f7 e0       	ldi	r31, 0x07	; 7
     bbc:	31 97       	sbiw	r30, 0x01	; 1
     bbe:	f1 f7       	brne	.-4      	; 0xbbc <kilo_start+0x1a6>
     bc0:	00 c0       	rjmp	.+0      	; 0xbc2 <kilo_start+0x1ac>
     bc2:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     bc4:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     bc6:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     bc8:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     bca:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     bcc:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     bce:	3c 98       	cbi	0x07, 4	; 7
     bd0:	ff ef       	ldi	r31, 0xFF	; 255
     bd2:	21 ee       	ldi	r18, 0xE1	; 225
     bd4:	84 e0       	ldi	r24, 0x04	; 4
     bd6:	f1 50       	subi	r31, 0x01	; 1
     bd8:	20 40       	sbci	r18, 0x00	; 0
     bda:	80 40       	sbci	r24, 0x00	; 0
     bdc:	e1 f7       	brne	.-8      	; 0xbd6 <kilo_start+0x1c0>
     bde:	00 c0       	rjmp	.+0      	; 0xbe0 <kilo_start+0x1ca>
     be0:	00 00       	nop
     be2:	28 cf       	rjmp	.-432    	; 0xa34 <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     be4:	90 91 41 01 	lds	r25, 0x0141
     be8:	80 91 42 01 	lds	r24, 0x0142
     bec:	98 17       	cp	r25, r24
     bee:	09 f4       	brne	.+2      	; 0xbf2 <kilo_start+0x1dc>
     bf0:	21 cf       	rjmp	.-446    	; 0xa34 <kilo_start+0x1e>
                        prev_motion = cur_motion;
     bf2:	80 91 41 01 	lds	r24, 0x0141
     bf6:	80 93 42 01 	sts	0x0142, r24
                        if (cur_motion == MOVE_LEFT) {
     bfa:	80 91 41 01 	lds	r24, 0x0141
     bfe:	81 30       	cpi	r24, 0x01	; 1
     c00:	09 f4       	brne	.+2      	; 0xc04 <kilo_start+0x1ee>
     c02:	50 c0       	rjmp	.+160    	; 0xca4 <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     c04:	80 91 41 01 	lds	r24, 0x0141
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     c08:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     c0c:	80 92 b4 00 	sts	0x00B4, r8
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     c10:	82 30       	cpi	r24, 0x02	; 2
     c12:	d9 f1       	breq	.+118    	; 0xc8a <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     c14:	80 92 b3 00 	sts	0x00B3, r8
    OCR2B = cw;
     c18:	80 92 b4 00 	sts	0x00B4, r8
     c1c:	8f e2       	ldi	r24, 0x2F	; 47
     c1e:	95 e7       	ldi	r25, 0x75	; 117
     c20:	01 97       	sbiw	r24, 0x01	; 1
     c22:	f1 f7       	brne	.-4      	; 0xc20 <kilo_start+0x20a>
     c24:	00 c0       	rjmp	.+0      	; 0xc26 <kilo_start+0x210>
     c26:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     c28:	80 91 bc 01 	lds	r24, 0x01BC
     c2c:	90 91 bb 01 	lds	r25, 0x01BB
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     c30:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     c34:	80 93 b4 00 	sts	0x00B4, r24
     c38:	fd ce       	rjmp	.-518    	; 0xa34 <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     c3a:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     c3c:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     c3e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     c40:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     c42:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     c44:	3c 98       	cbi	0x07, 4	; 7
     c46:	f6 ce       	rjmp	.-532    	; 0xa34 <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     c48:	f7 01       	movw	r30, r14
     c4a:	09 95       	icall
     c4c:	00 cf       	rjmp	.-512    	; 0xa4e <kilo_start+0x38>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     c4e:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     c50:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     c52:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     c54:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     c56:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     c58:	3c 98       	cbi	0x07, 4	; 7
     c5a:	ff ef       	ldi	r31, 0xFF	; 255
     c5c:	20 e7       	ldi	r18, 0x70	; 112
     c5e:	82 e0       	ldi	r24, 0x02	; 2
     c60:	f1 50       	subi	r31, 0x01	; 1
     c62:	20 40       	sbci	r18, 0x00	; 0
     c64:	80 40       	sbci	r24, 0x00	; 0
     c66:	e1 f7       	brne	.-8      	; 0xc60 <kilo_start+0x24a>
     c68:	00 c0       	rjmp	.+0      	; 0xc6a <kilo_start+0x254>
     c6a:	00 00       	nop
     c6c:	6f cf       	rjmp	.-290    	; 0xb4c <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     c6e:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     c70:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     c72:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     c74:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     c76:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     c78:	3c 98       	cbi	0x07, 4	; 7
     c7a:	dc ce       	rjmp	.-584    	; 0xa34 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     c7c:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     c7e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     c80:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     c82:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     c84:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     c86:	3c 9a       	sbi	0x07, 4	; 7
     c88:	d5 ce       	rjmp	.-598    	; 0xa34 <kilo_start+0x1e>
     c8a:	ef e2       	ldi	r30, 0x2F	; 47
     c8c:	f5 e7       	ldi	r31, 0x75	; 117
     c8e:	31 97       	sbiw	r30, 0x01	; 1
     c90:	f1 f7       	brne	.-4      	; 0xc8e <kilo_start+0x278>
     c92:	00 c0       	rjmp	.+0      	; 0xc94 <kilo_start+0x27e>
     c94:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     c96:	80 91 a9 01 	lds	r24, 0x01A9
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     c9a:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     c9e:	80 93 b4 00 	sts	0x00B4, r24
     ca2:	c8 ce       	rjmp	.-624    	; 0xa34 <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     ca4:	80 92 b3 00 	sts	0x00B3, r8
    OCR2B = cw;
     ca8:	10 92 b4 00 	sts	0x00B4, r1
     cac:	8f e2       	ldi	r24, 0x2F	; 47
     cae:	95 e7       	ldi	r25, 0x75	; 117
     cb0:	01 97       	sbiw	r24, 0x01	; 1
     cb2:	f1 f7       	brne	.-4      	; 0xcb0 <kilo_start+0x29a>
     cb4:	00 c0       	rjmp	.+0      	; 0xcb6 <kilo_start+0x2a0>
     cb6:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     cb8:	80 91 bd 01 	lds	r24, 0x01BD
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     cbc:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     cc0:	10 92 b4 00 	sts	0x00B4, r1
     cc4:	b7 ce       	rjmp	.-658    	; 0xa34 <kilo_start+0x1e>

00000cc6 <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     cc6:	07 c0       	rjmp	.+14     	; 0xcd6 <delay+0x10>
     cc8:	ef ec       	ldi	r30, 0xCF	; 207
     cca:	f7 e0       	ldi	r31, 0x07	; 7
     ccc:	31 97       	sbiw	r30, 0x01	; 1
     cce:	f1 f7       	brne	.-4      	; 0xccc <delay+0x6>
     cd0:	00 c0       	rjmp	.+0      	; 0xcd2 <delay+0xc>
     cd2:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     cd4:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     cd6:	00 97       	sbiw	r24, 0x00	; 0
     cd8:	b9 f7       	brne	.-18     	; 0xcc8 <delay+0x2>
     cda:	08 95       	ret

00000cdc <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     cdc:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     ce0:	60 93 b4 00 	sts	0x00B4, r22
     ce4:	08 95       	ret

00000ce6 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     ce6:	8f ef       	ldi	r24, 0xFF	; 255
     ce8:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     cec:	80 93 b4 00 	sts	0x00B4, r24
     cf0:	8f e0       	ldi	r24, 0x0F	; 15
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	ef ec       	ldi	r30, 0xCF	; 207
     cf6:	f7 e0       	ldi	r31, 0x07	; 7
     cf8:	31 97       	sbiw	r30, 0x01	; 1
     cfa:	f1 f7       	brne	.-4      	; 0xcf8 <spinup_motors+0x12>
     cfc:	00 c0       	rjmp	.+0      	; 0xcfe <spinup_motors+0x18>
     cfe:	00 00       	nop
     d00:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     d02:	00 97       	sbiw	r24, 0x00	; 0
     d04:	b9 f7       	brne	.-18     	; 0xcf4 <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     d06:	08 95       	ret

00000d08 <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     d08:	80 91 87 01 	lds	r24, 0x0187
     d0c:	81 11       	cpse	r24, r1
     d0e:	1e c0       	rjmp	.+60     	; 0xd4c <get_ambientlight+0x44>
        cli();
     d10:	f8 94       	cli
        adc_setup_conversion(7);
     d12:	87 e0       	ldi	r24, 0x07	; 7
     d14:	80 93 7c 00 	sts	0x007C, r24
     d18:	83 e8       	ldi	r24, 0x83	; 131
     d1a:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     d1e:	80 91 7a 00 	lds	r24, 0x007A
     d22:	80 64       	ori	r24, 0x40	; 64
     d24:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     d28:	80 91 7a 00 	lds	r24, 0x007A
     d2c:	86 fd       	sbrc	r24, 6
     d2e:	fc cf       	rjmp	.-8      	; 0xd28 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     d30:	80 91 78 00 	lds	r24, 0x0078
     d34:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     d38:	10 92 7c 00 	sts	0x007C, r1
     d3c:	23 ea       	ldi	r18, 0xA3	; 163
     d3e:	20 93 7a 00 	sts	0x007A, r18
     d42:	21 e0       	ldi	r18, 0x01	; 1
     d44:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     d48:	78 94       	sei
     d4a:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     d4c:	8f ef       	ldi	r24, 0xFF	; 255
     d4e:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     d50:	08 95       	ret

00000d52 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     d52:	80 91 87 01 	lds	r24, 0x0187
     d56:	81 11       	cpse	r24, r1
     d58:	1e c0       	rjmp	.+60     	; 0xd96 <get_temperature+0x44>
        cli();
     d5a:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     d5c:	88 ec       	ldi	r24, 0xC8	; 200
     d5e:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     d62:	87 e8       	ldi	r24, 0x87	; 135
     d64:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     d68:	80 91 7a 00 	lds	r24, 0x007A
     d6c:	80 64       	ori	r24, 0x40	; 64
     d6e:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     d72:	80 91 7a 00 	lds	r24, 0x007A
     d76:	86 fd       	sbrc	r24, 6
     d78:	fc cf       	rjmp	.-8      	; 0xd72 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     d7a:	80 91 78 00 	lds	r24, 0x0078
     d7e:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     d82:	10 92 7c 00 	sts	0x007C, r1
     d86:	23 ea       	ldi	r18, 0xA3	; 163
     d88:	20 93 7a 00 	sts	0x007A, r18
     d8c:	21 e0       	ldi	r18, 0x01	; 1
     d8e:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     d92:	78 94       	sei
     d94:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     d96:	8f ef       	ldi	r24, 0xFF	; 255
     d98:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     d9a:	08 95       	ret

00000d9c <rand_hard>:

uint8_t rand_hard() {
     d9c:	1f 93       	push	r17
     d9e:	cf 93       	push	r28
     da0:	df 93       	push	r29
     da2:	60 e0       	ldi	r22, 0x00	; 0
     da4:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t num = 0;
     da6:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     da8:	13 ea       	ldi	r17, 0xA3	; 163
     daa:	d1 e0       	ldi	r29, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     dac:	c6 e0       	ldi	r28, 0x06	; 6
     dae:	b3 e8       	ldi	r27, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     db0:	e1 e0       	ldi	r30, 0x01	; 1
     db2:	f0 e0       	ldi	r31, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     db4:	20 e8       	ldi	r18, 0x80	; 128
     db6:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     db8:	f8 94       	cli
            adc_setup_conversion(6);
     dba:	c0 93 7c 00 	sts	0x007C, r28
     dbe:	b0 93 7a 00 	sts	0x007A, r27
            adc_start_conversion();
     dc2:	90 91 7a 00 	lds	r25, 0x007A
     dc6:	90 64       	ori	r25, 0x40	; 64
     dc8:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     dcc:	90 91 7a 00 	lds	r25, 0x007A
     dd0:	96 fd       	sbrc	r25, 6
     dd2:	fc cf       	rjmp	.-8      	; 0xdcc <rand_hard+0x30>
            a = ADCW&0x1;
     dd4:	40 91 78 00 	lds	r20, 0x0078
     dd8:	50 91 79 00 	lds	r21, 0x0079
     ddc:	a4 2f       	mov	r26, r20
     dde:	a1 70       	andi	r26, 0x01	; 1
            adc_start_conversion();
     de0:	90 91 7a 00 	lds	r25, 0x007A
     de4:	90 64       	ori	r25, 0x40	; 64
     de6:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     dea:	90 91 7a 00 	lds	r25, 0x007A
     dee:	96 fd       	sbrc	r25, 6
     df0:	fc cf       	rjmp	.-8      	; 0xdea <rand_hard+0x4e>
            b = ADCW&0x1;
     df2:	40 91 78 00 	lds	r20, 0x0078
     df6:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     dfa:	10 92 7c 00 	sts	0x007C, r1
     dfe:	10 93 7a 00 	sts	0x007A, r17
     e02:	d0 93 7b 00 	sts	0x007B, r29
            sei();
     e06:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     e08:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     e0a:	a4 13       	cpse	r26, r20
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <rand_hard+0x7c>
     e0e:	21 50       	subi	r18, 0x01	; 1
     e10:	31 09       	sbc	r19, r1
     e12:	21 15       	cp	r18, r1
     e14:	31 05       	cpc	r19, r1
     e16:	81 f6       	brne	.-96     	; 0xdb8 <rand_hard+0x1c>
        if (a)
     e18:	aa 23       	and	r26, r26
     e1a:	39 f0       	breq	.+14     	; 0xe2a <rand_hard+0x8e>
            num |= (1<<i);
     e1c:	9f 01       	movw	r18, r30
     e1e:	06 2e       	mov	r0, r22
     e20:	01 c0       	rjmp	.+2      	; 0xe24 <rand_hard+0x88>
     e22:	22 0f       	add	r18, r18
     e24:	0a 94       	dec	r0
     e26:	ea f7       	brpl	.-6      	; 0xe22 <rand_hard+0x86>
     e28:	82 2b       	or	r24, r18
     e2a:	6f 5f       	subi	r22, 0xFF	; 255
     e2c:	7f 4f       	sbci	r23, 0xFF	; 255
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     e2e:	68 30       	cpi	r22, 0x08	; 8
     e30:	71 05       	cpc	r23, r1
     e32:	09 f0       	breq	.+2      	; 0xe36 <rand_hard+0x9a>
     e34:	bf cf       	rjmp	.-130    	; 0xdb4 <rand_hard+0x18>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     e36:	df 91       	pop	r29
     e38:	cf 91       	pop	r28
     e3a:	1f 91       	pop	r17
     e3c:	08 95       	ret

00000e3e <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     e3e:	80 91 1e 01 	lds	r24, 0x011E
     e42:	98 2f       	mov	r25, r24
     e44:	99 0f       	add	r25, r25
     e46:	99 0f       	add	r25, r25
     e48:	99 0f       	add	r25, r25
     e4a:	98 27       	eor	r25, r24
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     e4c:	80 91 40 01 	lds	r24, 0x0140
     e50:	21 e0       	ldi	r18, 0x01	; 1
     e52:	28 0f       	add	r18, r24
     e54:	20 93 40 01 	sts	0x0140, r18
     e58:	86 95       	lsr	r24
     e5a:	86 95       	lsr	r24

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     e5c:	89 27       	eor	r24, r25
     e5e:	92 95       	swap	r25
     e60:	96 95       	lsr	r25
     e62:	97 70       	andi	r25, 0x07	; 7
    seed ^= accumulator++>>2;
     e64:	89 27       	eor	r24, r25
     e66:	80 93 1e 01 	sts	0x011E, r24
    return seed;
}
     e6a:	08 95       	ret

00000e6c <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     e6c:	80 93 1e 01 	sts	0x011E, r24
     e70:	08 95       	ret

00000e72 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     e72:	80 91 87 01 	lds	r24, 0x0187
     e76:	81 11       	cpse	r24, r1
     e78:	16 c0       	rjmp	.+44     	; 0xea6 <get_voltage+0x34>
        cli();                                    // disable interrupts
     e7a:	f8 94       	cli
        adc_setup_conversion(6);
     e7c:	86 e0       	ldi	r24, 0x06	; 6
     e7e:	80 93 7c 00 	sts	0x007C, r24
     e82:	83 e8       	ldi	r24, 0x83	; 131
     e84:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     e88:	80 91 7a 00 	lds	r24, 0x007A
     e8c:	80 64       	ori	r24, 0x40	; 64
     e8e:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     e92:	80 91 7a 00 	lds	r24, 0x007A
     e96:	86 fd       	sbrc	r24, 6
     e98:	fc cf       	rjmp	.-8      	; 0xe92 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     e9a:	80 91 78 00 	lds	r24, 0x0078
     e9e:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     ea2:	78 94       	sei
     ea4:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     ea6:	8f ef       	ldi	r24, 0xFF	; 255
     ea8:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     eaa:	08 95       	ret

00000eac <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     eac:	2f 92       	push	r2
     eae:	3f 92       	push	r3
     eb0:	4f 92       	push	r4
     eb2:	5f 92       	push	r5
     eb4:	6f 92       	push	r6
     eb6:	7f 92       	push	r7
     eb8:	8f 92       	push	r8
     eba:	9f 92       	push	r9
     ebc:	af 92       	push	r10
     ebe:	bf 92       	push	r11
     ec0:	cf 92       	push	r12
     ec2:	df 92       	push	r13
     ec4:	ef 92       	push	r14
     ec6:	ff 92       	push	r15
     ec8:	0f 93       	push	r16
     eca:	1f 93       	push	r17
     ecc:	cf 93       	push	r28
     ece:	df 93       	push	r29
     ed0:	00 d0       	rcall	.+0      	; 0xed2 <estimate_distance+0x26>
     ed2:	00 d0       	rcall	.+0      	; 0xed4 <estimate_distance+0x28>
     ed4:	00 d0       	rcall	.+0      	; 0xed6 <estimate_distance+0x2a>
     ed6:	cd b7       	in	r28, 0x3d	; 61
     ed8:	de b7       	in	r29, 0x3e	; 62
     eda:	8c 01       	movw	r16, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     edc:	dc 01       	movw	r26, r24
     ede:	12 96       	adiw	r26, 0x02	; 2
     ee0:	0d 90       	ld	r0, X+
     ee2:	bc 91       	ld	r27, X
     ee4:	a0 2d       	mov	r26, r0
     ee6:	be 83       	std	Y+6, r27	; 0x06
     ee8:	ad 83       	std	Y+5, r26	; 0x05
     eea:	a4 38       	cpi	r26, 0x84	; 132
     eec:	e3 e0       	ldi	r30, 0x03	; 3
     eee:	be 07       	cpc	r27, r30
     ef0:	0c f0       	brlt	.+2      	; 0xef4 <estimate_distance+0x48>
     ef2:	ca c0       	rjmp	.+404    	; 0x1088 <estimate_distance+0x1dc>
        if (dist->high_gain > kilo_irhigh[0]) {
     ef4:	80 91 61 01 	lds	r24, 0x0161
     ef8:	90 91 62 01 	lds	r25, 0x0162
     efc:	8a 17       	cp	r24, r26
     efe:	9b 07       	cpc	r25, r27
     f00:	08 f4       	brcc	.+2      	; 0xf04 <estimate_distance+0x58>
     f02:	a9 c1       	rjmp	.+850    	; 0x1256 <estimate_distance+0x3aa>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     f04:	60 90 63 01 	lds	r6, 0x0163
     f08:	70 90 64 01 	lds	r7, 0x0164
     f0c:	6a 16       	cp	r6, r26
     f0e:	7b 06       	cpc	r7, r27
     f10:	08 f4       	brcc	.+2      	; 0xf14 <estimate_distance+0x68>
     f12:	27 c2       	rjmp	.+1102   	; 0x1362 <estimate_distance+0x4b6>
     f14:	60 90 65 01 	lds	r6, 0x0165
     f18:	70 90 66 01 	lds	r7, 0x0166
     f1c:	6a 16       	cp	r6, r26
     f1e:	7b 06       	cpc	r7, r27
     f20:	08 f4       	brcc	.+2      	; 0xf24 <estimate_distance+0x78>
     f22:	28 c2       	rjmp	.+1104   	; 0x1374 <estimate_distance+0x4c8>
     f24:	60 90 67 01 	lds	r6, 0x0167
     f28:	70 90 68 01 	lds	r7, 0x0168
     f2c:	6a 16       	cp	r6, r26
     f2e:	7b 06       	cpc	r7, r27
     f30:	08 f4       	brcc	.+2      	; 0xf34 <estimate_distance+0x88>
     f32:	29 c2       	rjmp	.+1106   	; 0x1386 <estimate_distance+0x4da>
     f34:	60 90 69 01 	lds	r6, 0x0169
     f38:	70 90 6a 01 	lds	r7, 0x016A
     f3c:	6a 16       	cp	r6, r26
     f3e:	7b 06       	cpc	r7, r27
     f40:	08 f4       	brcc	.+2      	; 0xf44 <estimate_distance+0x98>
     f42:	2a c2       	rjmp	.+1108   	; 0x1398 <estimate_distance+0x4ec>
     f44:	60 90 6b 01 	lds	r6, 0x016B
     f48:	70 90 6c 01 	lds	r7, 0x016C
     f4c:	6a 16       	cp	r6, r26
     f4e:	7b 06       	cpc	r7, r27
     f50:	08 f4       	brcc	.+2      	; 0xf54 <estimate_distance+0xa8>
     f52:	8b c1       	rjmp	.+790    	; 0x126a <estimate_distance+0x3be>
     f54:	60 90 6d 01 	lds	r6, 0x016D
     f58:	70 90 6e 01 	lds	r7, 0x016E
     f5c:	6a 16       	cp	r6, r26
     f5e:	7b 06       	cpc	r7, r27
     f60:	08 f4       	brcc	.+2      	; 0xf64 <estimate_distance+0xb8>
     f62:	23 c2       	rjmp	.+1094   	; 0x13aa <estimate_distance+0x4fe>
     f64:	60 90 6f 01 	lds	r6, 0x016F
     f68:	70 90 70 01 	lds	r7, 0x0170
     f6c:	6a 16       	cp	r6, r26
     f6e:	7b 06       	cpc	r7, r27
     f70:	08 f4       	brcc	.+2      	; 0xf74 <estimate_distance+0xc8>
     f72:	24 c2       	rjmp	.+1096   	; 0x13bc <estimate_distance+0x510>
     f74:	60 90 71 01 	lds	r6, 0x0171
     f78:	70 90 72 01 	lds	r7, 0x0172
     f7c:	6a 16       	cp	r6, r26
     f7e:	7b 06       	cpc	r7, r27
     f80:	08 f4       	brcc	.+2      	; 0xf84 <estimate_distance+0xd8>
     f82:	25 c2       	rjmp	.+1098   	; 0x13ce <estimate_distance+0x522>
     f84:	60 90 73 01 	lds	r6, 0x0173
     f88:	70 90 74 01 	lds	r7, 0x0174
     f8c:	6a 16       	cp	r6, r26
     f8e:	7b 06       	cpc	r7, r27
     f90:	08 f4       	brcc	.+2      	; 0xf94 <estimate_distance+0xe8>
     f92:	26 c2       	rjmp	.+1100   	; 0x13e0 <estimate_distance+0x534>
     f94:	60 90 75 01 	lds	r6, 0x0175
     f98:	70 90 76 01 	lds	r7, 0x0176
     f9c:	6a 16       	cp	r6, r26
     f9e:	7b 06       	cpc	r7, r27
     fa0:	08 f4       	brcc	.+2      	; 0xfa4 <estimate_distance+0xf8>
     fa2:	27 c2       	rjmp	.+1102   	; 0x13f2 <estimate_distance+0x546>
     fa4:	60 90 77 01 	lds	r6, 0x0177
     fa8:	70 90 78 01 	lds	r7, 0x0178
     fac:	6a 16       	cp	r6, r26
     fae:	7b 06       	cpc	r7, r27
     fb0:	08 f4       	brcc	.+2      	; 0xfb4 <estimate_distance+0x108>
     fb2:	2d c2       	rjmp	.+1114   	; 0x140e <estimate_distance+0x562>
     fb4:	60 90 79 01 	lds	r6, 0x0179
     fb8:	70 90 7a 01 	lds	r7, 0x017A
     fbc:	6a 16       	cp	r6, r26
     fbe:	7b 06       	cpc	r7, r27
     fc0:	08 f4       	brcc	.+2      	; 0xfc4 <estimate_distance+0x118>
     fc2:	2e c2       	rjmp	.+1116   	; 0x1420 <estimate_distance+0x574>
     fc4:	60 90 7b 01 	lds	r6, 0x017B
     fc8:	70 90 7c 01 	lds	r7, 0x017C
     fcc:	6a 16       	cp	r6, r26
     fce:	7b 06       	cpc	r7, r27
     fd0:	08 f4       	brcc	.+2      	; 0xfd4 <estimate_distance+0x128>
     fd2:	2f c2       	rjmp	.+1118   	; 0x1432 <estimate_distance+0x586>
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	a0 ed       	ldi	r26, 0xD0	; 208
     fda:	b0 e4       	ldi	r27, 0x40	; 64
     fdc:	89 83       	std	Y+1, r24	; 0x01
     fde:	9a 83       	std	Y+2, r25	; 0x02
     fe0:	ab 83       	std	Y+3, r26	; 0x03
     fe2:	bc 83       	std	Y+4, r27	; 0x04
     fe4:	8c e0       	ldi	r24, 0x0C	; 12
     fe6:	e8 2e       	mov	r14, r24
     fe8:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     fea:	f7 01       	movw	r30, r14
     fec:	ee 0f       	add	r30, r30
     fee:	ff 1f       	adc	r31, r31
     ff0:	ef 59       	subi	r30, 0x9F	; 159
     ff2:	fe 4f       	sbci	r31, 0xFE	; 254
     ff4:	80 81       	ld	r24, Z
     ff6:	91 81       	ldd	r25, Z+1	; 0x01
     ff8:	b3 01       	movw	r22, r6
     ffa:	68 1b       	sub	r22, r24
     ffc:	79 0b       	sbc	r23, r25
     ffe:	80 e0       	ldi	r24, 0x00	; 0
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__floatunsisf>
    1006:	9b 01       	movw	r18, r22
    1008:	ac 01       	movw	r20, r24
    100a:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__addsf3>
    100e:	6b 01       	movw	r12, r22
    1010:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
    1012:	ad 81       	ldd	r26, Y+5	; 0x05
    1014:	be 81       	ldd	r27, Y+6	; 0x06
    1016:	bd 01       	movw	r22, r26
    1018:	88 27       	eor	r24, r24
    101a:	77 fd       	sbrc	r23, 7
    101c:	80 95       	com	r24
    101e:	98 2f       	mov	r25, r24
    1020:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <__floatsisf>
    1024:	4b 01       	movw	r8, r22
    1026:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
    1028:	b3 01       	movw	r22, r6
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__floatunsisf>
    1032:	2b 01       	movw	r4, r22
    1034:	3c 01       	movw	r6, r24
    1036:	29 81       	ldd	r18, Y+1	; 0x01
    1038:	3a 81       	ldd	r19, Y+2	; 0x02
    103a:	4b 81       	ldd	r20, Y+3	; 0x03
    103c:	5c 81       	ldd	r21, Y+4	; 0x04
    103e:	c7 01       	movw	r24, r14
    1040:	b6 01       	movw	r22, r12
    1042:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <__mulsf3>
    1046:	9b 01       	movw	r18, r22
    1048:	ac 01       	movw	r20, r24
    104a:	c3 01       	movw	r24, r6
    104c:	b2 01       	movw	r22, r4
    104e:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__subsf3>
    1052:	9b 01       	movw	r18, r22
    1054:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
    1056:	c5 01       	movw	r24, r10
    1058:	b4 01       	movw	r22, r8
    105a:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__subsf3>
    105e:	20 e0       	ldi	r18, 0x00	; 0
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	40 e2       	ldi	r20, 0x20	; 32
    1064:	51 e4       	ldi	r21, 0x41	; 65
    1066:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <__mulsf3>
            b=((int)((int)b/(int)slope));
    106a:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <__fixsfsi>
    106e:	5b 01       	movw	r10, r22
    1070:	c7 01       	movw	r24, r14
    1072:	b6 01       	movw	r22, r12
    1074:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <__fixsfsi>
    1078:	ab 01       	movw	r20, r22
    107a:	bc 01       	movw	r22, r24
    107c:	c5 01       	movw	r24, r10
    107e:	ba 01       	movw	r22, r20
    1080:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <__divmodhi4>
            dist_high=b;
    1084:	76 2e       	mov	r7, r22
    1086:	e8 c0       	rjmp	.+464    	; 0x1258 <estimate_distance+0x3ac>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    1088:	77 24       	eor	r7, r7
    108a:	7a 94       	dec	r7
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
    108c:	d8 01       	movw	r26, r16
    108e:	ad 90       	ld	r10, X+
    1090:	bc 90       	ld	r11, X
    1092:	80 91 88 01 	lds	r24, 0x0188
    1096:	90 91 89 01 	lds	r25, 0x0189
    109a:	8a 15       	cp	r24, r10
    109c:	9b 05       	cpc	r25, r11
    109e:	08 f4       	brcc	.+2      	; 0x10a2 <estimate_distance+0x1f6>
    10a0:	6f c0       	rjmp	.+222    	; 0x1180 <estimate_distance+0x2d4>
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
    10a2:	00 91 8a 01 	lds	r16, 0x018A
    10a6:	10 91 8b 01 	lds	r17, 0x018B
    10aa:	0a 15       	cp	r16, r10
    10ac:	1b 05       	cpc	r17, r11
    10ae:	08 f4       	brcc	.+2      	; 0x10b2 <estimate_distance+0x206>
    10b0:	5c c1       	rjmp	.+696    	; 0x136a <estimate_distance+0x4be>
    10b2:	00 91 8c 01 	lds	r16, 0x018C
    10b6:	10 91 8d 01 	lds	r17, 0x018D
    10ba:	0a 15       	cp	r16, r10
    10bc:	1b 05       	cpc	r17, r11
    10be:	08 f4       	brcc	.+2      	; 0x10c2 <estimate_distance+0x216>
    10c0:	5d c1       	rjmp	.+698    	; 0x137c <estimate_distance+0x4d0>
    10c2:	00 91 8e 01 	lds	r16, 0x018E
    10c6:	10 91 8f 01 	lds	r17, 0x018F
    10ca:	0a 15       	cp	r16, r10
    10cc:	1b 05       	cpc	r17, r11
    10ce:	08 f4       	brcc	.+2      	; 0x10d2 <estimate_distance+0x226>
    10d0:	5e c1       	rjmp	.+700    	; 0x138e <estimate_distance+0x4e2>
    10d2:	00 91 90 01 	lds	r16, 0x0190
    10d6:	10 91 91 01 	lds	r17, 0x0191
    10da:	0a 15       	cp	r16, r10
    10dc:	1b 05       	cpc	r17, r11
    10de:	08 f4       	brcc	.+2      	; 0x10e2 <estimate_distance+0x236>
    10e0:	5f c1       	rjmp	.+702    	; 0x13a0 <estimate_distance+0x4f4>
    10e2:	00 91 92 01 	lds	r16, 0x0192
    10e6:	10 91 93 01 	lds	r17, 0x0193
    10ea:	0a 15       	cp	r16, r10
    10ec:	1b 05       	cpc	r17, r11
    10ee:	08 f4       	brcc	.+2      	; 0x10f2 <estimate_distance+0x246>
    10f0:	d8 c0       	rjmp	.+432    	; 0x12a2 <estimate_distance+0x3f6>
    10f2:	00 91 94 01 	lds	r16, 0x0194
    10f6:	10 91 95 01 	lds	r17, 0x0195
    10fa:	0a 15       	cp	r16, r10
    10fc:	1b 05       	cpc	r17, r11
    10fe:	08 f4       	brcc	.+2      	; 0x1102 <estimate_distance+0x256>
    1100:	58 c1       	rjmp	.+688    	; 0x13b2 <estimate_distance+0x506>
    1102:	00 91 96 01 	lds	r16, 0x0196
    1106:	10 91 97 01 	lds	r17, 0x0197
    110a:	0a 15       	cp	r16, r10
    110c:	1b 05       	cpc	r17, r11
    110e:	08 f4       	brcc	.+2      	; 0x1112 <estimate_distance+0x266>
    1110:	59 c1       	rjmp	.+690    	; 0x13c4 <estimate_distance+0x518>
    1112:	00 91 98 01 	lds	r16, 0x0198
    1116:	10 91 99 01 	lds	r17, 0x0199
    111a:	0a 15       	cp	r16, r10
    111c:	1b 05       	cpc	r17, r11
    111e:	08 f4       	brcc	.+2      	; 0x1122 <estimate_distance+0x276>
    1120:	5a c1       	rjmp	.+692    	; 0x13d6 <estimate_distance+0x52a>
    1122:	00 91 9a 01 	lds	r16, 0x019A
    1126:	10 91 9b 01 	lds	r17, 0x019B
    112a:	0a 15       	cp	r16, r10
    112c:	1b 05       	cpc	r17, r11
    112e:	08 f4       	brcc	.+2      	; 0x1132 <estimate_distance+0x286>
    1130:	5b c1       	rjmp	.+694    	; 0x13e8 <estimate_distance+0x53c>
    1132:	00 91 9c 01 	lds	r16, 0x019C
    1136:	10 91 9d 01 	lds	r17, 0x019D
    113a:	0a 15       	cp	r16, r10
    113c:	1b 05       	cpc	r17, r11
    113e:	08 f4       	brcc	.+2      	; 0x1142 <estimate_distance+0x296>
    1140:	5c c1       	rjmp	.+696    	; 0x13fa <estimate_distance+0x54e>
    1142:	00 91 9e 01 	lds	r16, 0x019E
    1146:	10 91 9f 01 	lds	r17, 0x019F
    114a:	0a 15       	cp	r16, r10
    114c:	1b 05       	cpc	r17, r11
    114e:	08 f4       	brcc	.+2      	; 0x1152 <estimate_distance+0x2a6>
    1150:	59 c1       	rjmp	.+690    	; 0x1404 <estimate_distance+0x558>
    1152:	00 91 a0 01 	lds	r16, 0x01A0
    1156:	10 91 a1 01 	lds	r17, 0x01A1
    115a:	0a 15       	cp	r16, r10
    115c:	1b 05       	cpc	r17, r11
    115e:	08 f4       	brcc	.+2      	; 0x1162 <estimate_distance+0x2b6>
    1160:	5a c1       	rjmp	.+692    	; 0x1416 <estimate_distance+0x56a>
    1162:	00 91 a2 01 	lds	r16, 0x01A2
    1166:	10 91 a3 01 	lds	r17, 0x01A3
    116a:	0a 15       	cp	r16, r10
    116c:	1b 05       	cpc	r17, r11
    116e:	08 f4       	brcc	.+2      	; 0x1172 <estimate_distance+0x2c6>
    1170:	5b c1       	rjmp	.+694    	; 0x1428 <estimate_distance+0x57c>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
    1172:	1a e5       	ldi	r17, 0x5A	; 90
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
    1174:	bf ef       	ldi	r27, 0xFF	; 255
    1176:	7b 12       	cpse	r7, r27
    1178:	07 c0       	rjmp	.+14     	; 0x1188 <estimate_distance+0x2dc>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
    117a:	81 e2       	ldi	r24, 0x21	; 33
    117c:	81 0f       	add	r24, r17
    117e:	52 c0       	rjmp	.+164    	; 0x1224 <estimate_distance+0x378>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
    1180:	10 e0       	ldi	r17, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
    1182:	bf ef       	ldi	r27, 0xFF	; 255
    1184:	7b 16       	cp	r7, r27
    1186:	c9 f3       	breq	.-14     	; 0x117a <estimate_distance+0x2ce>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
    1188:	ed 81       	ldd	r30, Y+5	; 0x05
    118a:	fe 81       	ldd	r31, Y+6	; 0x06
    118c:	bf 01       	movw	r22, r30
    118e:	88 27       	eor	r24, r24
    1190:	77 fd       	sbrc	r23, 7
    1192:	80 95       	com	r24
    1194:	98 2f       	mov	r25, r24
    1196:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <__floatsisf>
    119a:	6b 01       	movw	r12, r22
    119c:	7c 01       	movw	r14, r24
    119e:	67 2d       	mov	r22, r7
    11a0:	70 e0       	ldi	r23, 0x00	; 0
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__floatunsisf>
    11aa:	4b 01       	movw	r8, r22
    11ac:	5c 01       	movw	r10, r24
    11ae:	a7 01       	movw	r20, r14
    11b0:	96 01       	movw	r18, r12
    11b2:	60 e0       	ldi	r22, 0x00	; 0
    11b4:	70 e0       	ldi	r23, 0x00	; 0
    11b6:	81 e6       	ldi	r24, 0x61	; 97
    11b8:	94 e4       	ldi	r25, 0x44	; 68
    11ba:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__subsf3>
    11be:	9b 01       	movw	r18, r22
    11c0:	ac 01       	movw	r20, r24
    11c2:	c5 01       	movw	r24, r10
    11c4:	b4 01       	movw	r22, r8
    11c6:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <__mulsf3>
    11ca:	4b 01       	movw	r8, r22
    11cc:	5c 01       	movw	r10, r24
    11ce:	61 2f       	mov	r22, r17
    11d0:	70 e0       	ldi	r23, 0x00	; 0
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__floatunsisf>
    11da:	2b 01       	movw	r4, r22
    11dc:	3c 01       	movw	r6, r24
    11de:	20 e0       	ldi	r18, 0x00	; 0
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	4f e2       	ldi	r20, 0x2F	; 47
    11e4:	54 e4       	ldi	r21, 0x44	; 68
    11e6:	c7 01       	movw	r24, r14
    11e8:	b6 01       	movw	r22, r12
    11ea:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__subsf3>
    11ee:	9b 01       	movw	r18, r22
    11f0:	ac 01       	movw	r20, r24
    11f2:	c3 01       	movw	r24, r6
    11f4:	b2 01       	movw	r22, r4
    11f6:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <__mulsf3>
    11fa:	9b 01       	movw	r18, r22
    11fc:	ac 01       	movw	r20, r24
    11fe:	c5 01       	movw	r24, r10
    1200:	b4 01       	movw	r22, r8
    1202:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__addsf3>
    1206:	20 e0       	ldi	r18, 0x00	; 0
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	48 e4       	ldi	r20, 0x48	; 72
    120c:	53 e4       	ldi	r21, 0x43	; 67
    120e:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <__divsf3>
    1212:	20 e0       	ldi	r18, 0x00	; 0
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	44 e0       	ldi	r20, 0x04	; 4
    1218:	52 e4       	ldi	r21, 0x42	; 66
    121a:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__addsf3>
    121e:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <__fixunssfsi>
    1222:	86 2f       	mov	r24, r22
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
    }
}
    1224:	26 96       	adiw	r28, 0x06	; 6
    1226:	0f b6       	in	r0, 0x3f	; 63
    1228:	f8 94       	cli
    122a:	de bf       	out	0x3e, r29	; 62
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	cd bf       	out	0x3d, r28	; 61
    1230:	df 91       	pop	r29
    1232:	cf 91       	pop	r28
    1234:	1f 91       	pop	r17
    1236:	0f 91       	pop	r16
    1238:	ff 90       	pop	r15
    123a:	ef 90       	pop	r14
    123c:	df 90       	pop	r13
    123e:	cf 90       	pop	r12
    1240:	bf 90       	pop	r11
    1242:	af 90       	pop	r10
    1244:	9f 90       	pop	r9
    1246:	8f 90       	pop	r8
    1248:	7f 90       	pop	r7
    124a:	6f 90       	pop	r6
    124c:	5f 90       	pop	r5
    124e:	4f 90       	pop	r4
    1250:	3f 90       	pop	r3
    1252:	2f 90       	pop	r2
    1254:	08 95       	ret
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
    1256:	71 2c       	mov	r7, r1
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
    1258:	ed 81       	ldd	r30, Y+5	; 0x05
    125a:	fe 81       	ldd	r31, Y+6	; 0x06
    125c:	ed 3b       	cpi	r30, 0xBD	; 189
    125e:	f2 40       	sbci	r31, 0x02	; 2
    1260:	0c f0       	brlt	.+2      	; 0x1264 <estimate_distance+0x3b8>
    1262:	14 cf       	rjmp	.-472    	; 0x108c <estimate_distance+0x1e0>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
    1264:	81 e2       	ldi	r24, 0x21	; 33
    1266:	87 0d       	add	r24, r7
    1268:	dd cf       	rjmp	.-70     	; 0x1224 <estimate_distance+0x378>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    126a:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
    126c:	85 e0       	ldi	r24, 0x05	; 5
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	7c 01       	movw	r14, r24
    1272:	f1 e0       	ldi	r31, 0x01	; 1
    1274:	ef 1a       	sub	r14, r31
    1276:	f1 08       	sbc	r15, r1
    1278:	70 e0       	ldi	r23, 0x00	; 0
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__floatunsisf>
    1282:	20 e0       	ldi	r18, 0x00	; 0
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	40 e0       	ldi	r20, 0x00	; 0
    1288:	5f e3       	ldi	r21, 0x3F	; 63
    128a:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <__mulsf3>
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	a9 01       	movw	r20, r18
    1294:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__addsf3>
    1298:	69 83       	std	Y+1, r22	; 0x01
    129a:	7a 83       	std	Y+2, r23	; 0x02
    129c:	8b 83       	std	Y+3, r24	; 0x03
    129e:	9c 83       	std	Y+4, r25	; 0x04
    12a0:	a4 ce       	rjmp	.-696    	; 0xfea <estimate_distance+0x13e>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    12a2:	75 e0       	ldi	r23, 0x05	; 5
    12a4:	67 2e       	mov	r6, r23
                if(dist->low_gain > kilo_irlow[i]) {
    12a6:	e5 e0       	ldi	r30, 0x05	; 5
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
    12aa:	ee 0f       	add	r30, r30
    12ac:	ff 1f       	adc	r31, r31
    12ae:	ea 57       	subi	r30, 0x7A	; 122
    12b0:	fe 4f       	sbci	r31, 0xFE	; 254
    12b2:	80 81       	ld	r24, Z
    12b4:	91 81       	ldd	r25, Z+1	; 0x01
    12b6:	b8 01       	movw	r22, r16
    12b8:	68 1b       	sub	r22, r24
    12ba:	79 0b       	sbc	r23, r25
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__floatunsisf>
    12c4:	9b 01       	movw	r18, r22
    12c6:	ac 01       	movw	r20, r24
    12c8:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__addsf3>
    12cc:	6b 01       	movw	r12, r22
    12ce:	7c 01       	movw	r14, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
    12d0:	b5 01       	movw	r22, r10
    12d2:	88 27       	eor	r24, r24
    12d4:	77 fd       	sbrc	r23, 7
    12d6:	80 95       	com	r24
    12d8:	98 2f       	mov	r25, r24
    12da:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <__floatsisf>
    12de:	4b 01       	movw	r8, r22
    12e0:	5c 01       	movw	r10, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
    12e2:	b8 01       	movw	r22, r16
    12e4:	80 e0       	ldi	r24, 0x00	; 0
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__floatunsisf>
    12ec:	1b 01       	movw	r2, r22
    12ee:	2c 01       	movw	r4, r24
    12f0:	66 2d       	mov	r22, r6
    12f2:	70 e0       	ldi	r23, 0x00	; 0
    12f4:	80 e0       	ldi	r24, 0x00	; 0
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__floatunsisf>
    12fc:	20 e0       	ldi	r18, 0x00	; 0
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	40 e0       	ldi	r20, 0x00	; 0
    1302:	5f e3       	ldi	r21, 0x3F	; 63
    1304:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <__mulsf3>
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	a9 01       	movw	r20, r18
    130e:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__addsf3>
    1312:	a7 01       	movw	r20, r14
    1314:	96 01       	movw	r18, r12
    1316:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <__mulsf3>
    131a:	9b 01       	movw	r18, r22
    131c:	ac 01       	movw	r20, r24
    131e:	c2 01       	movw	r24, r4
    1320:	b1 01       	movw	r22, r2
    1322:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__subsf3>
    1326:	9b 01       	movw	r18, r22
    1328:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
    132a:	c5 01       	movw	r24, r10
    132c:	b4 01       	movw	r22, r8
    132e:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__subsf3>
    1332:	20 e0       	ldi	r18, 0x00	; 0
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	40 e2       	ldi	r20, 0x20	; 32
    1338:	51 e4       	ldi	r21, 0x41	; 65
    133a:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <__mulsf3>
                b=((int)((int)b/(int)slope));
    133e:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <__fixsfsi>
    1342:	8b 01       	movw	r16, r22
    1344:	c7 01       	movw	r24, r14
    1346:	b6 01       	movw	r22, r12
    1348:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <__fixsfsi>
    134c:	ab 01       	movw	r20, r22
    134e:	bc 01       	movw	r22, r24
    1350:	c8 01       	movw	r24, r16
    1352:	ba 01       	movw	r22, r20
    1354:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <__divmodhi4>
                dist_low=b;
    1358:	16 2f       	mov	r17, r22
            }
        }
    }

    if (dist_low != 255) {
    135a:	6f 3f       	cpi	r22, 0xFF	; 255
    135c:	09 f0       	breq	.+2      	; 0x1360 <estimate_distance+0x4b4>
    135e:	11 cf       	rjmp	.-478    	; 0x1182 <estimate_distance+0x2d6>
    1360:	81 cf       	rjmp	.-254    	; 0x1264 <estimate_distance+0x3b8>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
    1362:	61 e0       	ldi	r22, 0x01	; 1
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	83 cf       	rjmp	.-250    	; 0x1270 <estimate_distance+0x3c4>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
    136a:	66 24       	eor	r6, r6
    136c:	63 94       	inc	r6
    136e:	e1 e0       	ldi	r30, 0x01	; 1
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	9b cf       	rjmp	.-202    	; 0x12aa <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1374:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
    1376:	82 e0       	ldi	r24, 0x02	; 2
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	7a cf       	rjmp	.-268    	; 0x1270 <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    137c:	a2 e0       	ldi	r26, 0x02	; 2
    137e:	6a 2e       	mov	r6, r26
                if(dist->low_gain > kilo_irlow[i]) {
    1380:	e2 e0       	ldi	r30, 0x02	; 2
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	92 cf       	rjmp	.-220    	; 0x12aa <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1386:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
    1388:	83 e0       	ldi	r24, 0x03	; 3
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	71 cf       	rjmp	.-286    	; 0x1270 <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    138e:	f3 e0       	ldi	r31, 0x03	; 3
    1390:	6f 2e       	mov	r6, r31
                if(dist->low_gain > kilo_irlow[i]) {
    1392:	e3 e0       	ldi	r30, 0x03	; 3
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	89 cf       	rjmp	.-238    	; 0x12aa <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1398:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
    139a:	84 e0       	ldi	r24, 0x04	; 4
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	68 cf       	rjmp	.-304    	; 0x1270 <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    13a0:	e4 e0       	ldi	r30, 0x04	; 4
    13a2:	6e 2e       	mov	r6, r30
                if(dist->low_gain > kilo_irlow[i]) {
    13a4:	e4 e0       	ldi	r30, 0x04	; 4
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 cf       	rjmp	.-256    	; 0x12aa <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    13aa:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
    13ac:	86 e0       	ldi	r24, 0x06	; 6
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	5f cf       	rjmp	.-322    	; 0x1270 <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    13b2:	66 e0       	ldi	r22, 0x06	; 6
    13b4:	66 2e       	mov	r6, r22
                if(dist->low_gain > kilo_irlow[i]) {
    13b6:	e6 e0       	ldi	r30, 0x06	; 6
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	77 cf       	rjmp	.-274    	; 0x12aa <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    13bc:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
    13be:	87 e0       	ldi	r24, 0x07	; 7
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	56 cf       	rjmp	.-340    	; 0x1270 <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    13c4:	57 e0       	ldi	r21, 0x07	; 7
    13c6:	65 2e       	mov	r6, r21
                if(dist->low_gain > kilo_irlow[i]) {
    13c8:	e7 e0       	ldi	r30, 0x07	; 7
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	6e cf       	rjmp	.-292    	; 0x12aa <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    13ce:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
    13d0:	88 e0       	ldi	r24, 0x08	; 8
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	4d cf       	rjmp	.-358    	; 0x1270 <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    13d6:	48 e0       	ldi	r20, 0x08	; 8
    13d8:	64 2e       	mov	r6, r20
                if(dist->low_gain > kilo_irlow[i]) {
    13da:	e8 e0       	ldi	r30, 0x08	; 8
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	65 cf       	rjmp	.-310    	; 0x12aa <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    13e0:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
    13e2:	89 e0       	ldi	r24, 0x09	; 9
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	44 cf       	rjmp	.-376    	; 0x1270 <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    13e8:	39 e0       	ldi	r19, 0x09	; 9
    13ea:	63 2e       	mov	r6, r19
                if(dist->low_gain > kilo_irlow[i]) {
    13ec:	e9 e0       	ldi	r30, 0x09	; 9
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	5c cf       	rjmp	.-328    	; 0x12aa <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    13f2:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
    13f4:	8a e0       	ldi	r24, 0x0A	; 10
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	3b cf       	rjmp	.-394    	; 0x1270 <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    13fa:	2a e0       	ldi	r18, 0x0A	; 10
    13fc:	62 2e       	mov	r6, r18
                if(dist->low_gain > kilo_irlow[i]) {
    13fe:	ea e0       	ldi	r30, 0x0A	; 10
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	53 cf       	rjmp	.-346    	; 0x12aa <estimate_distance+0x3fe>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1404:	9b e0       	ldi	r25, 0x0B	; 11
    1406:	69 2e       	mov	r6, r25
                if(dist->low_gain > kilo_irlow[i]) {
    1408:	eb e0       	ldi	r30, 0x0B	; 11
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	4e cf       	rjmp	.-356    	; 0x12aa <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    140e:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
    1410:	8b e0       	ldi	r24, 0x0B	; 11
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	2d cf       	rjmp	.-422    	; 0x1270 <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1416:	8c e0       	ldi	r24, 0x0C	; 12
    1418:	68 2e       	mov	r6, r24
                if(dist->low_gain > kilo_irlow[i]) {
    141a:	ec e0       	ldi	r30, 0x0C	; 12
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	45 cf       	rjmp	.-374    	; 0x12aa <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1420:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
    1422:	8c e0       	ldi	r24, 0x0C	; 12
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	24 cf       	rjmp	.-440    	; 0x1270 <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1428:	bd e0       	ldi	r27, 0x0D	; 13
    142a:	6b 2e       	mov	r6, r27
                if(dist->low_gain > kilo_irlow[i]) {
    142c:	ed e0       	ldi	r30, 0x0D	; 13
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	3c cf       	rjmp	.-392    	; 0x12aa <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1432:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
    1434:	8d e0       	ldi	r24, 0x0D	; 13
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	1b cf       	rjmp	.-458    	; 0x1270 <estimate_distance+0x3c4>

0000143a <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
    143a:	1f 92       	push	r1
    143c:	0f 92       	push	r0
    143e:	0f b6       	in	r0, 0x3f	; 63
    1440:	0f 92       	push	r0
    1442:	11 24       	eor	r1, r1
    1444:	2f 93       	push	r18
    1446:	3f 93       	push	r19
    1448:	4f 93       	push	r20
    144a:	5f 93       	push	r21
    144c:	6f 93       	push	r22
    144e:	7f 93       	push	r23
    1450:	8f 93       	push	r24
    1452:	9f 93       	push	r25
    1454:	af 93       	push	r26
    1456:	bf 93       	push	r27
    1458:	ef 93       	push	r30
    145a:	ff 93       	push	r31
    tx_clock += tx_increment;
    145c:	80 91 a7 01 	lds	r24, 0x01A7
    1460:	90 91 a8 01 	lds	r25, 0x01A8
    1464:	20 91 a5 01 	lds	r18, 0x01A5
    1468:	30 91 a6 01 	lds	r19, 0x01A6
    146c:	82 0f       	add	r24, r18
    146e:	93 1f       	adc	r25, r19
    1470:	90 93 a8 01 	sts	0x01A8, r25
    1474:	80 93 a7 01 	sts	0x01A7, r24
    tx_increment = 0xFF;
    1478:	8f ef       	ldi	r24, 0xFF	; 255
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	90 93 a6 01 	sts	0x01A6, r25
    1480:	80 93 a5 01 	sts	0x01A5, r24
    OCR0A = tx_increment;
    1484:	8f ef       	ldi	r24, 0xFF	; 255
    1486:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
    1488:	80 91 83 01 	lds	r24, 0x0183
    148c:	90 91 84 01 	lds	r25, 0x0184
    1490:	a0 91 85 01 	lds	r26, 0x0185
    1494:	b0 91 86 01 	lds	r27, 0x0186
    1498:	01 96       	adiw	r24, 0x01	; 1
    149a:	a1 1d       	adc	r26, r1
    149c:	b1 1d       	adc	r27, r1
    149e:	80 93 83 01 	sts	0x0183, r24
    14a2:	90 93 84 01 	sts	0x0184, r25
    14a6:	a0 93 85 01 	sts	0x0185, r26
    14aa:	b0 93 86 01 	sts	0x0186, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
    14ae:	80 91 87 01 	lds	r24, 0x0187
    14b2:	81 11       	cpse	r24, r1
    14b4:	0f c0       	rjmp	.+30     	; 0x14d4 <__vector_14+0x9a>
    14b6:	80 91 b6 01 	lds	r24, 0x01B6
    14ba:	90 91 b7 01 	lds	r25, 0x01B7
    14be:	20 91 a7 01 	lds	r18, 0x01A7
    14c2:	30 91 a8 01 	lds	r19, 0x01A8
    14c6:	82 17       	cp	r24, r18
    14c8:	93 07       	cpc	r25, r19
    14ca:	20 f4       	brcc	.+8      	; 0x14d4 <__vector_14+0x9a>
    14cc:	80 91 43 01 	lds	r24, 0x0143
    14d0:	84 30       	cpi	r24, 0x04	; 4
    14d2:	89 f0       	breq	.+34     	; 0x14f6 <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
    14d4:	ff 91       	pop	r31
    14d6:	ef 91       	pop	r30
    14d8:	bf 91       	pop	r27
    14da:	af 91       	pop	r26
    14dc:	9f 91       	pop	r25
    14de:	8f 91       	pop	r24
    14e0:	7f 91       	pop	r23
    14e2:	6f 91       	pop	r22
    14e4:	5f 91       	pop	r21
    14e6:	4f 91       	pop	r20
    14e8:	3f 91       	pop	r19
    14ea:	2f 91       	pop	r18
    14ec:	0f 90       	pop	r0
    14ee:	0f be       	out	0x3f, r0	; 63
    14f0:	0f 90       	pop	r0
    14f2:	1f 90       	pop	r1
    14f4:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
    14f6:	e0 91 21 01 	lds	r30, 0x0121
    14fa:	f0 91 22 01 	lds	r31, 0x0122
    14fe:	09 95       	icall
        if (msg) {
    1500:	00 97       	sbiw	r24, 0x00	; 0
    1502:	41 f3       	breq	.-48     	; 0x14d4 <__vector_14+0x9a>
            if (message_send(msg)) {
    1504:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <message_send>
    1508:	81 11       	cpse	r24, r1
    150a:	09 c0       	rjmp	.+18     	; 0x151e <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
    150c:	0e 94 d7 01 	call	0x3ae	; 0x3ae <rand>
    1510:	99 27       	eor	r25, r25
    1512:	90 93 a6 01 	sts	0x01A6, r25
    1516:	80 93 a5 01 	sts	0x01A5, r24
                OCR0A = tx_increment;
    151a:	87 bd       	out	0x27, r24	; 39
    151c:	db cf       	rjmp	.-74     	; 0x14d4 <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
    151e:	e0 91 1f 01 	lds	r30, 0x011F
    1522:	f0 91 20 01 	lds	r31, 0x0120
    1526:	09 95       	icall
                tx_clock = 0;
    1528:	10 92 a8 01 	sts	0x01A8, r1
    152c:	10 92 a7 01 	sts	0x01A7, r1
    1530:	d1 cf       	rjmp	.-94     	; 0x14d4 <__vector_14+0x9a>

00001532 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
    1532:	80 ff       	sbrs	r24, 0
    1534:	11 c0       	rjmp	.+34     	; 0x1558 <set_color+0x26>
        DDRD |= (1<<5);
    1536:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
    1538:	81 ff       	sbrs	r24, 1
    153a:	11 c0       	rjmp	.+34     	; 0x155e <set_color+0x2c>
        DDRD |= (1<<4);
    153c:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
    153e:	82 ff       	sbrs	r24, 2
    1540:	11 c0       	rjmp	.+34     	; 0x1564 <set_color+0x32>
        DDRC |= (1<<3);
    1542:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
    1544:	83 ff       	sbrs	r24, 3
    1546:	11 c0       	rjmp	.+34     	; 0x156a <set_color+0x38>
        DDRC |= (1<<2);
    1548:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
    154a:	84 ff       	sbrs	r24, 4
    154c:	11 c0       	rjmp	.+34     	; 0x1570 <set_color+0x3e>
        DDRC |= (1<<5);
    154e:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
    1550:	85 fd       	sbrc	r24, 5
    1552:	11 c0       	rjmp	.+34     	; 0x1576 <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1554:	3c 98       	cbi	0x07, 4	; 7
    1556:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1558:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
    155a:	81 fd       	sbrc	r24, 1
    155c:	ef cf       	rjmp	.-34     	; 0x153c <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    155e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
    1560:	82 fd       	sbrc	r24, 2
    1562:	ef cf       	rjmp	.-34     	; 0x1542 <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1564:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
    1566:	83 fd       	sbrc	r24, 3
    1568:	ef cf       	rjmp	.-34     	; 0x1548 <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    156a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
    156c:	84 fd       	sbrc	r24, 4
    156e:	ef cf       	rjmp	.-34     	; 0x154e <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1570:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
    1572:	85 ff       	sbrs	r24, 5
    1574:	ef cf       	rjmp	.-34     	; 0x1554 <set_color+0x22>
        DDRC |= (1<<4);
    1576:	3c 9a       	sbi	0x07, 4	; 7
    1578:	08 95       	ret

0000157a <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
    157a:	1f 92       	push	r1
    157c:	0f 92       	push	r0
    157e:	0f b6       	in	r0, 0x3f	; 63
    1580:	0f 92       	push	r0
    1582:	11 24       	eor	r1, r1
    1584:	8f 93       	push	r24
    1586:	9f 93       	push	r25
    rx_timer_off();
    1588:	10 92 81 00 	sts	0x0081, r1
    158c:	10 92 85 00 	sts	0x0085, r1
    1590:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	80 93 60 01 	sts	0x0160, r24
    rx_leadingbyte = 1;
    159a:	80 93 a4 01 	sts	0x01A4, r24
    rx_busy = 0;
    159e:	10 92 87 01 	sts	0x0187, r1
    adc_trigger_high_gain();
    15a2:	10 92 7c 00 	sts	0x007C, r1
    15a6:	93 ea       	ldi	r25, 0xA3	; 163
    15a8:	90 93 7a 00 	sts	0x007A, r25
    15ac:	80 93 7b 00 	sts	0x007B, r24
}
    15b0:	9f 91       	pop	r25
    15b2:	8f 91       	pop	r24
    15b4:	0f 90       	pop	r0
    15b6:	0f be       	out	0x3f, r0	; 63
    15b8:	0f 90       	pop	r0
    15ba:	1f 90       	pop	r1
    15bc:	18 95       	reti

000015be <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
    15be:	1f 92       	push	r1
    15c0:	0f 92       	push	r0
    15c2:	0f b6       	in	r0, 0x3f	; 63
    15c4:	0f 92       	push	r0
    15c6:	11 24       	eor	r1, r1
    15c8:	2f 93       	push	r18
    15ca:	3f 93       	push	r19
    15cc:	4f 93       	push	r20
    15ce:	5f 93       	push	r21
    15d0:	6f 93       	push	r22
    15d2:	7f 93       	push	r23
    15d4:	8f 93       	push	r24
    15d6:	9f 93       	push	r25
    15d8:	af 93       	push	r26
    15da:	bf 93       	push	r27
    15dc:	cf 93       	push	r28
    15de:	df 93       	push	r29
    15e0:	ef 93       	push	r30
    15e2:	ff 93       	push	r31
    uint16_t timer = TCNT1;
    15e4:	20 91 84 00 	lds	r18, 0x0084
    15e8:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
    15ec:	41 e0       	ldi	r20, 0x01	; 1
    15ee:	40 93 87 01 	sts	0x0187, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
    15f2:	80 91 60 01 	lds	r24, 0x0160
    15f6:	88 23       	and	r24, r24
    15f8:	a9 f1       	breq	.+106    	; 0x1664 <__vector_23+0xa6>
        rx_timer_on();
    15fa:	10 92 85 00 	sts	0x0085, r1
    15fe:	10 92 84 00 	sts	0x0084, r1
    1602:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
    1606:	10 92 b8 01 	sts	0x01B8, r1
        rx_leadingbit = 0;
    160a:	10 92 60 01 	sts	0x0160, r1
        if (rx_leadingbyte) {
    160e:	80 91 a4 01 	lds	r24, 0x01A4
    1612:	88 23       	and	r24, r24
    1614:	a1 f0       	breq	.+40     	; 0x163e <__vector_23+0x80>
            adc_finish_conversion();
    1616:	80 91 7a 00 	lds	r24, 0x007A
    161a:	86 fd       	sbrc	r24, 6
    161c:	fc cf       	rjmp	.-8      	; 0x1616 <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
    161e:	80 91 78 00 	lds	r24, 0x0078
    1622:	90 91 79 00 	lds	r25, 0x0079
    1626:	90 93 82 01 	sts	0x0182, r25
    162a:	80 93 81 01 	sts	0x0181, r24
            adc_trigger_low_gain();
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	80 93 7c 00 	sts	0x007C, r24
    1634:	93 ea       	ldi	r25, 0xA3	; 163
    1636:	90 93 7a 00 	sts	0x007A, r25
    163a:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
    163e:	ff 91       	pop	r31
    1640:	ef 91       	pop	r30
    1642:	df 91       	pop	r29
    1644:	cf 91       	pop	r28
    1646:	bf 91       	pop	r27
    1648:	af 91       	pop	r26
    164a:	9f 91       	pop	r25
    164c:	8f 91       	pop	r24
    164e:	7f 91       	pop	r23
    1650:	6f 91       	pop	r22
    1652:	5f 91       	pop	r21
    1654:	4f 91       	pop	r20
    1656:	3f 91       	pop	r19
    1658:	2f 91       	pop	r18
    165a:	0f 90       	pop	r0
    165c:	0f be       	out	0x3f, r0	; 63
    165e:	0f 90       	pop	r0
    1660:	1f 90       	pop	r1
    1662:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    1664:	c9 01       	movw	r24, r18
    1666:	87 58       	subi	r24, 0x87	; 135
    1668:	91 09       	sbc	r25, r1
    166a:	84 37       	cpi	r24, 0x74	; 116
    166c:	99 40       	sbci	r25, 0x09	; 9
    166e:	08 f0       	brcs	.+2      	; 0x1672 <__vector_23+0xb4>
    1670:	4f c0       	rjmp	.+158    	; 0x1710 <__vector_23+0x152>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    1672:	26 58       	subi	r18, 0x86	; 134
    1674:	31 09       	sbc	r19, r1
    1676:	a4 ef       	ldi	r26, 0xF4	; 244
    1678:	b0 e0       	ldi	r27, 0x00	; 0
    167a:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <__umulhisi3>
    167e:	aa 27       	eor	r26, r26
    1680:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
    1682:	88 30       	cpi	r24, 0x08	; 8
    1684:	08 f4       	brcc	.+2      	; 0x1688 <__vector_23+0xca>
    1686:	7b c0       	rjmp	.+246    	; 0x177e <__vector_23+0x1c0>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    1688:	40 93 60 01 	sts	0x0160, r20
                if (rx_leadingbyte) {
    168c:	80 91 a4 01 	lds	r24, 0x01A4
    1690:	81 11       	cpse	r24, r1
    1692:	52 c0       	rjmp	.+164    	; 0x1738 <__vector_23+0x17a>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    1694:	80 91 7e 01 	lds	r24, 0x017E
    1698:	e8 2f       	mov	r30, r24
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	e6 55       	subi	r30, 0x56	; 86
    169e:	fe 4f       	sbci	r31, 0xFE	; 254
    16a0:	90 91 b8 01 	lds	r25, 0x01B8
    16a4:	90 83       	st	Z, r25
                    rx_byteindex++;
    16a6:	8f 5f       	subi	r24, 0xFF	; 255
    16a8:	80 93 7e 01 	sts	0x017E, r24
                    if (rx_byteindex == sizeof(message_t)) {
    16ac:	8c 30       	cpi	r24, 0x0C	; 12
    16ae:	39 f6       	brne	.-114    	; 0x163e <__vector_23+0x80>
                        rx_timer_off();
    16b0:	10 92 81 00 	sts	0x0081, r1
    16b4:	10 92 85 00 	sts	0x0085, r1
    16b8:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    16bc:	40 93 a4 01 	sts	0x01A4, r20
                        rx_busy = 0;
    16c0:	10 92 87 01 	sts	0x0187, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    16c4:	c0 91 b4 01 	lds	r28, 0x01B4
    16c8:	d0 91 b5 01 	lds	r29, 0x01B5
    16cc:	8a ea       	ldi	r24, 0xAA	; 170
    16ce:	91 e0       	ldi	r25, 0x01	; 1
    16d0:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <message_crc>
    16d4:	c8 17       	cp	r28, r24
    16d6:	d9 07       	cpc	r29, r25
    16d8:	09 f0       	breq	.+2      	; 0x16dc <__vector_23+0x11e>
    16da:	b1 cf       	rjmp	.-158    	; 0x163e <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    16dc:	80 91 b3 01 	lds	r24, 0x01B3
    16e0:	87 ff       	sbrs	r24, 7
    16e2:	5e c0       	rjmp	.+188    	; 0x17a0 <__vector_23+0x1e2>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    16e4:	98 e7       	ldi	r25, 0x78	; 120
    16e6:	98 0f       	add	r25, r24
    16e8:	93 30       	cpi	r25, 0x03	; 3
    16ea:	30 f0       	brcs	.+12     	; 0x16f8 <__vector_23+0x13a>
        motors_off();
    16ec:	53 98       	cbi	0x0a, 3	; 10
    16ee:	23 98       	cbi	0x04, 3	; 4
    16f0:	10 92 b4 00 	sts	0x00B4, r1
    16f4:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	fc 01       	movw	r30, r24
    16fc:	e0 58       	subi	r30, 0x80	; 128
    16fe:	f1 09       	sbc	r31, r1
    1700:	eb 30       	cpi	r30, 0x0B	; 11
    1702:	f1 05       	cpc	r31, r1
    1704:	08 f0       	brcs	.+2      	; 0x1708 <__vector_23+0x14a>
    1706:	9b cf       	rjmp	.-202    	; 0x163e <__vector_23+0x80>
    1708:	e5 5c       	subi	r30, 0xC5	; 197
    170a:	ff 4f       	sbci	r31, 0xFF	; 255
    170c:	0c 94 a9 0d 	jmp	0x1b52	; 0x1b52 <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    1710:	10 92 81 00 	sts	0x0081, r1
    1714:	10 92 85 00 	sts	0x0085, r1
    1718:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    171c:	40 93 60 01 	sts	0x0160, r20
            rx_leadingbyte = 1;
    1720:	40 93 a4 01 	sts	0x01A4, r20
            rx_busy = 0;
    1724:	10 92 87 01 	sts	0x0187, r1
            adc_trigger_high_gain();
    1728:	10 92 7c 00 	sts	0x007C, r1
    172c:	83 ea       	ldi	r24, 0xA3	; 163
    172e:	80 93 7a 00 	sts	0x007A, r24
    1732:	40 93 7b 00 	sts	0x007B, r20
    1736:	83 cf       	rjmp	.-250    	; 0x163e <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    1738:	80 91 7a 00 	lds	r24, 0x007A
    173c:	86 fd       	sbrc	r24, 6
    173e:	fc cf       	rjmp	.-8      	; 0x1738 <__vector_23+0x17a>
                    rx_dist.low_gain = ADCW;
    1740:	80 91 78 00 	lds	r24, 0x0078
    1744:	90 91 79 00 	lds	r25, 0x0079
    1748:	90 93 80 01 	sts	0x0180, r25
    174c:	80 93 7f 01 	sts	0x017F, r24
                    adc_trigger_high_gain();
    1750:	10 92 7c 00 	sts	0x007C, r1
    1754:	83 ea       	ldi	r24, 0xA3	; 163
    1756:	80 93 7a 00 	sts	0x007A, r24
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    1760:	90 91 b8 01 	lds	r25, 0x01B8
    1764:	99 23       	and	r25, r25
    1766:	b9 f0       	breq	.+46     	; 0x1796 <__vector_23+0x1d8>
                        rx_timer_off();
    1768:	10 92 81 00 	sts	0x0081, r1
    176c:	10 92 85 00 	sts	0x0085, r1
    1770:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1774:	80 93 a4 01 	sts	0x01A4, r24
                        rx_busy = 0;
    1778:	10 92 87 01 	sts	0x0187, r1
    177c:	60 cf       	rjmp	.-320    	; 0x163e <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    177e:	21 e0       	ldi	r18, 0x01	; 1
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	01 c0       	rjmp	.+2      	; 0x1786 <__vector_23+0x1c8>
    1784:	22 0f       	add	r18, r18
    1786:	8a 95       	dec	r24
    1788:	ea f7       	brpl	.-6      	; 0x1784 <__vector_23+0x1c6>
    178a:	80 91 b8 01 	lds	r24, 0x01B8
    178e:	82 2b       	or	r24, r18
    1790:	80 93 b8 01 	sts	0x01B8, r24
    1794:	54 cf       	rjmp	.-344    	; 0x163e <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    1796:	10 92 a4 01 	sts	0x01A4, r1
                        rx_byteindex = 0;
    179a:	10 92 7e 01 	sts	0x017E, r1
    179e:	4f cf       	rjmp	.-354    	; 0x163e <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    17a0:	e0 91 23 01 	lds	r30, 0x0123
    17a4:	f0 91 24 01 	lds	r31, 0x0124
    17a8:	6f e7       	ldi	r22, 0x7F	; 127
    17aa:	71 e0       	ldi	r23, 0x01	; 1
    17ac:	8a ea       	ldi	r24, 0xAA	; 170
    17ae:	91 e0       	ldi	r25, 0x01	; 1
    17b0:	09 95       	icall
    17b2:	45 cf       	rjmp	.-374    	; 0x163e <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    17b4:	80 91 aa 01 	lds	r24, 0x01AA
    17b8:	82 30       	cpi	r24, 0x02	; 2
    17ba:	09 f4       	brne	.+2      	; 0x17be <__vector_23+0x200>
    17bc:	dc c0       	rjmp	.+440    	; 0x1976 <__vector_23+0x3b8>
    17be:	08 f4       	brcc	.+2      	; 0x17c2 <__vector_23+0x204>
    17c0:	b9 c0       	rjmp	.+370    	; 0x1934 <__vector_23+0x376>
    17c2:	83 30       	cpi	r24, 0x03	; 3
    17c4:	09 f4       	brne	.+2      	; 0x17c8 <__vector_23+0x20a>
    17c6:	c5 c0       	rjmp	.+394    	; 0x1952 <__vector_23+0x394>
    17c8:	84 30       	cpi	r24, 0x04	; 4
    17ca:	09 f0       	breq	.+2      	; 0x17ce <__vector_23+0x210>
    17cc:	b0 c0       	rjmp	.+352    	; 0x192e <__vector_23+0x370>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    17ce:	80 91 41 01 	lds	r24, 0x0141
    17d2:	90 91 b0 01 	lds	r25, 0x01B0
    17d6:	83 30       	cpi	r24, 0x03	; 3
    17d8:	09 f4       	brne	.+2      	; 0x17dc <__vector_23+0x21e>
    17da:	e2 c0       	rjmp	.+452    	; 0x19a0 <__vector_23+0x3e2>
    17dc:	80 91 af 01 	lds	r24, 0x01AF
                        prev_motion = MOVE_STOP;
    17e0:	10 92 42 01 	sts	0x0142, r1
                        cur_motion = MOVE_STRAIGHT;
    17e4:	23 e0       	ldi	r18, 0x03	; 3
    17e6:	20 93 41 01 	sts	0x0141, r18
                        kilo_straight_left = calibmsg->straight_left;
    17ea:	80 93 bb 01 	sts	0x01BB, r24
                        kilo_straight_right = calibmsg->straight_right;
    17ee:	90 93 bc 01 	sts	0x01BC, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    17f2:	80 91 43 01 	lds	r24, 0x0143
    17f6:	86 30       	cpi	r24, 0x06	; 6
    17f8:	09 f4       	brne	.+2      	; 0x17fc <__vector_23+0x23e>
    17fa:	21 cf       	rjmp	.-446    	; 0x163e <__vector_23+0x80>
                motors_on();
    17fc:	53 9a       	sbi	0x0a, 3	; 10
    17fe:	23 9a       	sbi	0x04, 3	; 4
    1800:	10 92 b4 00 	sts	0x00B4, r1
    1804:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    1808:	86 e0       	ldi	r24, 0x06	; 6
    180a:	80 93 43 01 	sts	0x0143, r24
    180e:	17 cf       	rjmp	.-466    	; 0x163e <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    1810:	80 91 43 01 	lds	r24, 0x0143
    1814:	86 30       	cpi	r24, 0x06	; 6
    1816:	99 f0       	breq	.+38     	; 0x183e <__vector_23+0x280>
                motors_on();
    1818:	53 9a       	sbi	0x0a, 3	; 10
    181a:	23 9a       	sbi	0x04, 3	; 4
    181c:	10 92 b4 00 	sts	0x00B4, r1
    1820:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1824:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1826:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1828:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    182a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    182c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    182e:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    1830:	10 92 41 01 	sts	0x0141, r1
    1834:	10 92 42 01 	sts	0x0142, r1
                kilo_state = MOVING;
    1838:	86 e0       	ldi	r24, 0x06	; 6
    183a:	80 93 43 01 	sts	0x0143, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	00 90 aa 01 	lds	r0, 0x01AA
    1846:	02 c0       	rjmp	.+4      	; 0x184c <__vector_23+0x28e>
    1848:	88 0f       	add	r24, r24
    184a:	99 1f       	adc	r25, r25
    184c:	0a 94       	dec	r0
    184e:	e2 f7       	brpl	.-8      	; 0x1848 <__vector_23+0x28a>
    1850:	20 91 b9 01 	lds	r18, 0x01B9
    1854:	30 91 ba 01 	lds	r19, 0x01BA
    1858:	82 23       	and	r24, r18
    185a:	93 23       	and	r25, r19
    185c:	89 2b       	or	r24, r25
    185e:	09 f0       	breq	.+2      	; 0x1862 <__vector_23+0x2a4>
    1860:	86 c0       	rjmp	.+268    	; 0x196e <__vector_23+0x3b0>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    1862:	10 92 41 01 	sts	0x0141, r1
    1866:	eb ce       	rjmp	.-554    	; 0x163e <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	80 93 43 01 	sts	0x0143, r24
    186e:	e7 ce       	rjmp	.-562    	; 0x163e <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    1870:	e0 e0       	ldi	r30, 0x00	; 0
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    1876:	80 91 6e 00 	lds	r24, 0x006E
    187a:	8d 7f       	andi	r24, 0xFD	; 253
    187c:	80 93 6e 00 	sts	0x006E, r24
    1880:	16 bc       	out	0x26, r1	; 38
            bootload();
    1882:	e0 e0       	ldi	r30, 0x00	; 0
    1884:	f0 e7       	ldi	r31, 0x70	; 112
    1886:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    1888:	10 92 43 01 	sts	0x0143, r1
    188c:	d8 ce       	rjmp	.-592    	; 0x163e <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    188e:	82 e0       	ldi	r24, 0x02	; 2
    1890:	80 93 43 01 	sts	0x0143, r24
    1894:	d4 ce       	rjmp	.-600    	; 0x163e <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    1896:	85 e0       	ldi	r24, 0x05	; 5
    1898:	80 93 43 01 	sts	0x0143, r24
    189c:	d0 ce       	rjmp	.-608    	; 0x163e <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    189e:	80 91 43 01 	lds	r24, 0x0143
    18a2:	83 30       	cpi	r24, 0x03	; 3
    18a4:	09 f4       	brne	.+2      	; 0x18a8 <__vector_23+0x2ea>
    18a6:	cb ce       	rjmp	.-618    	; 0x163e <__vector_23+0x80>
    18a8:	80 91 43 01 	lds	r24, 0x0143
    18ac:	84 30       	cpi	r24, 0x04	; 4
    18ae:	09 f4       	brne	.+2      	; 0x18b2 <__vector_23+0x2f4>
    18b0:	c6 ce       	rjmp	.-628    	; 0x163e <__vector_23+0x80>
                motors_on();
    18b2:	53 9a       	sbi	0x0a, 3	; 10
    18b4:	23 9a       	sbi	0x04, 3	; 4
    18b6:	10 92 b4 00 	sts	0x00B4, r1
    18ba:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    18be:	83 e0       	ldi	r24, 0x03	; 3
    18c0:	80 93 43 01 	sts	0x0143, r24
    18c4:	bc ce       	rjmp	.-648    	; 0x163e <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    18c6:	80 91 43 01 	lds	r24, 0x0143
    18ca:	86 30       	cpi	r24, 0x06	; 6
    18cc:	09 f0       	breq	.+2      	; 0x18d0 <__vector_23+0x312>
    18ce:	b7 ce       	rjmp	.-658    	; 0x163e <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    18d0:	60 91 b9 01 	lds	r22, 0x01B9
    18d4:	80 eb       	ldi	r24, 0xB0	; 176
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    18dc:	60 91 ba 01 	lds	r22, 0x01BA
    18e0:	81 eb       	ldi	r24, 0xB1	; 177
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    18e8:	60 91 bd 01 	lds	r22, 0x01BD
    18ec:	85 e0       	ldi	r24, 0x05	; 5
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    18f4:	60 91 a9 01 	lds	r22, 0x01A9
    18f8:	89 e0       	ldi	r24, 0x09	; 9
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    1900:	60 91 bb 01 	lds	r22, 0x01BB
    1904:	8c e0       	ldi	r24, 0x0C	; 12
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    190c:	60 91 bc 01 	lds	r22, 0x01BC
    1910:	84 e1       	ldi	r24, 0x14	; 20
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <__eewr_byte_m328p>
                        motors_off();
    1918:	53 98       	cbi	0x0a, 3	; 10
    191a:	23 98       	cbi	0x04, 3	; 4
    191c:	10 92 b4 00 	sts	0x00B4, r1
    1920:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	80 93 43 01 	sts	0x0143, r24
    192a:	80 91 aa 01 	lds	r24, 0x01AA
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    192e:	81 11       	cpse	r24, r1
    1930:	60 cf       	rjmp	.-320    	; 0x17f2 <__vector_23+0x234>
    1932:	85 ce       	rjmp	.-758    	; 0x163e <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1934:	88 23       	and	r24, r24
    1936:	39 f2       	breq	.-114    	; 0x18c6 <__vector_23+0x308>
    1938:	81 30       	cpi	r24, 0x01	; 1
    193a:	c9 f7       	brne	.-14     	; 0x192e <__vector_23+0x370>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    193c:	80 91 ab 01 	lds	r24, 0x01AB
    1940:	90 91 ac 01 	lds	r25, 0x01AC
    1944:	90 93 ba 01 	sts	0x01BA, r25
    1948:	80 93 b9 01 	sts	0x01B9, r24
                    cur_motion = MOVE_STOP;
    194c:	10 92 41 01 	sts	0x0141, r1
    1950:	50 cf       	rjmp	.-352    	; 0x17f2 <__vector_23+0x234>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1952:	80 91 41 01 	lds	r24, 0x0141
    1956:	82 30       	cpi	r24, 0x02	; 2
    1958:	71 f1       	breq	.+92     	; 0x19b6 <__vector_23+0x3f8>
    195a:	80 91 ae 01 	lds	r24, 0x01AE
                        prev_motion = MOVE_STOP;
    195e:	10 92 42 01 	sts	0x0142, r1
                        cur_motion = MOVE_RIGHT;
    1962:	92 e0       	ldi	r25, 0x02	; 2
    1964:	90 93 41 01 	sts	0x0141, r25
                        kilo_turn_right = calibmsg->turn_right;
    1968:	80 93 a9 01 	sts	0x01A9, r24
    196c:	42 cf       	rjmp	.-380    	; 0x17f2 <__vector_23+0x234>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	80 93 41 01 	sts	0x0141, r24
    1974:	64 ce       	rjmp	.-824    	; 0x163e <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1976:	80 91 41 01 	lds	r24, 0x0141
    197a:	81 30       	cpi	r24, 0x01	; 1
    197c:	51 f0       	breq	.+20     	; 0x1992 <__vector_23+0x3d4>
    197e:	80 91 ad 01 	lds	r24, 0x01AD
                        prev_motion = MOVE_STOP;
    1982:	10 92 42 01 	sts	0x0142, r1
                        cur_motion = MOVE_LEFT;
    1986:	91 e0       	ldi	r25, 0x01	; 1
    1988:	90 93 41 01 	sts	0x0141, r25
                        kilo_turn_left = calibmsg->turn_left;
    198c:	80 93 bd 01 	sts	0x01BD, r24
    1990:	30 cf       	rjmp	.-416    	; 0x17f2 <__vector_23+0x234>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1992:	80 91 ad 01 	lds	r24, 0x01AD
    1996:	90 91 bd 01 	lds	r25, 0x01BD
    199a:	89 13       	cpse	r24, r25
    199c:	f2 cf       	rjmp	.-28     	; 0x1982 <__vector_23+0x3c4>
    199e:	29 cf       	rjmp	.-430    	; 0x17f2 <__vector_23+0x234>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    19a0:	80 91 bc 01 	lds	r24, 0x01BC
    19a4:	98 13       	cpse	r25, r24
    19a6:	1a cf       	rjmp	.-460    	; 0x17dc <__vector_23+0x21e>
    19a8:	80 91 af 01 	lds	r24, 0x01AF
    19ac:	20 91 bb 01 	lds	r18, 0x01BB
    19b0:	82 13       	cpse	r24, r18
    19b2:	16 cf       	rjmp	.-468    	; 0x17e0 <__vector_23+0x222>
    19b4:	1e cf       	rjmp	.-452    	; 0x17f2 <__vector_23+0x234>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    19b6:	80 91 ae 01 	lds	r24, 0x01AE
    19ba:	90 91 a9 01 	lds	r25, 0x01A9
    19be:	89 13       	cpse	r24, r25
    19c0:	ce cf       	rjmp	.-100    	; 0x195e <__vector_23+0x3a0>
    19c2:	17 cf       	rjmp	.-466    	; 0x17f2 <__vector_23+0x234>

000019c4 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    19c4:	fc 01       	movw	r30, r24
    19c6:	2a e0       	ldi	r18, 0x0A	; 10
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    19c8:	8f ef       	ldi	r24, 0xFF	; 255
    19ca:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    19cc:	31 91       	ld	r19, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    19ce:	83 27       	eor	r24, r19
    19d0:	08 2e       	mov	r0, r24
    19d2:	82 95       	swap	r24
    19d4:	80 7f       	andi	r24, 0xF0	; 240
    19d6:	80 25       	eor	r24, r0
    19d8:	09 2e       	mov	r0, r25
    19da:	98 2f       	mov	r25, r24
    19dc:	82 95       	swap	r24
    19de:	8f 70       	andi	r24, 0x0F	; 15
    19e0:	08 26       	eor	r0, r24
    19e2:	86 95       	lsr	r24
    19e4:	98 27       	eor	r25, r24
    19e6:	89 27       	eor	r24, r25
    19e8:	88 0f       	add	r24, r24
    19ea:	88 0f       	add	r24, r24
    19ec:	88 0f       	add	r24, r24
    19ee:	80 25       	eor	r24, r0
    19f0:	21 50       	subi	r18, 0x01	; 1

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    19f2:	61 f7       	brne	.-40     	; 0x19cc <message_crc+0x8>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    19f4:	08 95       	ret

000019f6 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    19f6:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    19f8:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    19fa:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    19fc:	20 91 7d 01 	lds	r18, 0x017D
    or tmpreg1, ddrreg
    1a00:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    1a02:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    1a04:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1a06:	30 91 7d 01 	lds	r19, 0x017D
    1a0a:	20 30       	cpi	r18, 0x00	; 0
    1a0c:	29 f0       	breq	.+10     	; 0x1a18 <message_send+0x22>
    1a0e:	00 00       	nop
    1a10:	25 b1       	in	r18, 0x05	; 5
    1a12:	23 2b       	or	r18, r19
    1a14:	25 b9       	out	0x05, r18	; 5
    1a16:	04 c0       	rjmp	.+8      	; 0x1a20 <message_send+0x2a>
    1a18:	00 00       	nop
    1a1a:	00 00       	nop
    1a1c:	00 00       	nop
    1a1e:	00 c0       	rjmp	.+0      	; 0x1a20 <message_send+0x2a>
    1a20:	00 00       	nop
    1a22:	00 00       	nop
    1a24:	00 00       	nop
    1a26:	30 95       	com	r19
    1a28:	25 b1       	in	r18, 0x05	; 5
    1a2a:	23 23       	and	r18, r19
    1a2c:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    1a2e:	2e ea       	ldi	r18, 0xAE	; 174
    1a30:	2a 95       	dec	r18
    1a32:	f1 f7       	brne	.-4      	; 0x1a30 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    1a34:	2b ee       	ldi	r18, 0xEB	; 235

00001a36 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    1a36:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    1a38:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1a3a:	0a c0       	rjmp	.+20     	; 0x1a50 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1a3c:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1a3e:	30 91 7d 01 	lds	r19, 0x017D
    com tmpreg2
    1a42:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1a44:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1a46:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1a48:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1a4a:	0f be       	out	0x3f, r0	; 63
    return 0
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	08 95       	ret

00001a50 <nocollision>:
nocollision:
    nop
    1a50:	00 00       	nop
    dec tmpreg1
    1a52:	2a 95       	dec	r18
    brne checkcollision
    1a54:	81 f7       	brne	.-32     	; 0x1a36 <checkcollision>

    ldi tmpreg1, 0x01
    1a56:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1a58:	30 91 7d 01 	lds	r19, 0x017D
    1a5c:	20 30       	cpi	r18, 0x00	; 0
    1a5e:	29 f0       	breq	.+10     	; 0x1a6a <nocollision+0x1a>
    1a60:	00 00       	nop
    1a62:	25 b1       	in	r18, 0x05	; 5
    1a64:	23 2b       	or	r18, r19
    1a66:	25 b9       	out	0x05, r18	; 5
    1a68:	04 c0       	rjmp	.+8      	; 0x1a72 <nocollision+0x22>
    1a6a:	00 00       	nop
    1a6c:	00 00       	nop
    1a6e:	00 00       	nop
    1a70:	00 c0       	rjmp	.+0      	; 0x1a72 <nocollision+0x22>
    1a72:	00 00       	nop
    1a74:	00 00       	nop
    1a76:	00 00       	nop
    1a78:	30 95       	com	r19
    1a7a:	25 b1       	in	r18, 0x05	; 5
    1a7c:	23 23       	and	r18, r19
    1a7e:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    1a80:	00 00       	nop
    1a82:	24 e5       	ldi	r18, 0x54	; 84
    1a84:	2a 95       	dec	r18
    1a86:	f1 f7       	brne	.-4      	; 0x1a84 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    1a88:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    1a8a:	8c e0       	ldi	r24, 0x0C	; 12

00001a8c <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    1a8c:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    1a8e:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    1a90:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    1a92:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    1a94:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    1a96:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    1a98:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    1a9a:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    1a9c:	50 e0       	ldi	r21, 0x00	; 0

00001a9e <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    1a9e:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    1aa0:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    1aa2:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    1aa4:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    1aa6:	30 91 7d 01 	lds	r19, 0x017D
    1aaa:	20 30       	cpi	r18, 0x00	; 0
    1aac:	29 f0       	breq	.+10     	; 0x1ab8 <sendbit+0x1a>
    1aae:	00 00       	nop
    1ab0:	25 b1       	in	r18, 0x05	; 5
    1ab2:	23 2b       	or	r18, r19
    1ab4:	25 b9       	out	0x05, r18	; 5
    1ab6:	04 c0       	rjmp	.+8      	; 0x1ac0 <sendbit+0x22>
    1ab8:	00 00       	nop
    1aba:	00 00       	nop
    1abc:	00 00       	nop
    1abe:	00 c0       	rjmp	.+0      	; 0x1ac0 <sendbit+0x22>
    1ac0:	00 00       	nop
    1ac2:	00 00       	nop
    1ac4:	00 00       	nop
    1ac6:	30 95       	com	r19
    1ac8:	25 b1       	in	r18, 0x05	; 5
    1aca:	23 23       	and	r18, r19
    1acc:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    1ace:	00 00       	nop
    1ad0:	21 e5       	ldi	r18, 0x51	; 81
    1ad2:	2a 95       	dec	r18
    1ad4:	f1 f7       	brne	.-4      	; 0x1ad2 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    1ad6:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    1ad8:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    1ada:	9a 95       	dec	r25
    brne sendbit
    1adc:	01 f7       	brne	.-64     	; 0x1a9e <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    1ade:	8a 95       	dec	r24
    brne sendbyte
    1ae0:	a9 f6       	brne	.-86     	; 0x1a8c <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    1ae2:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    1ae4:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    1ae6:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1ae8:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1aea:	30 91 7d 01 	lds	r19, 0x017D
    com tmpreg2
    1aee:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1af0:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1af2:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1af4:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1af6:	0f be       	out	0x3f, r0	; 63
    return 1
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	08 95       	ret

00001afc <main>:
}


int main()
{
    kilo_init();
    1afc:	0e 94 12 04 	call	0x824	; 0x824 <kilo_init>
    kilo_message_rx = message_rx;
    1b00:	8c ec       	ldi	r24, 0xCC	; 204
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	90 93 24 01 	sts	0x0124, r25
    1b08:	80 93 23 01 	sts	0x0123, r24
    kilo_message_tx = message_tx;
    1b0c:	81 eb       	ldi	r24, 0xB1	; 177
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	90 93 22 01 	sts	0x0122, r25
    1b14:	80 93 21 01 	sts	0x0121, r24
    kilo_start(setup, loop);
    1b18:	6b e3       	ldi	r22, 0x3B	; 59
    1b1a:	73 e0       	ldi	r23, 0x03	; 3
    1b1c:	8e e6       	ldi	r24, 0x6E	; 110
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	0e 94 0b 05 	call	0xa16	; 0xa16 <kilo_start>

    return 0;
}
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	08 95       	ret

00001b2a <__divmodhi4>:
    1b2a:	97 fb       	bst	r25, 7
    1b2c:	07 2e       	mov	r0, r23
    1b2e:	16 f4       	brtc	.+4      	; 0x1b34 <__divmodhi4+0xa>
    1b30:	00 94       	com	r0
    1b32:	07 d0       	rcall	.+14     	; 0x1b42 <__divmodhi4_neg1>
    1b34:	77 fd       	sbrc	r23, 7
    1b36:	09 d0       	rcall	.+18     	; 0x1b4a <__divmodhi4_neg2>
    1b38:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__udivmodhi4>
    1b3c:	07 fc       	sbrc	r0, 7
    1b3e:	05 d0       	rcall	.+10     	; 0x1b4a <__divmodhi4_neg2>
    1b40:	3e f4       	brtc	.+14     	; 0x1b50 <__divmodhi4_exit>

00001b42 <__divmodhi4_neg1>:
    1b42:	90 95       	com	r25
    1b44:	81 95       	neg	r24
    1b46:	9f 4f       	sbci	r25, 0xFF	; 255
    1b48:	08 95       	ret

00001b4a <__divmodhi4_neg2>:
    1b4a:	70 95       	com	r23
    1b4c:	61 95       	neg	r22
    1b4e:	7f 4f       	sbci	r23, 0xFF	; 255

00001b50 <__divmodhi4_exit>:
    1b50:	08 95       	ret

00001b52 <__tablejump2__>:
    1b52:	ee 0f       	add	r30, r30
    1b54:	ff 1f       	adc	r31, r31

00001b56 <__tablejump__>:
    1b56:	05 90       	lpm	r0, Z+
    1b58:	f4 91       	lpm	r31, Z
    1b5a:	e0 2d       	mov	r30, r0
    1b5c:	09 94       	ijmp

00001b5e <__umulhisi3>:
    1b5e:	a2 9f       	mul	r26, r18
    1b60:	b0 01       	movw	r22, r0
    1b62:	b3 9f       	mul	r27, r19
    1b64:	c0 01       	movw	r24, r0
    1b66:	a3 9f       	mul	r26, r19
    1b68:	70 0d       	add	r23, r0
    1b6a:	81 1d       	adc	r24, r1
    1b6c:	11 24       	eor	r1, r1
    1b6e:	91 1d       	adc	r25, r1
    1b70:	b2 9f       	mul	r27, r18
    1b72:	70 0d       	add	r23, r0
    1b74:	81 1d       	adc	r24, r1
    1b76:	11 24       	eor	r1, r1
    1b78:	91 1d       	adc	r25, r1
    1b7a:	08 95       	ret

00001b7c <__udivmodhi4>:
    1b7c:	aa 1b       	sub	r26, r26
    1b7e:	bb 1b       	sub	r27, r27
    1b80:	51 e1       	ldi	r21, 0x11	; 17
    1b82:	07 c0       	rjmp	.+14     	; 0x1b92 <__udivmodhi4_ep>

00001b84 <__udivmodhi4_loop>:
    1b84:	aa 1f       	adc	r26, r26
    1b86:	bb 1f       	adc	r27, r27
    1b88:	a6 17       	cp	r26, r22
    1b8a:	b7 07       	cpc	r27, r23
    1b8c:	10 f0       	brcs	.+4      	; 0x1b92 <__udivmodhi4_ep>
    1b8e:	a6 1b       	sub	r26, r22
    1b90:	b7 0b       	sbc	r27, r23

00001b92 <__udivmodhi4_ep>:
    1b92:	88 1f       	adc	r24, r24
    1b94:	99 1f       	adc	r25, r25
    1b96:	5a 95       	dec	r21
    1b98:	a9 f7       	brne	.-22     	; 0x1b84 <__udivmodhi4_loop>
    1b9a:	80 95       	com	r24
    1b9c:	90 95       	com	r25
    1b9e:	bc 01       	movw	r22, r24
    1ba0:	cd 01       	movw	r24, r26
    1ba2:	08 95       	ret

00001ba4 <__subsf3>:
    1ba4:	50 58       	subi	r21, 0x80	; 128

00001ba6 <__addsf3>:
    1ba6:	bb 27       	eor	r27, r27
    1ba8:	aa 27       	eor	r26, r26
    1baa:	0e d0       	rcall	.+28     	; 0x1bc8 <__addsf3x>
    1bac:	4d c1       	rjmp	.+666    	; 0x1e48 <__fp_round>
    1bae:	3e d1       	rcall	.+636    	; 0x1e2c <__fp_pscA>
    1bb0:	30 f0       	brcs	.+12     	; 0x1bbe <__addsf3+0x18>
    1bb2:	43 d1       	rcall	.+646    	; 0x1e3a <__fp_pscB>
    1bb4:	20 f0       	brcs	.+8      	; 0x1bbe <__addsf3+0x18>
    1bb6:	31 f4       	brne	.+12     	; 0x1bc4 <__addsf3+0x1e>
    1bb8:	9f 3f       	cpi	r25, 0xFF	; 255
    1bba:	11 f4       	brne	.+4      	; 0x1bc0 <__addsf3+0x1a>
    1bbc:	1e f4       	brtc	.+6      	; 0x1bc4 <__addsf3+0x1e>
    1bbe:	33 c1       	rjmp	.+614    	; 0x1e26 <__fp_nan>
    1bc0:	0e f4       	brtc	.+2      	; 0x1bc4 <__addsf3+0x1e>
    1bc2:	e0 95       	com	r30
    1bc4:	e7 fb       	bst	r30, 7
    1bc6:	29 c1       	rjmp	.+594    	; 0x1e1a <__fp_inf>

00001bc8 <__addsf3x>:
    1bc8:	e9 2f       	mov	r30, r25
    1bca:	4f d1       	rcall	.+670    	; 0x1e6a <__fp_split3>
    1bcc:	80 f3       	brcs	.-32     	; 0x1bae <__addsf3+0x8>
    1bce:	ba 17       	cp	r27, r26
    1bd0:	62 07       	cpc	r22, r18
    1bd2:	73 07       	cpc	r23, r19
    1bd4:	84 07       	cpc	r24, r20
    1bd6:	95 07       	cpc	r25, r21
    1bd8:	18 f0       	brcs	.+6      	; 0x1be0 <__addsf3x+0x18>
    1bda:	71 f4       	brne	.+28     	; 0x1bf8 <__addsf3x+0x30>
    1bdc:	9e f5       	brtc	.+102    	; 0x1c44 <__addsf3x+0x7c>
    1bde:	67 c1       	rjmp	.+718    	; 0x1eae <__fp_zero>
    1be0:	0e f4       	brtc	.+2      	; 0x1be4 <__addsf3x+0x1c>
    1be2:	e0 95       	com	r30
    1be4:	0b 2e       	mov	r0, r27
    1be6:	ba 2f       	mov	r27, r26
    1be8:	a0 2d       	mov	r26, r0
    1bea:	0b 01       	movw	r0, r22
    1bec:	b9 01       	movw	r22, r18
    1bee:	90 01       	movw	r18, r0
    1bf0:	0c 01       	movw	r0, r24
    1bf2:	ca 01       	movw	r24, r20
    1bf4:	a0 01       	movw	r20, r0
    1bf6:	11 24       	eor	r1, r1
    1bf8:	ff 27       	eor	r31, r31
    1bfa:	59 1b       	sub	r21, r25
    1bfc:	99 f0       	breq	.+38     	; 0x1c24 <__addsf3x+0x5c>
    1bfe:	59 3f       	cpi	r21, 0xF9	; 249
    1c00:	50 f4       	brcc	.+20     	; 0x1c16 <__addsf3x+0x4e>
    1c02:	50 3e       	cpi	r21, 0xE0	; 224
    1c04:	68 f1       	brcs	.+90     	; 0x1c60 <__addsf3x+0x98>
    1c06:	1a 16       	cp	r1, r26
    1c08:	f0 40       	sbci	r31, 0x00	; 0
    1c0a:	a2 2f       	mov	r26, r18
    1c0c:	23 2f       	mov	r18, r19
    1c0e:	34 2f       	mov	r19, r20
    1c10:	44 27       	eor	r20, r20
    1c12:	58 5f       	subi	r21, 0xF8	; 248
    1c14:	f3 cf       	rjmp	.-26     	; 0x1bfc <__addsf3x+0x34>
    1c16:	46 95       	lsr	r20
    1c18:	37 95       	ror	r19
    1c1a:	27 95       	ror	r18
    1c1c:	a7 95       	ror	r26
    1c1e:	f0 40       	sbci	r31, 0x00	; 0
    1c20:	53 95       	inc	r21
    1c22:	c9 f7       	brne	.-14     	; 0x1c16 <__addsf3x+0x4e>
    1c24:	7e f4       	brtc	.+30     	; 0x1c44 <__addsf3x+0x7c>
    1c26:	1f 16       	cp	r1, r31
    1c28:	ba 0b       	sbc	r27, r26
    1c2a:	62 0b       	sbc	r22, r18
    1c2c:	73 0b       	sbc	r23, r19
    1c2e:	84 0b       	sbc	r24, r20
    1c30:	ba f0       	brmi	.+46     	; 0x1c60 <__addsf3x+0x98>
    1c32:	91 50       	subi	r25, 0x01	; 1
    1c34:	a1 f0       	breq	.+40     	; 0x1c5e <__addsf3x+0x96>
    1c36:	ff 0f       	add	r31, r31
    1c38:	bb 1f       	adc	r27, r27
    1c3a:	66 1f       	adc	r22, r22
    1c3c:	77 1f       	adc	r23, r23
    1c3e:	88 1f       	adc	r24, r24
    1c40:	c2 f7       	brpl	.-16     	; 0x1c32 <__addsf3x+0x6a>
    1c42:	0e c0       	rjmp	.+28     	; 0x1c60 <__addsf3x+0x98>
    1c44:	ba 0f       	add	r27, r26
    1c46:	62 1f       	adc	r22, r18
    1c48:	73 1f       	adc	r23, r19
    1c4a:	84 1f       	adc	r24, r20
    1c4c:	48 f4       	brcc	.+18     	; 0x1c60 <__addsf3x+0x98>
    1c4e:	87 95       	ror	r24
    1c50:	77 95       	ror	r23
    1c52:	67 95       	ror	r22
    1c54:	b7 95       	ror	r27
    1c56:	f7 95       	ror	r31
    1c58:	9e 3f       	cpi	r25, 0xFE	; 254
    1c5a:	08 f0       	brcs	.+2      	; 0x1c5e <__addsf3x+0x96>
    1c5c:	b3 cf       	rjmp	.-154    	; 0x1bc4 <__addsf3+0x1e>
    1c5e:	93 95       	inc	r25
    1c60:	88 0f       	add	r24, r24
    1c62:	08 f0       	brcs	.+2      	; 0x1c66 <__addsf3x+0x9e>
    1c64:	99 27       	eor	r25, r25
    1c66:	ee 0f       	add	r30, r30
    1c68:	97 95       	ror	r25
    1c6a:	87 95       	ror	r24
    1c6c:	08 95       	ret

00001c6e <__divsf3>:
    1c6e:	0c d0       	rcall	.+24     	; 0x1c88 <__divsf3x>
    1c70:	eb c0       	rjmp	.+470    	; 0x1e48 <__fp_round>
    1c72:	e3 d0       	rcall	.+454    	; 0x1e3a <__fp_pscB>
    1c74:	40 f0       	brcs	.+16     	; 0x1c86 <__divsf3+0x18>
    1c76:	da d0       	rcall	.+436    	; 0x1e2c <__fp_pscA>
    1c78:	30 f0       	brcs	.+12     	; 0x1c86 <__divsf3+0x18>
    1c7a:	21 f4       	brne	.+8      	; 0x1c84 <__divsf3+0x16>
    1c7c:	5f 3f       	cpi	r21, 0xFF	; 255
    1c7e:	19 f0       	breq	.+6      	; 0x1c86 <__divsf3+0x18>
    1c80:	cc c0       	rjmp	.+408    	; 0x1e1a <__fp_inf>
    1c82:	51 11       	cpse	r21, r1
    1c84:	15 c1       	rjmp	.+554    	; 0x1eb0 <__fp_szero>
    1c86:	cf c0       	rjmp	.+414    	; 0x1e26 <__fp_nan>

00001c88 <__divsf3x>:
    1c88:	f0 d0       	rcall	.+480    	; 0x1e6a <__fp_split3>
    1c8a:	98 f3       	brcs	.-26     	; 0x1c72 <__divsf3+0x4>

00001c8c <__divsf3_pse>:
    1c8c:	99 23       	and	r25, r25
    1c8e:	c9 f3       	breq	.-14     	; 0x1c82 <__divsf3+0x14>
    1c90:	55 23       	and	r21, r21
    1c92:	b1 f3       	breq	.-20     	; 0x1c80 <__divsf3+0x12>
    1c94:	95 1b       	sub	r25, r21
    1c96:	55 0b       	sbc	r21, r21
    1c98:	bb 27       	eor	r27, r27
    1c9a:	aa 27       	eor	r26, r26
    1c9c:	62 17       	cp	r22, r18
    1c9e:	73 07       	cpc	r23, r19
    1ca0:	84 07       	cpc	r24, r20
    1ca2:	38 f0       	brcs	.+14     	; 0x1cb2 <__divsf3_pse+0x26>
    1ca4:	9f 5f       	subi	r25, 0xFF	; 255
    1ca6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ca8:	22 0f       	add	r18, r18
    1caa:	33 1f       	adc	r19, r19
    1cac:	44 1f       	adc	r20, r20
    1cae:	aa 1f       	adc	r26, r26
    1cb0:	a9 f3       	breq	.-22     	; 0x1c9c <__divsf3_pse+0x10>
    1cb2:	33 d0       	rcall	.+102    	; 0x1d1a <__divsf3_pse+0x8e>
    1cb4:	0e 2e       	mov	r0, r30
    1cb6:	3a f0       	brmi	.+14     	; 0x1cc6 <__divsf3_pse+0x3a>
    1cb8:	e0 e8       	ldi	r30, 0x80	; 128
    1cba:	30 d0       	rcall	.+96     	; 0x1d1c <__divsf3_pse+0x90>
    1cbc:	91 50       	subi	r25, 0x01	; 1
    1cbe:	50 40       	sbci	r21, 0x00	; 0
    1cc0:	e6 95       	lsr	r30
    1cc2:	00 1c       	adc	r0, r0
    1cc4:	ca f7       	brpl	.-14     	; 0x1cb8 <__divsf3_pse+0x2c>
    1cc6:	29 d0       	rcall	.+82     	; 0x1d1a <__divsf3_pse+0x8e>
    1cc8:	fe 2f       	mov	r31, r30
    1cca:	27 d0       	rcall	.+78     	; 0x1d1a <__divsf3_pse+0x8e>
    1ccc:	66 0f       	add	r22, r22
    1cce:	77 1f       	adc	r23, r23
    1cd0:	88 1f       	adc	r24, r24
    1cd2:	bb 1f       	adc	r27, r27
    1cd4:	26 17       	cp	r18, r22
    1cd6:	37 07       	cpc	r19, r23
    1cd8:	48 07       	cpc	r20, r24
    1cda:	ab 07       	cpc	r26, r27
    1cdc:	b0 e8       	ldi	r27, 0x80	; 128
    1cde:	09 f0       	breq	.+2      	; 0x1ce2 <__divsf3_pse+0x56>
    1ce0:	bb 0b       	sbc	r27, r27
    1ce2:	80 2d       	mov	r24, r0
    1ce4:	bf 01       	movw	r22, r30
    1ce6:	ff 27       	eor	r31, r31
    1ce8:	93 58       	subi	r25, 0x83	; 131
    1cea:	5f 4f       	sbci	r21, 0xFF	; 255
    1cec:	2a f0       	brmi	.+10     	; 0x1cf8 <__divsf3_pse+0x6c>
    1cee:	9e 3f       	cpi	r25, 0xFE	; 254
    1cf0:	51 05       	cpc	r21, r1
    1cf2:	68 f0       	brcs	.+26     	; 0x1d0e <__divsf3_pse+0x82>
    1cf4:	92 c0       	rjmp	.+292    	; 0x1e1a <__fp_inf>
    1cf6:	dc c0       	rjmp	.+440    	; 0x1eb0 <__fp_szero>
    1cf8:	5f 3f       	cpi	r21, 0xFF	; 255
    1cfa:	ec f3       	brlt	.-6      	; 0x1cf6 <__divsf3_pse+0x6a>
    1cfc:	98 3e       	cpi	r25, 0xE8	; 232
    1cfe:	dc f3       	brlt	.-10     	; 0x1cf6 <__divsf3_pse+0x6a>
    1d00:	86 95       	lsr	r24
    1d02:	77 95       	ror	r23
    1d04:	67 95       	ror	r22
    1d06:	b7 95       	ror	r27
    1d08:	f7 95       	ror	r31
    1d0a:	9f 5f       	subi	r25, 0xFF	; 255
    1d0c:	c9 f7       	brne	.-14     	; 0x1d00 <__divsf3_pse+0x74>
    1d0e:	88 0f       	add	r24, r24
    1d10:	91 1d       	adc	r25, r1
    1d12:	96 95       	lsr	r25
    1d14:	87 95       	ror	r24
    1d16:	97 f9       	bld	r25, 7
    1d18:	08 95       	ret
    1d1a:	e1 e0       	ldi	r30, 0x01	; 1
    1d1c:	66 0f       	add	r22, r22
    1d1e:	77 1f       	adc	r23, r23
    1d20:	88 1f       	adc	r24, r24
    1d22:	bb 1f       	adc	r27, r27
    1d24:	62 17       	cp	r22, r18
    1d26:	73 07       	cpc	r23, r19
    1d28:	84 07       	cpc	r24, r20
    1d2a:	ba 07       	cpc	r27, r26
    1d2c:	20 f0       	brcs	.+8      	; 0x1d36 <__divsf3_pse+0xaa>
    1d2e:	62 1b       	sub	r22, r18
    1d30:	73 0b       	sbc	r23, r19
    1d32:	84 0b       	sbc	r24, r20
    1d34:	ba 0b       	sbc	r27, r26
    1d36:	ee 1f       	adc	r30, r30
    1d38:	88 f7       	brcc	.-30     	; 0x1d1c <__divsf3_pse+0x90>
    1d3a:	e0 95       	com	r30
    1d3c:	08 95       	ret

00001d3e <__fixsfsi>:
    1d3e:	04 d0       	rcall	.+8      	; 0x1d48 <__fixunssfsi>
    1d40:	68 94       	set
    1d42:	b1 11       	cpse	r27, r1
    1d44:	b5 c0       	rjmp	.+362    	; 0x1eb0 <__fp_szero>
    1d46:	08 95       	ret

00001d48 <__fixunssfsi>:
    1d48:	98 d0       	rcall	.+304    	; 0x1e7a <__fp_splitA>
    1d4a:	88 f0       	brcs	.+34     	; 0x1d6e <__fixunssfsi+0x26>
    1d4c:	9f 57       	subi	r25, 0x7F	; 127
    1d4e:	90 f0       	brcs	.+36     	; 0x1d74 <__fixunssfsi+0x2c>
    1d50:	b9 2f       	mov	r27, r25
    1d52:	99 27       	eor	r25, r25
    1d54:	b7 51       	subi	r27, 0x17	; 23
    1d56:	a0 f0       	brcs	.+40     	; 0x1d80 <__fixunssfsi+0x38>
    1d58:	d1 f0       	breq	.+52     	; 0x1d8e <__fixunssfsi+0x46>
    1d5a:	66 0f       	add	r22, r22
    1d5c:	77 1f       	adc	r23, r23
    1d5e:	88 1f       	adc	r24, r24
    1d60:	99 1f       	adc	r25, r25
    1d62:	1a f0       	brmi	.+6      	; 0x1d6a <__fixunssfsi+0x22>
    1d64:	ba 95       	dec	r27
    1d66:	c9 f7       	brne	.-14     	; 0x1d5a <__fixunssfsi+0x12>
    1d68:	12 c0       	rjmp	.+36     	; 0x1d8e <__fixunssfsi+0x46>
    1d6a:	b1 30       	cpi	r27, 0x01	; 1
    1d6c:	81 f0       	breq	.+32     	; 0x1d8e <__fixunssfsi+0x46>
    1d6e:	9f d0       	rcall	.+318    	; 0x1eae <__fp_zero>
    1d70:	b1 e0       	ldi	r27, 0x01	; 1
    1d72:	08 95       	ret
    1d74:	9c c0       	rjmp	.+312    	; 0x1eae <__fp_zero>
    1d76:	67 2f       	mov	r22, r23
    1d78:	78 2f       	mov	r23, r24
    1d7a:	88 27       	eor	r24, r24
    1d7c:	b8 5f       	subi	r27, 0xF8	; 248
    1d7e:	39 f0       	breq	.+14     	; 0x1d8e <__fixunssfsi+0x46>
    1d80:	b9 3f       	cpi	r27, 0xF9	; 249
    1d82:	cc f3       	brlt	.-14     	; 0x1d76 <__fixunssfsi+0x2e>
    1d84:	86 95       	lsr	r24
    1d86:	77 95       	ror	r23
    1d88:	67 95       	ror	r22
    1d8a:	b3 95       	inc	r27
    1d8c:	d9 f7       	brne	.-10     	; 0x1d84 <__fixunssfsi+0x3c>
    1d8e:	3e f4       	brtc	.+14     	; 0x1d9e <__fixunssfsi+0x56>
    1d90:	90 95       	com	r25
    1d92:	80 95       	com	r24
    1d94:	70 95       	com	r23
    1d96:	61 95       	neg	r22
    1d98:	7f 4f       	sbci	r23, 0xFF	; 255
    1d9a:	8f 4f       	sbci	r24, 0xFF	; 255
    1d9c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d9e:	08 95       	ret

00001da0 <__floatunsisf>:
    1da0:	e8 94       	clt
    1da2:	09 c0       	rjmp	.+18     	; 0x1db6 <__floatsisf+0x12>

00001da4 <__floatsisf>:
    1da4:	97 fb       	bst	r25, 7
    1da6:	3e f4       	brtc	.+14     	; 0x1db6 <__floatsisf+0x12>
    1da8:	90 95       	com	r25
    1daa:	80 95       	com	r24
    1dac:	70 95       	com	r23
    1dae:	61 95       	neg	r22
    1db0:	7f 4f       	sbci	r23, 0xFF	; 255
    1db2:	8f 4f       	sbci	r24, 0xFF	; 255
    1db4:	9f 4f       	sbci	r25, 0xFF	; 255
    1db6:	99 23       	and	r25, r25
    1db8:	a9 f0       	breq	.+42     	; 0x1de4 <__floatsisf+0x40>
    1dba:	f9 2f       	mov	r31, r25
    1dbc:	96 e9       	ldi	r25, 0x96	; 150
    1dbe:	bb 27       	eor	r27, r27
    1dc0:	93 95       	inc	r25
    1dc2:	f6 95       	lsr	r31
    1dc4:	87 95       	ror	r24
    1dc6:	77 95       	ror	r23
    1dc8:	67 95       	ror	r22
    1dca:	b7 95       	ror	r27
    1dcc:	f1 11       	cpse	r31, r1
    1dce:	f8 cf       	rjmp	.-16     	; 0x1dc0 <__floatsisf+0x1c>
    1dd0:	fa f4       	brpl	.+62     	; 0x1e10 <__floatsisf+0x6c>
    1dd2:	bb 0f       	add	r27, r27
    1dd4:	11 f4       	brne	.+4      	; 0x1dda <__floatsisf+0x36>
    1dd6:	60 ff       	sbrs	r22, 0
    1dd8:	1b c0       	rjmp	.+54     	; 0x1e10 <__floatsisf+0x6c>
    1dda:	6f 5f       	subi	r22, 0xFF	; 255
    1ddc:	7f 4f       	sbci	r23, 0xFF	; 255
    1dde:	8f 4f       	sbci	r24, 0xFF	; 255
    1de0:	9f 4f       	sbci	r25, 0xFF	; 255
    1de2:	16 c0       	rjmp	.+44     	; 0x1e10 <__floatsisf+0x6c>
    1de4:	88 23       	and	r24, r24
    1de6:	11 f0       	breq	.+4      	; 0x1dec <__floatsisf+0x48>
    1de8:	96 e9       	ldi	r25, 0x96	; 150
    1dea:	11 c0       	rjmp	.+34     	; 0x1e0e <__floatsisf+0x6a>
    1dec:	77 23       	and	r23, r23
    1dee:	21 f0       	breq	.+8      	; 0x1df8 <__floatsisf+0x54>
    1df0:	9e e8       	ldi	r25, 0x8E	; 142
    1df2:	87 2f       	mov	r24, r23
    1df4:	76 2f       	mov	r23, r22
    1df6:	05 c0       	rjmp	.+10     	; 0x1e02 <__floatsisf+0x5e>
    1df8:	66 23       	and	r22, r22
    1dfa:	71 f0       	breq	.+28     	; 0x1e18 <__floatsisf+0x74>
    1dfc:	96 e8       	ldi	r25, 0x86	; 134
    1dfe:	86 2f       	mov	r24, r22
    1e00:	70 e0       	ldi	r23, 0x00	; 0
    1e02:	60 e0       	ldi	r22, 0x00	; 0
    1e04:	2a f0       	brmi	.+10     	; 0x1e10 <__floatsisf+0x6c>
    1e06:	9a 95       	dec	r25
    1e08:	66 0f       	add	r22, r22
    1e0a:	77 1f       	adc	r23, r23
    1e0c:	88 1f       	adc	r24, r24
    1e0e:	da f7       	brpl	.-10     	; 0x1e06 <__floatsisf+0x62>
    1e10:	88 0f       	add	r24, r24
    1e12:	96 95       	lsr	r25
    1e14:	87 95       	ror	r24
    1e16:	97 f9       	bld	r25, 7
    1e18:	08 95       	ret

00001e1a <__fp_inf>:
    1e1a:	97 f9       	bld	r25, 7
    1e1c:	9f 67       	ori	r25, 0x7F	; 127
    1e1e:	80 e8       	ldi	r24, 0x80	; 128
    1e20:	70 e0       	ldi	r23, 0x00	; 0
    1e22:	60 e0       	ldi	r22, 0x00	; 0
    1e24:	08 95       	ret

00001e26 <__fp_nan>:
    1e26:	9f ef       	ldi	r25, 0xFF	; 255
    1e28:	80 ec       	ldi	r24, 0xC0	; 192
    1e2a:	08 95       	ret

00001e2c <__fp_pscA>:
    1e2c:	00 24       	eor	r0, r0
    1e2e:	0a 94       	dec	r0
    1e30:	16 16       	cp	r1, r22
    1e32:	17 06       	cpc	r1, r23
    1e34:	18 06       	cpc	r1, r24
    1e36:	09 06       	cpc	r0, r25
    1e38:	08 95       	ret

00001e3a <__fp_pscB>:
    1e3a:	00 24       	eor	r0, r0
    1e3c:	0a 94       	dec	r0
    1e3e:	12 16       	cp	r1, r18
    1e40:	13 06       	cpc	r1, r19
    1e42:	14 06       	cpc	r1, r20
    1e44:	05 06       	cpc	r0, r21
    1e46:	08 95       	ret

00001e48 <__fp_round>:
    1e48:	09 2e       	mov	r0, r25
    1e4a:	03 94       	inc	r0
    1e4c:	00 0c       	add	r0, r0
    1e4e:	11 f4       	brne	.+4      	; 0x1e54 <__fp_round+0xc>
    1e50:	88 23       	and	r24, r24
    1e52:	52 f0       	brmi	.+20     	; 0x1e68 <__fp_round+0x20>
    1e54:	bb 0f       	add	r27, r27
    1e56:	40 f4       	brcc	.+16     	; 0x1e68 <__fp_round+0x20>
    1e58:	bf 2b       	or	r27, r31
    1e5a:	11 f4       	brne	.+4      	; 0x1e60 <__fp_round+0x18>
    1e5c:	60 ff       	sbrs	r22, 0
    1e5e:	04 c0       	rjmp	.+8      	; 0x1e68 <__fp_round+0x20>
    1e60:	6f 5f       	subi	r22, 0xFF	; 255
    1e62:	7f 4f       	sbci	r23, 0xFF	; 255
    1e64:	8f 4f       	sbci	r24, 0xFF	; 255
    1e66:	9f 4f       	sbci	r25, 0xFF	; 255
    1e68:	08 95       	ret

00001e6a <__fp_split3>:
    1e6a:	57 fd       	sbrc	r21, 7
    1e6c:	90 58       	subi	r25, 0x80	; 128
    1e6e:	44 0f       	add	r20, r20
    1e70:	55 1f       	adc	r21, r21
    1e72:	59 f0       	breq	.+22     	; 0x1e8a <__fp_splitA+0x10>
    1e74:	5f 3f       	cpi	r21, 0xFF	; 255
    1e76:	71 f0       	breq	.+28     	; 0x1e94 <__fp_splitA+0x1a>
    1e78:	47 95       	ror	r20

00001e7a <__fp_splitA>:
    1e7a:	88 0f       	add	r24, r24
    1e7c:	97 fb       	bst	r25, 7
    1e7e:	99 1f       	adc	r25, r25
    1e80:	61 f0       	breq	.+24     	; 0x1e9a <__fp_splitA+0x20>
    1e82:	9f 3f       	cpi	r25, 0xFF	; 255
    1e84:	79 f0       	breq	.+30     	; 0x1ea4 <__fp_splitA+0x2a>
    1e86:	87 95       	ror	r24
    1e88:	08 95       	ret
    1e8a:	12 16       	cp	r1, r18
    1e8c:	13 06       	cpc	r1, r19
    1e8e:	14 06       	cpc	r1, r20
    1e90:	55 1f       	adc	r21, r21
    1e92:	f2 cf       	rjmp	.-28     	; 0x1e78 <__fp_split3+0xe>
    1e94:	46 95       	lsr	r20
    1e96:	f1 df       	rcall	.-30     	; 0x1e7a <__fp_splitA>
    1e98:	08 c0       	rjmp	.+16     	; 0x1eaa <__fp_splitA+0x30>
    1e9a:	16 16       	cp	r1, r22
    1e9c:	17 06       	cpc	r1, r23
    1e9e:	18 06       	cpc	r1, r24
    1ea0:	99 1f       	adc	r25, r25
    1ea2:	f1 cf       	rjmp	.-30     	; 0x1e86 <__fp_splitA+0xc>
    1ea4:	86 95       	lsr	r24
    1ea6:	71 05       	cpc	r23, r1
    1ea8:	61 05       	cpc	r22, r1
    1eaa:	08 94       	sec
    1eac:	08 95       	ret

00001eae <__fp_zero>:
    1eae:	e8 94       	clt

00001eb0 <__fp_szero>:
    1eb0:	bb 27       	eor	r27, r27
    1eb2:	66 27       	eor	r22, r22
    1eb4:	77 27       	eor	r23, r23
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	97 f9       	bld	r25, 7
    1eba:	08 95       	ret

00001ebc <__mulsf3>:
    1ebc:	0b d0       	rcall	.+22     	; 0x1ed4 <__mulsf3x>
    1ebe:	c4 cf       	rjmp	.-120    	; 0x1e48 <__fp_round>
    1ec0:	b5 df       	rcall	.-150    	; 0x1e2c <__fp_pscA>
    1ec2:	28 f0       	brcs	.+10     	; 0x1ece <__mulsf3+0x12>
    1ec4:	ba df       	rcall	.-140    	; 0x1e3a <__fp_pscB>
    1ec6:	18 f0       	brcs	.+6      	; 0x1ece <__mulsf3+0x12>
    1ec8:	95 23       	and	r25, r21
    1eca:	09 f0       	breq	.+2      	; 0x1ece <__mulsf3+0x12>
    1ecc:	a6 cf       	rjmp	.-180    	; 0x1e1a <__fp_inf>
    1ece:	ab cf       	rjmp	.-170    	; 0x1e26 <__fp_nan>
    1ed0:	11 24       	eor	r1, r1
    1ed2:	ee cf       	rjmp	.-36     	; 0x1eb0 <__fp_szero>

00001ed4 <__mulsf3x>:
    1ed4:	ca df       	rcall	.-108    	; 0x1e6a <__fp_split3>
    1ed6:	a0 f3       	brcs	.-24     	; 0x1ec0 <__mulsf3+0x4>

00001ed8 <__mulsf3_pse>:
    1ed8:	95 9f       	mul	r25, r21
    1eda:	d1 f3       	breq	.-12     	; 0x1ed0 <__mulsf3+0x14>
    1edc:	95 0f       	add	r25, r21
    1ede:	50 e0       	ldi	r21, 0x00	; 0
    1ee0:	55 1f       	adc	r21, r21
    1ee2:	62 9f       	mul	r22, r18
    1ee4:	f0 01       	movw	r30, r0
    1ee6:	72 9f       	mul	r23, r18
    1ee8:	bb 27       	eor	r27, r27
    1eea:	f0 0d       	add	r31, r0
    1eec:	b1 1d       	adc	r27, r1
    1eee:	63 9f       	mul	r22, r19
    1ef0:	aa 27       	eor	r26, r26
    1ef2:	f0 0d       	add	r31, r0
    1ef4:	b1 1d       	adc	r27, r1
    1ef6:	aa 1f       	adc	r26, r26
    1ef8:	64 9f       	mul	r22, r20
    1efa:	66 27       	eor	r22, r22
    1efc:	b0 0d       	add	r27, r0
    1efe:	a1 1d       	adc	r26, r1
    1f00:	66 1f       	adc	r22, r22
    1f02:	82 9f       	mul	r24, r18
    1f04:	22 27       	eor	r18, r18
    1f06:	b0 0d       	add	r27, r0
    1f08:	a1 1d       	adc	r26, r1
    1f0a:	62 1f       	adc	r22, r18
    1f0c:	73 9f       	mul	r23, r19
    1f0e:	b0 0d       	add	r27, r0
    1f10:	a1 1d       	adc	r26, r1
    1f12:	62 1f       	adc	r22, r18
    1f14:	83 9f       	mul	r24, r19
    1f16:	a0 0d       	add	r26, r0
    1f18:	61 1d       	adc	r22, r1
    1f1a:	22 1f       	adc	r18, r18
    1f1c:	74 9f       	mul	r23, r20
    1f1e:	33 27       	eor	r19, r19
    1f20:	a0 0d       	add	r26, r0
    1f22:	61 1d       	adc	r22, r1
    1f24:	23 1f       	adc	r18, r19
    1f26:	84 9f       	mul	r24, r20
    1f28:	60 0d       	add	r22, r0
    1f2a:	21 1d       	adc	r18, r1
    1f2c:	82 2f       	mov	r24, r18
    1f2e:	76 2f       	mov	r23, r22
    1f30:	6a 2f       	mov	r22, r26
    1f32:	11 24       	eor	r1, r1
    1f34:	9f 57       	subi	r25, 0x7F	; 127
    1f36:	50 40       	sbci	r21, 0x00	; 0
    1f38:	8a f0       	brmi	.+34     	; 0x1f5c <__mulsf3_pse+0x84>
    1f3a:	e1 f0       	breq	.+56     	; 0x1f74 <__mulsf3_pse+0x9c>
    1f3c:	88 23       	and	r24, r24
    1f3e:	4a f0       	brmi	.+18     	; 0x1f52 <__mulsf3_pse+0x7a>
    1f40:	ee 0f       	add	r30, r30
    1f42:	ff 1f       	adc	r31, r31
    1f44:	bb 1f       	adc	r27, r27
    1f46:	66 1f       	adc	r22, r22
    1f48:	77 1f       	adc	r23, r23
    1f4a:	88 1f       	adc	r24, r24
    1f4c:	91 50       	subi	r25, 0x01	; 1
    1f4e:	50 40       	sbci	r21, 0x00	; 0
    1f50:	a9 f7       	brne	.-22     	; 0x1f3c <__mulsf3_pse+0x64>
    1f52:	9e 3f       	cpi	r25, 0xFE	; 254
    1f54:	51 05       	cpc	r21, r1
    1f56:	70 f0       	brcs	.+28     	; 0x1f74 <__mulsf3_pse+0x9c>
    1f58:	60 cf       	rjmp	.-320    	; 0x1e1a <__fp_inf>
    1f5a:	aa cf       	rjmp	.-172    	; 0x1eb0 <__fp_szero>
    1f5c:	5f 3f       	cpi	r21, 0xFF	; 255
    1f5e:	ec f3       	brlt	.-6      	; 0x1f5a <__mulsf3_pse+0x82>
    1f60:	98 3e       	cpi	r25, 0xE8	; 232
    1f62:	dc f3       	brlt	.-10     	; 0x1f5a <__mulsf3_pse+0x82>
    1f64:	86 95       	lsr	r24
    1f66:	77 95       	ror	r23
    1f68:	67 95       	ror	r22
    1f6a:	b7 95       	ror	r27
    1f6c:	f7 95       	ror	r31
    1f6e:	e7 95       	ror	r30
    1f70:	9f 5f       	subi	r25, 0xFF	; 255
    1f72:	c1 f7       	brne	.-16     	; 0x1f64 <__mulsf3_pse+0x8c>
    1f74:	fe 2b       	or	r31, r30
    1f76:	88 0f       	add	r24, r24
    1f78:	91 1d       	adc	r25, r1
    1f7a:	96 95       	lsr	r25
    1f7c:	87 95       	ror	r24
    1f7e:	97 f9       	bld	r25, 7
    1f80:	08 95       	ret

00001f82 <__eerd_byte_m328p>:
    1f82:	f9 99       	sbic	0x1f, 1	; 31
    1f84:	fe cf       	rjmp	.-4      	; 0x1f82 <__eerd_byte_m328p>
    1f86:	92 bd       	out	0x22, r25	; 34
    1f88:	81 bd       	out	0x21, r24	; 33
    1f8a:	f8 9a       	sbi	0x1f, 0	; 31
    1f8c:	99 27       	eor	r25, r25
    1f8e:	80 b5       	in	r24, 0x20	; 32
    1f90:	08 95       	ret

00001f92 <__eewr_byte_m328p>:
    1f92:	26 2f       	mov	r18, r22

00001f94 <__eewr_r18_m328p>:
    1f94:	f9 99       	sbic	0x1f, 1	; 31
    1f96:	fe cf       	rjmp	.-4      	; 0x1f94 <__eewr_r18_m328p>
    1f98:	1f ba       	out	0x1f, r1	; 31
    1f9a:	92 bd       	out	0x22, r25	; 34
    1f9c:	81 bd       	out	0x21, r24	; 33
    1f9e:	20 bd       	out	0x20, r18	; 32
    1fa0:	0f b6       	in	r0, 0x3f	; 63
    1fa2:	f8 94       	cli
    1fa4:	fa 9a       	sbi	0x1f, 2	; 31
    1fa6:	f9 9a       	sbi	0x1f, 1	; 31
    1fa8:	0f be       	out	0x3f, r0	; 63
    1faa:	01 96       	adiw	r24, 0x01	; 1
    1fac:	08 95       	ret

00001fae <_exit>:
    1fae:	f8 94       	cli

00001fb0 <__stop_program>:
    1fb0:	ff cf       	rjmp	.-2      	; 0x1fb0 <__stop_program>
