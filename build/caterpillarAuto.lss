
build/caterpillarAuto.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
       8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
       c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      18:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__vector_6>
      1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      2c:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <__vector_11>
      30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      38:	0c 94 3a 0c 	jmp	0x1874	; 0x1874 <__vector_14>
      3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      5c:	0c 94 10 0a 	jmp	0x1420	; 0x1420 <__vector_23>
      60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <wdt_init>:

#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
      74:	14 be       	out	0x34, r1	; 52
    MCUSR = 0;
    wdt_disable();
      76:	88 e1       	ldi	r24, 0x18	; 24
      78:	0f b6       	in	r0, 0x3f	; 63
      7a:	f8 94       	cli
      7c:	80 93 60 00 	sts	0x0060, r24
      80:	10 92 60 00 	sts	0x0060, r1
      84:	0f be       	out	0x3f, r0	; 63

00000086 <__do_copy_data>:
      86:	12 e0       	ldi	r17, 0x02	; 2
      88:	a0 e0       	ldi	r26, 0x00	; 0
      8a:	b1 e0       	ldi	r27, 0x01	; 1
      8c:	e4 e4       	ldi	r30, 0x44	; 68
      8e:	f3 e3       	ldi	r31, 0x33	; 51
      90:	02 c0       	rjmp	.+4      	; 0x96 <.do_copy_data_start>

00000092 <.do_copy_data_loop>:
      92:	05 90       	lpm	r0, Z+
      94:	0d 92       	st	X+, r0

00000096 <.do_copy_data_start>:
      96:	ac 32       	cpi	r26, 0x2C	; 44
      98:	b1 07       	cpc	r27, r17
      9a:	d9 f7       	brne	.-10     	; 0x92 <.do_copy_data_loop>

0000009c <__do_clear_bss>:
      9c:	12 e0       	ldi	r17, 0x02	; 2
      9e:	ac e2       	ldi	r26, 0x2C	; 44
      a0:	b2 e0       	ldi	r27, 0x02	; 2
      a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
      a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
      a6:	a8 3c       	cpi	r26, 0xC8	; 200
      a8:	b1 07       	cpc	r27, r17
      aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
      ac:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
      b0:	0c 94 a0 19 	jmp	0x3340	; 0x3340 <_exit>

000000b4 <__bad_interrupt>:
      b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <check_own_gradient>:
}

void check_own_gradient() {
	// If no neighbors detected within TIME_LAST_GRADIENT seconds
	// then sleep waiting for be activated.
    if ( (kilo_uid != SEED_ID) && (kilo_ticks > (last_found_minor + TIME_LAST_GRADIENT)) && (own_gradient < GRADIENT_MAX))
      b8:	80 91 c3 02 	lds	r24, 0x02C3
      bc:	90 91 c4 02 	lds	r25, 0x02C4
      c0:	89 2b       	or	r24, r25
      c2:	51 f1       	breq	.+84     	; 0x118 <check_own_gradient+0x60>
      c4:	20 91 8d 02 	lds	r18, 0x028D
      c8:	30 91 8e 02 	lds	r19, 0x028E
      cc:	40 91 8f 02 	lds	r20, 0x028F
      d0:	50 91 90 02 	lds	r21, 0x0290
      d4:	80 91 66 02 	lds	r24, 0x0266
      d8:	90 91 67 02 	lds	r25, 0x0267
      dc:	a0 91 68 02 	lds	r26, 0x0268
      e0:	b0 91 69 02 	lds	r27, 0x0269
      e4:	80 56       	subi	r24, 0x60	; 96
      e6:	9f 4f       	sbci	r25, 0xFF	; 255
      e8:	af 4f       	sbci	r26, 0xFF	; 255
      ea:	bf 4f       	sbci	r27, 0xFF	; 255
      ec:	82 17       	cp	r24, r18
      ee:	93 07       	cpc	r25, r19
      f0:	a4 07       	cpc	r26, r20
      f2:	b5 07       	cpc	r27, r21
      f4:	88 f4       	brcc	.+34     	; 0x118 <check_own_gradient+0x60>
      f6:	80 91 10 01 	lds	r24, 0x0110
      fa:	90 91 11 01 	lds	r25, 0x0111
      fe:	8f 3f       	cpi	r24, 0xFF	; 255
     100:	91 05       	cpc	r25, r1
     102:	54 f4       	brge	.+20     	; 0x118 <check_own_gradient+0x60>
    {
        own_gradient = GRADIENT_MAX;
     104:	8f ef       	ldi	r24, 0xFF	; 255
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	90 93 11 01 	sts	0x0111, r25
     10c:	80 93 10 01 	sts	0x0110, r24
		formed_state = FORMED_NO;
     110:	10 92 49 02 	sts	0x0249, r1
     114:	10 92 48 02 	sts	0x0248, r1
     118:	08 95       	ret

0000011a <main>:



int main()
{
    kilo_init();
     11a:	0e 94 b2 0c 	call	0x1964	; 0x1964 <kilo_init>
    kilo_message_rx = message_rx;
     11e:	84 ea       	ldi	r24, 0xA4	; 164
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	90 93 1b 01 	sts	0x011B, r25
     126:	80 93 1a 01 	sts	0x011A, r24
    kilo_message_tx = message_tx;
     12a:	83 e0       	ldi	r24, 0x03	; 3
     12c:	92 e0       	ldi	r25, 0x02	; 2
     12e:	90 93 1d 01 	sts	0x011D, r25
     132:	80 93 1c 01 	sts	0x011C, r24
    kilo_start(setup, loop);
     136:	82 e2       	ldi	r24, 0x22	; 34
     138:	92 e0       	ldi	r25, 0x02	; 2
     13a:	6e e7       	ldi	r22, 0x7E	; 126
     13c:	74 e0       	ldi	r23, 0x04	; 4
     13e:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <kilo_start>

    return 0;
}
     142:	80 e0       	ldi	r24, 0x00	; 0
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	08 95       	ret

00000148 <message_rx>:
	message.crc = message_crc(&message);
    return &message;
}

void message_rx(message_t *m, distance_measurement_t *d)
{
     148:	cf 93       	push	r28
     14a:	df 93       	push	r29
     14c:	ec 01       	movw	r28, r24
     14e:	cb 01       	movw	r24, r22
	//set_color(RGB(0, 0, 0));
	//set_color(RGB(1, 0, 0));
    received_gradient = m->data[0];
     150:	28 81       	ld	r18, Y
     152:	20 93 3c 02 	sts	0x023C, r18
     156:	10 92 3d 02 	sts	0x023D, r1
    distance = estimate_distance(d);
     15a:	0e 94 f2 06 	call	0xde4	; 0xde4 <estimate_distance>
     15e:	e8 2f       	mov	r30, r24
     160:	f0 e0       	ldi	r31, 0x00	; 0
     162:	f0 93 01 01 	sts	0x0101, r31
     166:	e0 93 00 01 	sts	0x0100, r30
	// In the valid distance.
	if (distance <= DISTANCE_GRADIENT)
     16a:	e5 36       	cpi	r30, 0x65	; 101
     16c:	f1 05       	cpc	r31, r1
     16e:	0c f0       	brlt	.+2      	; 0x172 <message_rx+0x2a>
     170:	6f c0       	rjmp	.+222    	; 0x250 <message_rx+0x108>
	{
		last_gradient_anchored = kilo_ticks;
     172:	80 91 8d 02 	lds	r24, 0x028D
     176:	90 91 8e 02 	lds	r25, 0x028E
     17a:	a0 91 8f 02 	lds	r26, 0x028F
     17e:	b0 91 90 02 	lds	r27, 0x0290
     182:	80 93 5e 02 	sts	0x025E, r24
     186:	90 93 5f 02 	sts	0x025F, r25
     18a:	a0 93 60 02 	sts	0x0260, r26
     18e:	b0 93 61 02 	sts	0x0261, r27
		// The message was sent by my motivated.
		// I found someone's gradient maxer than mine in the world.
		// My formed state is determined by my maxer.
		if (received_gradient > own_gradient)
     192:	60 91 3c 02 	lds	r22, 0x023C
     196:	70 91 3d 02 	lds	r23, 0x023D
     19a:	20 91 10 01 	lds	r18, 0x0110
     19e:	30 91 11 01 	lds	r19, 0x0111
     1a2:	26 17       	cp	r18, r22
     1a4:	37 07       	cpc	r19, r23
     1a6:	0c f0       	brlt	.+2      	; 0x1aa <message_rx+0x62>
     1a8:	56 c0       	rjmp	.+172    	; 0x256 <message_rx+0x10e>
		{
			last_found_maxer = kilo_ticks;
     1aa:	80 91 8d 02 	lds	r24, 0x028D
     1ae:	90 91 8e 02 	lds	r25, 0x028E
     1b2:	a0 91 8f 02 	lds	r26, 0x028F
     1b6:	b0 91 90 02 	lds	r27, 0x0290
     1ba:	80 93 62 02 	sts	0x0262, r24
     1be:	90 93 63 02 	sts	0x0263, r25
     1c2:	a0 93 64 02 	sts	0x0264, r26
     1c6:	b0 93 65 02 	sts	0x0265, r27
			flag_maxest = NO;
     1ca:	10 92 31 02 	sts	0x0231, r1
     1ce:	10 92 30 02 	sts	0x0230, r1
			if (received_gradient == (own_gradient + 1))
     1d2:	2f 5f       	subi	r18, 0xFF	; 255
     1d4:	3f 4f       	sbci	r19, 0xFF	; 255
     1d6:	62 17       	cp	r22, r18
     1d8:	73 07       	cpc	r23, r19
     1da:	09 f4       	brne	.+2      	; 0x1de <message_rx+0x96>
     1dc:	78 c0       	rjmp	.+240    	; 0x2ce <message_rx+0x186>
		//flag_maxest = NO;

		// I have neighbours whose gradient is minor than mine.
		// Meanwhile long time no find gradient maxer than mine.
		// I am the maxest one in my local world.
		if((kilo_uid != SEED_ID) && (kilo_ticks > (last_found_maxer + TIME_CHECK_MAXER)))
     1de:	80 91 c3 02 	lds	r24, 0x02C3
     1e2:	90 91 c4 02 	lds	r25, 0x02C4
     1e6:	89 2b       	or	r24, r25
     1e8:	99 f1       	breq	.+102    	; 0x250 <message_rx+0x108>
     1ea:	20 91 8d 02 	lds	r18, 0x028D
     1ee:	30 91 8e 02 	lds	r19, 0x028E
     1f2:	40 91 8f 02 	lds	r20, 0x028F
     1f6:	50 91 90 02 	lds	r21, 0x0290
     1fa:	80 91 62 02 	lds	r24, 0x0262
     1fe:	90 91 63 02 	lds	r25, 0x0263
     202:	a0 91 64 02 	lds	r26, 0x0264
     206:	b0 91 65 02 	lds	r27, 0x0265
     20a:	80 56       	subi	r24, 0x60	; 96
     20c:	9f 4f       	sbci	r25, 0xFF	; 255
     20e:	af 4f       	sbci	r26, 0xFF	; 255
     210:	bf 4f       	sbci	r27, 0xFF	; 255
     212:	82 17       	cp	r24, r18
     214:	93 07       	cpc	r25, r19
     216:	a4 07       	cpc	r26, r20
     218:	b5 07       	cpc	r27, r21
     21a:	d0 f4       	brcc	.+52     	; 0x250 <message_rx+0x108>
		{
			formed_state = FORMED_OK;
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	90 93 49 02 	sts	0x0249, r25
     224:	80 93 48 02 	sts	0x0248, r24
			state_motivated = COMPLETED;
     228:	25 e0       	ldi	r18, 0x05	; 5
     22a:	30 e0       	ldi	r19, 0x00	; 0
     22c:	30 93 3f 02 	sts	0x023F, r19
     230:	20 93 3e 02 	sts	0x023E, r18
			flag_maxest = YES;
     234:	90 93 31 02 	sts	0x0231, r25
     238:	80 93 30 02 	sts	0x0230, r24
			distance_to_motivated = DISTANCE_MAX;
     23c:	24 e6       	ldi	r18, 0x64	; 100
     23e:	30 e0       	ldi	r19, 0x00	; 0
     240:	30 93 09 01 	sts	0x0109, r19
     244:	20 93 08 01 	sts	0x0108, r18
			update_distance_to_motivated = UPDATE;
     248:	90 93 35 02 	sts	0x0235, r25
     24c:	80 93 34 02 	sts	0x0234, r24
			update_state_motivator = UPDATE;
			set_color(RGB(1, 0, 1));
		}
		*/
	}
}
     250:	df 91       	pop	r29
     252:	cf 91       	pop	r28
     254:	08 95       	ret
				update_distance_to_motivated = UPDATE;
			}
		}
		// That guy has the same gradient with mine.
		// There needs a comparison between us.
		else if ((received_gradient == own_gradient) && (received_gradient != GRADIENT_MAX))
     256:	62 17       	cp	r22, r18
     258:	73 07       	cpc	r23, r19
     25a:	09 f4       	brne	.+2      	; 0x25e <message_rx+0x116>
     25c:	64 c0       	rjmp	.+200    	; 0x326 <message_rx+0x1de>
				update_distance_to_motivator = UPDATE;
			}
		}
		// received_gradient < own_gradient
		// The message was sent by my motivator.
		else if (kilo_uid != SEED_ID)
     25e:	80 91 c3 02 	lds	r24, 0x02C3
     262:	90 91 c4 02 	lds	r25, 0x02C4
     266:	89 2b       	or	r24, r25
     268:	99 f3       	breq	.-26     	; 0x250 <message_rx+0x108>
		{
			if (((own_gradient - received_gradient) == 2) || ((own_gradient - received_gradient) == 3))
     26a:	26 1b       	sub	r18, r22
     26c:	37 0b       	sbc	r19, r23
     26e:	22 50       	subi	r18, 0x02	; 2
     270:	30 40       	sbci	r19, 0x00	; 0
     272:	22 30       	cpi	r18, 0x02	; 2
     274:	31 05       	cpc	r19, r1
     276:	08 f4       	brcc	.+2      	; 0x27a <message_rx+0x132>
     278:	97 c0       	rjmp	.+302    	; 0x3a8 <message_rx+0x260>
					update_distance_to_motivator = UPDATE;
				}
			}
			else
			{
				last_found_minor = kilo_ticks;
     27a:	80 91 8d 02 	lds	r24, 0x028D
     27e:	90 91 8e 02 	lds	r25, 0x028E
     282:	a0 91 8f 02 	lds	r26, 0x028F
     286:	b0 91 90 02 	lds	r27, 0x0290
     28a:	80 93 66 02 	sts	0x0266, r24
     28e:	90 93 67 02 	sts	0x0267, r25
     292:	a0 93 68 02 	sts	0x0268, r26
     296:	b0 93 69 02 	sts	0x0269, r27
				own_gradient = received_gradient + 1;
     29a:	6f 5f       	subi	r22, 0xFF	; 255
     29c:	7f 4f       	sbci	r23, 0xFF	; 255
     29e:	70 93 11 01 	sts	0x0111, r23
     2a2:	60 93 10 01 	sts	0x0110, r22
				state_motivator =  m->data[2];
     2a6:	8a 81       	ldd	r24, Y+2	; 0x02
     2a8:	80 93 40 02 	sts	0x0240, r24
     2ac:	10 92 41 02 	sts	0x0241, r1
				update_state_motivator = UPDATE;
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	90 93 3b 02 	sts	0x023B, r25
     2b8:	80 93 3a 02 	sts	0x023A, r24
				distance_to_motivator = distance;
     2bc:	f0 93 03 01 	sts	0x0103, r31
     2c0:	e0 93 02 01 	sts	0x0102, r30
				update_distance_to_motivator = UPDATE;
     2c4:	90 93 37 02 	sts	0x0237, r25
     2c8:	80 93 36 02 	sts	0x0236, r24
     2cc:	8e cf       	rjmp	.-228    	; 0x1ea <message_rx+0xa2>
		{
			last_found_maxer = kilo_ticks;
			flag_maxest = NO;
			if (received_gradient == (own_gradient + 1))
			{
				formed_state = m->data[1];
     2ce:	89 81       	ldd	r24, Y+1	; 0x01
     2d0:	80 93 48 02 	sts	0x0248, r24
     2d4:	10 92 49 02 	sts	0x0249, r1
				state_motivated =  m->data[2];
     2d8:	8a 81       	ldd	r24, Y+2	; 0x02
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	90 93 3f 02 	sts	0x023F, r25
     2e0:	80 93 3e 02 	sts	0x023E, r24
				update_state_motivated = UPDATE;
     2e4:	21 e0       	ldi	r18, 0x01	; 1
     2e6:	30 e0       	ldi	r19, 0x00	; 0
     2e8:	30 93 39 02 	sts	0x0239, r19
     2ec:	20 93 38 02 	sts	0x0238, r18
				if (state_motivated != MOVE)
     2f0:	04 97       	sbiw	r24, 0x04	; 4
     2f2:	09 f4       	brne	.+2      	; 0x2f6 <message_rx+0x1ae>
     2f4:	83 c0       	rjmp	.+262    	; 0x3fc <message_rx+0x2b4>
				{
					if ((num_stop ++) == 1)
     2f6:	80 91 44 02 	lds	r24, 0x0244
     2fa:	90 91 45 02 	lds	r25, 0x0245
     2fe:	01 96       	adiw	r24, 0x01	; 1
     300:	90 93 45 02 	sts	0x0245, r25
     304:	80 93 44 02 	sts	0x0244, r24
     308:	01 97       	sbiw	r24, 0x01	; 1
     30a:	01 97       	sbiw	r24, 0x01	; 1
     30c:	09 f4       	brne	.+2      	; 0x310 <message_rx+0x1c8>
     30e:	47 c0       	rjmp	.+142    	; 0x39e <message_rx+0x256>
				}
				else
				{
					num_stop = 0;
				}
				distance_to_motivated = distance;
     310:	f0 93 09 01 	sts	0x0109, r31
     314:	e0 93 08 01 	sts	0x0108, r30
				update_distance_to_motivated = UPDATE;
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	90 93 35 02 	sts	0x0235, r25
     320:	80 93 34 02 	sts	0x0234, r24
     324:	5c cf       	rjmp	.-328    	; 0x1de <message_rx+0x96>
			}
		}
		// That guy has the same gradient with mine.
		// There needs a comparison between us.
		else if ((received_gradient == own_gradient) && (received_gradient != GRADIENT_MAX))
     326:	6f 3f       	cpi	r22, 0xFF	; 255
     328:	71 05       	cpc	r23, r1
     32a:	09 f4       	brne	.+2      	; 0x32e <message_rx+0x1e6>
     32c:	98 cf       	rjmp	.-208    	; 0x25e <message_rx+0x116>
		{
			distance_to_motivator_pair = m->data[3];
     32e:	8b 81       	ldd	r24, Y+3	; 0x03
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	90 93 05 01 	sts	0x0105, r25
     336:	80 93 04 01 	sts	0x0104, r24
			if (distance_to_motivator_pair < distance_to_motivator)
     33a:	20 91 02 01 	lds	r18, 0x0102
     33e:	30 91 03 01 	lds	r19, 0x0103
     342:	82 17       	cp	r24, r18
     344:	93 07       	cpc	r25, r19
     346:	0c f0       	brlt	.+2      	; 0x34a <message_rx+0x202>
     348:	4a cf       	rjmp	.-364    	; 0x1de <message_rx+0x96>
			{
				last_found_minor = kilo_ticks;
     34a:	80 91 8d 02 	lds	r24, 0x028D
     34e:	90 91 8e 02 	lds	r25, 0x028E
     352:	a0 91 8f 02 	lds	r26, 0x028F
     356:	b0 91 90 02 	lds	r27, 0x0290
     35a:	80 93 66 02 	sts	0x0266, r24
     35e:	90 93 67 02 	sts	0x0267, r25
     362:	a0 93 68 02 	sts	0x0268, r26
     366:	b0 93 69 02 	sts	0x0269, r27
				own_gradient = received_gradient + 1;
     36a:	6f 5f       	subi	r22, 0xFF	; 255
     36c:	7f 4f       	sbci	r23, 0xFF	; 255
     36e:	70 93 11 01 	sts	0x0111, r23
     372:	60 93 10 01 	sts	0x0110, r22
				state_motivator =  m->data[2];
     376:	8a 81       	ldd	r24, Y+2	; 0x02
     378:	80 93 40 02 	sts	0x0240, r24
     37c:	10 92 41 02 	sts	0x0241, r1
				update_state_motivator = UPDATE;
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	90 93 3b 02 	sts	0x023B, r25
     388:	80 93 3a 02 	sts	0x023A, r24
				distance_to_motivator = distance;
     38c:	f0 93 03 01 	sts	0x0103, r31
     390:	e0 93 02 01 	sts	0x0102, r30
				update_distance_to_motivator = UPDATE;
     394:	90 93 37 02 	sts	0x0237, r25
     398:	80 93 36 02 	sts	0x0236, r24
     39c:	20 cf       	rjmp	.-448    	; 0x1de <message_rx+0x96>
				update_state_motivated = UPDATE;
				if (state_motivated != MOVE)
				{
					if ((num_stop ++) == 1)
					{
						my_fault = NO;
     39e:	10 92 17 01 	sts	0x0117, r1
     3a2:	10 92 16 01 	sts	0x0116, r1
     3a6:	b4 cf       	rjmp	.-152    	; 0x310 <message_rx+0x1c8>
			if (((own_gradient - received_gradient) == 2) || ((own_gradient - received_gradient) == 3))
			{
				// The message sender is closer, and meanwhile the last
				// time I found a minor is too long ago (TIME_CHECK_MINOR).
				// Thus I need  to find a new motivator.
				if ((distance < distance_to_motivator) && (kilo_ticks > (last_found_minor + TIME_CHECK_MINOR)))
     3a8:	80 91 02 01 	lds	r24, 0x0102
     3ac:	90 91 03 01 	lds	r25, 0x0103
     3b0:	e8 17       	cp	r30, r24
     3b2:	f9 07       	cpc	r31, r25
     3b4:	d4 f4       	brge	.+52     	; 0x3ea <message_rx+0x2a2>
     3b6:	20 91 8d 02 	lds	r18, 0x028D
     3ba:	30 91 8e 02 	lds	r19, 0x028E
     3be:	40 91 8f 02 	lds	r20, 0x028F
     3c2:	50 91 90 02 	lds	r21, 0x0290
     3c6:	80 91 66 02 	lds	r24, 0x0266
     3ca:	90 91 67 02 	lds	r25, 0x0267
     3ce:	a0 91 68 02 	lds	r26, 0x0268
     3d2:	b0 91 69 02 	lds	r27, 0x0269
     3d6:	80 58       	subi	r24, 0x80	; 128
     3d8:	9f 4f       	sbci	r25, 0xFF	; 255
     3da:	af 4f       	sbci	r26, 0xFF	; 255
     3dc:	bf 4f       	sbci	r27, 0xFF	; 255
     3de:	82 17       	cp	r24, r18
     3e0:	93 07       	cpc	r25, r19
     3e2:	a4 07       	cpc	r26, r20
     3e4:	b5 07       	cpc	r27, r21
     3e6:	08 f4       	brcc	.+2      	; 0x3ea <message_rx+0x2a2>
     3e8:	48 cf       	rjmp	.-368    	; 0x27a <message_rx+0x132>
					state_motivator =  m->data[2];
					update_state_motivator = UPDATE;
					distance_to_motivator = distance;
					update_distance_to_motivator = UPDATE;
				}
				else if (distance < distance_to_motivator_pair)
     3ea:	80 91 04 01 	lds	r24, 0x0104
     3ee:	90 91 05 01 	lds	r25, 0x0105
     3f2:	e8 17       	cp	r30, r24
     3f4:	f9 07       	cpc	r31, r25
     3f6:	0c f0       	brlt	.+2      	; 0x3fa <message_rx+0x2b2>
     3f8:	f8 ce       	rjmp	.-528    	; 0x1ea <message_rx+0xa2>
     3fa:	3f cf       	rjmp	.-386    	; 0x27a <message_rx+0x132>
						my_fault = NO;
					}
				}
				else
				{
					num_stop = 0;
     3fc:	10 92 45 02 	sts	0x0245, r1
     400:	10 92 44 02 	sts	0x0244, r1
     404:	85 cf       	rjmp	.-246    	; 0x310 <message_rx+0x1c8>

00000406 <message_tx>:
	}
}


message_t *message_tx()
{
     406:	0f 93       	push	r16
     408:	1f 93       	push	r17
	message.data[0] = own_gradient;
     40a:	0e e4       	ldi	r16, 0x4E	; 78
     40c:	12 e0       	ldi	r17, 0x02	; 2
     40e:	80 91 10 01 	lds	r24, 0x0110
     412:	80 93 4e 02 	sts	0x024E, r24
	message.data[1] = formed_state;
     416:	80 91 48 02 	lds	r24, 0x0248
     41a:	80 93 4f 02 	sts	0x024F, r24
	message.data[2] = state_myself;
     41e:	80 91 42 02 	lds	r24, 0x0242
     422:	80 93 50 02 	sts	0x0250, r24
	message.data[3] = distance_to_motivator;
     426:	80 91 02 01 	lds	r24, 0x0102
     42a:	80 93 51 02 	sts	0x0251, r24
        default:
             set_color(RGB(0, 1, 1));
             break;
    }
*/
	message.crc = message_crc(&message);
     42e:	c8 01       	movw	r24, r16
     430:	0e 94 d5 10 	call	0x21aa	; 0x21aa <message_crc>
     434:	90 93 59 02 	sts	0x0259, r25
     438:	80 93 58 02 	sts	0x0258, r24
    return &message;
}
     43c:	c8 01       	movw	r24, r16
     43e:	1f 91       	pop	r17
     440:	0f 91       	pop	r16
     442:	08 95       	ret

00000444 <setup>:

void setup()
{
    //If the robot is the seed, its gradient should be 0: overwrite the
    // previously set value of GRADIENT_MAX.
    if (kilo_uid == SEED_ID)
     444:	80 91 c3 02 	lds	r24, 0x02C3
     448:	90 91 c4 02 	lds	r25, 0x02C4
     44c:	89 2b       	or	r24, r25
     44e:	f1 f4       	brne	.+60     	; 0x48c <setup+0x48>
    {
        own_gradient = 0;
     450:	10 92 11 01 	sts	0x0111, r1
     454:	10 92 10 01 	sts	0x0110, r1
		distance_to_motivator = DISTANCE_COLLIDE;
     458:	88 e2       	ldi	r24, 0x28	; 40
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	90 93 03 01 	sts	0x0103, r25
     460:	80 93 02 01 	sts	0x0102, r24
		update_distance_to_motivator = UPDATE;
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	90 93 37 02 	sts	0x0237, r25
     46c:	80 93 36 02 	sts	0x0236, r24
		update_state_motivator = UPDATE;
     470:	90 93 3b 02 	sts	0x023B, r25
     474:	80 93 3a 02 	sts	0x023A, r24
		flag_minor = YES;
     478:	90 93 33 02 	sts	0x0233, r25
     47c:	80 93 32 02 	sts	0x0232, r24
		state_motivator = COMPLETED;
     480:	85 e0       	ldi	r24, 0x05	; 5
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	90 93 41 02 	sts	0x0241, r25
     488:	80 93 40 02 	sts	0x0240, r24
    }

	last_logic_1 = EQUAL;
     48c:	10 92 2d 02 	sts	0x022D, r1
     490:	10 92 2c 02 	sts	0x022C, r1
     494:	20 91 08 01 	lds	r18, 0x0108
     498:	30 91 09 01 	lds	r19, 0x0109
     49c:	80 91 0a 01 	lds	r24, 0x010A
     4a0:	90 91 0b 01 	lds	r25, 0x010B
     4a4:	28 17       	cp	r18, r24
     4a6:	39 07       	cpc	r19, r25
     4a8:	81 f1       	breq	.+96     	; 0x50a <setup+0xc6>
	last_logic_2 = INLINE;
     4aa:	10 92 2f 02 	sts	0x022F, r1
     4ae:	10 92 2e 02 	sts	0x022E, r1
     4b2:	20 91 0c 01 	lds	r18, 0x010C
     4b6:	30 91 0d 01 	lds	r19, 0x010D
     4ba:	80 91 0e 01 	lds	r24, 0x010E
     4be:	90 91 0f 01 	lds	r25, 0x010F
     4c2:	82 17       	cp	r24, r18
     4c4:	93 07       	cpc	r25, r19
     4c6:	34 f0       	brlt	.+12     	; 0x4d4 <setup+0x90>
     4c8:	81 e0       	ldi	r24, 0x01	; 1
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	90 93 2f 02 	sts	0x022F, r25
     4d0:	80 93 2e 02 	sts	0x022E, r24

    // Set the transmission message.
    message.type = NORMAL;
     4d4:	10 92 57 02 	sts	0x0257, r1
    message.data[0] = own_gradient;
     4d8:	80 91 10 01 	lds	r24, 0x0110
     4dc:	80 93 4e 02 	sts	0x024E, r24
	// Sequence has not been formed completely.
	message.data[1] = formed_state;
     4e0:	80 91 48 02 	lds	r24, 0x0248
     4e4:	80 93 4f 02 	sts	0x024F, r24
	message.data[2] = state_motivator;
     4e8:	80 91 40 02 	lds	r24, 0x0240
     4ec:	80 93 50 02 	sts	0x0250, r24
	message.data[3] = distance_to_motivator;
     4f0:	80 91 02 01 	lds	r24, 0x0102
     4f4:	80 93 51 02 	sts	0x0251, r24
	message.crc = message_crc(&message);
     4f8:	8e e4       	ldi	r24, 0x4E	; 78
     4fa:	92 e0       	ldi	r25, 0x02	; 2
     4fc:	0e 94 d5 10 	call	0x21aa	; 0x21aa <message_crc>
     500:	90 93 59 02 	sts	0x0259, r25
     504:	80 93 58 02 	sts	0x0258, r24
}
     508:	08 95       	ret
		update_state_motivator = UPDATE;
		flag_minor = YES;
		state_motivator = COMPLETED;
    }

	last_logic_1 = EQUAL;
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	90 93 2d 02 	sts	0x022D, r25
     512:	80 93 2c 02 	sts	0x022C, r24
     516:	c9 cf       	rjmp	.-110    	; 0x4aa <setup+0x66>

00000518 <set_motion>:
    //  set_color(RGB(0, 1, 1));
}

// Function to handle motion.
void set_motion(int new_motion)
{
     518:	9c 01       	movw	r18, r24
    // Only take an an action if the motion is being changed.
    if (current_motion != new_motion)
     51a:	80 91 12 01 	lds	r24, 0x0112
     51e:	90 91 13 01 	lds	r25, 0x0113
     522:	82 17       	cp	r24, r18
     524:	93 07       	cpc	r25, r19
     526:	81 f0       	breq	.+32     	; 0x548 <set_motion+0x30>
    {
        current_motion = new_motion;
     528:	30 93 13 01 	sts	0x0113, r19
     52c:	20 93 12 01 	sts	0x0112, r18

        if (current_motion == STOP)
     530:	21 15       	cp	r18, r1
     532:	31 05       	cpc	r19, r1
     534:	51 f0       	breq	.+20     	; 0x54a <set_motion+0x32>
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
     536:	21 30       	cpi	r18, 0x01	; 1
     538:	31 05       	cpc	r19, r1
     53a:	61 f0       	breq	.+24     	; 0x554 <set_motion+0x3c>
        {
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
     53c:	22 30       	cpi	r18, 0x02	; 2
     53e:	31 05       	cpc	r19, r1
     540:	d1 f0       	breq	.+52     	; 0x576 <set_motion+0x5e>
        {
            spinup_motors();
            set_motors(kilo_turn_left, 0);
        }
        else if (current_motion == RIGHT)
     542:	23 30       	cpi	r18, 0x03	; 3
     544:	31 05       	cpc	r19, r1
     546:	79 f0       	breq	.+30     	; 0x566 <set_motion+0x4e>
     548:	08 95       	ret
    {
        current_motion = new_motion;

        if (current_motion == STOP)
        {
            set_motors(0, 0);
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	60 e0       	ldi	r22, 0x00	; 0
     54e:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <set_motors>
     552:	08 95       	ret
        }
        else if (current_motion == FORWARD)
        {
            spinup_motors();
     554:	0e 94 e6 05 	call	0xbcc	; 0xbcc <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     558:	80 91 c5 02 	lds	r24, 0x02C5
     55c:	60 91 c6 02 	lds	r22, 0x02C6
     560:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <set_motors>
     564:	08 95       	ret
            spinup_motors();
            set_motors(kilo_turn_left, 0);
        }
        else if (current_motion == RIGHT)
        {
            spinup_motors();
     566:	0e 94 e6 05 	call	0xbcc	; 0xbcc <spinup_motors>
            set_motors(0, kilo_turn_right);
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	60 91 b3 02 	lds	r22, 0x02B3
     570:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <set_motors>
     574:	08 95       	ret
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
        {
            spinup_motors();
     576:	0e 94 e6 05 	call	0xbcc	; 0xbcc <spinup_motors>
            set_motors(kilo_turn_left, 0);
     57a:	80 91 c7 02 	lds	r24, 0x02C7
     57e:	60 e0       	ldi	r22, 0x00	; 0
     580:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <set_motors>
     584:	08 95       	ret

00000586 <set_led>:

// Function to set led states
void set_led()
{
    // Set the LED color based on the gradient.
    switch (own_gradient) {
     586:	80 91 10 01 	lds	r24, 0x0110
     58a:	90 91 11 01 	lds	r25, 0x0111
     58e:	82 30       	cpi	r24, 0x02	; 2
     590:	91 05       	cpc	r25, r1
     592:	e1 f0       	breq	.+56     	; 0x5cc <set_led+0x46>
     594:	83 30       	cpi	r24, 0x03	; 3
     596:	91 05       	cpc	r25, r1
     598:	4c f0       	brlt	.+18     	; 0x5ac <set_led+0x26>
     59a:	83 30       	cpi	r24, 0x03	; 3
     59c:	91 05       	cpc	r25, r1
     59e:	d1 f0       	breq	.+52     	; 0x5d4 <set_led+0x4e>
     5a0:	04 97       	sbiw	r24, 0x04	; 4
     5a2:	81 f0       	breq	.+32     	; 0x5c4 <set_led+0x3e>
            break;
        case 4:
            set_color(RGB(1, 1, 0)); // Yellow
            break;
        default:
            set_color(RGB(1, 0, 1)); // Magneta
     5a4:	81 e1       	ldi	r24, 0x11	; 17
     5a6:	0e 94 ca 09 	call	0x1394	; 0x1394 <set_color>
     5aa:	08 95       	ret

// Function to set led states
void set_led()
{
    // Set the LED color based on the gradient.
    switch (own_gradient) {
     5ac:	00 97       	sbiw	r24, 0x00	; 0
     5ae:	31 f0       	breq	.+12     	; 0x5bc <set_led+0x36>
     5b0:	01 97       	sbiw	r24, 0x01	; 1
     5b2:	c1 f7       	brne	.-16     	; 0x5a4 <set_led+0x1e>
        case 0:
            set_color(RGB(1, 1, 1)); // White
            break;
        case 1:
            set_color(RGB(1, 0, 0)); // Red
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	0e 94 ca 09 	call	0x1394	; 0x1394 <set_color>
     5ba:	08 95       	ret
void set_led()
{
    // Set the LED color based on the gradient.
    switch (own_gradient) {
        case 0:
            set_color(RGB(1, 1, 1)); // White
     5bc:	85 e1       	ldi	r24, 0x15	; 21
     5be:	0e 94 ca 09 	call	0x1394	; 0x1394 <set_color>
     5c2:	08 95       	ret
            break;
        case 3:
            set_color(RGB(0, 0, 1)); // Blue
            break;
        case 4:
            set_color(RGB(1, 1, 0)); // Yellow
     5c4:	85 e0       	ldi	r24, 0x05	; 5
     5c6:	0e 94 ca 09 	call	0x1394	; 0x1394 <set_color>
     5ca:	08 95       	ret
            break;
        case 1:
            set_color(RGB(1, 0, 0)); // Red
            break;
        case 2:
            set_color(RGB(0, 1, 0)); // Green
     5cc:	84 e0       	ldi	r24, 0x04	; 4
     5ce:	0e 94 ca 09 	call	0x1394	; 0x1394 <set_color>
     5d2:	08 95       	ret
            break;
        case 3:
            set_color(RGB(0, 0, 1)); // Blue
     5d4:	80 e1       	ldi	r24, 0x10	; 16
     5d6:	0e 94 ca 09 	call	0x1394	; 0x1394 <set_color>
     5da:	08 95       	ret

000005dc <rand>:
}

// Generate a random number in the closed interval (0, 1).
float rand(){
    // Generate an 8-bit random number (between 0 and 2^8 - 1 = 255).
    int random_number = rand_hard();
     5dc:	0e 94 68 06 	call	0xcd0	; 0xcd0 <rand_hard>
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	6f ef       	ldi	r22, 0xFF	; 255
     5e4:	70 e0       	ldi	r23, 0x00	; 0
     5e6:	0e 94 2c 19 	call	0x3258	; 0x3258 <__divmodhi4>
     5ea:	88 27       	eor	r24, r24
     5ec:	77 fd       	sbrc	r23, 7
     5ee:	80 95       	com	r24
     5f0:	98 2f       	mov	r25, r24
     5f2:	0e 94 ed 15 	call	0x2bda	; 0x2bda <__floatsisf>

    float result = random_number / 255;

    return result;
}
     5f6:	08 95       	ret

000005f8 <randBinary>:


// Generate 0 or 1 randomly
int randBinary(){
    // Generate an 8-bit random number (between 0 and 2^8 - 1 = 255).
    int random_number = rand_hard();
     5f8:	0e 94 68 06 	call	0xcd0	; 0xcd0 <rand_hard>
     5fc:	28 2f       	mov	r18, r24
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	21 70       	andi	r18, 0x01	; 1
     602:	30 70       	andi	r19, 0x00	; 0
    // Compute the remainder of random_number when divided by 2.
    // This gives a new random number in the set {0, 1}.
    int random_direction = (random_number % 2);

    return random_direction;
}
     604:	c9 01       	movw	r24, r18
     606:	08 95       	ret

00000608 <opposite_move>:
}

int opposite_move(int offspring)
{
	int next_motion = offspring;
	switch (offspring)
     608:	82 30       	cpi	r24, 0x02	; 2
     60a:	91 05       	cpc	r25, r1
     60c:	69 f0       	breq	.+26     	; 0x628 <opposite_move+0x20>
     60e:	83 30       	cpi	r24, 0x03	; 3
     610:	91 05       	cpc	r25, r1
     612:	71 f0       	breq	.+28     	; 0x630 <opposite_move+0x28>
     614:	81 30       	cpi	r24, 0x01	; 1
     616:	91 05       	cpc	r25, r1
     618:	19 f0       	breq	.+6      	; 0x620 <opposite_move+0x18>
     61a:	9c 01       	movw	r18, r24
			break;
		default:
			break;
	}
	return next_motion;
}
     61c:	c9 01       	movw	r24, r18
     61e:	08 95       	ret


// Generate 0 or 1 randomly
int randBinary(){
    // Generate an 8-bit random number (between 0 and 2^8 - 1 = 255).
    int random_number = rand_hard();
     620:	0e 94 68 06 	call	0xcd0	; 0xcd0 <rand_hard>
			break;
		case RIGHT:
			next_motion = LEFT;
			break;
		case FORWARD:
			if (randBinary() == 1)
     624:	80 fd       	sbrc	r24, 0
     626:	04 c0       	rjmp	.+8      	; 0x630 <opposite_move+0x28>
     628:	23 e0       	ldi	r18, 0x03	; 3
     62a:	30 e0       	ldi	r19, 0x00	; 0
			break;
		default:
			break;
	}
	return next_motion;
}
     62c:	c9 01       	movw	r24, r18
     62e:	08 95       	ret
			break;
		case RIGHT:
			next_motion = LEFT;
			break;
		case FORWARD:
			if (randBinary() == 1)
     630:	22 e0       	ldi	r18, 0x02	; 2
     632:	30 e0       	ldi	r19, 0x00	; 0
			break;
		default:
			break;
	}
	return next_motion;
}
     634:	c9 01       	movw	r24, r18
     636:	08 95       	ret

00000638 <move>:

void move() {
	int next_motion = offspring;
     638:	20 91 18 01 	lds	r18, 0x0118
     63c:	30 91 19 01 	lds	r19, 0x0119

	// Decision making: 6 * 6 matrix.
	if (NEARER_INLINE)
     640:	60 91 08 01 	lds	r22, 0x0108
     644:	70 91 09 01 	lds	r23, 0x0109
     648:	40 91 0a 01 	lds	r20, 0x010A
     64c:	50 91 0b 01 	lds	r21, 0x010B
     650:	64 17       	cp	r22, r20
     652:	75 07       	cpc	r23, r21
     654:	4c f5       	brge	.+82     	; 0x6a8 <move+0x70>
     656:	a0 91 0c 01 	lds	r26, 0x010C
     65a:	b0 91 0d 01 	lds	r27, 0x010D
     65e:	e0 91 0e 01 	lds	r30, 0x010E
     662:	f0 91 0f 01 	lds	r31, 0x010F
     666:	ea 17       	cp	r30, r26
     668:	fb 07       	cpc	r31, r27
     66a:	0c f0       	brlt	.+2      	; 0x66e <move+0x36>
     66c:	5a c0       	rjmp	.+180    	; 0x722 <move+0xea>
		last_logic_1 = NEARER;
		last_logic_2 = INLINE;
	}
	else if (NEARER_OUTLINE)
	{
		if (last_logic_2 == OUTLINE)
     66e:	80 91 2e 02 	lds	r24, 0x022E
     672:	90 91 2f 02 	lds	r25, 0x022F
     676:	01 97       	sbiw	r24, 0x01	; 1
     678:	09 f0       	breq	.+2      	; 0x67c <move+0x44>
     67a:	ab c0       	rjmp	.+342    	; 0x7d2 <move+0x19a>
		}
		else
		{
			next_motion = opposite_move(offspring);
		}
		last_logic_1 = NEARER;
     67c:	10 92 2d 02 	sts	0x022D, r1
     680:	10 92 2c 02 	sts	0x022C, r1
     684:	64 17       	cp	r22, r20
     686:	75 07       	cpc	r23, r21
     688:	34 f4       	brge	.+12     	; 0x696 <move+0x5e>
		}
		else
		{
			next_motion = opposite_move(offspring);
		}
		last_logic_1 = FARER;
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	90 93 2d 02 	sts	0x022D, r25
     692:	80 93 2c 02 	sts	0x022C, r24
		last_logic_2 = OUTLINE;
     696:	10 92 2f 02 	sts	0x022F, r1
     69a:	10 92 2e 02 	sts	0x022E, r1
     69e:	ea 17       	cp	r30, r26
     6a0:	fb 07       	cpc	r31, r27
     6a2:	0c f0       	brlt	.+2      	; 0x6a6 <move+0x6e>
     6a4:	48 c0       	rjmp	.+144    	; 0x736 <move+0xfe>
     6a6:	8e c0       	rjmp	.+284    	; 0x7c4 <move+0x18c>
			next_motion = opposite_move(offspring);
		}
		last_logic_1 = NEARER;
		last_logic_2 = OUTLINE;
	}
	else if (EQUAL_INLINE)
     6a8:	64 17       	cp	r22, r20
     6aa:	75 07       	cpc	r23, r21
     6ac:	09 f4       	brne	.+2      	; 0x6b0 <move+0x78>
     6ae:	67 c0       	rjmp	.+206    	; 0x77e <move+0x146>
			next_motion = opposite_move(offspring);
		}
		last_logic_1 = EQUAL;
		last_logic_2 = OUTLINE;
	}
	else if (FARER_INLINE)
     6b0:	46 17       	cp	r20, r22
     6b2:	57 07       	cpc	r21, r23
     6b4:	0c f0       	brlt	.+2      	; 0x6b8 <move+0x80>
     6b6:	3f c0       	rjmp	.+126    	; 0x736 <move+0xfe>
     6b8:	a0 91 0c 01 	lds	r26, 0x010C
     6bc:	b0 91 0d 01 	lds	r27, 0x010D
     6c0:	e0 91 0e 01 	lds	r30, 0x010E
     6c4:	f0 91 0f 01 	lds	r31, 0x010F
     6c8:	ea 17       	cp	r30, r26
     6ca:	fb 07       	cpc	r31, r27
     6cc:	0c f4       	brge	.+2      	; 0x6d0 <move+0x98>
     6ce:	96 c0       	rjmp	.+300    	; 0x7fc <move+0x1c4>
	{
		if (last_logic_1 == FARER)
     6d0:	80 91 2c 02 	lds	r24, 0x022C
     6d4:	90 91 2d 02 	lds	r25, 0x022D
     6d8:	01 97       	sbiw	r24, 0x01	; 1
     6da:	a1 f0       	breq	.+40     	; 0x704 <move+0xcc>
		{
			next_motion = offspring;
		}
		else
		{
			next_motion = opposite_move(offspring);
     6dc:	c9 01       	movw	r24, r18
     6de:	0e 94 04 03 	call	0x608	; 0x608 <opposite_move>
     6e2:	9c 01       	movw	r18, r24
     6e4:	60 91 08 01 	lds	r22, 0x0108
     6e8:	70 91 09 01 	lds	r23, 0x0109
     6ec:	40 91 0a 01 	lds	r20, 0x010A
     6f0:	50 91 0b 01 	lds	r21, 0x010B
     6f4:	a0 91 0c 01 	lds	r26, 0x010C
     6f8:	b0 91 0d 01 	lds	r27, 0x010D
     6fc:	e0 91 0e 01 	lds	r30, 0x010E
     700:	f0 91 0f 01 	lds	r31, 0x010F
		}
		last_logic_1 = FARER;
     704:	10 92 2d 02 	sts	0x022D, r1
     708:	10 92 2c 02 	sts	0x022C, r1
     70c:	46 17       	cp	r20, r22
     70e:	57 07       	cpc	r21, r23
     710:	0c f0       	brlt	.+2      	; 0x714 <move+0xdc>
     712:	50 c0       	rjmp	.+160    	; 0x7b4 <move+0x17c>
     714:	81 e0       	ldi	r24, 0x01	; 1
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	90 93 2d 02 	sts	0x022D, r25
     71c:	80 93 2c 02 	sts	0x022C, r24
     720:	49 c0       	rjmp	.+146    	; 0x7b4 <move+0x17c>

	// Decision making: 6 * 6 matrix.
	if (NEARER_INLINE)
	{
		next_motion = offspring;
		last_logic_1 = NEARER;
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	90 93 2d 02 	sts	0x022D, r25
     72a:	80 93 2c 02 	sts	0x022C, r24
		last_logic_2 = INLINE;
     72e:	90 93 2f 02 	sts	0x022F, r25
     732:	80 93 2e 02 	sts	0x022E, r24
		last_logic_1 = FARER;
		last_logic_2 = OUTLINE;
	}

	// Update and carry out the decision making above.
	offspring = next_motion;
     736:	30 93 19 01 	sts	0x0119, r19
     73a:	20 93 18 01 	sts	0x0118, r18

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an an action if the motion is being changed.
    if (current_motion != new_motion)
     73e:	80 91 12 01 	lds	r24, 0x0112
     742:	90 91 13 01 	lds	r25, 0x0113
     746:	28 17       	cp	r18, r24
     748:	39 07       	cpc	r19, r25
     74a:	99 f0       	breq	.+38     	; 0x772 <move+0x13a>
    {
        current_motion = new_motion;
     74c:	30 93 13 01 	sts	0x0113, r19
     750:	20 93 12 01 	sts	0x0112, r18

        if (current_motion == STOP)
     754:	21 15       	cp	r18, r1
     756:	31 05       	cpc	r19, r1
     758:	69 f0       	breq	.+26     	; 0x774 <move+0x13c>
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
     75a:	21 30       	cpi	r18, 0x01	; 1
     75c:	31 05       	cpc	r19, r1
     75e:	09 f4       	brne	.+2      	; 0x762 <move+0x12a>
     760:	a7 c0       	rjmp	.+334    	; 0x8b0 <move+0x278>
        {
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
     762:	22 30       	cpi	r18, 0x02	; 2
     764:	31 05       	cpc	r19, r1
     766:	09 f4       	brne	.+2      	; 0x76a <move+0x132>
     768:	ac c0       	rjmp	.+344    	; 0x8c2 <move+0x28a>
        {
            spinup_motors();
            set_motors(kilo_turn_left, 0);
        }
        else if (current_motion == RIGHT)
     76a:	23 30       	cpi	r18, 0x03	; 3
     76c:	31 05       	cpc	r19, r1
     76e:	09 f4       	brne	.+2      	; 0x772 <move+0x13a>
     770:	6e c0       	rjmp	.+220    	; 0x84e <move+0x216>
     772:	08 95       	ret
    {
        current_motion = new_motion;

        if (current_motion == STOP)
        {
            set_motors(0, 0);
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	60 e0       	ldi	r22, 0x00	; 0
     778:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <set_motors>
     77c:	08 95       	ret
			next_motion = opposite_move(offspring);
		}
		last_logic_1 = NEARER;
		last_logic_2 = OUTLINE;
	}
	else if (EQUAL_INLINE)
     77e:	a0 91 0c 01 	lds	r26, 0x010C
     782:	b0 91 0d 01 	lds	r27, 0x010D
     786:	e0 91 0e 01 	lds	r30, 0x010E
     78a:	f0 91 0f 01 	lds	r31, 0x010F
     78e:	ea 17       	cp	r30, r26
     790:	fb 07       	cpc	r31, r27
     792:	0c f4       	brge	.+2      	; 0x796 <move+0x15e>
     794:	64 c0       	rjmp	.+200    	; 0x85e <move+0x226>
	{
		if (last_logic_1 == NEARER)
     796:	80 91 2c 02 	lds	r24, 0x022C
     79a:	90 91 2d 02 	lds	r25, 0x022D
     79e:	89 2b       	or	r24, r25
     7a0:	09 f4       	brne	.+2      	; 0x7a4 <move+0x16c>
     7a2:	97 c0       	rjmp	.+302    	; 0x8d2 <move+0x29a>
		}
		else
		{
			next_motion = offspring;
		}
		last_logic_1 = EQUAL;
     7a4:	10 92 2d 02 	sts	0x022D, r1
     7a8:	10 92 2c 02 	sts	0x022C, r1
     7ac:	64 17       	cp	r22, r20
     7ae:	75 07       	cpc	r23, r21
     7b0:	09 f4       	brne	.+2      	; 0x7b4 <move+0x17c>
     7b2:	b0 cf       	rjmp	.-160    	; 0x714 <move+0xdc>
		else
		{
			next_motion = opposite_move(offspring);
		}
		last_logic_1 = FARER;
		last_logic_2 = INLINE;
     7b4:	10 92 2f 02 	sts	0x022F, r1
     7b8:	10 92 2e 02 	sts	0x022E, r1
     7bc:	ea 17       	cp	r30, r26
     7be:	fb 07       	cpc	r31, r27
     7c0:	0c f4       	brge	.+2      	; 0x7c4 <move+0x18c>
     7c2:	b9 cf       	rjmp	.-142    	; 0x736 <move+0xfe>
		else
		{
			next_motion = opposite_move(offspring);
		}
		last_logic_1 = FARER;
		last_logic_2 = OUTLINE;
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	90 93 2f 02 	sts	0x022F, r25
     7cc:	80 93 2e 02 	sts	0x022E, r24
     7d0:	b2 cf       	rjmp	.-156    	; 0x736 <move+0xfe>
		{
			next_motion = offspring;
		}
		else
		{
			next_motion = opposite_move(offspring);
     7d2:	c9 01       	movw	r24, r18
     7d4:	0e 94 04 03 	call	0x608	; 0x608 <opposite_move>
     7d8:	9c 01       	movw	r18, r24
     7da:	60 91 08 01 	lds	r22, 0x0108
     7de:	70 91 09 01 	lds	r23, 0x0109
     7e2:	40 91 0a 01 	lds	r20, 0x010A
     7e6:	50 91 0b 01 	lds	r21, 0x010B
     7ea:	a0 91 0c 01 	lds	r26, 0x010C
     7ee:	b0 91 0d 01 	lds	r27, 0x010D
     7f2:	e0 91 0e 01 	lds	r30, 0x010E
     7f6:	f0 91 0f 01 	lds	r31, 0x010F
     7fa:	40 cf       	rjmp	.-384    	; 0x67c <move+0x44>
		last_logic_1 = FARER;
		last_logic_2 = INLINE;
	}
	else if (FARER_OUTLINE)
	{
		if ((last_logic_1 && last_logic_2) == FARER_OUTLINE)
     7fc:	80 91 2c 02 	lds	r24, 0x022C
     800:	90 91 2d 02 	lds	r25, 0x022D
     804:	89 2b       	or	r24, r25
     806:	31 f0       	breq	.+12     	; 0x814 <move+0x1dc>
     808:	80 91 2e 02 	lds	r24, 0x022E
     80c:	90 91 2f 02 	lds	r25, 0x022F
     810:	89 2b       	or	r24, r25
     812:	a1 f4       	brne	.+40     	; 0x83c <move+0x204>
		{
			next_motion = offspring;
		}
		else
		{
			next_motion = opposite_move(offspring);
     814:	c9 01       	movw	r24, r18
     816:	0e 94 04 03 	call	0x608	; 0x608 <opposite_move>
     81a:	9c 01       	movw	r18, r24
     81c:	60 91 08 01 	lds	r22, 0x0108
     820:	70 91 09 01 	lds	r23, 0x0109
     824:	40 91 0a 01 	lds	r20, 0x010A
     828:	50 91 0b 01 	lds	r21, 0x010B
     82c:	a0 91 0c 01 	lds	r26, 0x010C
     830:	b0 91 0d 01 	lds	r27, 0x010D
     834:	e0 91 0e 01 	lds	r30, 0x010E
     838:	f0 91 0f 01 	lds	r31, 0x010F
		}
		last_logic_1 = FARER;
     83c:	10 92 2d 02 	sts	0x022D, r1
     840:	10 92 2c 02 	sts	0x022C, r1
     844:	46 17       	cp	r20, r22
     846:	57 07       	cpc	r21, r23
     848:	0c f0       	brlt	.+2      	; 0x84c <move+0x214>
     84a:	25 cf       	rjmp	.-438    	; 0x696 <move+0x5e>
     84c:	1e cf       	rjmp	.-452    	; 0x68a <move+0x52>
            spinup_motors();
            set_motors(kilo_turn_left, 0);
        }
        else if (current_motion == RIGHT)
        {
            spinup_motors();
     84e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <spinup_motors>
            set_motors(0, kilo_turn_right);
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	60 91 b3 02 	lds	r22, 0x02B3
     858:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <set_motors>
     85c:	08 95       	ret
		last_logic_1 = EQUAL;
		last_logic_2 = INLINE;
	}
	else if (EQUAL_OUTLINE)
	{
		if ((last_logic_1 != NEARER) && (last_logic_2 == OUTLINE))
     85e:	80 91 2c 02 	lds	r24, 0x022C
     862:	90 91 2d 02 	lds	r25, 0x022D
     866:	89 2b       	or	r24, r25
     868:	31 f0       	breq	.+12     	; 0x876 <move+0x23e>
     86a:	80 91 2e 02 	lds	r24, 0x022E
     86e:	90 91 2f 02 	lds	r25, 0x022F
     872:	01 97       	sbiw	r24, 0x01	; 1
     874:	a1 f0       	breq	.+40     	; 0x89e <move+0x266>
		{
			next_motion = offspring;
		}
		else
		{
			next_motion = opposite_move(offspring);
     876:	c9 01       	movw	r24, r18
     878:	0e 94 04 03 	call	0x608	; 0x608 <opposite_move>
     87c:	9c 01       	movw	r18, r24
     87e:	60 91 08 01 	lds	r22, 0x0108
     882:	70 91 09 01 	lds	r23, 0x0109
     886:	40 91 0a 01 	lds	r20, 0x010A
     88a:	50 91 0b 01 	lds	r21, 0x010B
     88e:	a0 91 0c 01 	lds	r26, 0x010C
     892:	b0 91 0d 01 	lds	r27, 0x010D
     896:	e0 91 0e 01 	lds	r30, 0x010E
     89a:	f0 91 0f 01 	lds	r31, 0x010F
		}
		last_logic_1 = EQUAL;
     89e:	10 92 2d 02 	sts	0x022D, r1
     8a2:	10 92 2c 02 	sts	0x022C, r1
     8a6:	64 17       	cp	r22, r20
     8a8:	75 07       	cpc	r23, r21
     8aa:	09 f0       	breq	.+2      	; 0x8ae <move+0x276>
     8ac:	f4 ce       	rjmp	.-536    	; 0x696 <move+0x5e>
     8ae:	ed ce       	rjmp	.-550    	; 0x68a <move+0x52>
        {
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
        {
            spinup_motors();
     8b0:	0e 94 e6 05 	call	0xbcc	; 0xbcc <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     8b4:	80 91 c5 02 	lds	r24, 0x02C5
     8b8:	60 91 c6 02 	lds	r22, 0x02C6
     8bc:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <set_motors>
     8c0:	08 95       	ret
        }
        else if (current_motion == LEFT)
        {
            spinup_motors();
     8c2:	0e 94 e6 05 	call	0xbcc	; 0xbcc <spinup_motors>
            set_motors(kilo_turn_left, 0);
     8c6:	80 91 c7 02 	lds	r24, 0x02C7
     8ca:	60 e0       	ldi	r22, 0x00	; 0
     8cc:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <set_motors>
     8d0:	08 95       	ret
	}
	else if (EQUAL_INLINE)
	{
		if (last_logic_1 == NEARER)
		{
			next_motion = opposite_move(offspring);
     8d2:	c9 01       	movw	r24, r18
     8d4:	0e 94 04 03 	call	0x608	; 0x608 <opposite_move>
     8d8:	9c 01       	movw	r18, r24
     8da:	60 91 08 01 	lds	r22, 0x0108
     8de:	70 91 09 01 	lds	r23, 0x0109
     8e2:	40 91 0a 01 	lds	r20, 0x010A
     8e6:	50 91 0b 01 	lds	r21, 0x010B
     8ea:	a0 91 0c 01 	lds	r26, 0x010C
     8ee:	b0 91 0d 01 	lds	r27, 0x010D
     8f2:	e0 91 0e 01 	lds	r30, 0x010E
     8f6:	f0 91 0f 01 	lds	r31, 0x010F
     8fa:	54 cf       	rjmp	.-344    	; 0x7a4 <move+0x16c>

000008fc <loop>:
	offspring = next_motion;
	set_motion(offspring);
}


void loop() {
     8fc:	ef 92       	push	r14
     8fe:	ff 92       	push	r15
     900:	0f 93       	push	r16
     902:	1f 93       	push	r17
}

void check_own_gradient() {
	// If no neighbors detected within TIME_LAST_GRADIENT seconds
	// then sleep waiting for be activated.
    if ( (kilo_uid != SEED_ID) && (kilo_ticks > (last_found_minor + TIME_LAST_GRADIENT)) && (own_gradient < GRADIENT_MAX))
     904:	80 91 c3 02 	lds	r24, 0x02C3
     908:	90 91 c4 02 	lds	r25, 0x02C4
     90c:	89 2b       	or	r24, r25
     90e:	09 f4       	brne	.+2      	; 0x912 <__stack+0x13>
     910:	43 c0       	rjmp	.+134    	; 0x998 <__stack+0x99>
     912:	20 91 8d 02 	lds	r18, 0x028D
     916:	30 91 8e 02 	lds	r19, 0x028E
     91a:	40 91 8f 02 	lds	r20, 0x028F
     91e:	50 91 90 02 	lds	r21, 0x0290
     922:	80 91 66 02 	lds	r24, 0x0266
     926:	90 91 67 02 	lds	r25, 0x0267
     92a:	a0 91 68 02 	lds	r26, 0x0268
     92e:	b0 91 69 02 	lds	r27, 0x0269
     932:	80 56       	subi	r24, 0x60	; 96
     934:	9f 4f       	sbci	r25, 0xFF	; 255
     936:	af 4f       	sbci	r26, 0xFF	; 255
     938:	bf 4f       	sbci	r27, 0xFF	; 255
     93a:	82 17       	cp	r24, r18
     93c:	93 07       	cpc	r25, r19
     93e:	a4 07       	cpc	r26, r20
     940:	b5 07       	cpc	r27, r21
     942:	50 f5       	brcc	.+84     	; 0x998 <__stack+0x99>
     944:	80 91 10 01 	lds	r24, 0x0110
     948:	90 91 11 01 	lds	r25, 0x0111
     94c:	8f 3f       	cpi	r24, 0xFF	; 255
     94e:	91 05       	cpc	r25, r1
     950:	1c f5       	brge	.+70     	; 0x998 <__stack+0x99>
    {
        own_gradient = GRADIENT_MAX;
     952:	8f ef       	ldi	r24, 0xFF	; 255
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	90 93 11 01 	sts	0x0111, r25
     95a:	80 93 10 01 	sts	0x0110, r24
		formed_state = FORMED_NO;
     95e:	10 92 49 02 	sts	0x0249, r1
     962:	10 92 48 02 	sts	0x0248, r1
    }
	// Stop when the sequence has not formed.
	else
	{
		//set_color(RGB(0, 0, 0));
		state_myself = COMPLETED;
     966:	85 e0       	ldi	r24, 0x05	; 5
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	90 93 43 02 	sts	0x0243, r25
     96e:	80 93 42 02 	sts	0x0242, r24

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an an action if the motion is being changed.
    if (current_motion != new_motion)
     972:	80 91 12 01 	lds	r24, 0x0112
     976:	90 91 13 01 	lds	r25, 0x0113
     97a:	89 2b       	or	r24, r25
     97c:	41 f0       	breq	.+16     	; 0x98e <__stack+0x8f>
    {
        current_motion = new_motion;
     97e:	10 92 13 01 	sts	0x0113, r1
     982:	10 92 12 01 	sts	0x0112, r1

        if (current_motion == STOP)
        {
            set_motors(0, 0);
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	60 e0       	ldi	r22, 0x00	; 0
     98a:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <set_motors>
	{
		//set_color(RGB(0, 0, 0));
		state_myself = COMPLETED;
		set_motion(STOP);
	}
}
     98e:	1f 91       	pop	r17
     990:	0f 91       	pop	r16
     992:	ff 90       	pop	r15
     994:	ef 90       	pop	r14
     996:	08 95       	ret
	check_own_gradient();
	// Move only when the sequence has already formed.
	// Move can only occured when the movitvator and motivated member
	// is stationary. This can assure the kilobot make the right
	// decision based on the measured changing distance.
	if ((formed_state == FORMED_OK) && (state_motivator == COMPLETED) && (state_motivated != MOVE))
     998:	80 91 48 02 	lds	r24, 0x0248
     99c:	90 91 49 02 	lds	r25, 0x0249
     9a0:	01 97       	sbiw	r24, 0x01	; 1
     9a2:	09 f7       	brne	.-62     	; 0x966 <__stack+0x67>
     9a4:	20 91 40 02 	lds	r18, 0x0240
     9a8:	30 91 41 02 	lds	r19, 0x0241
     9ac:	25 30       	cpi	r18, 0x05	; 5
     9ae:	31 05       	cpc	r19, r1
     9b0:	d1 f6       	brne	.-76     	; 0x966 <__stack+0x67>
     9b2:	80 91 3e 02 	lds	r24, 0x023E
     9b6:	90 91 3f 02 	lds	r25, 0x023F
     9ba:	04 97       	sbiw	r24, 0x04	; 4
     9bc:	a1 f2       	breq	.-88     	; 0x966 <__stack+0x67>
	{
		if (flag_maxest == YES)
     9be:	60 91 30 02 	lds	r22, 0x0230
     9c2:	70 91 31 02 	lds	r23, 0x0231
     9c6:	61 30       	cpi	r22, 0x01	; 1
     9c8:	71 05       	cpc	r23, r1
     9ca:	09 f4       	brne	.+2      	; 0x9ce <__stack+0xcf>
     9cc:	51 c0       	rjmp	.+162    	; 0xa70 <__stack+0x171>
		// My gradient is not the maxest.
		else
		{
			// When my motivator is closer enough can I move
			// to assure my motivator is not lost.
			if (distance_to_motivator <= DISTANCE_MOVE)
     9ce:	40 91 02 01 	lds	r20, 0x0102
     9d2:	50 91 03 01 	lds	r21, 0x0103
     9d6:	4b 32       	cpi	r20, 0x2B	; 43
     9d8:	51 05       	cpc	r21, r1
     9da:	34 f4       	brge	.+12     	; 0x9e8 <__stack+0xe9>
			{
				state_myself = MOVE;
     9dc:	84 e0       	ldi	r24, 0x04	; 4
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	90 93 43 02 	sts	0x0243, r25
     9e4:	80 93 42 02 	sts	0x0242, r24
			}

			if (distance_to_motivated <= DISTANCE_COLLIDE)
     9e8:	80 91 08 01 	lds	r24, 0x0108
     9ec:	90 91 09 01 	lds	r25, 0x0109
     9f0:	89 97       	sbiw	r24, 0x29	; 41
     9f2:	9c f1       	brlt	.+102    	; 0xa5a <__stack+0x15b>
			{
				state_myself = COMPLETED;
			}
		}

		if (state_myself == MOVE)
     9f4:	80 91 42 02 	lds	r24, 0x0242
     9f8:	90 91 43 02 	lds	r25, 0x0243
     9fc:	04 97       	sbiw	r24, 0x04	; 4
     9fe:	99 f5       	brne	.+102    	; 0xa66 <__stack+0x167>
			// TIME_LAST_MOTION_UPDATE.
			// This can assure the fixed distance kilobot move
			// in a fixed speed.
			// If distance is updated, then I can move according to
			// strategies.
			if ((update_distance_to_motivated == UPDATE) && (update_distance_to_motivator == UPDATE))
     a00:	80 91 34 02 	lds	r24, 0x0234
     a04:	90 91 35 02 	lds	r25, 0x0235
     a08:	01 97       	sbiw	r24, 0x01	; 1
     a0a:	09 f4       	brne	.+2      	; 0xa0e <__stack+0x10f>
     a0c:	47 c0       	rjmp	.+142    	; 0xa9c <__stack+0x19d>
					{
						distance_line_best = distance_line;
					}
				}
			}
			else if (kilo_ticks > (last_motion_update + TIME_LAST_MOTION_UPDATE))
     a0e:	60 91 8d 02 	lds	r22, 0x028D
     a12:	70 91 8e 02 	lds	r23, 0x028E
     a16:	80 91 8f 02 	lds	r24, 0x028F
     a1a:	90 91 90 02 	lds	r25, 0x0290
     a1e:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <__floatunsisf>
     a22:	7b 01       	movw	r14, r22
     a24:	8c 01       	movw	r16, r24
     a26:	60 91 5a 02 	lds	r22, 0x025A
     a2a:	70 91 5b 02 	lds	r23, 0x025B
     a2e:	80 91 5c 02 	lds	r24, 0x025C
     a32:	90 91 5d 02 	lds	r25, 0x025D
     a36:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <__floatunsisf>
     a3a:	2a e9       	ldi	r18, 0x9A	; 154
     a3c:	39 e9       	ldi	r19, 0x99	; 153
     a3e:	49 e1       	ldi	r20, 0x19	; 25
     a40:	51 e4       	ldi	r21, 0x41	; 65
     a42:	0e 94 ba 13 	call	0x2774	; 0x2774 <__addsf3>
     a46:	9b 01       	movw	r18, r22
     a48:	ac 01       	movw	r20, r24
     a4a:	c8 01       	movw	r24, r16
     a4c:	b7 01       	movw	r22, r14
     a4e:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__gtsf2>
     a52:	18 16       	cp	r1, r24
     a54:	0c f0       	brlt	.+2      	; 0xa58 <__stack+0x159>
     a56:	9b cf       	rjmp	.-202    	; 0x98e <__stack+0x8f>
     a58:	06 c0       	rjmp	.+12     	; 0xa66 <__stack+0x167>
				state_myself = MOVE;
			}

			if (distance_to_motivated <= DISTANCE_COLLIDE)
			{
				state_myself = COMPLETED;
     a5a:	85 e0       	ldi	r24, 0x05	; 5
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	90 93 43 02 	sts	0x0243, r25
     a62:	80 93 42 02 	sts	0x0242, r24
			}
		}
		else
		{
			//set_color(RGB(0, 0, 0));
			set_motion(STOP);
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	0e 94 8c 02 	call	0x518	; 0x518 <set_motion>
     a6e:	8f cf       	rjmp	.-226    	; 0x98e <__stack+0x8f>
	{
		if (flag_maxest == YES)
		{
			// When my motivator is closer enough can I move
			// to assure my motivator is not lost.
			if (distance_to_motivator <= DISTANCE_MOVE)
     a70:	40 91 02 01 	lds	r20, 0x0102
     a74:	50 91 03 01 	lds	r21, 0x0103
     a78:	4b 32       	cpi	r20, 0x2B	; 43
     a7a:	51 05       	cpc	r21, r1
     a7c:	44 f0       	brlt	.+16     	; 0xa8e <__stack+0x18f>
			{
				state_myself = MOVE;
			}
			else if (distance_to_motivator >= DISTANCE_STOP)
     a7e:	42 33       	cpi	r20, 0x32	; 50
     a80:	51 05       	cpc	r21, r1
     a82:	2c f0       	brlt	.+10     	; 0xa8e <__stack+0x18f>
			{
				state_myself = COMPLETED;
     a84:	30 93 43 02 	sts	0x0243, r19
     a88:	20 93 42 02 	sts	0x0242, r18
     a8c:	ec cf       	rjmp	.-40     	; 0xa66 <__stack+0x167>
			}
			else
			{
				state_myself = MOVE;
     a8e:	84 e0       	ldi	r24, 0x04	; 4
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	90 93 43 02 	sts	0x0243, r25
     a96:	80 93 42 02 	sts	0x0242, r24
     a9a:	b2 cf       	rjmp	.-156    	; 0xa00 <__stack+0x101>
			// TIME_LAST_MOTION_UPDATE.
			// This can assure the fixed distance kilobot move
			// in a fixed speed.
			// If distance is updated, then I can move according to
			// strategies.
			if ((update_distance_to_motivated == UPDATE) && (update_distance_to_motivator == UPDATE))
     a9c:	80 91 36 02 	lds	r24, 0x0236
     aa0:	90 91 37 02 	lds	r25, 0x0237
     aa4:	01 97       	sbiw	r24, 0x01	; 1
     aa6:	09 f0       	breq	.+2      	; 0xaaa <__stack+0x1ab>
     aa8:	b2 cf       	rjmp	.-156    	; 0xa0e <__stack+0x10f>
			{
				// Update.
				if (flag_minor == NO)
     aaa:	80 91 32 02 	lds	r24, 0x0232
     aae:	90 91 33 02 	lds	r25, 0x0233
     ab2:	89 2b       	or	r24, r25
     ab4:	21 f4       	brne	.+8      	; 0xabe <__stack+0x1bf>
				{
					update_distance_to_motivator = UNUPDATE;
     ab6:	10 92 37 02 	sts	0x0237, r1
     aba:	10 92 36 02 	sts	0x0236, r1
				}
				if (flag_maxest == NO)
     abe:	67 2b       	or	r22, r23
     ac0:	21 f4       	brne	.+8      	; 0xaca <__stack+0x1cb>
				{
					update_distance_to_motivated = UNUPDATE;
     ac2:	10 92 35 02 	sts	0x0235, r1
     ac6:	10 92 34 02 	sts	0x0234, r1
				}

				distance_line = distance_to_motivated + distance_to_motivator;
     aca:	80 91 08 01 	lds	r24, 0x0108
     ace:	90 91 09 01 	lds	r25, 0x0109
     ad2:	48 0f       	add	r20, r24
     ad4:	59 1f       	adc	r21, r25
     ad6:	50 93 0d 01 	sts	0x010D, r21
     ada:	40 93 0c 01 	sts	0x010C, r20
				move();
     ade:	0e 94 1c 03 	call	0x638	; 0x638 <move>
				last_motion_update = kilo_ticks;
     ae2:	80 91 8d 02 	lds	r24, 0x028D
     ae6:	90 91 8e 02 	lds	r25, 0x028E
     aea:	a0 91 8f 02 	lds	r26, 0x028F
     aee:	b0 91 90 02 	lds	r27, 0x0290
     af2:	80 93 5a 02 	sts	0x025A, r24
     af6:	90 93 5b 02 	sts	0x025B, r25
     afa:	a0 93 5c 02 	sts	0x025C, r26
     afe:	b0 93 5d 02 	sts	0x025D, r27
				// Update.
				// My motivated stops for the first time.
				// So the distance_to_motivated becomes larger is not my fault.
				// Hence, the best values for distance_to_motivated_best and
				// distance_line_best needed to be initialized.
				if (my_fault == NO)
     b02:	80 91 16 01 	lds	r24, 0x0116
     b06:	90 91 17 01 	lds	r25, 0x0117
     b0a:	89 2b       	or	r24, r25
     b0c:	01 f1       	breq	.+64     	; 0xb4e <__stack+0x24f>
					distance_line_best = distance_line;
				}
				else
				{
					// Update distance_to_motivated_best
					if (distance_to_motivated < distance_to_motivated_best)
     b0e:	20 91 08 01 	lds	r18, 0x0108
     b12:	30 91 09 01 	lds	r19, 0x0109
     b16:	80 91 0a 01 	lds	r24, 0x010A
     b1a:	90 91 0b 01 	lds	r25, 0x010B
     b1e:	28 17       	cp	r18, r24
     b20:	39 07       	cpc	r19, r25
     b22:	24 f4       	brge	.+8      	; 0xb2c <__stack+0x22d>
					{
						distance_to_motivated_best = distance_to_motivated;
     b24:	30 93 0b 01 	sts	0x010B, r19
     b28:	20 93 0a 01 	sts	0x010A, r18
					}
					// Update distance_line_best
					if (distance_line < distance_line_best)
     b2c:	20 91 0c 01 	lds	r18, 0x010C
     b30:	30 91 0d 01 	lds	r19, 0x010D
     b34:	80 91 0e 01 	lds	r24, 0x010E
     b38:	90 91 0f 01 	lds	r25, 0x010F
     b3c:	28 17       	cp	r18, r24
     b3e:	39 07       	cpc	r19, r25
     b40:	0c f0       	brlt	.+2      	; 0xb44 <__stack+0x245>
     b42:	25 cf       	rjmp	.-438    	; 0x98e <__stack+0x8f>
					{
						distance_line_best = distance_line;
     b44:	30 93 0f 01 	sts	0x010F, r19
     b48:	20 93 0e 01 	sts	0x010E, r18
     b4c:	20 cf       	rjmp	.-448    	; 0x98e <__stack+0x8f>
				// So the distance_to_motivated becomes larger is not my fault.
				// Hence, the best values for distance_to_motivated_best and
				// distance_line_best needed to be initialized.
				if (my_fault == NO)
				{
					my_fault = YES;
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	90 93 17 01 	sts	0x0117, r25
     b56:	80 93 16 01 	sts	0x0116, r24
					distance_to_motivated_best = distance_to_motivated;
     b5a:	80 91 08 01 	lds	r24, 0x0108
     b5e:	90 91 09 01 	lds	r25, 0x0109
     b62:	90 93 0b 01 	sts	0x010B, r25
     b66:	80 93 0a 01 	sts	0x010A, r24
					distance_line_best = distance_line;
     b6a:	80 91 0c 01 	lds	r24, 0x010C
     b6e:	90 91 0d 01 	lds	r25, 0x010D
     b72:	90 93 0f 01 	sts	0x010F, r25
     b76:	80 93 0e 01 	sts	0x010E, r24
     b7a:	09 cf       	rjmp	.-494    	; 0x98e <__stack+0x8f>

00000b7c <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     b7c:	08 95       	ret

00000b7e <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	08 95       	ret

00000b84 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     b84:	08 95       	ret

00000b86 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     b86:	1f 92       	push	r1
     b88:	0f 92       	push	r0
     b8a:	0f b6       	in	r0, 0x3f	; 63
     b8c:	0f 92       	push	r0
     b8e:	11 24       	eor	r1, r1
     b90:	8f 93       	push	r24
    wdt_disable();
     b92:	88 e1       	ldi	r24, 0x18	; 24
     b94:	0f b6       	in	r0, 0x3f	; 63
     b96:	f8 94       	cli
     b98:	80 93 60 00 	sts	0x0060, r24
     b9c:	10 92 60 00 	sts	0x0060, r1
     ba0:	0f be       	out	0x3f, r0	; 63
}
     ba2:	8f 91       	pop	r24
     ba4:	0f 90       	pop	r0
     ba6:	0f be       	out	0x3f, r0	; 63
     ba8:	0f 90       	pop	r0
     baa:	1f 90       	pop	r1
     bac:	18 95       	reti

00000bae <delay>:
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     bae:	00 97       	sbiw	r24, 0x00	; 0
     bb0:	39 f0       	breq	.+14     	; 0xbc0 <delay+0x12>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     bb2:	20 ed       	ldi	r18, 0xD0	; 208
     bb4:	37 e0       	ldi	r19, 0x07	; 7
     bb6:	f9 01       	movw	r30, r18
     bb8:	31 97       	sbiw	r30, 0x01	; 1
     bba:	f1 f7       	brne	.-4      	; 0xbb8 <delay+0xa>
        _delay_ms(1);
        ms--;
     bbc:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     bbe:	d9 f7       	brne	.-10     	; 0xbb6 <delay+0x8>
     bc0:	08 95       	ret

00000bc2 <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     bc2:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     bc6:	60 93 b4 00 	sts	0x00B4, r22
}
     bca:	08 95       	ret

00000bcc <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     bcc:	8f ef       	ldi	r24, 0xFF	; 255
     bce:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     bd2:	80 93 b4 00 	sts	0x00B4, r24
     bd6:	80 ed       	ldi	r24, 0xD0	; 208
     bd8:	97 e0       	ldi	r25, 0x07	; 7
     bda:	fc 01       	movw	r30, r24
     bdc:	31 97       	sbiw	r30, 0x01	; 1
     bde:	f1 f7       	brne	.-4      	; 0xbdc <spinup_motors+0x10>
     be0:	fc 01       	movw	r30, r24
     be2:	31 97       	sbiw	r30, 0x01	; 1
     be4:	f1 f7       	brne	.-4      	; 0xbe2 <spinup_motors+0x16>
     be6:	fc 01       	movw	r30, r24
     be8:	31 97       	sbiw	r30, 0x01	; 1
     bea:	f1 f7       	brne	.-4      	; 0xbe8 <spinup_motors+0x1c>
     bec:	fc 01       	movw	r30, r24
     bee:	31 97       	sbiw	r30, 0x01	; 1
     bf0:	f1 f7       	brne	.-4      	; 0xbee <spinup_motors+0x22>
     bf2:	fc 01       	movw	r30, r24
     bf4:	31 97       	sbiw	r30, 0x01	; 1
     bf6:	f1 f7       	brne	.-4      	; 0xbf4 <spinup_motors+0x28>
     bf8:	fc 01       	movw	r30, r24
     bfa:	31 97       	sbiw	r30, 0x01	; 1
     bfc:	f1 f7       	brne	.-4      	; 0xbfa <spinup_motors+0x2e>
     bfe:	fc 01       	movw	r30, r24
     c00:	31 97       	sbiw	r30, 0x01	; 1
     c02:	f1 f7       	brne	.-4      	; 0xc00 <spinup_motors+0x34>
     c04:	fc 01       	movw	r30, r24
     c06:	31 97       	sbiw	r30, 0x01	; 1
     c08:	f1 f7       	brne	.-4      	; 0xc06 <spinup_motors+0x3a>
     c0a:	fc 01       	movw	r30, r24
     c0c:	31 97       	sbiw	r30, 0x01	; 1
     c0e:	f1 f7       	brne	.-4      	; 0xc0c <spinup_motors+0x40>
     c10:	fc 01       	movw	r30, r24
     c12:	31 97       	sbiw	r30, 0x01	; 1
     c14:	f1 f7       	brne	.-4      	; 0xc12 <spinup_motors+0x46>
     c16:	fc 01       	movw	r30, r24
     c18:	31 97       	sbiw	r30, 0x01	; 1
     c1a:	f1 f7       	brne	.-4      	; 0xc18 <spinup_motors+0x4c>
     c1c:	fc 01       	movw	r30, r24
     c1e:	31 97       	sbiw	r30, 0x01	; 1
     c20:	f1 f7       	brne	.-4      	; 0xc1e <spinup_motors+0x52>
     c22:	fc 01       	movw	r30, r24
     c24:	31 97       	sbiw	r30, 0x01	; 1
     c26:	f1 f7       	brne	.-4      	; 0xc24 <spinup_motors+0x58>
     c28:	fc 01       	movw	r30, r24
     c2a:	31 97       	sbiw	r30, 0x01	; 1
     c2c:	f1 f7       	brne	.-4      	; 0xc2a <spinup_motors+0x5e>
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	f1 f7       	brne	.-4      	; 0xc2e <spinup_motors+0x62>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     c32:	08 95       	ret

00000c34 <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     c34:	80 91 91 02 	lds	r24, 0x0291
     c38:	88 23       	and	r24, r24
     c3a:	f9 f4       	brne	.+62     	; 0xc7a <get_ambientlight+0x46>
        cli();
     c3c:	f8 94       	cli
        adc_setup_conversion(7);
     c3e:	87 e0       	ldi	r24, 0x07	; 7
     c40:	80 93 7c 00 	sts	0x007C, r24
     c44:	83 e8       	ldi	r24, 0x83	; 131
     c46:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     c4a:	80 91 7a 00 	lds	r24, 0x007A
     c4e:	80 64       	ori	r24, 0x40	; 64
     c50:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     c54:	80 91 7a 00 	lds	r24, 0x007A
     c58:	86 fd       	sbrc	r24, 6
     c5a:	fc cf       	rjmp	.-8      	; 0xc54 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     c5c:	20 91 78 00 	lds	r18, 0x0078
     c60:	30 91 79 00 	lds	r19, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     c64:	10 92 7c 00 	sts	0x007C, r1
     c68:	83 ea       	ldi	r24, 0xA3	; 163
     c6a:	80 93 7a 00 	sts	0x007A, r24
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	80 93 7b 00 	sts	0x007B, r24
        sei();                                    // reenable interrupts
     c74:	78 94       	sei
    }
    return light;
}
     c76:	c9 01       	movw	r24, r18
     c78:	08 95       	ret
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     c7a:	2f ef       	ldi	r18, 0xFF	; 255
     c7c:	3f ef       	ldi	r19, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     c7e:	c9 01       	movw	r24, r18
     c80:	08 95       	ret

00000c82 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     c82:	80 91 91 02 	lds	r24, 0x0291
     c86:	88 23       	and	r24, r24
     c88:	f9 f4       	brne	.+62     	; 0xcc8 <get_temperature+0x46>
        cli();
     c8a:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     c8c:	88 ec       	ldi	r24, 0xC8	; 200
     c8e:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     c92:	87 e8       	ldi	r24, 0x87	; 135
     c94:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     c98:	80 91 7a 00 	lds	r24, 0x007A
     c9c:	80 64       	ori	r24, 0x40	; 64
     c9e:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     ca2:	80 91 7a 00 	lds	r24, 0x007A
     ca6:	86 fd       	sbrc	r24, 6
     ca8:	fc cf       	rjmp	.-8      	; 0xca2 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     caa:	20 91 78 00 	lds	r18, 0x0078
     cae:	30 91 79 00 	lds	r19, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     cb2:	10 92 7c 00 	sts	0x007C, r1
     cb6:	83 ea       	ldi	r24, 0xA3	; 163
     cb8:	80 93 7a 00 	sts	0x007A, r24
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	80 93 7b 00 	sts	0x007B, r24
        sei();                                    // reenable interrupts
     cc2:	78 94       	sei
    }
    return temp;
}
     cc4:	c9 01       	movw	r24, r18
     cc6:	08 95       	ret
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     cc8:	2f ef       	ldi	r18, 0xFF	; 255
     cca:	3f ef       	ldi	r19, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     ccc:	c9 01       	movw	r24, r18
     cce:	08 95       	ret

00000cd0 <rand_hard>:

uint8_t rand_hard() {
     cd0:	cf 93       	push	r28
     cd2:	df 93       	push	r29
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	60 e0       	ldi	r22, 0x00	; 0
     cd8:	70 e0       	ldi	r23, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     cda:	f3 ea       	ldi	r31, 0xA3	; 163
     cdc:	a1 e0       	ldi	r26, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     cde:	56 e0       	ldi	r21, 0x06	; 6
     ce0:	e3 e8       	ldi	r30, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     ce2:	c1 e0       	ldi	r28, 0x01	; 1
     ce4:	d0 e0       	ldi	r29, 0x00	; 0
        sei();                                    // reenable interrupts
    }
    return temp;
}

uint8_t rand_hard() {
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     cea:	f8 94       	cli
            adc_setup_conversion(6);
     cec:	50 93 7c 00 	sts	0x007C, r21
     cf0:	e0 93 7a 00 	sts	0x007A, r30
            adc_start_conversion();
     cf4:	80 91 7a 00 	lds	r24, 0x007A
     cf8:	80 64       	ori	r24, 0x40	; 64
     cfa:	80 93 7a 00 	sts	0x007A, r24
            adc_finish_conversion();
     cfe:	80 91 7a 00 	lds	r24, 0x007A
     d02:	86 fd       	sbrc	r24, 6
     d04:	fc cf       	rjmp	.-8      	; 0xcfe <rand_hard+0x2e>
            a = ADCW&0x1;
     d06:	80 91 78 00 	lds	r24, 0x0078
     d0a:	90 91 79 00 	lds	r25, 0x0079
     d0e:	48 2f       	mov	r20, r24
     d10:	41 70       	andi	r20, 0x01	; 1
            adc_start_conversion();
     d12:	80 91 7a 00 	lds	r24, 0x007A
     d16:	80 64       	ori	r24, 0x40	; 64
     d18:	80 93 7a 00 	sts	0x007A, r24
            adc_finish_conversion();
     d1c:	80 91 7a 00 	lds	r24, 0x007A
     d20:	86 fd       	sbrc	r24, 6
     d22:	fc cf       	rjmp	.-8      	; 0xd1c <rand_hard+0x4c>
            b = ADCW&0x1;
     d24:	80 91 78 00 	lds	r24, 0x0078
     d28:	90 91 79 00 	lds	r25, 0x0079
            adc_trigger_high_gain();
     d2c:	10 92 7c 00 	sts	0x007C, r1
     d30:	f0 93 7a 00 	sts	0x007A, r31
     d34:	a0 93 7b 00 	sts	0x007B, r26
            sei();
     d38:	78 94       	sei
            tries++;
        } while (a == b && tries < 128);
     d3a:	81 70       	andi	r24, 0x01	; 1
     d3c:	48 17       	cp	r20, r24
     d3e:	29 f4       	brne	.+10     	; 0xd4a <rand_hard+0x7a>
     d40:	2f 5f       	subi	r18, 0xFF	; 255
     d42:	3f 4f       	sbci	r19, 0xFF	; 255
     d44:	20 38       	cpi	r18, 0x80	; 128
     d46:	31 05       	cpc	r19, r1
     d48:	81 f6       	brne	.-96     	; 0xcea <rand_hard+0x1a>
        if (a)
     d4a:	44 23       	and	r20, r20
     d4c:	41 f0       	breq	.+16     	; 0xd5e <rand_hard+0x8e>
            num |= (1<<i);
     d4e:	ce 01       	movw	r24, r28
     d50:	06 2e       	mov	r0, r22
     d52:	02 c0       	rjmp	.+4      	; 0xd58 <rand_hard+0x88>
     d54:	88 0f       	add	r24, r24
     d56:	99 1f       	adc	r25, r25
     d58:	0a 94       	dec	r0
     d5a:	e2 f7       	brpl	.-8      	; 0xd54 <rand_hard+0x84>
     d5c:	b8 2b       	or	r27, r24
     d5e:	6f 5f       	subi	r22, 0xFF	; 255
     d60:	7f 4f       	sbci	r23, 0xFF	; 255
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     d62:	68 30       	cpi	r22, 0x08	; 8
     d64:	71 05       	cpc	r23, r1
     d66:	09 f0       	breq	.+2      	; 0xd6a <rand_hard+0x9a>
     d68:	be cf       	rjmp	.-132    	; 0xce6 <rand_hard+0x16>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     d6a:	8b 2f       	mov	r24, r27
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	08 95       	ret

00000d72 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     d72:	80 91 22 01 	lds	r24, 0x0122
     d76:	98 2f       	mov	r25, r24
     d78:	99 0f       	add	r25, r25
     d7a:	99 0f       	add	r25, r25
     d7c:	99 0f       	add	r25, r25
     d7e:	98 27       	eor	r25, r24
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     d80:	20 91 4c 02 	lds	r18, 0x024C
     d84:	82 2f       	mov	r24, r18
     d86:	86 95       	lsr	r24
     d88:	86 95       	lsr	r24
     d8a:	89 27       	eor	r24, r25
     d8c:	92 95       	swap	r25
     d8e:	96 95       	lsr	r25
     d90:	97 70       	andi	r25, 0x07	; 7
     d92:	89 27       	eor	r24, r25
     d94:	80 93 22 01 	sts	0x0122, r24
     d98:	2f 5f       	subi	r18, 0xFF	; 255
     d9a:	20 93 4c 02 	sts	0x024C, r18
    return seed;
}
     d9e:	08 95       	ret

00000da0 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     da0:	80 93 22 01 	sts	0x0122, r24
}
     da4:	08 95       	ret

00000da6 <get_voltage>:

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     da6:	80 91 91 02 	lds	r24, 0x0291
     daa:	88 23       	and	r24, r24
     dac:	b9 f4       	brne	.+46     	; 0xddc <get_voltage+0x36>
        cli();                                    // disable interrupts
     dae:	f8 94       	cli
        adc_setup_conversion(6);
     db0:	86 e0       	ldi	r24, 0x06	; 6
     db2:	80 93 7c 00 	sts	0x007C, r24
     db6:	83 e8       	ldi	r24, 0x83	; 131
     db8:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     dbc:	80 91 7a 00 	lds	r24, 0x007A
     dc0:	80 64       	ori	r24, 0x40	; 64
     dc2:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     dc6:	80 91 7a 00 	lds	r24, 0x007A
     dca:	86 fd       	sbrc	r24, 6
     dcc:	fc cf       	rjmp	.-8      	; 0xdc6 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     dce:	20 91 78 00 	lds	r18, 0x0078
     dd2:	30 91 79 00 	lds	r19, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     dd6:	78 94       	sei
    }
    return voltage;
}
     dd8:	c9 01       	movw	r24, r18
     dda:	08 95       	ret
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     ddc:	2f ef       	ldi	r18, 0xFF	; 255
     dde:	3f ef       	ldi	r19, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     de0:	c9 01       	movw	r24, r18
     de2:	08 95       	ret

00000de4 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     de4:	2f 92       	push	r2
     de6:	3f 92       	push	r3
     de8:	4f 92       	push	r4
     dea:	5f 92       	push	r5
     dec:	6f 92       	push	r6
     dee:	7f 92       	push	r7
     df0:	8f 92       	push	r8
     df2:	9f 92       	push	r9
     df4:	af 92       	push	r10
     df6:	bf 92       	push	r11
     df8:	cf 92       	push	r12
     dfa:	df 92       	push	r13
     dfc:	ef 92       	push	r14
     dfe:	ff 92       	push	r15
     e00:	0f 93       	push	r16
     e02:	1f 93       	push	r17
     e04:	df 93       	push	r29
     e06:	cf 93       	push	r28
     e08:	00 d0       	rcall	.+0      	; 0xe0a <estimate_distance+0x26>
     e0a:	00 d0       	rcall	.+0      	; 0xe0c <estimate_distance+0x28>
     e0c:	0f 92       	push	r0
     e0e:	cd b7       	in	r28, 0x3d	; 61
     e10:	de b7       	in	r29, 0x3e	; 62
     e12:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     e14:	dc 01       	movw	r26, r24
     e16:	12 96       	adiw	r26, 0x02	; 2
     e18:	4d 90       	ld	r4, X+
     e1a:	5c 90       	ld	r5, X
     e1c:	13 97       	sbiw	r26, 0x03	; 3
     e1e:	b4 e8       	ldi	r27, 0x84	; 132
     e20:	4b 16       	cp	r4, r27
     e22:	b3 e0       	ldi	r27, 0x03	; 3
     e24:	5b 06       	cpc	r5, r27
     e26:	0c f4       	brge	.+2      	; 0xe2a <estimate_distance+0x46>
     e28:	9d c0       	rjmp	.+314    	; 0xf64 <estimate_distance+0x180>
     e2a:	ef ef       	ldi	r30, 0xFF	; 255
     e2c:	ed 83       	std	Y+5, r30	; 0x05
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     e2e:	bd eb       	ldi	r27, 0xBD	; 189
     e30:	4b 16       	cp	r4, r27
     e32:	b2 e0       	ldi	r27, 0x02	; 2
     e34:	5b 06       	cpc	r5, r27
     e36:	d4 f4       	brge	.+52     	; 0xe6c <estimate_distance+0x88>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     e38:	8d 81       	ldd	r24, Y+5	; 0x05
     e3a:	8f 5d       	subi	r24, 0xDF	; 223
    }
}
     e3c:	0f 90       	pop	r0
     e3e:	0f 90       	pop	r0
     e40:	0f 90       	pop	r0
     e42:	0f 90       	pop	r0
     e44:	0f 90       	pop	r0
     e46:	cf 91       	pop	r28
     e48:	df 91       	pop	r29
     e4a:	1f 91       	pop	r17
     e4c:	0f 91       	pop	r16
     e4e:	ff 90       	pop	r15
     e50:	ef 90       	pop	r14
     e52:	df 90       	pop	r13
     e54:	cf 90       	pop	r12
     e56:	bf 90       	pop	r11
     e58:	af 90       	pop	r10
     e5a:	9f 90       	pop	r9
     e5c:	8f 90       	pop	r8
     e5e:	7f 90       	pop	r7
     e60:	6f 90       	pop	r6
     e62:	5f 90       	pop	r5
     e64:	4f 90       	pop	r4
     e66:	3f 90       	pop	r3
     e68:	2f 90       	pop	r2
     e6a:	08 95       	ret
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     e6c:	f1 01       	movw	r30, r2
     e6e:	00 81       	ld	r16, Z
     e70:	11 81       	ldd	r17, Z+1	; 0x01
     e72:	80 91 92 02 	lds	r24, 0x0292
     e76:	90 91 93 02 	lds	r25, 0x0293
     e7a:	80 17       	cp	r24, r16
     e7c:	91 07       	cpc	r25, r17
     e7e:	08 f4       	brcc	.+2      	; 0xe82 <estimate_distance+0x9e>
     e80:	43 c1       	rjmp	.+646    	; 0x1108 <estimate_distance+0x324>
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     e82:	e0 90 94 02 	lds	r14, 0x0294
     e86:	f0 90 95 02 	lds	r15, 0x0295
     e8a:	e0 16       	cp	r14, r16
     e8c:	f1 06       	cpc	r15, r17
     e8e:	08 f4       	brcc	.+2      	; 0xe92 <estimate_distance+0xae>
     e90:	15 c2       	rjmp	.+1066   	; 0x12bc <estimate_distance+0x4d8>
     e92:	e0 90 96 02 	lds	r14, 0x0296
     e96:	f0 90 97 02 	lds	r15, 0x0297
     e9a:	e0 16       	cp	r14, r16
     e9c:	f1 06       	cpc	r15, r17
     e9e:	08 f4       	brcc	.+2      	; 0xea2 <estimate_distance+0xbe>
     ea0:	16 c2       	rjmp	.+1068   	; 0x12ce <estimate_distance+0x4ea>
     ea2:	e0 90 98 02 	lds	r14, 0x0298
     ea6:	f0 90 99 02 	lds	r15, 0x0299
     eaa:	e0 16       	cp	r14, r16
     eac:	f1 06       	cpc	r15, r17
     eae:	08 f4       	brcc	.+2      	; 0xeb2 <estimate_distance+0xce>
     eb0:	17 c2       	rjmp	.+1070   	; 0x12e0 <estimate_distance+0x4fc>
     eb2:	e0 90 9a 02 	lds	r14, 0x029A
     eb6:	f0 90 9b 02 	lds	r15, 0x029B
     eba:	e0 16       	cp	r14, r16
     ebc:	f1 06       	cpc	r15, r17
     ebe:	08 f4       	brcc	.+2      	; 0xec2 <estimate_distance+0xde>
     ec0:	18 c2       	rjmp	.+1072   	; 0x12f2 <estimate_distance+0x50e>
     ec2:	e0 90 9c 02 	lds	r14, 0x029C
     ec6:	f0 90 9d 02 	lds	r15, 0x029D
     eca:	e0 16       	cp	r14, r16
     ecc:	f1 06       	cpc	r15, r17
     ece:	08 f4       	brcc	.+2      	; 0xed2 <estimate_distance+0xee>
     ed0:	6e c1       	rjmp	.+732    	; 0x11ae <estimate_distance+0x3ca>
     ed2:	e0 90 9e 02 	lds	r14, 0x029E
     ed6:	f0 90 9f 02 	lds	r15, 0x029F
     eda:	e0 16       	cp	r14, r16
     edc:	f1 06       	cpc	r15, r17
     ede:	08 f4       	brcc	.+2      	; 0xee2 <estimate_distance+0xfe>
     ee0:	11 c2       	rjmp	.+1058   	; 0x1304 <estimate_distance+0x520>
     ee2:	e0 90 a0 02 	lds	r14, 0x02A0
     ee6:	f0 90 a1 02 	lds	r15, 0x02A1
     eea:	e0 16       	cp	r14, r16
     eec:	f1 06       	cpc	r15, r17
     eee:	08 f4       	brcc	.+2      	; 0xef2 <estimate_distance+0x10e>
     ef0:	12 c2       	rjmp	.+1060   	; 0x1316 <estimate_distance+0x532>
     ef2:	e0 90 a2 02 	lds	r14, 0x02A2
     ef6:	f0 90 a3 02 	lds	r15, 0x02A3
     efa:	e0 16       	cp	r14, r16
     efc:	f1 06       	cpc	r15, r17
     efe:	08 f4       	brcc	.+2      	; 0xf02 <estimate_distance+0x11e>
     f00:	13 c2       	rjmp	.+1062   	; 0x1328 <estimate_distance+0x544>
     f02:	e0 90 a4 02 	lds	r14, 0x02A4
     f06:	f0 90 a5 02 	lds	r15, 0x02A5
     f0a:	e0 16       	cp	r14, r16
     f0c:	f1 06       	cpc	r15, r17
     f0e:	08 f4       	brcc	.+2      	; 0xf12 <estimate_distance+0x12e>
     f10:	14 c2       	rjmp	.+1064   	; 0x133a <estimate_distance+0x556>
     f12:	e0 90 a6 02 	lds	r14, 0x02A6
     f16:	f0 90 a7 02 	lds	r15, 0x02A7
     f1a:	e0 16       	cp	r14, r16
     f1c:	f1 06       	cpc	r15, r17
     f1e:	08 f4       	brcc	.+2      	; 0xf22 <estimate_distance+0x13e>
     f20:	15 c2       	rjmp	.+1066   	; 0x134c <estimate_distance+0x568>
     f22:	e0 90 a8 02 	lds	r14, 0x02A8
     f26:	f0 90 a9 02 	lds	r15, 0x02A9
     f2a:	e0 16       	cp	r14, r16
     f2c:	f1 06       	cpc	r15, r17
     f2e:	08 f4       	brcc	.+2      	; 0xf32 <estimate_distance+0x14e>
     f30:	1a c2       	rjmp	.+1076   	; 0x1366 <estimate_distance+0x582>
     f32:	e0 90 aa 02 	lds	r14, 0x02AA
     f36:	f0 90 ab 02 	lds	r15, 0x02AB
     f3a:	e0 16       	cp	r14, r16
     f3c:	f1 06       	cpc	r15, r17
     f3e:	08 f4       	brcc	.+2      	; 0xf42 <estimate_distance+0x15e>
     f40:	1b c2       	rjmp	.+1078   	; 0x1378 <estimate_distance+0x594>
     f42:	e0 90 ac 02 	lds	r14, 0x02AC
     f46:	f0 90 ad 02 	lds	r15, 0x02AD
     f4a:	e0 16       	cp	r14, r16
     f4c:	f1 06       	cpc	r15, r17
     f4e:	08 f4       	brcc	.+2      	; 0xf52 <estimate_distance+0x16e>
     f50:	1c c2       	rjmp	.+1080   	; 0x138a <estimate_distance+0x5a6>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     f52:	8a e5       	ldi	r24, 0x5A	; 90
     f54:	38 2e       	mov	r3, r24
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     f56:	2d 81       	ldd	r18, Y+5	; 0x05
     f58:	2f 3f       	cpi	r18, 0xFF	; 255
     f5a:	09 f0       	breq	.+2      	; 0xf5e <estimate_distance+0x17a>
     f5c:	da c0       	rjmp	.+436    	; 0x1112 <estimate_distance+0x32e>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     f5e:	83 2d       	mov	r24, r3
     f60:	8f 5d       	subi	r24, 0xDF	; 223
     f62:	6c cf       	rjmp	.-296    	; 0xe3c <estimate_distance+0x58>
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
     f64:	80 91 6b 02 	lds	r24, 0x026B
     f68:	90 91 6c 02 	lds	r25, 0x026C
     f6c:	84 15       	cp	r24, r4
     f6e:	95 05       	cpc	r25, r5
     f70:	08 f4       	brcc	.+2      	; 0xf74 <estimate_distance+0x190>
     f72:	c8 c0       	rjmp	.+400    	; 0x1104 <estimate_distance+0x320>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     f74:	e0 90 6d 02 	lds	r14, 0x026D
     f78:	f0 90 6e 02 	lds	r15, 0x026E
     f7c:	e4 14       	cp	r14, r4
     f7e:	f5 04       	cpc	r15, r5
     f80:	08 f4       	brcc	.+2      	; 0xf84 <estimate_distance+0x1a0>
     f82:	a1 c1       	rjmp	.+834    	; 0x12c6 <estimate_distance+0x4e2>
     f84:	e0 90 6f 02 	lds	r14, 0x026F
     f88:	f0 90 70 02 	lds	r15, 0x0270
     f8c:	e4 14       	cp	r14, r4
     f8e:	f5 04       	cpc	r15, r5
     f90:	08 f4       	brcc	.+2      	; 0xf94 <estimate_distance+0x1b0>
     f92:	a2 c1       	rjmp	.+836    	; 0x12d8 <estimate_distance+0x4f4>
     f94:	e0 90 71 02 	lds	r14, 0x0271
     f98:	f0 90 72 02 	lds	r15, 0x0272
     f9c:	e4 14       	cp	r14, r4
     f9e:	f5 04       	cpc	r15, r5
     fa0:	08 f4       	brcc	.+2      	; 0xfa4 <estimate_distance+0x1c0>
     fa2:	a3 c1       	rjmp	.+838    	; 0x12ea <estimate_distance+0x506>
     fa4:	e0 90 73 02 	lds	r14, 0x0273
     fa8:	f0 90 74 02 	lds	r15, 0x0274
     fac:	e4 14       	cp	r14, r4
     fae:	f5 04       	cpc	r15, r5
     fb0:	08 f4       	brcc	.+2      	; 0xfb4 <estimate_distance+0x1d0>
     fb2:	a4 c1       	rjmp	.+840    	; 0x12fc <estimate_distance+0x518>
     fb4:	e0 90 75 02 	lds	r14, 0x0275
     fb8:	f0 90 76 02 	lds	r15, 0x0276
     fbc:	e4 14       	cp	r14, r4
     fbe:	f5 04       	cpc	r15, r5
     fc0:	08 f4       	brcc	.+2      	; 0xfc4 <estimate_distance+0x1e0>
     fc2:	60 c1       	rjmp	.+704    	; 0x1284 <estimate_distance+0x4a0>
     fc4:	e0 90 77 02 	lds	r14, 0x0277
     fc8:	f0 90 78 02 	lds	r15, 0x0278
     fcc:	e4 14       	cp	r14, r4
     fce:	f5 04       	cpc	r15, r5
     fd0:	08 f4       	brcc	.+2      	; 0xfd4 <estimate_distance+0x1f0>
     fd2:	9d c1       	rjmp	.+826    	; 0x130e <estimate_distance+0x52a>
     fd4:	e0 90 79 02 	lds	r14, 0x0279
     fd8:	f0 90 7a 02 	lds	r15, 0x027A
     fdc:	e4 14       	cp	r14, r4
     fde:	f5 04       	cpc	r15, r5
     fe0:	08 f4       	brcc	.+2      	; 0xfe4 <estimate_distance+0x200>
     fe2:	9e c1       	rjmp	.+828    	; 0x1320 <estimate_distance+0x53c>
     fe4:	e0 90 7b 02 	lds	r14, 0x027B
     fe8:	f0 90 7c 02 	lds	r15, 0x027C
     fec:	e4 14       	cp	r14, r4
     fee:	f5 04       	cpc	r15, r5
     ff0:	08 f4       	brcc	.+2      	; 0xff4 <estimate_distance+0x210>
     ff2:	9f c1       	rjmp	.+830    	; 0x1332 <estimate_distance+0x54e>
     ff4:	e0 90 7d 02 	lds	r14, 0x027D
     ff8:	f0 90 7e 02 	lds	r15, 0x027E
     ffc:	e4 14       	cp	r14, r4
     ffe:	f5 04       	cpc	r15, r5
    1000:	08 f4       	brcc	.+2      	; 0x1004 <estimate_distance+0x220>
    1002:	a0 c1       	rjmp	.+832    	; 0x1344 <estimate_distance+0x560>
    1004:	e0 90 7f 02 	lds	r14, 0x027F
    1008:	f0 90 80 02 	lds	r15, 0x0280
    100c:	e4 14       	cp	r14, r4
    100e:	f5 04       	cpc	r15, r5
    1010:	08 f4       	brcc	.+2      	; 0x1014 <estimate_distance+0x230>
    1012:	a1 c1       	rjmp	.+834    	; 0x1356 <estimate_distance+0x572>
    1014:	e0 90 81 02 	lds	r14, 0x0281
    1018:	f0 90 82 02 	lds	r15, 0x0282
    101c:	e4 14       	cp	r14, r4
    101e:	f5 04       	cpc	r15, r5
    1020:	08 f4       	brcc	.+2      	; 0x1024 <estimate_distance+0x240>
    1022:	9d c1       	rjmp	.+826    	; 0x135e <estimate_distance+0x57a>
    1024:	e0 90 83 02 	lds	r14, 0x0283
    1028:	f0 90 84 02 	lds	r15, 0x0284
    102c:	e4 14       	cp	r14, r4
    102e:	f5 04       	cpc	r15, r5
    1030:	08 f4       	brcc	.+2      	; 0x1034 <estimate_distance+0x250>
    1032:	9e c1       	rjmp	.+828    	; 0x1370 <estimate_distance+0x58c>
    1034:	e0 90 85 02 	lds	r14, 0x0285
    1038:	f0 90 86 02 	lds	r15, 0x0286
    103c:	e4 14       	cp	r14, r4
    103e:	f5 04       	cpc	r15, r5
    1040:	08 f4       	brcc	.+2      	; 0x1044 <estimate_distance+0x260>
    1042:	9f c1       	rjmp	.+830    	; 0x1382 <estimate_distance+0x59e>
    1044:	0c e0       	ldi	r16, 0x0C	; 12
    1046:	10 e0       	ldi	r17, 0x00	; 0
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	a0 ed       	ldi	r26, 0xD0	; 208
    104e:	b0 e4       	ldi	r27, 0x40	; 64
    1050:	89 83       	std	Y+1, r24	; 0x01
    1052:	9a 83       	std	Y+2, r25	; 0x02
    1054:	ab 83       	std	Y+3, r26	; 0x03
    1056:	bc 83       	std	Y+4, r27	; 0x04
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
    1058:	00 0f       	add	r16, r16
    105a:	11 1f       	adc	r17, r17
    105c:	05 59       	subi	r16, 0x95	; 149
    105e:	1d 4f       	sbci	r17, 0xFD	; 253
    1060:	d8 01       	movw	r26, r16
    1062:	8d 91       	ld	r24, X+
    1064:	9c 91       	ld	r25, X
    1066:	b7 01       	movw	r22, r14
    1068:	68 1b       	sub	r22, r24
    106a:	79 0b       	sbc	r23, r25
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <__floatunsisf>
    1074:	9b 01       	movw	r18, r22
    1076:	ac 01       	movw	r20, r24
    1078:	0e 94 ba 13 	call	0x2774	; 0x2774 <__addsf3>
    107c:	3b 01       	movw	r6, r22
    107e:	4c 01       	movw	r8, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
    1080:	b2 01       	movw	r22, r4
    1082:	88 27       	eor	r24, r24
    1084:	77 fd       	sbrc	r23, 7
    1086:	80 95       	com	r24
    1088:	98 2f       	mov	r25, r24
    108a:	0e 94 ed 15 	call	0x2bda	; 0x2bda <__floatsisf>
    108e:	5b 01       	movw	r10, r22
    1090:	6c 01       	movw	r12, r24
    1092:	b7 01       	movw	r22, r14
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <__floatunsisf>
    109c:	7b 01       	movw	r14, r22
    109e:	8c 01       	movw	r16, r24
    10a0:	c4 01       	movw	r24, r8
    10a2:	b3 01       	movw	r22, r6
    10a4:	29 81       	ldd	r18, Y+1	; 0x01
    10a6:	3a 81       	ldd	r19, Y+2	; 0x02
    10a8:	4b 81       	ldd	r20, Y+3	; 0x03
    10aa:	5c 81       	ldd	r21, Y+4	; 0x04
    10ac:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__mulsf3>
    10b0:	9b 01       	movw	r18, r22
    10b2:	ac 01       	movw	r20, r24
    10b4:	c8 01       	movw	r24, r16
    10b6:	b7 01       	movw	r22, r14
    10b8:	0e 94 89 13 	call	0x2712	; 0x2712 <__subsf3>
    10bc:	9b 01       	movw	r18, r22
    10be:	ac 01       	movw	r20, r24
    10c0:	c6 01       	movw	r24, r12
    10c2:	b5 01       	movw	r22, r10
    10c4:	0e 94 89 13 	call	0x2712	; 0x2712 <__subsf3>
            b=((int)((int)b/(int)slope));
    10c8:	20 e0       	ldi	r18, 0x00	; 0
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	40 e2       	ldi	r20, 0x20	; 32
    10ce:	51 e4       	ldi	r21, 0x41	; 65
    10d0:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__mulsf3>
    10d4:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__fixsfsi>
    10d8:	7b 01       	movw	r14, r22
    10da:	8c 01       	movw	r16, r24
    10dc:	c4 01       	movw	r24, r8
    10de:	b3 01       	movw	r22, r6
    10e0:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__fixsfsi>
    10e4:	9b 01       	movw	r18, r22
    10e6:	ac 01       	movw	r20, r24
    10e8:	c7 01       	movw	r24, r14
    10ea:	b9 01       	movw	r22, r18
    10ec:	0e 94 2c 19 	call	0x3258	; 0x3258 <__divmodhi4>
            dist_high=b;
    10f0:	88 27       	eor	r24, r24
    10f2:	77 fd       	sbrc	r23, 7
    10f4:	80 95       	com	r24
    10f6:	98 2f       	mov	r25, r24
    10f8:	0e 94 ed 15 	call	0x2bda	; 0x2bda <__floatsisf>
    10fc:	0e 94 11 12 	call	0x2422	; 0x2422 <__fixunssfsi>
    1100:	6d 83       	std	Y+5, r22	; 0x05
    1102:	95 ce       	rjmp	.-726    	; 0xe2e <estimate_distance+0x4a>
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
    1104:	1d 82       	std	Y+5, r1	; 0x05
    1106:	93 ce       	rjmp	.-730    	; 0xe2e <estimate_distance+0x4a>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
    1108:	33 24       	eor	r3, r3
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
    110a:	2d 81       	ldd	r18, Y+5	; 0x05
    110c:	2f 3f       	cpi	r18, 0xFF	; 255
    110e:	09 f4       	brne	.+2      	; 0x1112 <estimate_distance+0x32e>
    1110:	26 cf       	rjmp	.-436    	; 0xf5e <estimate_distance+0x17a>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
    1112:	b2 01       	movw	r22, r4
    1114:	88 27       	eor	r24, r24
    1116:	77 fd       	sbrc	r23, 7
    1118:	80 95       	com	r24
    111a:	98 2f       	mov	r25, r24
    111c:	0e 94 ed 15 	call	0x2bda	; 0x2bda <__floatsisf>
    1120:	5b 01       	movw	r10, r22
    1122:	6c 01       	movw	r12, r24
    1124:	ad 81       	ldd	r26, Y+5	; 0x05
    1126:	6a 2f       	mov	r22, r26
    1128:	70 e0       	ldi	r23, 0x00	; 0
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <__floatunsisf>
    1132:	7b 01       	movw	r14, r22
    1134:	8c 01       	movw	r16, r24
    1136:	60 e0       	ldi	r22, 0x00	; 0
    1138:	70 e0       	ldi	r23, 0x00	; 0
    113a:	81 e6       	ldi	r24, 0x61	; 97
    113c:	94 e4       	ldi	r25, 0x44	; 68
    113e:	a6 01       	movw	r20, r12
    1140:	95 01       	movw	r18, r10
    1142:	0e 94 89 13 	call	0x2712	; 0x2712 <__subsf3>
    1146:	9b 01       	movw	r18, r22
    1148:	ac 01       	movw	r20, r24
    114a:	c8 01       	movw	r24, r16
    114c:	b7 01       	movw	r22, r14
    114e:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__mulsf3>
    1152:	3b 01       	movw	r6, r22
    1154:	4c 01       	movw	r8, r24
    1156:	63 2d       	mov	r22, r3
    1158:	70 e0       	ldi	r23, 0x00	; 0
    115a:	80 e0       	ldi	r24, 0x00	; 0
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <__floatunsisf>
    1162:	7b 01       	movw	r14, r22
    1164:	8c 01       	movw	r16, r24
    1166:	c6 01       	movw	r24, r12
    1168:	b5 01       	movw	r22, r10
    116a:	20 e0       	ldi	r18, 0x00	; 0
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	4f e2       	ldi	r20, 0x2F	; 47
    1170:	54 e4       	ldi	r21, 0x44	; 68
    1172:	0e 94 89 13 	call	0x2712	; 0x2712 <__subsf3>
    1176:	9b 01       	movw	r18, r22
    1178:	ac 01       	movw	r20, r24
    117a:	c8 01       	movw	r24, r16
    117c:	b7 01       	movw	r22, r14
    117e:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__mulsf3>
    1182:	9b 01       	movw	r18, r22
    1184:	ac 01       	movw	r20, r24
    1186:	c4 01       	movw	r24, r8
    1188:	b3 01       	movw	r22, r6
    118a:	0e 94 ba 13 	call	0x2774	; 0x2774 <__addsf3>
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	48 e4       	ldi	r20, 0x48	; 72
    1194:	53 e4       	ldi	r21, 0x43	; 67
    1196:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <__divsf3>
    119a:	20 e0       	ldi	r18, 0x00	; 0
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	44 e0       	ldi	r20, 0x04	; 4
    11a0:	52 e4       	ldi	r21, 0x42	; 66
    11a2:	0e 94 ba 13 	call	0x2774	; 0x2774 <__addsf3>
    11a6:	0e 94 11 12 	call	0x2422	; 0x2422 <__fixunssfsi>
    11aa:	86 2f       	mov	r24, r22
    11ac:	47 ce       	rjmp	.-882    	; 0xe3c <estimate_distance+0x58>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
    11ae:	a5 e0       	ldi	r26, 0x05	; 5
    11b0:	3a 2e       	mov	r3, r26
    11b2:	e5 e0       	ldi	r30, 0x05	; 5
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
    11b6:	ee 0f       	add	r30, r30
    11b8:	ff 1f       	adc	r31, r31
    11ba:	e0 57       	subi	r30, 0x70	; 112
    11bc:	fd 4f       	sbci	r31, 0xFD	; 253
    11be:	80 81       	ld	r24, Z
    11c0:	91 81       	ldd	r25, Z+1	; 0x01
    11c2:	b7 01       	movw	r22, r14
    11c4:	68 1b       	sub	r22, r24
    11c6:	79 0b       	sbc	r23, r25
    11c8:	80 e0       	ldi	r24, 0x00	; 0
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <__floatunsisf>
    11d0:	9b 01       	movw	r18, r22
    11d2:	ac 01       	movw	r20, r24
    11d4:	0e 94 ba 13 	call	0x2774	; 0x2774 <__addsf3>
    11d8:	3b 01       	movw	r6, r22
    11da:	4c 01       	movw	r8, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
    11dc:	b8 01       	movw	r22, r16
    11de:	88 27       	eor	r24, r24
    11e0:	77 fd       	sbrc	r23, 7
    11e2:	80 95       	com	r24
    11e4:	98 2f       	mov	r25, r24
    11e6:	0e 94 ed 15 	call	0x2bda	; 0x2bda <__floatsisf>
    11ea:	5b 01       	movw	r10, r22
    11ec:	6c 01       	movw	r12, r24
    11ee:	b7 01       	movw	r22, r14
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <__floatunsisf>
    11f8:	7b 01       	movw	r14, r22
    11fa:	8c 01       	movw	r16, r24
    11fc:	63 2d       	mov	r22, r3
    11fe:	70 e0       	ldi	r23, 0x00	; 0
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <__floatunsisf>
    1208:	20 e0       	ldi	r18, 0x00	; 0
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	40 e0       	ldi	r20, 0x00	; 0
    120e:	5f e3       	ldi	r21, 0x3F	; 63
    1210:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__mulsf3>
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	40 e0       	ldi	r20, 0x00	; 0
    121a:	50 e0       	ldi	r21, 0x00	; 0
    121c:	0e 94 ba 13 	call	0x2774	; 0x2774 <__addsf3>
    1220:	a4 01       	movw	r20, r8
    1222:	93 01       	movw	r18, r6
    1224:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__mulsf3>
    1228:	9b 01       	movw	r18, r22
    122a:	ac 01       	movw	r20, r24
    122c:	c8 01       	movw	r24, r16
    122e:	b7 01       	movw	r22, r14
    1230:	0e 94 89 13 	call	0x2712	; 0x2712 <__subsf3>
    1234:	9b 01       	movw	r18, r22
    1236:	ac 01       	movw	r20, r24
    1238:	c6 01       	movw	r24, r12
    123a:	b5 01       	movw	r22, r10
    123c:	0e 94 89 13 	call	0x2712	; 0x2712 <__subsf3>
                b=((int)((int)b/(int)slope));
    1240:	20 e0       	ldi	r18, 0x00	; 0
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	40 e2       	ldi	r20, 0x20	; 32
    1246:	51 e4       	ldi	r21, 0x41	; 65
    1248:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__mulsf3>
    124c:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__fixsfsi>
    1250:	7b 01       	movw	r14, r22
    1252:	8c 01       	movw	r16, r24
    1254:	c4 01       	movw	r24, r8
    1256:	b3 01       	movw	r22, r6
    1258:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__fixsfsi>
    125c:	9b 01       	movw	r18, r22
    125e:	ac 01       	movw	r20, r24
    1260:	c7 01       	movw	r24, r14
    1262:	b9 01       	movw	r22, r18
    1264:	0e 94 2c 19 	call	0x3258	; 0x3258 <__divmodhi4>
                dist_low=b;
    1268:	88 27       	eor	r24, r24
    126a:	77 fd       	sbrc	r23, 7
    126c:	80 95       	com	r24
    126e:	98 2f       	mov	r25, r24
    1270:	0e 94 ed 15 	call	0x2bda	; 0x2bda <__floatsisf>
    1274:	0e 94 11 12 	call	0x2422	; 0x2422 <__fixunssfsi>
    1278:	36 2e       	mov	r3, r22
            }
        }
    }

    if (dist_low != 255) {
    127a:	ff ef       	ldi	r31, 0xFF	; 255
    127c:	6f 17       	cp	r22, r31
    127e:	09 f0       	breq	.+2      	; 0x1282 <estimate_distance+0x49e>
    1280:	44 cf       	rjmp	.-376    	; 0x110a <estimate_distance+0x326>
    1282:	da cd       	rjmp	.-1100   	; 0xe38 <estimate_distance+0x54>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
    1284:	85 e0       	ldi	r24, 0x05	; 5
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	65 e0       	ldi	r22, 0x05	; 5
    128a:	8c 01       	movw	r16, r24
    128c:	01 50       	subi	r16, 0x01	; 1
    128e:	10 40       	sbci	r17, 0x00	; 0
    1290:	70 e0       	ldi	r23, 0x00	; 0
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <__floatunsisf>
    129a:	20 e0       	ldi	r18, 0x00	; 0
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	40 e0       	ldi	r20, 0x00	; 0
    12a0:	5f e3       	ldi	r21, 0x3F	; 63
    12a2:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__mulsf3>
    12a6:	20 e0       	ldi	r18, 0x00	; 0
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	40 e0       	ldi	r20, 0x00	; 0
    12ac:	50 e0       	ldi	r21, 0x00	; 0
    12ae:	0e 94 ba 13 	call	0x2774	; 0x2774 <__addsf3>
    12b2:	69 83       	std	Y+1, r22	; 0x01
    12b4:	7a 83       	std	Y+2, r23	; 0x02
    12b6:	8b 83       	std	Y+3, r24	; 0x03
    12b8:	9c 83       	std	Y+4, r25	; 0x04
    12ba:	ce ce       	rjmp	.-612    	; 0x1058 <estimate_distance+0x274>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
    12bc:	33 24       	eor	r3, r3
    12be:	33 94       	inc	r3
    12c0:	e1 e0       	ldi	r30, 0x01	; 1
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	78 cf       	rjmp	.-272    	; 0x11b6 <estimate_distance+0x3d2>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	61 e0       	ldi	r22, 0x01	; 1
    12cc:	de cf       	rjmp	.-68     	; 0x128a <estimate_distance+0x4a6>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
    12ce:	92 e0       	ldi	r25, 0x02	; 2
    12d0:	39 2e       	mov	r3, r25
    12d2:	e2 e0       	ldi	r30, 0x02	; 2
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	6f cf       	rjmp	.-290    	; 0x11b6 <estimate_distance+0x3d2>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
    12d8:	82 e0       	ldi	r24, 0x02	; 2
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	62 e0       	ldi	r22, 0x02	; 2
    12de:	d5 cf       	rjmp	.-86     	; 0x128a <estimate_distance+0x4a6>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
    12e0:	83 e0       	ldi	r24, 0x03	; 3
    12e2:	38 2e       	mov	r3, r24
    12e4:	e3 e0       	ldi	r30, 0x03	; 3
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	66 cf       	rjmp	.-308    	; 0x11b6 <estimate_distance+0x3d2>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
    12ea:	83 e0       	ldi	r24, 0x03	; 3
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	63 e0       	ldi	r22, 0x03	; 3
    12f0:	cc cf       	rjmp	.-104    	; 0x128a <estimate_distance+0x4a6>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
    12f2:	b4 e0       	ldi	r27, 0x04	; 4
    12f4:	3b 2e       	mov	r3, r27
    12f6:	e4 e0       	ldi	r30, 0x04	; 4
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	5d cf       	rjmp	.-326    	; 0x11b6 <estimate_distance+0x3d2>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
    12fc:	84 e0       	ldi	r24, 0x04	; 4
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	64 e0       	ldi	r22, 0x04	; 4
    1302:	c3 cf       	rjmp	.-122    	; 0x128a <estimate_distance+0x4a6>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
    1304:	f6 e0       	ldi	r31, 0x06	; 6
    1306:	3f 2e       	mov	r3, r31
    1308:	e6 e0       	ldi	r30, 0x06	; 6
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	54 cf       	rjmp	.-344    	; 0x11b6 <estimate_distance+0x3d2>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
    130e:	86 e0       	ldi	r24, 0x06	; 6
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	66 e0       	ldi	r22, 0x06	; 6
    1314:	ba cf       	rjmp	.-140    	; 0x128a <estimate_distance+0x4a6>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
    1316:	e7 e0       	ldi	r30, 0x07	; 7
    1318:	3e 2e       	mov	r3, r30
    131a:	e7 e0       	ldi	r30, 0x07	; 7
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	4b cf       	rjmp	.-362    	; 0x11b6 <estimate_distance+0x3d2>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
    1320:	87 e0       	ldi	r24, 0x07	; 7
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	67 e0       	ldi	r22, 0x07	; 7
    1326:	b1 cf       	rjmp	.-158    	; 0x128a <estimate_distance+0x4a6>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
    1328:	78 e0       	ldi	r23, 0x08	; 8
    132a:	37 2e       	mov	r3, r23
    132c:	e8 e0       	ldi	r30, 0x08	; 8
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	42 cf       	rjmp	.-380    	; 0x11b6 <estimate_distance+0x3d2>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
    1332:	88 e0       	ldi	r24, 0x08	; 8
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	68 e0       	ldi	r22, 0x08	; 8
    1338:	a8 cf       	rjmp	.-176    	; 0x128a <estimate_distance+0x4a6>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
    133a:	69 e0       	ldi	r22, 0x09	; 9
    133c:	36 2e       	mov	r3, r22
    133e:	e9 e0       	ldi	r30, 0x09	; 9
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	39 cf       	rjmp	.-398    	; 0x11b6 <estimate_distance+0x3d2>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
    1344:	89 e0       	ldi	r24, 0x09	; 9
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	69 e0       	ldi	r22, 0x09	; 9
    134a:	9f cf       	rjmp	.-194    	; 0x128a <estimate_distance+0x4a6>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
    134c:	5a e0       	ldi	r21, 0x0A	; 10
    134e:	35 2e       	mov	r3, r21
    1350:	ea e0       	ldi	r30, 0x0A	; 10
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	30 cf       	rjmp	.-416    	; 0x11b6 <estimate_distance+0x3d2>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
    1356:	8a e0       	ldi	r24, 0x0A	; 10
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	6a e0       	ldi	r22, 0x0A	; 10
    135c:	96 cf       	rjmp	.-212    	; 0x128a <estimate_distance+0x4a6>
    135e:	8b e0       	ldi	r24, 0x0B	; 11
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	6b e0       	ldi	r22, 0x0B	; 11
    1364:	92 cf       	rjmp	.-220    	; 0x128a <estimate_distance+0x4a6>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
    1366:	4b e0       	ldi	r20, 0x0B	; 11
    1368:	34 2e       	mov	r3, r20
    136a:	eb e0       	ldi	r30, 0x0B	; 11
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	23 cf       	rjmp	.-442    	; 0x11b6 <estimate_distance+0x3d2>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
    1370:	8c e0       	ldi	r24, 0x0C	; 12
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	6c e0       	ldi	r22, 0x0C	; 12
    1376:	89 cf       	rjmp	.-238    	; 0x128a <estimate_distance+0x4a6>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
    1378:	3c e0       	ldi	r19, 0x0C	; 12
    137a:	33 2e       	mov	r3, r19
    137c:	ec e0       	ldi	r30, 0x0C	; 12
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	1a cf       	rjmp	.-460    	; 0x11b6 <estimate_distance+0x3d2>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
    1382:	8d e0       	ldi	r24, 0x0D	; 13
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	6d e0       	ldi	r22, 0x0D	; 13
    1388:	80 cf       	rjmp	.-256    	; 0x128a <estimate_distance+0x4a6>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
    138a:	2d e0       	ldi	r18, 0x0D	; 13
    138c:	32 2e       	mov	r3, r18
    138e:	ed e0       	ldi	r30, 0x0D	; 13
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	11 cf       	rjmp	.-478    	; 0x11b6 <estimate_distance+0x3d2>

00001394 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
    1394:	80 ff       	sbrs	r24, 0
    1396:	11 c0       	rjmp	.+34     	; 0x13ba <set_color+0x26>
        DDRD |= (1<<5);
    1398:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
    139a:	81 ff       	sbrs	r24, 1
    139c:	11 c0       	rjmp	.+34     	; 0x13c0 <set_color+0x2c>
        DDRD |= (1<<4);
    139e:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
    13a0:	82 ff       	sbrs	r24, 2
    13a2:	11 c0       	rjmp	.+34     	; 0x13c6 <set_color+0x32>
        DDRC |= (1<<3);
    13a4:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
    13a6:	83 ff       	sbrs	r24, 3
    13a8:	11 c0       	rjmp	.+34     	; 0x13cc <set_color+0x38>
        DDRC |= (1<<2);
    13aa:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
    13ac:	84 ff       	sbrs	r24, 4
    13ae:	11 c0       	rjmp	.+34     	; 0x13d2 <set_color+0x3e>
        DDRC |= (1<<5);
    13b0:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
    13b2:	85 fd       	sbrc	r24, 5
    13b4:	11 c0       	rjmp	.+34     	; 0x13d8 <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    13b6:	3c 98       	cbi	0x07, 4	; 7
    13b8:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    13ba:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
    13bc:	81 fd       	sbrc	r24, 1
    13be:	ef cf       	rjmp	.-34     	; 0x139e <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    13c0:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
    13c2:	82 fd       	sbrc	r24, 2
    13c4:	ef cf       	rjmp	.-34     	; 0x13a4 <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    13c6:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
    13c8:	83 fd       	sbrc	r24, 3
    13ca:	ef cf       	rjmp	.-34     	; 0x13aa <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    13cc:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
    13ce:	84 fd       	sbrc	r24, 4
    13d0:	ef cf       	rjmp	.-34     	; 0x13b0 <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    13d2:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
    13d4:	85 ff       	sbrs	r24, 5
    13d6:	ef cf       	rjmp	.-34     	; 0x13b6 <set_color+0x22>
        DDRC |= (1<<4);
    13d8:	3c 9a       	sbi	0x07, 4	; 7
    13da:	08 95       	ret

000013dc <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
    13dc:	1f 92       	push	r1
    13de:	0f 92       	push	r0
    13e0:	0f b6       	in	r0, 0x3f	; 63
    13e2:	0f 92       	push	r0
    13e4:	11 24       	eor	r1, r1
    13e6:	8f 93       	push	r24
    13e8:	9f 93       	push	r25
    rx_timer_off();
    13ea:	10 92 81 00 	sts	0x0081, r1
    13ee:	10 92 85 00 	sts	0x0085, r1
    13f2:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
    13f6:	91 e0       	ldi	r25, 0x01	; 1
    13f8:	90 93 6a 02 	sts	0x026A, r25
    rx_leadingbyte = 1;
    13fc:	90 93 ae 02 	sts	0x02AE, r25
    rx_busy = 0;
    1400:	10 92 91 02 	sts	0x0291, r1
    adc_trigger_high_gain();
    1404:	10 92 7c 00 	sts	0x007C, r1
    1408:	83 ea       	ldi	r24, 0xA3	; 163
    140a:	80 93 7a 00 	sts	0x007A, r24
    140e:	90 93 7b 00 	sts	0x007B, r25
}
    1412:	9f 91       	pop	r25
    1414:	8f 91       	pop	r24
    1416:	0f 90       	pop	r0
    1418:	0f be       	out	0x3f, r0	; 63
    141a:	0f 90       	pop	r0
    141c:	1f 90       	pop	r1
    141e:	18 95       	reti

00001420 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
    1420:	1f 92       	push	r1
    1422:	0f 92       	push	r0
    1424:	0f b6       	in	r0, 0x3f	; 63
    1426:	0f 92       	push	r0
    1428:	11 24       	eor	r1, r1
    142a:	0f 93       	push	r16
    142c:	1f 93       	push	r17
    142e:	2f 93       	push	r18
    1430:	3f 93       	push	r19
    1432:	4f 93       	push	r20
    1434:	5f 93       	push	r21
    1436:	6f 93       	push	r22
    1438:	7f 93       	push	r23
    143a:	8f 93       	push	r24
    143c:	9f 93       	push	r25
    143e:	af 93       	push	r26
    1440:	bf 93       	push	r27
    1442:	ef 93       	push	r30
    1444:	ff 93       	push	r31
    uint16_t timer = TCNT1;
    1446:	60 91 84 00 	lds	r22, 0x0084
    144a:	70 91 85 00 	lds	r23, 0x0085

    rx_busy = 1;
    144e:	01 e0       	ldi	r16, 0x01	; 1
    1450:	00 93 91 02 	sts	0x0291, r16
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
    1454:	80 91 6a 02 	lds	r24, 0x026A
    1458:	88 23       	and	r24, r24
    145a:	a9 f1       	breq	.+106    	; 0x14c6 <__vector_23+0xa6>
        rx_timer_on();
    145c:	10 92 85 00 	sts	0x0085, r1
    1460:	10 92 84 00 	sts	0x0084, r1
    1464:	00 93 81 00 	sts	0x0081, r16
        rx_bytevalue = 0;
    1468:	10 92 c2 02 	sts	0x02C2, r1
        rx_leadingbit = 0;
    146c:	10 92 6a 02 	sts	0x026A, r1
        if (rx_leadingbyte) {
    1470:	80 91 ae 02 	lds	r24, 0x02AE
    1474:	88 23       	and	r24, r24
    1476:	a1 f0       	breq	.+40     	; 0x14a0 <__vector_23+0x80>
            adc_finish_conversion();
    1478:	80 91 7a 00 	lds	r24, 0x007A
    147c:	86 fd       	sbrc	r24, 6
    147e:	fc cf       	rjmp	.-8      	; 0x1478 <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
    1480:	80 91 78 00 	lds	r24, 0x0078
    1484:	90 91 79 00 	lds	r25, 0x0079
    1488:	90 93 8c 02 	sts	0x028C, r25
    148c:	80 93 8b 02 	sts	0x028B, r24
            adc_trigger_low_gain();
    1490:	91 e0       	ldi	r25, 0x01	; 1
    1492:	90 93 7c 00 	sts	0x007C, r25
    1496:	83 ea       	ldi	r24, 0xA3	; 163
    1498:	80 93 7a 00 	sts	0x007A, r24
    149c:	90 93 7b 00 	sts	0x007B, r25
                    }
                }
            }
        }
    }
}
    14a0:	ff 91       	pop	r31
    14a2:	ef 91       	pop	r30
    14a4:	bf 91       	pop	r27
    14a6:	af 91       	pop	r26
    14a8:	9f 91       	pop	r25
    14aa:	8f 91       	pop	r24
    14ac:	7f 91       	pop	r23
    14ae:	6f 91       	pop	r22
    14b0:	5f 91       	pop	r21
    14b2:	4f 91       	pop	r20
    14b4:	3f 91       	pop	r19
    14b6:	2f 91       	pop	r18
    14b8:	1f 91       	pop	r17
    14ba:	0f 91       	pop	r16
    14bc:	0f 90       	pop	r0
    14be:	0f be       	out	0x3f, r0	; 63
    14c0:	0f 90       	pop	r0
    14c2:	1f 90       	pop	r1
    14c4:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    14c6:	cb 01       	movw	r24, r22
    14c8:	87 58       	subi	r24, 0x87	; 135
    14ca:	90 40       	sbci	r25, 0x00	; 0
    14cc:	84 57       	subi	r24, 0x74	; 116
    14ce:	99 40       	sbci	r25, 0x09	; 9
    14d0:	08 f0       	brcs	.+2      	; 0x14d4 <__vector_23+0xb4>
    14d2:	66 c0       	rjmp	.+204    	; 0x15a0 <__vector_23+0x180>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    14d4:	66 58       	subi	r22, 0x86	; 134
    14d6:	70 40       	sbci	r23, 0x00	; 0
    14d8:	80 e0       	ldi	r24, 0x00	; 0
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	24 ef       	ldi	r18, 0xF4	; 244
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	40 e0       	ldi	r20, 0x00	; 0
    14e2:	50 e0       	ldi	r21, 0x00	; 0
    14e4:	0e 94 0d 19 	call	0x321a	; 0x321a <__mulsi3>
    14e8:	bc 01       	movw	r22, r24
    14ea:	88 27       	eor	r24, r24
    14ec:	99 27       	eor	r25, r25
            if (bitindex <= 7) { // Data bit received.
    14ee:	68 30       	cpi	r22, 0x08	; 8
    14f0:	08 f4       	brcc	.+2      	; 0x14f4 <__vector_23+0xd4>
    14f2:	8d c0       	rjmp	.+282    	; 0x160e <__vector_23+0x1ee>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    14f4:	00 93 6a 02 	sts	0x026A, r16
                if (rx_leadingbyte) {
    14f8:	80 91 ae 02 	lds	r24, 0x02AE
    14fc:	88 23       	and	r24, r24
    14fe:	09 f0       	breq	.+2      	; 0x1502 <__vector_23+0xe2>
    1500:	63 c0       	rjmp	.+198    	; 0x15c8 <__vector_23+0x1a8>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    1502:	80 91 88 02 	lds	r24, 0x0288
    1506:	e0 91 20 01 	lds	r30, 0x0120
    150a:	f0 91 21 01 	lds	r31, 0x0121
    150e:	e8 0f       	add	r30, r24
    1510:	f1 1d       	adc	r31, r1
    1512:	80 91 c2 02 	lds	r24, 0x02C2
    1516:	80 83       	st	Z, r24
                    rx_byteindex++;
    1518:	80 91 88 02 	lds	r24, 0x0288
    151c:	8f 5f       	subi	r24, 0xFF	; 255
    151e:	80 93 88 02 	sts	0x0288, r24
                    if (rx_byteindex == sizeof(message_t)) {
    1522:	8c 30       	cpi	r24, 0x0C	; 12
    1524:	09 f0       	breq	.+2      	; 0x1528 <__vector_23+0x108>
    1526:	bc cf       	rjmp	.-136    	; 0x14a0 <__vector_23+0x80>
                        rx_timer_off();
    1528:	10 92 81 00 	sts	0x0081, r1
    152c:	10 92 85 00 	sts	0x0085, r1
    1530:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1534:	00 93 ae 02 	sts	0x02AE, r16
                        rx_busy = 0;
    1538:	10 92 91 02 	sts	0x0291, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    153c:	00 91 be 02 	lds	r16, 0x02BE
    1540:	10 91 bf 02 	lds	r17, 0x02BF
    1544:	84 eb       	ldi	r24, 0xB4	; 180
    1546:	92 e0       	ldi	r25, 0x02	; 2
    1548:	0e 94 d5 10 	call	0x21aa	; 0x21aa <message_crc>
    154c:	08 17       	cp	r16, r24
    154e:	19 07       	cpc	r17, r25
    1550:	09 f0       	breq	.+2      	; 0x1554 <__vector_23+0x134>
    1552:	a6 cf       	rjmp	.-180    	; 0x14a0 <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    1554:	90 91 bd 02 	lds	r25, 0x02BD
    1558:	97 ff       	sbrs	r25, 7
    155a:	6b c0       	rjmp	.+214    	; 0x1632 <__vector_23+0x212>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    155c:	89 2f       	mov	r24, r25
    155e:	88 58       	subi	r24, 0x88	; 136
    1560:	83 30       	cpi	r24, 0x03	; 3
    1562:	30 f0       	brcs	.+12     	; 0x1570 <__vector_23+0x150>
        motors_off();
    1564:	53 98       	cbi	0x0a, 3	; 10
    1566:	23 98       	cbi	0x04, 3	; 4
    1568:	10 92 b4 00 	sts	0x00B4, r1
    156c:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    1570:	96 38       	cpi	r25, 0x86	; 134
    1572:	09 f4       	brne	.+2      	; 0x1576 <__vector_23+0x156>
    1574:	d2 c0       	rjmp	.+420    	; 0x171a <__vector_23+0x2fa>
    1576:	97 38       	cpi	r25, 0x87	; 135
    1578:	08 f0       	brcs	.+2      	; 0x157c <__vector_23+0x15c>
    157a:	65 c0       	rjmp	.+202    	; 0x1646 <__vector_23+0x226>
    157c:	93 38       	cpi	r25, 0x83	; 131
    157e:	09 f4       	brne	.+2      	; 0x1582 <__vector_23+0x162>
    1580:	d0 c0       	rjmp	.+416    	; 0x1722 <__vector_23+0x302>
    1582:	94 38       	cpi	r25, 0x84	; 132
    1584:	08 f0       	brcs	.+2      	; 0x1588 <__vector_23+0x168>
    1586:	68 c0       	rjmp	.+208    	; 0x1658 <__vector_23+0x238>
    1588:	90 38       	cpi	r25, 0x80	; 128
    158a:	09 f0       	breq	.+2      	; 0x158e <__vector_23+0x16e>
    158c:	89 cf       	rjmp	.-238    	; 0x14a0 <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
    158e:	80 91 6e 00 	lds	r24, 0x006E
    1592:	8d 7f       	andi	r24, 0xFD	; 253
    1594:	80 93 6e 00 	sts	0x006E, r24
    1598:	16 bc       	out	0x26, r1	; 38
            bootload();
    159a:	e0 e0       	ldi	r30, 0x00	; 0
    159c:	f0 e7       	ldi	r31, 0x70	; 112
    159e:	09 95       	icall
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    15a0:	10 92 81 00 	sts	0x0081, r1
    15a4:	10 92 85 00 	sts	0x0085, r1
    15a8:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    15ac:	00 93 6a 02 	sts	0x026A, r16
            rx_leadingbyte = 1;
    15b0:	00 93 ae 02 	sts	0x02AE, r16
            rx_busy = 0;
    15b4:	10 92 91 02 	sts	0x0291, r1
            adc_trigger_high_gain();
    15b8:	10 92 7c 00 	sts	0x007C, r1
    15bc:	83 ea       	ldi	r24, 0xA3	; 163
    15be:	80 93 7a 00 	sts	0x007A, r24
    15c2:	00 93 7b 00 	sts	0x007B, r16
    15c6:	6c cf       	rjmp	.-296    	; 0x14a0 <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    15c8:	80 91 7a 00 	lds	r24, 0x007A
    15cc:	86 fd       	sbrc	r24, 6
    15ce:	fc cf       	rjmp	.-8      	; 0x15c8 <__vector_23+0x1a8>
                    rx_dist.low_gain = ADCW;
    15d0:	80 91 78 00 	lds	r24, 0x0078
    15d4:	90 91 79 00 	lds	r25, 0x0079
    15d8:	90 93 8a 02 	sts	0x028A, r25
    15dc:	80 93 89 02 	sts	0x0289, r24
                    adc_trigger_high_gain();
    15e0:	10 92 7c 00 	sts	0x007C, r1
    15e4:	83 ea       	ldi	r24, 0xA3	; 163
    15e6:	80 93 7a 00 	sts	0x007A, r24
    15ea:	91 e0       	ldi	r25, 0x01	; 1
    15ec:	90 93 7b 00 	sts	0x007B, r25
                    if (rx_bytevalue != 0) { // Collision detected.
    15f0:	80 91 c2 02 	lds	r24, 0x02C2
    15f4:	88 23       	and	r24, r24
    15f6:	c1 f0       	breq	.+48     	; 0x1628 <__vector_23+0x208>
                        rx_timer_off();
    15f8:	10 92 81 00 	sts	0x0081, r1
    15fc:	10 92 85 00 	sts	0x0085, r1
    1600:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1604:	90 93 ae 02 	sts	0x02AE, r25
                        rx_busy = 0;
    1608:	10 92 91 02 	sts	0x0291, r1
    160c:	49 cf       	rjmp	.-366    	; 0x14a0 <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <__vector_23+0x1f8>
    1614:	88 0f       	add	r24, r24
    1616:	99 1f       	adc	r25, r25
    1618:	6a 95       	dec	r22
    161a:	e2 f7       	brpl	.-8      	; 0x1614 <__vector_23+0x1f4>
    161c:	20 91 c2 02 	lds	r18, 0x02C2
    1620:	28 2b       	or	r18, r24
    1622:	20 93 c2 02 	sts	0x02C2, r18
    1626:	3c cf       	rjmp	.-392    	; 0x14a0 <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    1628:	10 92 ae 02 	sts	0x02AE, r1
                        rx_byteindex = 0;
    162c:	10 92 88 02 	sts	0x0288, r1
    1630:	37 cf       	rjmp	.-402    	; 0x14a0 <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    1632:	e0 91 1a 01 	lds	r30, 0x011A
    1636:	f0 91 1b 01 	lds	r31, 0x011B
    163a:	84 eb       	ldi	r24, 0xB4	; 180
    163c:	92 e0       	ldi	r25, 0x02	; 2
    163e:	69 e8       	ldi	r22, 0x89	; 137
    1640:	72 e0       	ldi	r23, 0x02	; 2
    1642:	09 95       	icall
    1644:	2d cf       	rjmp	.-422    	; 0x14a0 <__vector_23+0x80>
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
    1646:	98 38       	cpi	r25, 0x88	; 136
    1648:	09 f4       	brne	.+2      	; 0x164c <__vector_23+0x22c>
    164a:	6e c0       	rjmp	.+220    	; 0x1728 <__vector_23+0x308>
    164c:	98 38       	cpi	r25, 0x88	; 136
    164e:	70 f4       	brcc	.+28     	; 0x166c <__vector_23+0x24c>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    1650:	82 e0       	ldi	r24, 0x02	; 2
    1652:	80 93 4d 02 	sts	0x024D, r24
    1656:	24 cf       	rjmp	.-440    	; 0x14a0 <__vector_23+0x80>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
    1658:	94 38       	cpi	r25, 0x84	; 132
    165a:	09 f4       	brne	.+2      	; 0x165e <__vector_23+0x23e>
    165c:	79 c0       	rjmp	.+242    	; 0x1750 <__vector_23+0x330>
    165e:	95 38       	cpi	r25, 0x85	; 133
    1660:	09 f0       	breq	.+2      	; 0x1664 <__vector_23+0x244>
    1662:	1e cf       	rjmp	.-452    	; 0x14a0 <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	80 93 4d 02 	sts	0x024D, r24
    166a:	1a cf       	rjmp	.-460    	; 0x14a0 <__vector_23+0x80>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
    166c:	99 38       	cpi	r25, 0x89	; 137
    166e:	09 f4       	brne	.+2      	; 0x1672 <__vector_23+0x252>
    1670:	98 c0       	rjmp	.+304    	; 0x17a2 <__vector_23+0x382>
    1672:	9a 38       	cpi	r25, 0x8A	; 138
    1674:	09 f0       	breq	.+2      	; 0x1678 <__vector_23+0x258>
    1676:	14 cf       	rjmp	.-472    	; 0x14a0 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1678:	80 91 b4 02 	lds	r24, 0x02B4
    167c:	82 30       	cpi	r24, 0x02	; 2
    167e:	09 f4       	brne	.+2      	; 0x1682 <__vector_23+0x262>
    1680:	be c0       	rjmp	.+380    	; 0x17fe <__vector_23+0x3de>
    1682:	83 30       	cpi	r24, 0x03	; 3
    1684:	08 f0       	brcs	.+2      	; 0x1688 <__vector_23+0x268>
    1686:	74 c0       	rjmp	.+232    	; 0x1770 <__vector_23+0x350>
    1688:	88 23       	and	r24, r24
    168a:	09 f0       	breq	.+2      	; 0x168e <__vector_23+0x26e>
    168c:	64 c0       	rjmp	.+200    	; 0x1756 <__vector_23+0x336>
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    168e:	80 91 4d 02 	lds	r24, 0x024D
    1692:	86 30       	cpi	r24, 0x06	; 6
    1694:	09 f0       	breq	.+2      	; 0x1698 <__vector_23+0x278>
    1696:	04 cf       	rjmp	.-504    	; 0x14a0 <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    1698:	80 eb       	ldi	r24, 0xB0	; 176
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	60 91 c3 02 	lds	r22, 0x02C3
    16a0:	0e 94 92 19 	call	0x3324	; 0x3324 <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    16a4:	60 91 c4 02 	lds	r22, 0x02C4
    16a8:	81 eb       	ldi	r24, 0xB1	; 177
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	0e 94 92 19 	call	0x3324	; 0x3324 <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    16b0:	85 e0       	ldi	r24, 0x05	; 5
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	60 91 c7 02 	lds	r22, 0x02C7
    16b8:	0e 94 92 19 	call	0x3324	; 0x3324 <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    16bc:	89 e0       	ldi	r24, 0x09	; 9
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	60 91 b3 02 	lds	r22, 0x02B3
    16c4:	0e 94 92 19 	call	0x3324	; 0x3324 <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    16c8:	8c e0       	ldi	r24, 0x0C	; 12
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	60 91 c5 02 	lds	r22, 0x02C5
    16d0:	0e 94 92 19 	call	0x3324	; 0x3324 <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    16d4:	84 e1       	ldi	r24, 0x14	; 20
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	60 91 c6 02 	lds	r22, 0x02C6
    16dc:	0e 94 92 19 	call	0x3324	; 0x3324 <__eewr_byte_m328p>
                        motors_off();
    16e0:	53 98       	cbi	0x0a, 3	; 10
    16e2:	23 98       	cbi	0x04, 3	; 4
    16e4:	10 92 b4 00 	sts	0x00B4, r1
    16e8:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	80 93 4d 02 	sts	0x024D, r24
    16f2:	80 91 b4 02 	lds	r24, 0x02B4
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    16f6:	88 23       	and	r24, r24
    16f8:	09 f4       	brne	.+2      	; 0x16fc <__vector_23+0x2dc>
    16fa:	d2 ce       	rjmp	.-604    	; 0x14a0 <__vector_23+0x80>
    16fc:	80 91 4d 02 	lds	r24, 0x024D
    1700:	86 30       	cpi	r24, 0x06	; 6
    1702:	09 f4       	brne	.+2      	; 0x1706 <__vector_23+0x2e6>
    1704:	cd ce       	rjmp	.-614    	; 0x14a0 <__vector_23+0x80>
                motors_on();
    1706:	53 9a       	sbi	0x0a, 3	; 10
    1708:	23 9a       	sbi	0x04, 3	; 4
    170a:	10 92 b4 00 	sts	0x00B4, r1
    170e:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    1712:	86 e0       	ldi	r24, 0x06	; 6
    1714:	80 93 4d 02 	sts	0x024D, r24
    1718:	c3 ce       	rjmp	.-634    	; 0x14a0 <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    171a:	85 e0       	ldi	r24, 0x05	; 5
    171c:	80 93 4d 02 	sts	0x024D, r24
    1720:	bf ce       	rjmp	.-642    	; 0x14a0 <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    1722:	e0 e0       	ldi	r30, 0x00	; 0
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	09 95       	icall
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    1728:	80 91 4d 02 	lds	r24, 0x024D
    172c:	83 30       	cpi	r24, 0x03	; 3
    172e:	09 f4       	brne	.+2      	; 0x1732 <__vector_23+0x312>
    1730:	b7 ce       	rjmp	.-658    	; 0x14a0 <__vector_23+0x80>
    1732:	80 91 4d 02 	lds	r24, 0x024D
    1736:	84 30       	cpi	r24, 0x04	; 4
    1738:	09 f4       	brne	.+2      	; 0x173c <__vector_23+0x31c>
    173a:	b2 ce       	rjmp	.-668    	; 0x14a0 <__vector_23+0x80>
                motors_on();
    173c:	53 9a       	sbi	0x0a, 3	; 10
    173e:	23 9a       	sbi	0x04, 3	; 4
    1740:	10 92 b4 00 	sts	0x00B4, r1
    1744:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    1748:	83 e0       	ldi	r24, 0x03	; 3
    174a:	80 93 4d 02 	sts	0x024D, r24
    174e:	a8 ce       	rjmp	.-688    	; 0x14a0 <__vector_23+0x80>
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    1750:	10 92 4d 02 	sts	0x024D, r1
    1754:	a5 ce       	rjmp	.-694    	; 0x14a0 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1756:	81 30       	cpi	r24, 0x01	; 1
    1758:	71 f6       	brne	.-100    	; 0x16f6 <__vector_23+0x2d6>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    175a:	80 91 b5 02 	lds	r24, 0x02B5
    175e:	90 91 b6 02 	lds	r25, 0x02B6
    1762:	90 93 c4 02 	sts	0x02C4, r25
    1766:	80 93 c3 02 	sts	0x02C3, r24
                    cur_motion = MOVE_STOP;
    176a:	10 92 4a 02 	sts	0x024A, r1
    176e:	c6 cf       	rjmp	.-116    	; 0x16fc <__vector_23+0x2dc>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1770:	83 30       	cpi	r24, 0x03	; 3
    1772:	09 f4       	brne	.+2      	; 0x1776 <__vector_23+0x356>
    1774:	5b c0       	rjmp	.+182    	; 0x182c <__vector_23+0x40c>
    1776:	84 30       	cpi	r24, 0x04	; 4
    1778:	09 f0       	breq	.+2      	; 0x177c <__vector_23+0x35c>
    177a:	bd cf       	rjmp	.-134    	; 0x16f6 <__vector_23+0x2d6>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    177c:	80 91 4a 02 	lds	r24, 0x024A
    1780:	83 30       	cpi	r24, 0x03	; 3
    1782:	09 f4       	brne	.+2      	; 0x1786 <__vector_23+0x366>
    1784:	4a c0       	rjmp	.+148    	; 0x181a <__vector_23+0x3fa>
    1786:	20 91 ba 02 	lds	r18, 0x02BA
    178a:	90 91 b9 02 	lds	r25, 0x02B9
                        prev_motion = MOVE_STOP;
    178e:	10 92 4b 02 	sts	0x024B, r1
                        cur_motion = MOVE_STRAIGHT;
    1792:	83 e0       	ldi	r24, 0x03	; 3
    1794:	80 93 4a 02 	sts	0x024A, r24
                        kilo_straight_left = calibmsg->straight_left;
    1798:	90 93 c5 02 	sts	0x02C5, r25
                        kilo_straight_right = calibmsg->straight_right;
    179c:	20 93 c6 02 	sts	0x02C6, r18
    17a0:	ad cf       	rjmp	.-166    	; 0x16fc <__vector_23+0x2dc>
                motors_on();
                kilo_state = MOVING;
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    17a2:	80 91 4d 02 	lds	r24, 0x024D
    17a6:	86 30       	cpi	r24, 0x06	; 6
    17a8:	91 f0       	breq	.+36     	; 0x17ce <__vector_23+0x3ae>
                motors_on();
    17aa:	53 9a       	sbi	0x0a, 3	; 10
    17ac:	23 9a       	sbi	0x04, 3	; 4
    17ae:	10 92 b4 00 	sts	0x00B4, r1
    17b2:	10 92 b3 00 	sts	0x00B3, r1
                set_color(RGB(0,0,0));
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	0e 94 ca 09 	call	0x1394	; 0x1394 <set_color>
                prev_motion = cur_motion = MOVE_STOP;
    17bc:	10 92 4a 02 	sts	0x024A, r1
    17c0:	80 91 4a 02 	lds	r24, 0x024A
    17c4:	80 93 4b 02 	sts	0x024B, r24
                kilo_state = MOVING;
    17c8:	86 e0       	ldi	r24, 0x06	; 6
    17ca:	80 93 4d 02 	sts	0x024D, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	00 90 b4 02 	lds	r0, 0x02B4
    17d6:	02 c0       	rjmp	.+4      	; 0x17dc <__vector_23+0x3bc>
    17d8:	88 0f       	add	r24, r24
    17da:	99 1f       	adc	r25, r25
    17dc:	0a 94       	dec	r0
    17de:	e2 f7       	brpl	.-8      	; 0x17d8 <__vector_23+0x3b8>
    17e0:	20 91 c3 02 	lds	r18, 0x02C3
    17e4:	30 91 c4 02 	lds	r19, 0x02C4
    17e8:	82 23       	and	r24, r18
    17ea:	93 23       	and	r25, r19
    17ec:	89 2b       	or	r24, r25
    17ee:	19 f4       	brne	.+6      	; 0x17f6 <__vector_23+0x3d6>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    17f0:	10 92 4a 02 	sts	0x024A, r1
    17f4:	55 ce       	rjmp	.-854    	; 0x14a0 <__vector_23+0x80>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	80 93 4a 02 	sts	0x024A, r24
    17fc:	51 ce       	rjmp	.-862    	; 0x14a0 <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    17fe:	80 91 4a 02 	lds	r24, 0x024A
    1802:	81 30       	cpi	r24, 0x01	; 1
    1804:	09 f1       	breq	.+66     	; 0x1848 <__vector_23+0x428>
    1806:	90 91 b7 02 	lds	r25, 0x02B7
                        prev_motion = MOVE_STOP;
    180a:	10 92 4b 02 	sts	0x024B, r1
                        cur_motion = MOVE_LEFT;
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	80 93 4a 02 	sts	0x024A, r24
                        kilo_turn_left = calibmsg->turn_left;
    1814:	90 93 c7 02 	sts	0x02C7, r25
    1818:	71 cf       	rjmp	.-286    	; 0x16fc <__vector_23+0x2dc>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    181a:	20 91 ba 02 	lds	r18, 0x02BA
    181e:	80 91 c6 02 	lds	r24, 0x02C6
    1822:	28 17       	cp	r18, r24
    1824:	c1 f0       	breq	.+48     	; 0x1856 <__vector_23+0x436>
    1826:	90 91 b9 02 	lds	r25, 0x02B9
    182a:	b1 cf       	rjmp	.-158    	; 0x178e <__vector_23+0x36e>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    182c:	80 91 4a 02 	lds	r24, 0x024A
    1830:	82 30       	cpi	r24, 0x02	; 2
    1832:	c9 f0       	breq	.+50     	; 0x1866 <__vector_23+0x446>
    1834:	90 91 b8 02 	lds	r25, 0x02B8
                        prev_motion = MOVE_STOP;
    1838:	10 92 4b 02 	sts	0x024B, r1
                        cur_motion = MOVE_RIGHT;
    183c:	82 e0       	ldi	r24, 0x02	; 2
    183e:	80 93 4a 02 	sts	0x024A, r24
                        kilo_turn_right = calibmsg->turn_right;
    1842:	90 93 b3 02 	sts	0x02B3, r25
    1846:	5a cf       	rjmp	.-332    	; 0x16fc <__vector_23+0x2dc>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1848:	90 91 b7 02 	lds	r25, 0x02B7
    184c:	80 91 c7 02 	lds	r24, 0x02C7
    1850:	98 17       	cp	r25, r24
    1852:	d9 f6       	brne	.-74     	; 0x180a <__vector_23+0x3ea>
    1854:	53 cf       	rjmp	.-346    	; 0x16fc <__vector_23+0x2dc>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1856:	90 91 b9 02 	lds	r25, 0x02B9
    185a:	80 91 c5 02 	lds	r24, 0x02C5
    185e:	98 17       	cp	r25, r24
    1860:	09 f0       	breq	.+2      	; 0x1864 <__vector_23+0x444>
    1862:	95 cf       	rjmp	.-214    	; 0x178e <__vector_23+0x36e>
    1864:	4b cf       	rjmp	.-362    	; 0x16fc <__vector_23+0x2dc>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1866:	90 91 b8 02 	lds	r25, 0x02B8
    186a:	80 91 b3 02 	lds	r24, 0x02B3
    186e:	98 17       	cp	r25, r24
    1870:	19 f7       	brne	.-58     	; 0x1838 <__vector_23+0x418>
    1872:	44 cf       	rjmp	.-376    	; 0x16fc <__vector_23+0x2dc>

00001874 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
    1874:	1f 92       	push	r1
    1876:	0f 92       	push	r0
    1878:	0f b6       	in	r0, 0x3f	; 63
    187a:	0f 92       	push	r0
    187c:	11 24       	eor	r1, r1
    187e:	2f 93       	push	r18
    1880:	3f 93       	push	r19
    1882:	4f 93       	push	r20
    1884:	5f 93       	push	r21
    1886:	6f 93       	push	r22
    1888:	7f 93       	push	r23
    188a:	8f 93       	push	r24
    188c:	9f 93       	push	r25
    188e:	af 93       	push	r26
    1890:	bf 93       	push	r27
    1892:	ef 93       	push	r30
    1894:	ff 93       	push	r31
    tx_clock += tx_increment;
    1896:	20 91 af 02 	lds	r18, 0x02AF
    189a:	30 91 b0 02 	lds	r19, 0x02B0
    189e:	80 91 b1 02 	lds	r24, 0x02B1
    18a2:	90 91 b2 02 	lds	r25, 0x02B2
    18a6:	28 0f       	add	r18, r24
    18a8:	39 1f       	adc	r19, r25
    18aa:	30 93 b2 02 	sts	0x02B2, r19
    18ae:	20 93 b1 02 	sts	0x02B1, r18
    tx_increment = 0xFF;
    18b2:	8f ef       	ldi	r24, 0xFF	; 255
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	90 93 b0 02 	sts	0x02B0, r25
    18ba:	80 93 af 02 	sts	0x02AF, r24
    OCR0A = tx_increment;
    18be:	8f ef       	ldi	r24, 0xFF	; 255
    18c0:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
    18c2:	80 91 8d 02 	lds	r24, 0x028D
    18c6:	90 91 8e 02 	lds	r25, 0x028E
    18ca:	a0 91 8f 02 	lds	r26, 0x028F
    18ce:	b0 91 90 02 	lds	r27, 0x0290
    18d2:	01 96       	adiw	r24, 0x01	; 1
    18d4:	a1 1d       	adc	r26, r1
    18d6:	b1 1d       	adc	r27, r1
    18d8:	80 93 8d 02 	sts	0x028D, r24
    18dc:	90 93 8e 02 	sts	0x028E, r25
    18e0:	a0 93 8f 02 	sts	0x028F, r26
    18e4:	b0 93 90 02 	sts	0x0290, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
    18e8:	80 91 91 02 	lds	r24, 0x0291
    18ec:	88 23       	and	r24, r24
    18ee:	59 f4       	brne	.+22     	; 0x1906 <__vector_14+0x92>
    18f0:	80 91 c0 02 	lds	r24, 0x02C0
    18f4:	90 91 c1 02 	lds	r25, 0x02C1
    18f8:	82 17       	cp	r24, r18
    18fa:	93 07       	cpc	r25, r19
    18fc:	20 f4       	brcc	.+8      	; 0x1906 <__vector_14+0x92>
    18fe:	80 91 4d 02 	lds	r24, 0x024D
    1902:	84 30       	cpi	r24, 0x04	; 4
    1904:	89 f0       	breq	.+34     	; 0x1928 <__vector_14+0xb4>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
    1906:	ff 91       	pop	r31
    1908:	ef 91       	pop	r30
    190a:	bf 91       	pop	r27
    190c:	af 91       	pop	r26
    190e:	9f 91       	pop	r25
    1910:	8f 91       	pop	r24
    1912:	7f 91       	pop	r23
    1914:	6f 91       	pop	r22
    1916:	5f 91       	pop	r21
    1918:	4f 91       	pop	r20
    191a:	3f 91       	pop	r19
    191c:	2f 91       	pop	r18
    191e:	0f 90       	pop	r0
    1920:	0f be       	out	0x3f, r0	; 63
    1922:	0f 90       	pop	r0
    1924:	1f 90       	pop	r1
    1926:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
    1928:	e0 91 1c 01 	lds	r30, 0x011C
    192c:	f0 91 1d 01 	lds	r31, 0x011D
    1930:	09 95       	icall
        if (msg) {
    1932:	00 97       	sbiw	r24, 0x00	; 0
    1934:	41 f3       	breq	.-48     	; 0x1906 <__vector_14+0x92>
            if (message_send(msg)) {
    1936:	0e 94 8e 11 	call	0x231c	; 0x231c <message_send>
    193a:	88 23       	and	r24, r24
    193c:	49 f4       	brne	.+18     	; 0x1950 <__vector_14+0xdc>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
    193e:	0e 94 ee 02 	call	0x5dc	; 0x5dc <rand>
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	90 93 b0 02 	sts	0x02B0, r25
    1948:	80 93 af 02 	sts	0x02AF, r24
                OCR0A = tx_increment;
    194c:	87 bd       	out	0x27, r24	; 39
    194e:	db cf       	rjmp	.-74     	; 0x1906 <__vector_14+0x92>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
    1950:	e0 91 1e 01 	lds	r30, 0x011E
    1954:	f0 91 1f 01 	lds	r31, 0x011F
    1958:	09 95       	icall
                tx_clock = 0;
    195a:	10 92 b2 02 	sts	0x02B2, r1
    195e:	10 92 b1 02 	sts	0x02B1, r1
    1962:	d1 cf       	rjmp	.-94     	; 0x1906 <__vector_14+0x92>

00001964 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
    1964:	0f 93       	push	r16
    1966:	1f 93       	push	r17
    cli();
    1968:	f8 94       	cli

    ports_off();
    196a:	14 b8       	out	0x04, r1	; 4
    196c:	17 b8       	out	0x07, r1	; 7
    196e:	1a b8       	out	0x0a, r1	; 10
    1970:	15 b8       	out	0x05, r1	; 5
    1972:	18 b8       	out	0x08, r1	; 8
    1974:	1b b8       	out	0x0b, r1	; 11
    ports_on();
    1976:	52 9a       	sbi	0x0a, 2	; 10
    1978:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
    197a:	14 bc       	out	0x24, r1	; 36
    197c:	85 e0       	ldi	r24, 0x05	; 5
    197e:	85 bd       	out	0x25, r24	; 37
    1980:	8f ef       	ldi	r24, 0xFF	; 255
    1982:	87 bd       	out	0x27, r24	; 39
    1984:	22 e0       	ldi	r18, 0x02	; 2
    1986:	20 93 6e 00 	sts	0x006E, r18
    rx_timer_setup();
    198a:	10 92 80 00 	sts	0x0080, r1
    198e:	10 92 81 00 	sts	0x0081, r1
    1992:	8f e8       	ldi	r24, 0x8F	; 143
    1994:	9b e0       	ldi	r25, 0x0B	; 11
    1996:	90 93 89 00 	sts	0x0089, r25
    199a:	80 93 88 00 	sts	0x0088, r24
    199e:	20 93 6f 00 	sts	0x006F, r18
    motors_setup();
    19a2:	53 98       	cbi	0x0a, 3	; 10
    19a4:	23 98       	cbi	0x04, 3	; 4
    19a6:	81 ea       	ldi	r24, 0xA1	; 161
    19a8:	80 93 b0 00 	sts	0x00B0, r24
    19ac:	20 93 b1 00 	sts	0x00B1, r18
    19b0:	10 92 b4 00 	sts	0x00B4, r1
    19b4:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
    19b8:	8b e0       	ldi	r24, 0x0B	; 11
    19ba:	80 bf       	out	0x30, r24	; 48
    19bc:	83 e0       	ldi	r24, 0x03	; 3
    19be:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
    19c2:	86 e0       	ldi	r24, 0x06	; 6
    19c4:	80 93 7c 00 	sts	0x007C, r24
    19c8:	83 e8       	ldi	r24, 0x83	; 131
    19ca:	80 93 7a 00 	sts	0x007A, r24
    19ce:	80 91 7a 00 	lds	r24, 0x007A
    19d2:	80 64       	ori	r24, 0x40	; 64
    19d4:	80 93 7a 00 	sts	0x007A, r24
    19d8:	80 91 7a 00 	lds	r24, 0x007A
    19dc:	86 fd       	sbrc	r24, 6
    19de:	fc cf       	rjmp	.-8      	; 0x19d8 <kilo_init+0x74>
    adc_trigger_high_gain();
    19e0:	10 92 7c 00 	sts	0x007C, r1
    19e4:	83 ea       	ldi	r24, 0xA3	; 163
    19e6:	80 93 7a 00 	sts	0x007A, r24
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    if (osccal != 0xFF)
    19f8:	8f 3f       	cpi	r24, 0xFF	; 255
    19fa:	11 f0       	breq	.+4      	; 0x1a00 <kilo_init+0x9c>
        OSCCAL = osccal;
    19fc:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
    1a00:	10 92 91 02 	sts	0x0291, r1
    rx_leadingbit = 1;
    1a04:	11 e0       	ldi	r17, 0x01	; 1
    1a06:	10 93 6a 02 	sts	0x026A, r17
    rx_leadingbyte = 1;
    1a0a:	10 93 ae 02 	sts	0x02AE, r17
    rx_byteindex = 0;
    1a0e:	10 92 88 02 	sts	0x0288, r1
    rx_bytevalue = 0;
    1a12:	10 92 c2 02 	sts	0x02C2, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
    1a16:	80 e9       	ldi	r24, 0x90	; 144
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1a1e:	80 93 87 02 	sts	0x0287, r24
    if (tx_mask & ~TX_MASK_MAX)
    1a22:	80 91 87 02 	lds	r24, 0x0287
    1a26:	88 73       	andi	r24, 0x38	; 56
    1a28:	11 f0       	breq	.+4      	; 0x1a2e <kilo_init+0xca>
        tx_mask = TX_MASK_MIN;
    1a2a:	10 93 87 02 	sts	0x0287, r17
    tx_clock = 0;
    1a2e:	10 92 b2 02 	sts	0x02B2, r1
    1a32:	10 92 b1 02 	sts	0x02B1, r1
    tx_increment = 255;
    1a36:	8f ef       	ldi	r24, 0xFF	; 255
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	90 93 b0 02 	sts	0x02B0, r25
    1a3e:	80 93 af 02 	sts	0x02AF, r24
    kilo_ticks = 0;
    1a42:	10 92 8d 02 	sts	0x028D, r1
    1a46:	10 92 8e 02 	sts	0x028E, r1
    1a4a:	10 92 8f 02 	sts	0x028F, r1
    1a4e:	10 92 90 02 	sts	0x0290, r1
    kilo_state = IDLE;
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	80 93 4d 02 	sts	0x024D, r24
    kilo_tx_period = 3906;
    1a58:	82 e4       	ldi	r24, 0x42	; 66
    1a5a:	9f e0       	ldi	r25, 0x0F	; 15
    1a5c:	90 93 c1 02 	sts	0x02C1, r25
    1a60:	80 93 c0 02 	sts	0x02C0, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
    1a64:	80 eb       	ldi	r24, 0xB0	; 176
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1a6c:	08 2f       	mov	r16, r24
    1a6e:	81 eb       	ldi	r24, 0xB1	; 177
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1a76:	38 2f       	mov	r19, r24
    1a78:	20 e0       	ldi	r18, 0x00	; 0
    1a7a:	10 e0       	ldi	r17, 0x00	; 0
    1a7c:	20 2b       	or	r18, r16
    1a7e:	31 2b       	or	r19, r17
    1a80:	30 93 c4 02 	sts	0x02C4, r19
    1a84:	20 93 c3 02 	sts	0x02C3, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
    1a88:	85 e0       	ldi	r24, 0x05	; 5
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1a90:	80 93 c7 02 	sts	0x02C7, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    1a94:	89 e0       	ldi	r24, 0x09	; 9
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1a9c:	80 93 b3 02 	sts	0x02B3, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    1aa0:	8c e0       	ldi	r24, 0x0C	; 12
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1aa8:	80 93 c5 02 	sts	0x02C5, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
    1aac:	84 e1       	ldi	r24, 0x14	; 20
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1ab4:	80 93 c6 02 	sts	0x02C6, r24

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
    1ab8:	80 e2       	ldi	r24, 0x20	; 32
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1ac0:	18 2f       	mov	r17, r24
    1ac2:	81 e2       	ldi	r24, 0x21	; 33
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1aca:	31 2f       	mov	r19, r17
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	28 2b       	or	r18, r24
    1ad2:	39 2b       	or	r19, r25
    1ad4:	30 93 93 02 	sts	0x0293, r19
    1ad8:	20 93 92 02 	sts	0x0292, r18
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    1adc:	80 e5       	ldi	r24, 0x50	; 80
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1ae4:	18 2f       	mov	r17, r24
    1ae6:	81 e5       	ldi	r24, 0x51	; 81
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1aee:	31 2f       	mov	r19, r17
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	28 2b       	or	r18, r24
    1af6:	39 2b       	or	r19, r25
    1af8:	30 93 6c 02 	sts	0x026C, r19
    1afc:	20 93 6b 02 	sts	0x026B, r18
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
    1b00:	82 e2       	ldi	r24, 0x22	; 34
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1b08:	18 2f       	mov	r17, r24
    1b0a:	83 e2       	ldi	r24, 0x23	; 35
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1b12:	31 2f       	mov	r19, r17
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	28 2b       	or	r18, r24
    1b1a:	39 2b       	or	r19, r25
    1b1c:	30 93 95 02 	sts	0x0295, r19
    1b20:	20 93 94 02 	sts	0x0294, r18
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    1b24:	82 e5       	ldi	r24, 0x52	; 82
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1b2c:	18 2f       	mov	r17, r24
    1b2e:	83 e5       	ldi	r24, 0x53	; 83
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1b36:	31 2f       	mov	r19, r17
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	28 2b       	or	r18, r24
    1b3e:	39 2b       	or	r19, r25
    1b40:	30 93 6e 02 	sts	0x026E, r19
    1b44:	20 93 6d 02 	sts	0x026D, r18
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
    1b48:	84 e2       	ldi	r24, 0x24	; 36
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1b50:	18 2f       	mov	r17, r24
    1b52:	85 e2       	ldi	r24, 0x25	; 37
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1b5a:	31 2f       	mov	r19, r17
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	28 2b       	or	r18, r24
    1b62:	39 2b       	or	r19, r25
    1b64:	30 93 97 02 	sts	0x0297, r19
    1b68:	20 93 96 02 	sts	0x0296, r18
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    1b6c:	84 e5       	ldi	r24, 0x54	; 84
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1b74:	18 2f       	mov	r17, r24
    1b76:	85 e5       	ldi	r24, 0x55	; 85
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1b7e:	31 2f       	mov	r19, r17
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	28 2b       	or	r18, r24
    1b86:	39 2b       	or	r19, r25
    1b88:	30 93 70 02 	sts	0x0270, r19
    1b8c:	20 93 6f 02 	sts	0x026F, r18
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
    1b90:	86 e2       	ldi	r24, 0x26	; 38
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1b98:	18 2f       	mov	r17, r24
    1b9a:	87 e2       	ldi	r24, 0x27	; 39
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1ba2:	31 2f       	mov	r19, r17
    1ba4:	20 e0       	ldi	r18, 0x00	; 0
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	28 2b       	or	r18, r24
    1baa:	39 2b       	or	r19, r25
    1bac:	30 93 99 02 	sts	0x0299, r19
    1bb0:	20 93 98 02 	sts	0x0298, r18
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    1bb4:	86 e5       	ldi	r24, 0x56	; 86
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1bbc:	18 2f       	mov	r17, r24
    1bbe:	87 e5       	ldi	r24, 0x57	; 87
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1bc6:	31 2f       	mov	r19, r17
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	28 2b       	or	r18, r24
    1bce:	39 2b       	or	r19, r25
    1bd0:	30 93 72 02 	sts	0x0272, r19
    1bd4:	20 93 71 02 	sts	0x0271, r18
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
    1bd8:	88 e2       	ldi	r24, 0x28	; 40
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1be0:	18 2f       	mov	r17, r24
    1be2:	89 e2       	ldi	r24, 0x29	; 41
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1bea:	31 2f       	mov	r19, r17
    1bec:	20 e0       	ldi	r18, 0x00	; 0
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	28 2b       	or	r18, r24
    1bf2:	39 2b       	or	r19, r25
    1bf4:	30 93 9b 02 	sts	0x029B, r19
    1bf8:	20 93 9a 02 	sts	0x029A, r18
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    1bfc:	88 e5       	ldi	r24, 0x58	; 88
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1c04:	18 2f       	mov	r17, r24
    1c06:	89 e5       	ldi	r24, 0x59	; 89
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1c0e:	31 2f       	mov	r19, r17
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	28 2b       	or	r18, r24
    1c16:	39 2b       	or	r19, r25
    1c18:	30 93 74 02 	sts	0x0274, r19
    1c1c:	20 93 73 02 	sts	0x0273, r18
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
    1c20:	8a e2       	ldi	r24, 0x2A	; 42
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1c28:	18 2f       	mov	r17, r24
    1c2a:	8b e2       	ldi	r24, 0x2B	; 43
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1c32:	31 2f       	mov	r19, r17
    1c34:	20 e0       	ldi	r18, 0x00	; 0
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	28 2b       	or	r18, r24
    1c3a:	39 2b       	or	r19, r25
    1c3c:	30 93 9d 02 	sts	0x029D, r19
    1c40:	20 93 9c 02 	sts	0x029C, r18
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    1c44:	8a e5       	ldi	r24, 0x5A	; 90
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1c4c:	18 2f       	mov	r17, r24
    1c4e:	8b e5       	ldi	r24, 0x5B	; 91
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1c56:	31 2f       	mov	r19, r17
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	28 2b       	or	r18, r24
    1c5e:	39 2b       	or	r19, r25
    1c60:	30 93 76 02 	sts	0x0276, r19
    1c64:	20 93 75 02 	sts	0x0275, r18
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
    1c68:	8c e2       	ldi	r24, 0x2C	; 44
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1c70:	18 2f       	mov	r17, r24
    1c72:	8d e2       	ldi	r24, 0x2D	; 45
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1c7a:	31 2f       	mov	r19, r17
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	28 2b       	or	r18, r24
    1c82:	39 2b       	or	r19, r25
    1c84:	30 93 9f 02 	sts	0x029F, r19
    1c88:	20 93 9e 02 	sts	0x029E, r18
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    1c8c:	8c e5       	ldi	r24, 0x5C	; 92
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1c94:	18 2f       	mov	r17, r24
    1c96:	8d e5       	ldi	r24, 0x5D	; 93
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1c9e:	31 2f       	mov	r19, r17
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	28 2b       	or	r18, r24
    1ca6:	39 2b       	or	r19, r25
    1ca8:	30 93 78 02 	sts	0x0278, r19
    1cac:	20 93 77 02 	sts	0x0277, r18
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
    1cb0:	8e e2       	ldi	r24, 0x2E	; 46
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1cb8:	18 2f       	mov	r17, r24
    1cba:	8f e2       	ldi	r24, 0x2F	; 47
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1cc2:	31 2f       	mov	r19, r17
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	28 2b       	or	r18, r24
    1cca:	39 2b       	or	r19, r25
    1ccc:	30 93 a1 02 	sts	0x02A1, r19
    1cd0:	20 93 a0 02 	sts	0x02A0, r18
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    1cd4:	8e e5       	ldi	r24, 0x5E	; 94
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1cdc:	18 2f       	mov	r17, r24
    1cde:	8f e5       	ldi	r24, 0x5F	; 95
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1ce6:	31 2f       	mov	r19, r17
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	28 2b       	or	r18, r24
    1cee:	39 2b       	or	r19, r25
    1cf0:	30 93 7a 02 	sts	0x027A, r19
    1cf4:	20 93 79 02 	sts	0x0279, r18
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
    1cf8:	80 e3       	ldi	r24, 0x30	; 48
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1d00:	18 2f       	mov	r17, r24
    1d02:	81 e3       	ldi	r24, 0x31	; 49
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1d0a:	31 2f       	mov	r19, r17
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	28 2b       	or	r18, r24
    1d12:	39 2b       	or	r19, r25
    1d14:	30 93 a3 02 	sts	0x02A3, r19
    1d18:	20 93 a2 02 	sts	0x02A2, r18
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    1d1c:	80 e6       	ldi	r24, 0x60	; 96
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1d24:	18 2f       	mov	r17, r24
    1d26:	81 e6       	ldi	r24, 0x61	; 97
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1d2e:	31 2f       	mov	r19, r17
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	28 2b       	or	r18, r24
    1d36:	39 2b       	or	r19, r25
    1d38:	30 93 7c 02 	sts	0x027C, r19
    1d3c:	20 93 7b 02 	sts	0x027B, r18
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
    1d40:	82 e3       	ldi	r24, 0x32	; 50
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1d48:	18 2f       	mov	r17, r24
    1d4a:	83 e3       	ldi	r24, 0x33	; 51
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1d52:	31 2f       	mov	r19, r17
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	28 2b       	or	r18, r24
    1d5a:	39 2b       	or	r19, r25
    1d5c:	30 93 a5 02 	sts	0x02A5, r19
    1d60:	20 93 a4 02 	sts	0x02A4, r18
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    1d64:	82 e6       	ldi	r24, 0x62	; 98
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1d6c:	18 2f       	mov	r17, r24
    1d6e:	83 e6       	ldi	r24, 0x63	; 99
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1d76:	31 2f       	mov	r19, r17
    1d78:	20 e0       	ldi	r18, 0x00	; 0
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	28 2b       	or	r18, r24
    1d7e:	39 2b       	or	r19, r25
    1d80:	30 93 7e 02 	sts	0x027E, r19
    1d84:	20 93 7d 02 	sts	0x027D, r18
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
    1d88:	84 e3       	ldi	r24, 0x34	; 52
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1d90:	18 2f       	mov	r17, r24
    1d92:	85 e3       	ldi	r24, 0x35	; 53
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1d9a:	31 2f       	mov	r19, r17
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	28 2b       	or	r18, r24
    1da2:	39 2b       	or	r19, r25
    1da4:	30 93 a7 02 	sts	0x02A7, r19
    1da8:	20 93 a6 02 	sts	0x02A6, r18
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    1dac:	84 e6       	ldi	r24, 0x64	; 100
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1db4:	18 2f       	mov	r17, r24
    1db6:	85 e6       	ldi	r24, 0x65	; 101
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1dbe:	31 2f       	mov	r19, r17
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	28 2b       	or	r18, r24
    1dc6:	39 2b       	or	r19, r25
    1dc8:	30 93 80 02 	sts	0x0280, r19
    1dcc:	20 93 7f 02 	sts	0x027F, r18
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
    1dd0:	86 e3       	ldi	r24, 0x36	; 54
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1dd8:	18 2f       	mov	r17, r24
    1dda:	87 e3       	ldi	r24, 0x37	; 55
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1de2:	31 2f       	mov	r19, r17
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	28 2b       	or	r18, r24
    1dea:	39 2b       	or	r19, r25
    1dec:	30 93 a9 02 	sts	0x02A9, r19
    1df0:	20 93 a8 02 	sts	0x02A8, r18
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    1df4:	86 e6       	ldi	r24, 0x66	; 102
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1dfc:	18 2f       	mov	r17, r24
    1dfe:	87 e6       	ldi	r24, 0x67	; 103
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1e06:	31 2f       	mov	r19, r17
    1e08:	20 e0       	ldi	r18, 0x00	; 0
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	28 2b       	or	r18, r24
    1e0e:	39 2b       	or	r19, r25
    1e10:	30 93 82 02 	sts	0x0282, r19
    1e14:	20 93 81 02 	sts	0x0281, r18
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
    1e18:	88 e3       	ldi	r24, 0x38	; 56
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1e20:	18 2f       	mov	r17, r24
    1e22:	89 e3       	ldi	r24, 0x39	; 57
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1e2a:	31 2f       	mov	r19, r17
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	28 2b       	or	r18, r24
    1e32:	39 2b       	or	r19, r25
    1e34:	30 93 ab 02 	sts	0x02AB, r19
    1e38:	20 93 aa 02 	sts	0x02AA, r18
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    1e3c:	88 e6       	ldi	r24, 0x68	; 104
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1e44:	18 2f       	mov	r17, r24
    1e46:	89 e6       	ldi	r24, 0x69	; 105
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1e4e:	31 2f       	mov	r19, r17
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	28 2b       	or	r18, r24
    1e56:	39 2b       	or	r19, r25
    1e58:	30 93 84 02 	sts	0x0284, r19
    1e5c:	20 93 83 02 	sts	0x0283, r18
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
    1e60:	8a e3       	ldi	r24, 0x3A	; 58
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1e68:	18 2f       	mov	r17, r24
    1e6a:	8b e3       	ldi	r24, 0x3B	; 59
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1e72:	31 2f       	mov	r19, r17
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	28 2b       	or	r18, r24
    1e7a:	39 2b       	or	r19, r25
    1e7c:	30 93 ad 02 	sts	0x02AD, r19
    1e80:	20 93 ac 02 	sts	0x02AC, r18
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    1e84:	8a e6       	ldi	r24, 0x6A	; 106
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1e8c:	18 2f       	mov	r17, r24
    1e8e:	8b e6       	ldi	r24, 0x6B	; 107
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	0e 94 8a 19 	call	0x3314	; 0x3314 <__eerd_byte_m328p>
    1e96:	31 2f       	mov	r19, r17
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	28 2b       	or	r18, r24
    1e9e:	39 2b       	or	r19, r25
    1ea0:	30 93 86 02 	sts	0x0286, r19
    1ea4:	20 93 85 02 	sts	0x0285, r18
    }
#endif
    sei();
    1ea8:	78 94       	sei
}
    1eaa:	1f 91       	pop	r17
    1eac:	0f 91       	pop	r16
    1eae:	08 95       	ret

00001eb0 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    1eb0:	2f 92       	push	r2
    1eb2:	3f 92       	push	r3
    1eb4:	4f 92       	push	r4
    1eb6:	5f 92       	push	r5
    1eb8:	6f 92       	push	r6
    1eba:	7f 92       	push	r7
    1ebc:	8f 92       	push	r8
    1ebe:	9f 92       	push	r9
    1ec0:	af 92       	push	r10
    1ec2:	bf 92       	push	r11
    1ec4:	cf 92       	push	r12
    1ec6:	df 92       	push	r13
    1ec8:	ef 92       	push	r14
    1eca:	ff 92       	push	r15
    1ecc:	0f 93       	push	r16
    1ece:	1f 93       	push	r17
    1ed0:	cf 93       	push	r28
    1ed2:	df 93       	push	r29
    1ed4:	6c 01       	movw	r12, r24
    1ed6:	8b 01       	movw	r16, r22
    1ed8:	ff 24       	eor	r15, r15
    1eda:	a0 ed       	ldi	r26, 0xD0	; 208
    1edc:	aa 2e       	mov	r10, r26
    1ede:	a7 e0       	ldi	r26, 0x07	; 7
    1ee0:	ba 2e       	mov	r11, r26
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
    1ee2:	c8 ec       	ldi	r28, 0xC8	; 200
    1ee4:	d0 e0       	ldi	r29, 0x00	; 0
    1ee6:	ee 24       	eor	r14, r14
    1ee8:	ea 94       	dec	r14
    1eea:	f0 e3       	ldi	r31, 0x30	; 48
    1eec:	8f 2e       	mov	r8, r31
    1eee:	f5 e7       	ldi	r31, 0x75	; 117
    1ef0:	9f 2e       	mov	r9, r31

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
    1ef2:	e6 e0       	ldi	r30, 0x06	; 6
    1ef4:	7e 2e       	mov	r7, r30
    1ef6:	73 e8       	ldi	r23, 0x83	; 131
    1ef8:	67 2e       	mov	r6, r23
            case SLEEPING:
                cli();
                acomp_off();
                adc_off();
                ports_off();
                wdt_enable(WDTO_8S);
    1efa:	68 e1       	ldi	r22, 0x18	; 24
    1efc:	46 2e       	mov	r4, r22
    1efe:	51 2c       	mov	r5, r1
    1f00:	59 e2       	ldi	r21, 0x29	; 41
    1f02:	35 2e       	mov	r3, r21
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
    1f04:	44 e0       	ldi	r20, 0x04	; 4
    1f06:	24 2e       	mov	r2, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
    1f08:	80 91 4d 02 	lds	r24, 0x024D
    1f0c:	83 30       	cpi	r24, 0x03	; 3
    1f0e:	79 f1       	breq	.+94     	; 0x1f6e <kilo_start+0xbe>
    1f10:	84 30       	cpi	r24, 0x04	; 4
    1f12:	b8 f5       	brcc	.+110    	; 0x1f82 <kilo_start+0xd2>
    1f14:	81 30       	cpi	r24, 0x01	; 1
    1f16:	09 f4       	brne	.+2      	; 0x1f1a <kilo_start+0x6a>
    1f18:	cb c0       	rjmp	.+406    	; 0x20b0 <kilo_start+0x200>
    1f1a:	82 30       	cpi	r24, 0x02	; 2
    1f1c:	08 f4       	brcc	.+2      	; 0x1f20 <kilo_start+0x70>
    1f1e:	61 c0       	rjmp	.+194    	; 0x1fe2 <kilo_start+0x132>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
    1f20:	80 91 91 02 	lds	r24, 0x0291
    1f24:	88 23       	and	r24, r24
    1f26:	09 f0       	breq	.+2      	; 0x1f2a <kilo_start+0x7a>
    1f28:	08 c1       	rjmp	.+528    	; 0x213a <kilo_start+0x28a>
        cli();                                    // disable interrupts
    1f2a:	f8 94       	cli
        adc_setup_conversion(6);
    1f2c:	70 92 7c 00 	sts	0x007C, r7
    1f30:	60 92 7a 00 	sts	0x007A, r6
        adc_start_conversion();
    1f34:	80 91 7a 00 	lds	r24, 0x007A
    1f38:	80 64       	ori	r24, 0x40	; 64
    1f3a:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
    1f3e:	80 91 7a 00 	lds	r24, 0x007A
    1f42:	86 fd       	sbrc	r24, 6
    1f44:	fc cf       	rjmp	.-8      	; 0x1f3e <kilo_start+0x8e>
        voltage = ADCW;                           // store AD result
    1f46:	20 91 78 00 	lds	r18, 0x0078
    1f4a:	30 91 79 00 	lds	r19, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    1f4e:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
    1f50:	42 e0       	ldi	r20, 0x02	; 2
    1f52:	2b 3a       	cpi	r18, 0xAB	; 171
    1f54:	34 07       	cpc	r19, r20
    1f56:	0c f4       	brge	.+2      	; 0x1f5a <kilo_start+0xaa>
    1f58:	f7 c0       	rjmp	.+494    	; 0x2148 <kilo_start+0x298>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1f5a:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1f5c:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    1f5e:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    1f60:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1f62:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1f64:	3c 98       	cbi	0x07, 4	; 7

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
    1f66:	80 91 4d 02 	lds	r24, 0x024D
    1f6a:	83 30       	cpi	r24, 0x03	; 3
    1f6c:	89 f6       	brne	.-94     	; 0x1f10 <kilo_start+0x60>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
    1f6e:	ff 20       	and	r15, r15
    1f70:	09 f4       	brne	.+2      	; 0x1f74 <kilo_start+0xc4>
    1f72:	e0 c0       	rjmp	.+448    	; 0x2134 <kilo_start+0x284>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
    1f74:	20 92 4d 02 	sts	0x024D, r2
    1f78:	ff 24       	eor	r15, r15
    1f7a:	f3 94       	inc	r15
            case RUNNING:
                loop();
    1f7c:	f8 01       	movw	r30, r16
    1f7e:	09 95       	icall
    1f80:	c3 cf       	rjmp	.-122    	; 0x1f08 <kilo_start+0x58>

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
    1f82:	85 30       	cpi	r24, 0x05	; 5
    1f84:	89 f0       	breq	.+34     	; 0x1fa8 <kilo_start+0xf8>
    1f86:	85 30       	cpi	r24, 0x05	; 5
    1f88:	c8 f3       	brcs	.-14     	; 0x1f7c <kilo_start+0xcc>
    1f8a:	86 30       	cpi	r24, 0x06	; 6
    1f8c:	09 f0       	breq	.+2      	; 0x1f90 <kilo_start+0xe0>
    1f8e:	bc cf       	rjmp	.-136    	; 0x1f08 <kilo_start+0x58>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
    1f90:	80 91 4a 02 	lds	r24, 0x024A
    1f94:	88 23       	and	r24, r24
    1f96:	09 f0       	breq	.+2      	; 0x1f9a <kilo_start+0xea>
    1f98:	a6 c0       	rjmp	.+332    	; 0x20e6 <kilo_start+0x236>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    1f9a:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
    1f9e:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
    1fa2:	10 92 4b 02 	sts	0x024B, r1
    1fa6:	b0 cf       	rjmp	.-160    	; 0x1f08 <kilo_start+0x58>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
    1fa8:	48 99       	sbic	0x09, 0	; 9
    1faa:	63 c0       	rjmp	.+198    	; 0x2072 <kilo_start+0x1c2>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    1fac:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1fae:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1fb0:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    1fb2:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1fb4:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1fb6:	3c 98       	cbi	0x07, 4	; 7
    1fb8:	c5 01       	movw	r24, r10
    1fba:	01 97       	sbiw	r24, 0x01	; 1
    1fbc:	f1 f7       	brne	.-4      	; 0x1fba <kilo_start+0x10a>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1fbe:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1fc0:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1fc2:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    1fc4:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1fc6:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1fc8:	3c 98       	cbi	0x07, 4	; 7
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	ce 01       	movw	r24, r28
    1fd0:	01 97       	sbiw	r24, 0x01	; 1
    1fd2:	f1 f7       	brne	.-4      	; 0x1fd0 <kilo_start+0x120>
    1fd4:	2f 5f       	subi	r18, 0xFF	; 255
    1fd6:	3f 4f       	sbci	r19, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fd8:	87 e0       	ldi	r24, 0x07	; 7
    1fda:	20 3d       	cpi	r18, 0xD0	; 208
    1fdc:	38 07       	cpc	r19, r24
    1fde:	b9 f7       	brne	.-18     	; 0x1fce <kilo_start+0x11e>
    1fe0:	93 cf       	rjmp	.-218    	; 0x1f08 <kilo_start+0x58>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
    1fe2:	f8 94       	cli
                acomp_off();
    1fe4:	80 b7       	in	r24, 0x30	; 48
    1fe6:	87 7f       	andi	r24, 0xF7	; 247
    1fe8:	80 bf       	out	0x30, r24	; 48
                adc_off();
    1fea:	80 91 7a 00 	lds	r24, 0x007A
    1fee:	8f 77       	andi	r24, 0x7F	; 127
    1ff0:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
    1ff4:	14 b8       	out	0x04, r1	; 4
    1ff6:	17 b8       	out	0x07, r1	; 7
    1ff8:	1a b8       	out	0x0a, r1	; 10
    1ffa:	15 b8       	out	0x05, r1	; 5
    1ffc:	18 b8       	out	0x08, r1	; 8
    1ffe:	1b b8       	out	0x0b, r1	; 11
                wdt_enable(WDTO_8S);
    2000:	0f b6       	in	r0, 0x3f	; 63
    2002:	f8 94       	cli
    2004:	a8 95       	wdr
    2006:	40 92 60 00 	sts	0x0060, r4
    200a:	0f be       	out	0x3f, r0	; 63
    200c:	30 92 60 00 	sts	0x0060, r3
                WDTCSR |= (1<<WDIE);
    2010:	80 91 60 00 	lds	r24, 0x0060
    2014:	80 64       	ori	r24, 0x40	; 64
    2016:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    201a:	83 b7       	in	r24, 0x33	; 51
    201c:	81 7f       	andi	r24, 0xF1	; 241
    201e:	84 60       	ori	r24, 0x04	; 4
    2020:	83 bf       	out	0x33, r24	; 51
                cli();
    2022:	f8 94       	cli
                sleep_enable();
    2024:	83 b7       	in	r24, 0x33	; 51
    2026:	81 60       	ori	r24, 0x01	; 1
    2028:	83 bf       	out	0x33, r24	; 51
                sei();
    202a:	78 94       	sei
                sleep_cpu();
    202c:	88 95       	sleep
                sleep_disable();
    202e:	83 b7       	in	r24, 0x33	; 51
    2030:	8e 7f       	andi	r24, 0xFE	; 254
    2032:	83 bf       	out	0x33, r24	; 51
                sei();
    2034:	78 94       	sei
                rx_busy = 0;
    2036:	10 92 91 02 	sts	0x0291, r1
                ports_on();
    203a:	52 9a       	sbi	0x0a, 2	; 10
    203c:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
    203e:	80 91 7a 00 	lds	r24, 0x007A
    2042:	80 68       	ori	r24, 0x80	; 128
    2044:	80 93 7a 00 	sts	0x007A, r24
    2048:	88 e5       	ldi	r24, 0x58	; 88
    204a:	92 e0       	ldi	r25, 0x02	; 2
    204c:	01 97       	sbiw	r24, 0x01	; 1
    204e:	f1 f7       	brne	.-4      	; 0x204c <kilo_start+0x19c>
                _delay_us(300);
                acomp_on();
    2050:	80 b7       	in	r24, 0x30	; 48
    2052:	88 61       	ori	r24, 0x18	; 24
    2054:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    2056:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    2058:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    205a:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    205c:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    205e:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    2060:	3c 9a       	sbi	0x07, 4	; 7
    2062:	80 e2       	ldi	r24, 0x20	; 32
    2064:	9e e4       	ldi	r25, 0x4E	; 78
    2066:	01 97       	sbiw	r24, 0x01	; 1
    2068:	f1 f7       	brne	.-4      	; 0x2066 <kilo_start+0x1b6>
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
    206a:	80 91 91 02 	lds	r24, 0x0291
    206e:	88 23       	and	r24, r24
    2070:	39 f4       	brne	.+14     	; 0x2080 <kilo_start+0x1d0>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    2072:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    2074:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    2076:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    2078:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    207a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    207c:	3c 98       	cbi	0x07, 4	; 7
    207e:	44 cf       	rjmp	.-376    	; 0x1f08 <kilo_start+0x58>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    2080:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    2082:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    2084:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    2086:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    2088:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    208a:	3c 98       	cbi	0x07, 4	; 7
    208c:	20 e0       	ldi	r18, 0x00	; 0
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	ce 01       	movw	r24, r28
    2092:	01 97       	sbiw	r24, 0x01	; 1
    2094:	f1 f7       	brne	.-4      	; 0x2092 <kilo_start+0x1e2>
    2096:	2f 5f       	subi	r18, 0xFF	; 255
    2098:	3f 4f       	sbci	r19, 0xFF	; 255
    209a:	43 e0       	ldi	r20, 0x03	; 3
    209c:	28 3e       	cpi	r18, 0xE8	; 232
    209e:	34 07       	cpc	r19, r20
    20a0:	b9 f7       	brne	.-18     	; 0x2090 <kilo_start+0x1e0>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    20a2:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    20a4:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    20a6:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    20a8:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    20aa:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    20ac:	3c 98       	cbi	0x07, 4	; 7
    20ae:	2c cf       	rjmp	.-424    	; 0x1f08 <kilo_start+0x58>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    20b0:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    20b2:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    20b4:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    20b6:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    20b8:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    20ba:	3c 98       	cbi	0x07, 4	; 7
    20bc:	c5 01       	movw	r24, r10
    20be:	01 97       	sbiw	r24, 0x01	; 1
    20c0:	f1 f7       	brne	.-4      	; 0x20be <kilo_start+0x20e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    20c2:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    20c4:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    20c6:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    20c8:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    20ca:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    20cc:	3c 98       	cbi	0x07, 4	; 7
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	ce 01       	movw	r24, r28
    20d4:	01 97       	sbiw	r24, 0x01	; 1
    20d6:	f1 f7       	brne	.-4      	; 0x20d4 <kilo_start+0x224>
    20d8:	2f 5f       	subi	r18, 0xFF	; 255
    20da:	3f 4f       	sbci	r19, 0xFF	; 255
    20dc:	87 e0       	ldi	r24, 0x07	; 7
    20de:	20 3d       	cpi	r18, 0xD0	; 208
    20e0:	38 07       	cpc	r19, r24
    20e2:	b9 f7       	brne	.-18     	; 0x20d2 <kilo_start+0x222>
    20e4:	11 cf       	rjmp	.-478    	; 0x1f08 <kilo_start+0x58>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
    20e6:	90 91 4a 02 	lds	r25, 0x024A
    20ea:	80 91 4b 02 	lds	r24, 0x024B
    20ee:	98 17       	cp	r25, r24
    20f0:	09 f4       	brne	.+2      	; 0x20f4 <kilo_start+0x244>
    20f2:	0a cf       	rjmp	.-492    	; 0x1f08 <kilo_start+0x58>
                        prev_motion = cur_motion;
    20f4:	80 91 4a 02 	lds	r24, 0x024A
    20f8:	80 93 4b 02 	sts	0x024B, r24
                        if (cur_motion == MOVE_LEFT) {
    20fc:	80 91 4a 02 	lds	r24, 0x024A
    2100:	81 30       	cpi	r24, 0x01	; 1
    2102:	69 f1       	breq	.+90     	; 0x215e <kilo_start+0x2ae>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
    2104:	80 91 4a 02 	lds	r24, 0x024A
    2108:	82 30       	cpi	r24, 0x02	; 2
    210a:	b9 f1       	breq	.+110    	; 0x217a <kilo_start+0x2ca>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    210c:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
    2110:	e0 92 b4 00 	sts	0x00B4, r14
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    2114:	e0 92 b3 00 	sts	0x00B3, r14
    OCR2B = cw;
    2118:	e0 92 b4 00 	sts	0x00B4, r14
    211c:	c4 01       	movw	r24, r8
    211e:	01 97       	sbiw	r24, 0x01	; 1
    2120:	f1 f7       	brne	.-4      	; 0x211e <kilo_start+0x26e>
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
    2122:	80 91 c5 02 	lds	r24, 0x02C5
    2126:	90 91 c6 02 	lds	r25, 0x02C6
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    212a:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
    212e:	90 93 b4 00 	sts	0x00B4, r25
    2132:	ea ce       	rjmp	.-556    	; 0x1f08 <kilo_start+0x58>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
    2134:	f6 01       	movw	r30, r12
    2136:	09 95       	icall
    2138:	1d cf       	rjmp	.-454    	; 0x1f74 <kilo_start+0xc4>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    213a:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    213c:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    213e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    2140:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    2142:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    2144:	3c 98       	cbi	0x07, 4	; 7
    2146:	e0 ce       	rjmp	.-576    	; 0x1f08 <kilo_start+0x58>
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
    2148:	82 e0       	ldi	r24, 0x02	; 2
    214a:	29 38       	cpi	r18, 0x89	; 137
    214c:	38 07       	cpc	r19, r24
    214e:	1c f1       	brlt	.+70     	; 0x2196 <kilo_start+0x2e6>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    2150:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    2152:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    2154:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    2156:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    2158:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    215a:	3c 9a       	sbi	0x07, 4	; 7
    215c:	d5 ce       	rjmp	.-598    	; 0x1f08 <kilo_start+0x58>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    215e:	e0 92 b3 00 	sts	0x00B3, r14
    OCR2B = cw;
    2162:	10 92 b4 00 	sts	0x00B4, r1
    2166:	c4 01       	movw	r24, r8
    2168:	01 97       	sbiw	r24, 0x01	; 1
    216a:	f1 f7       	brne	.-4      	; 0x2168 <kilo_start+0x2b8>
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
    216c:	80 91 c7 02 	lds	r24, 0x02C7
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    2170:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
    2174:	10 92 b4 00 	sts	0x00B4, r1
    2178:	c7 ce       	rjmp	.-626    	; 0x1f08 <kilo_start+0x58>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    217a:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
    217e:	e0 92 b4 00 	sts	0x00B4, r14
    2182:	c4 01       	movw	r24, r8
    2184:	01 97       	sbiw	r24, 0x01	; 1
    2186:	f1 f7       	brne	.-4      	; 0x2184 <kilo_start+0x2d4>
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
    2188:	80 91 b3 02 	lds	r24, 0x02B3
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    218c:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
    2190:	80 93 b4 00 	sts	0x00B4, r24
    2194:	b9 ce       	rjmp	.-654    	; 0x1f08 <kilo_start+0x58>
                voltage = get_voltage();
                if(voltage > 682)
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
    2196:	27 56       	subi	r18, 0x67	; 103
    2198:	32 40       	sbci	r19, 0x02	; 2
    219a:	7c f2       	brlt	.-98     	; 0x213a <kilo_start+0x28a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    219c:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    219e:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    21a0:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    21a2:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    21a4:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    21a6:	3c 98       	cbi	0x07, 4	; 7
    21a8:	af ce       	rjmp	.-674    	; 0x1f08 <kilo_start+0x58>

000021aa <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    21aa:	fc 01       	movw	r30, r24
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    21ac:	80 81       	ld	r24, Z
    21ae:	2f ef       	ldi	r18, 0xFF	; 255
    21b0:	3f ef       	ldi	r19, 0xFF	; 255
    21b2:	28 27       	eor	r18, r24
    21b4:	02 2e       	mov	r0, r18
    21b6:	22 95       	swap	r18
    21b8:	20 7f       	andi	r18, 0xF0	; 240
    21ba:	20 25       	eor	r18, r0
    21bc:	03 2e       	mov	r0, r19
    21be:	32 2f       	mov	r19, r18
    21c0:	22 95       	swap	r18
    21c2:	2f 70       	andi	r18, 0x0F	; 15
    21c4:	02 26       	eor	r0, r18
    21c6:	26 95       	lsr	r18
    21c8:	32 27       	eor	r19, r18
    21ca:	23 27       	eor	r18, r19
    21cc:	22 0f       	add	r18, r18
    21ce:	22 0f       	add	r18, r18
    21d0:	22 0f       	add	r18, r18
    21d2:	20 25       	eor	r18, r0
    21d4:	81 81       	ldd	r24, Z+1	; 0x01
    21d6:	28 27       	eor	r18, r24
    21d8:	02 2e       	mov	r0, r18
    21da:	22 95       	swap	r18
    21dc:	20 7f       	andi	r18, 0xF0	; 240
    21de:	20 25       	eor	r18, r0
    21e0:	03 2e       	mov	r0, r19
    21e2:	32 2f       	mov	r19, r18
    21e4:	22 95       	swap	r18
    21e6:	2f 70       	andi	r18, 0x0F	; 15
    21e8:	02 26       	eor	r0, r18
    21ea:	26 95       	lsr	r18
    21ec:	32 27       	eor	r19, r18
    21ee:	23 27       	eor	r18, r19
    21f0:	22 0f       	add	r18, r18
    21f2:	22 0f       	add	r18, r18
    21f4:	22 0f       	add	r18, r18
    21f6:	20 25       	eor	r18, r0
    21f8:	82 81       	ldd	r24, Z+2	; 0x02
    21fa:	28 27       	eor	r18, r24
    21fc:	02 2e       	mov	r0, r18
    21fe:	22 95       	swap	r18
    2200:	20 7f       	andi	r18, 0xF0	; 240
    2202:	20 25       	eor	r18, r0
    2204:	03 2e       	mov	r0, r19
    2206:	32 2f       	mov	r19, r18
    2208:	22 95       	swap	r18
    220a:	2f 70       	andi	r18, 0x0F	; 15
    220c:	02 26       	eor	r0, r18
    220e:	26 95       	lsr	r18
    2210:	32 27       	eor	r19, r18
    2212:	23 27       	eor	r18, r19
    2214:	22 0f       	add	r18, r18
    2216:	22 0f       	add	r18, r18
    2218:	22 0f       	add	r18, r18
    221a:	20 25       	eor	r18, r0
    221c:	83 81       	ldd	r24, Z+3	; 0x03
    221e:	28 27       	eor	r18, r24
    2220:	02 2e       	mov	r0, r18
    2222:	22 95       	swap	r18
    2224:	20 7f       	andi	r18, 0xF0	; 240
    2226:	20 25       	eor	r18, r0
    2228:	03 2e       	mov	r0, r19
    222a:	32 2f       	mov	r19, r18
    222c:	22 95       	swap	r18
    222e:	2f 70       	andi	r18, 0x0F	; 15
    2230:	02 26       	eor	r0, r18
    2232:	26 95       	lsr	r18
    2234:	32 27       	eor	r19, r18
    2236:	23 27       	eor	r18, r19
    2238:	22 0f       	add	r18, r18
    223a:	22 0f       	add	r18, r18
    223c:	22 0f       	add	r18, r18
    223e:	20 25       	eor	r18, r0
    2240:	84 81       	ldd	r24, Z+4	; 0x04
    2242:	28 27       	eor	r18, r24
    2244:	02 2e       	mov	r0, r18
    2246:	22 95       	swap	r18
    2248:	20 7f       	andi	r18, 0xF0	; 240
    224a:	20 25       	eor	r18, r0
    224c:	03 2e       	mov	r0, r19
    224e:	32 2f       	mov	r19, r18
    2250:	22 95       	swap	r18
    2252:	2f 70       	andi	r18, 0x0F	; 15
    2254:	02 26       	eor	r0, r18
    2256:	26 95       	lsr	r18
    2258:	32 27       	eor	r19, r18
    225a:	23 27       	eor	r18, r19
    225c:	22 0f       	add	r18, r18
    225e:	22 0f       	add	r18, r18
    2260:	22 0f       	add	r18, r18
    2262:	20 25       	eor	r18, r0
    2264:	85 81       	ldd	r24, Z+5	; 0x05
    2266:	28 27       	eor	r18, r24
    2268:	02 2e       	mov	r0, r18
    226a:	22 95       	swap	r18
    226c:	20 7f       	andi	r18, 0xF0	; 240
    226e:	20 25       	eor	r18, r0
    2270:	03 2e       	mov	r0, r19
    2272:	32 2f       	mov	r19, r18
    2274:	22 95       	swap	r18
    2276:	2f 70       	andi	r18, 0x0F	; 15
    2278:	02 26       	eor	r0, r18
    227a:	26 95       	lsr	r18
    227c:	32 27       	eor	r19, r18
    227e:	23 27       	eor	r18, r19
    2280:	22 0f       	add	r18, r18
    2282:	22 0f       	add	r18, r18
    2284:	22 0f       	add	r18, r18
    2286:	20 25       	eor	r18, r0
    2288:	86 81       	ldd	r24, Z+6	; 0x06
    228a:	28 27       	eor	r18, r24
    228c:	02 2e       	mov	r0, r18
    228e:	22 95       	swap	r18
    2290:	20 7f       	andi	r18, 0xF0	; 240
    2292:	20 25       	eor	r18, r0
    2294:	03 2e       	mov	r0, r19
    2296:	32 2f       	mov	r19, r18
    2298:	22 95       	swap	r18
    229a:	2f 70       	andi	r18, 0x0F	; 15
    229c:	02 26       	eor	r0, r18
    229e:	26 95       	lsr	r18
    22a0:	32 27       	eor	r19, r18
    22a2:	23 27       	eor	r18, r19
    22a4:	22 0f       	add	r18, r18
    22a6:	22 0f       	add	r18, r18
    22a8:	22 0f       	add	r18, r18
    22aa:	20 25       	eor	r18, r0
    22ac:	87 81       	ldd	r24, Z+7	; 0x07
    22ae:	28 27       	eor	r18, r24
    22b0:	02 2e       	mov	r0, r18
    22b2:	22 95       	swap	r18
    22b4:	20 7f       	andi	r18, 0xF0	; 240
    22b6:	20 25       	eor	r18, r0
    22b8:	03 2e       	mov	r0, r19
    22ba:	32 2f       	mov	r19, r18
    22bc:	22 95       	swap	r18
    22be:	2f 70       	andi	r18, 0x0F	; 15
    22c0:	02 26       	eor	r0, r18
    22c2:	26 95       	lsr	r18
    22c4:	32 27       	eor	r19, r18
    22c6:	23 27       	eor	r18, r19
    22c8:	22 0f       	add	r18, r18
    22ca:	22 0f       	add	r18, r18
    22cc:	22 0f       	add	r18, r18
    22ce:	20 25       	eor	r18, r0
    22d0:	80 85       	ldd	r24, Z+8	; 0x08
    22d2:	28 27       	eor	r18, r24
    22d4:	02 2e       	mov	r0, r18
    22d6:	22 95       	swap	r18
    22d8:	20 7f       	andi	r18, 0xF0	; 240
    22da:	20 25       	eor	r18, r0
    22dc:	03 2e       	mov	r0, r19
    22de:	32 2f       	mov	r19, r18
    22e0:	22 95       	swap	r18
    22e2:	2f 70       	andi	r18, 0x0F	; 15
    22e4:	02 26       	eor	r0, r18
    22e6:	26 95       	lsr	r18
    22e8:	32 27       	eor	r19, r18
    22ea:	23 27       	eor	r18, r19
    22ec:	22 0f       	add	r18, r18
    22ee:	22 0f       	add	r18, r18
    22f0:	22 0f       	add	r18, r18
    22f2:	20 25       	eor	r18, r0
    22f4:	81 85       	ldd	r24, Z+9	; 0x09
    22f6:	28 27       	eor	r18, r24
    22f8:	02 2e       	mov	r0, r18
    22fa:	22 95       	swap	r18
    22fc:	20 7f       	andi	r18, 0xF0	; 240
    22fe:	20 25       	eor	r18, r0
    2300:	03 2e       	mov	r0, r19
    2302:	32 2f       	mov	r19, r18
    2304:	22 95       	swap	r18
    2306:	2f 70       	andi	r18, 0x0F	; 15
    2308:	02 26       	eor	r0, r18
    230a:	26 95       	lsr	r18
    230c:	32 27       	eor	r19, r18
    230e:	23 27       	eor	r18, r19
    2310:	22 0f       	add	r18, r18
    2312:	22 0f       	add	r18, r18
    2314:	22 0f       	add	r18, r18
    2316:	20 25       	eor	r18, r0
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    2318:	c9 01       	movw	r24, r18
    231a:	08 95       	ret

0000231c <message_send>:
    231c:	0f b6       	in	r0, 0x3f	; 63
    231e:	f8 94       	cli
    2320:	a4 b1       	in	r26, 0x04	; 4
    2322:	20 91 87 02 	lds	r18, 0x0287
    2326:	2a 2b       	or	r18, r26
    2328:	24 b9       	out	0x04, r18	; 4
    232a:	21 e0       	ldi	r18, 0x01	; 1
    232c:	30 91 87 02 	lds	r19, 0x0287
    2330:	20 30       	cpi	r18, 0x00	; 0
    2332:	29 f0       	breq	.+10     	; 0x233e <message_send+0x22>
    2334:	00 00       	nop
    2336:	25 b1       	in	r18, 0x05	; 5
    2338:	23 2b       	or	r18, r19
    233a:	25 b9       	out	0x05, r18	; 5
    233c:	04 c0       	rjmp	.+8      	; 0x2346 <message_send+0x2a>
    233e:	00 00       	nop
    2340:	00 00       	nop
    2342:	00 00       	nop
    2344:	00 c0       	rjmp	.+0      	; 0x2346 <message_send+0x2a>
    2346:	00 00       	nop
    2348:	00 00       	nop
    234a:	00 00       	nop
    234c:	30 95       	com	r19
    234e:	25 b1       	in	r18, 0x05	; 5
    2350:	23 23       	and	r18, r19
    2352:	25 b9       	out	0x05, r18	; 5
    2354:	2e ea       	ldi	r18, 0xAE	; 174
    2356:	2a 95       	dec	r18
    2358:	f1 f7       	brne	.-4      	; 0x2356 <message_send+0x3a>
    235a:	2b ee       	ldi	r18, 0xEB	; 235

0000235c <checkcollision>:
    235c:	30 b7       	in	r19, 0x30	; 48
    235e:	35 ff       	sbrs	r19, 5
    2360:	0a c0       	rjmp	.+20     	; 0x2376 <nocollision>
    2362:	a4 b9       	out	0x04, r26	; 4
    2364:	30 91 87 02 	lds	r19, 0x0287
    2368:	30 95       	com	r19
    236a:	25 b1       	in	r18, 0x05	; 5
    236c:	23 23       	and	r18, r19
    236e:	25 b9       	out	0x05, r18	; 5
    2370:	0f be       	out	0x3f, r0	; 63
    2372:	80 e0       	ldi	r24, 0x00	; 0
    2374:	08 95       	ret

00002376 <nocollision>:
    2376:	00 00       	nop
    2378:	2a 95       	dec	r18
    237a:	81 f7       	brne	.-32     	; 0x235c <checkcollision>
    237c:	21 e0       	ldi	r18, 0x01	; 1
    237e:	30 91 87 02 	lds	r19, 0x0287
    2382:	20 30       	cpi	r18, 0x00	; 0
    2384:	29 f0       	breq	.+10     	; 0x2390 <nocollision+0x1a>
    2386:	00 00       	nop
    2388:	25 b1       	in	r18, 0x05	; 5
    238a:	23 2b       	or	r18, r19
    238c:	25 b9       	out	0x05, r18	; 5
    238e:	04 c0       	rjmp	.+8      	; 0x2398 <nocollision+0x22>
    2390:	00 00       	nop
    2392:	00 00       	nop
    2394:	00 00       	nop
    2396:	00 c0       	rjmp	.+0      	; 0x2398 <nocollision+0x22>
    2398:	00 00       	nop
    239a:	00 00       	nop
    239c:	00 00       	nop
    239e:	30 95       	com	r19
    23a0:	25 b1       	in	r18, 0x05	; 5
    23a2:	23 23       	and	r18, r19
    23a4:	25 b9       	out	0x05, r18	; 5
    23a6:	00 00       	nop
    23a8:	24 e5       	ldi	r18, 0x54	; 84
    23aa:	2a 95       	dec	r18
    23ac:	f1 f7       	brne	.-4      	; 0x23aa <nocollision+0x34>
    23ae:	fc 01       	movw	r30, r24
    23b0:	8c e0       	ldi	r24, 0x0C	; 12

000023b2 <sendbyte>:
    23b2:	61 91       	ld	r22, Z+
    23b4:	70 e0       	ldi	r23, 0x00	; 0
    23b6:	66 0f       	add	r22, r22
    23b8:	77 1f       	adc	r23, r23
    23ba:	61 60       	ori	r22, 0x01	; 1
    23bc:	72 60       	ori	r23, 0x02	; 2
    23be:	9a e0       	ldi	r25, 0x0A	; 10
    23c0:	41 e0       	ldi	r20, 0x01	; 1
    23c2:	50 e0       	ldi	r21, 0x00	; 0

000023c4 <sendbit>:
    23c4:	9a 01       	movw	r18, r20
    23c6:	26 23       	and	r18, r22
    23c8:	37 23       	and	r19, r23
    23ca:	23 2b       	or	r18, r19
    23cc:	30 91 87 02 	lds	r19, 0x0287
    23d0:	20 30       	cpi	r18, 0x00	; 0
    23d2:	29 f0       	breq	.+10     	; 0x23de <sendbit+0x1a>
    23d4:	00 00       	nop
    23d6:	25 b1       	in	r18, 0x05	; 5
    23d8:	23 2b       	or	r18, r19
    23da:	25 b9       	out	0x05, r18	; 5
    23dc:	04 c0       	rjmp	.+8      	; 0x23e6 <sendbit+0x22>
    23de:	00 00       	nop
    23e0:	00 00       	nop
    23e2:	00 00       	nop
    23e4:	00 c0       	rjmp	.+0      	; 0x23e6 <sendbit+0x22>
    23e6:	00 00       	nop
    23e8:	00 00       	nop
    23ea:	00 00       	nop
    23ec:	30 95       	com	r19
    23ee:	25 b1       	in	r18, 0x05	; 5
    23f0:	23 23       	and	r18, r19
    23f2:	25 b9       	out	0x05, r18	; 5
    23f4:	00 00       	nop
    23f6:	21 e5       	ldi	r18, 0x51	; 81
    23f8:	2a 95       	dec	r18
    23fa:	f1 f7       	brne	.-4      	; 0x23f8 <sendbit+0x34>
    23fc:	44 0f       	add	r20, r20
    23fe:	55 1f       	adc	r21, r21
    2400:	9a 95       	dec	r25
    2402:	01 f7       	brne	.-64     	; 0x23c4 <sendbit>
    2404:	8a 95       	dec	r24
    2406:	a9 f6       	brne	.-86     	; 0x23b2 <sendbyte>
    2408:	20 b7       	in	r18, 0x30	; 48
    240a:	20 61       	ori	r18, 0x10	; 16
    240c:	20 bf       	out	0x30, r18	; 48
    240e:	a4 b9       	out	0x04, r26	; 4
    2410:	30 91 87 02 	lds	r19, 0x0287
    2414:	30 95       	com	r19
    2416:	25 b1       	in	r18, 0x05	; 5
    2418:	23 23       	and	r18, r19
    241a:	25 b9       	out	0x05, r18	; 5
    241c:	0f be       	out	0x3f, r0	; 63
    241e:	81 e0       	ldi	r24, 0x01	; 1
    2420:	08 95       	ret

00002422 <__fixunssfsi>:
    2422:	ef 92       	push	r14
    2424:	ff 92       	push	r15
    2426:	0f 93       	push	r16
    2428:	1f 93       	push	r17
    242a:	7b 01       	movw	r14, r22
    242c:	8c 01       	movw	r16, r24
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	40 e0       	ldi	r20, 0x00	; 0
    2434:	5f e4       	ldi	r21, 0x4F	; 79
    2436:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <__gesf2>
    243a:	88 23       	and	r24, r24
    243c:	8c f0       	brlt	.+34     	; 0x2460 <__fixunssfsi+0x3e>
    243e:	c8 01       	movw	r24, r16
    2440:	b7 01       	movw	r22, r14
    2442:	20 e0       	ldi	r18, 0x00	; 0
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	40 e0       	ldi	r20, 0x00	; 0
    2448:	5f e4       	ldi	r21, 0x4F	; 79
    244a:	0e 94 89 13 	call	0x2712	; 0x2712 <__subsf3>
    244e:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__fixsfsi>
    2452:	9b 01       	movw	r18, r22
    2454:	ac 01       	movw	r20, r24
    2456:	20 50       	subi	r18, 0x00	; 0
    2458:	30 40       	sbci	r19, 0x00	; 0
    245a:	40 40       	sbci	r20, 0x00	; 0
    245c:	50 48       	sbci	r21, 0x80	; 128
    245e:	06 c0       	rjmp	.+12     	; 0x246c <__fixunssfsi+0x4a>
    2460:	c8 01       	movw	r24, r16
    2462:	b7 01       	movw	r22, r14
    2464:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__fixsfsi>
    2468:	9b 01       	movw	r18, r22
    246a:	ac 01       	movw	r20, r24
    246c:	b9 01       	movw	r22, r18
    246e:	ca 01       	movw	r24, r20
    2470:	1f 91       	pop	r17
    2472:	0f 91       	pop	r16
    2474:	ff 90       	pop	r15
    2476:	ef 90       	pop	r14
    2478:	08 95       	ret

0000247a <_fpadd_parts>:
    247a:	a0 e0       	ldi	r26, 0x00	; 0
    247c:	b0 e0       	ldi	r27, 0x00	; 0
    247e:	e3 e4       	ldi	r30, 0x43	; 67
    2480:	f2 e1       	ldi	r31, 0x12	; 18
    2482:	0c 94 53 19 	jmp	0x32a6	; 0x32a6 <__prologue_saves__>
    2486:	dc 01       	movw	r26, r24
    2488:	2b 01       	movw	r4, r22
    248a:	fa 01       	movw	r30, r20
    248c:	9c 91       	ld	r25, X
    248e:	92 30       	cpi	r25, 0x02	; 2
    2490:	08 f4       	brcc	.+2      	; 0x2494 <_fpadd_parts+0x1a>
    2492:	39 c1       	rjmp	.+626    	; 0x2706 <_fpadd_parts+0x28c>
    2494:	eb 01       	movw	r28, r22
    2496:	88 81       	ld	r24, Y
    2498:	82 30       	cpi	r24, 0x02	; 2
    249a:	08 f4       	brcc	.+2      	; 0x249e <_fpadd_parts+0x24>
    249c:	33 c1       	rjmp	.+614    	; 0x2704 <_fpadd_parts+0x28a>
    249e:	94 30       	cpi	r25, 0x04	; 4
    24a0:	69 f4       	brne	.+26     	; 0x24bc <_fpadd_parts+0x42>
    24a2:	84 30       	cpi	r24, 0x04	; 4
    24a4:	09 f0       	breq	.+2      	; 0x24a8 <_fpadd_parts+0x2e>
    24a6:	2f c1       	rjmp	.+606    	; 0x2706 <_fpadd_parts+0x28c>
    24a8:	11 96       	adiw	r26, 0x01	; 1
    24aa:	9c 91       	ld	r25, X
    24ac:	11 97       	sbiw	r26, 0x01	; 1
    24ae:	89 81       	ldd	r24, Y+1	; 0x01
    24b0:	98 17       	cp	r25, r24
    24b2:	09 f4       	brne	.+2      	; 0x24b6 <_fpadd_parts+0x3c>
    24b4:	28 c1       	rjmp	.+592    	; 0x2706 <_fpadd_parts+0x28c>
    24b6:	a3 e2       	ldi	r26, 0x23	; 35
    24b8:	b1 e0       	ldi	r27, 0x01	; 1
    24ba:	25 c1       	rjmp	.+586    	; 0x2706 <_fpadd_parts+0x28c>
    24bc:	84 30       	cpi	r24, 0x04	; 4
    24be:	09 f4       	brne	.+2      	; 0x24c2 <_fpadd_parts+0x48>
    24c0:	21 c1       	rjmp	.+578    	; 0x2704 <_fpadd_parts+0x28a>
    24c2:	82 30       	cpi	r24, 0x02	; 2
    24c4:	a9 f4       	brne	.+42     	; 0x24f0 <_fpadd_parts+0x76>
    24c6:	92 30       	cpi	r25, 0x02	; 2
    24c8:	09 f0       	breq	.+2      	; 0x24cc <_fpadd_parts+0x52>
    24ca:	1d c1       	rjmp	.+570    	; 0x2706 <_fpadd_parts+0x28c>
    24cc:	9a 01       	movw	r18, r20
    24ce:	ad 01       	movw	r20, r26
    24d0:	88 e0       	ldi	r24, 0x08	; 8
    24d2:	ea 01       	movw	r28, r20
    24d4:	09 90       	ld	r0, Y+
    24d6:	ae 01       	movw	r20, r28
    24d8:	e9 01       	movw	r28, r18
    24da:	09 92       	st	Y+, r0
    24dc:	9e 01       	movw	r18, r28
    24de:	81 50       	subi	r24, 0x01	; 1
    24e0:	c1 f7       	brne	.-16     	; 0x24d2 <_fpadd_parts+0x58>
    24e2:	e2 01       	movw	r28, r4
    24e4:	89 81       	ldd	r24, Y+1	; 0x01
    24e6:	11 96       	adiw	r26, 0x01	; 1
    24e8:	9c 91       	ld	r25, X
    24ea:	89 23       	and	r24, r25
    24ec:	81 83       	std	Z+1, r24	; 0x01
    24ee:	08 c1       	rjmp	.+528    	; 0x2700 <_fpadd_parts+0x286>
    24f0:	92 30       	cpi	r25, 0x02	; 2
    24f2:	09 f4       	brne	.+2      	; 0x24f6 <_fpadd_parts+0x7c>
    24f4:	07 c1       	rjmp	.+526    	; 0x2704 <_fpadd_parts+0x28a>
    24f6:	12 96       	adiw	r26, 0x02	; 2
    24f8:	2d 90       	ld	r2, X+
    24fa:	3c 90       	ld	r3, X
    24fc:	13 97       	sbiw	r26, 0x03	; 3
    24fe:	eb 01       	movw	r28, r22
    2500:	8a 81       	ldd	r24, Y+2	; 0x02
    2502:	9b 81       	ldd	r25, Y+3	; 0x03
    2504:	14 96       	adiw	r26, 0x04	; 4
    2506:	ad 90       	ld	r10, X+
    2508:	bd 90       	ld	r11, X+
    250a:	cd 90       	ld	r12, X+
    250c:	dc 90       	ld	r13, X
    250e:	17 97       	sbiw	r26, 0x07	; 7
    2510:	ec 80       	ldd	r14, Y+4	; 0x04
    2512:	fd 80       	ldd	r15, Y+5	; 0x05
    2514:	0e 81       	ldd	r16, Y+6	; 0x06
    2516:	1f 81       	ldd	r17, Y+7	; 0x07
    2518:	91 01       	movw	r18, r2
    251a:	28 1b       	sub	r18, r24
    251c:	39 0b       	sbc	r19, r25
    251e:	b9 01       	movw	r22, r18
    2520:	37 ff       	sbrs	r19, 7
    2522:	04 c0       	rjmp	.+8      	; 0x252c <_fpadd_parts+0xb2>
    2524:	66 27       	eor	r22, r22
    2526:	77 27       	eor	r23, r23
    2528:	62 1b       	sub	r22, r18
    252a:	73 0b       	sbc	r23, r19
    252c:	60 32       	cpi	r22, 0x20	; 32
    252e:	71 05       	cpc	r23, r1
    2530:	0c f0       	brlt	.+2      	; 0x2534 <_fpadd_parts+0xba>
    2532:	61 c0       	rjmp	.+194    	; 0x25f6 <_fpadd_parts+0x17c>
    2534:	12 16       	cp	r1, r18
    2536:	13 06       	cpc	r1, r19
    2538:	6c f5       	brge	.+90     	; 0x2594 <_fpadd_parts+0x11a>
    253a:	37 01       	movw	r6, r14
    253c:	48 01       	movw	r8, r16
    253e:	06 2e       	mov	r0, r22
    2540:	04 c0       	rjmp	.+8      	; 0x254a <_fpadd_parts+0xd0>
    2542:	96 94       	lsr	r9
    2544:	87 94       	ror	r8
    2546:	77 94       	ror	r7
    2548:	67 94       	ror	r6
    254a:	0a 94       	dec	r0
    254c:	d2 f7       	brpl	.-12     	; 0x2542 <_fpadd_parts+0xc8>
    254e:	21 e0       	ldi	r18, 0x01	; 1
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	40 e0       	ldi	r20, 0x00	; 0
    2554:	50 e0       	ldi	r21, 0x00	; 0
    2556:	04 c0       	rjmp	.+8      	; 0x2560 <_fpadd_parts+0xe6>
    2558:	22 0f       	add	r18, r18
    255a:	33 1f       	adc	r19, r19
    255c:	44 1f       	adc	r20, r20
    255e:	55 1f       	adc	r21, r21
    2560:	6a 95       	dec	r22
    2562:	d2 f7       	brpl	.-12     	; 0x2558 <_fpadd_parts+0xde>
    2564:	21 50       	subi	r18, 0x01	; 1
    2566:	30 40       	sbci	r19, 0x00	; 0
    2568:	40 40       	sbci	r20, 0x00	; 0
    256a:	50 40       	sbci	r21, 0x00	; 0
    256c:	2e 21       	and	r18, r14
    256e:	3f 21       	and	r19, r15
    2570:	40 23       	and	r20, r16
    2572:	51 23       	and	r21, r17
    2574:	21 15       	cp	r18, r1
    2576:	31 05       	cpc	r19, r1
    2578:	41 05       	cpc	r20, r1
    257a:	51 05       	cpc	r21, r1
    257c:	21 f0       	breq	.+8      	; 0x2586 <_fpadd_parts+0x10c>
    257e:	21 e0       	ldi	r18, 0x01	; 1
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	40 e0       	ldi	r20, 0x00	; 0
    2584:	50 e0       	ldi	r21, 0x00	; 0
    2586:	79 01       	movw	r14, r18
    2588:	8a 01       	movw	r16, r20
    258a:	e6 28       	or	r14, r6
    258c:	f7 28       	or	r15, r7
    258e:	08 29       	or	r16, r8
    2590:	19 29       	or	r17, r9
    2592:	3c c0       	rjmp	.+120    	; 0x260c <_fpadd_parts+0x192>
    2594:	23 2b       	or	r18, r19
    2596:	d1 f1       	breq	.+116    	; 0x260c <_fpadd_parts+0x192>
    2598:	26 0e       	add	r2, r22
    259a:	37 1e       	adc	r3, r23
    259c:	35 01       	movw	r6, r10
    259e:	46 01       	movw	r8, r12
    25a0:	06 2e       	mov	r0, r22
    25a2:	04 c0       	rjmp	.+8      	; 0x25ac <_fpadd_parts+0x132>
    25a4:	96 94       	lsr	r9
    25a6:	87 94       	ror	r8
    25a8:	77 94       	ror	r7
    25aa:	67 94       	ror	r6
    25ac:	0a 94       	dec	r0
    25ae:	d2 f7       	brpl	.-12     	; 0x25a4 <_fpadd_parts+0x12a>
    25b0:	21 e0       	ldi	r18, 0x01	; 1
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	40 e0       	ldi	r20, 0x00	; 0
    25b6:	50 e0       	ldi	r21, 0x00	; 0
    25b8:	04 c0       	rjmp	.+8      	; 0x25c2 <_fpadd_parts+0x148>
    25ba:	22 0f       	add	r18, r18
    25bc:	33 1f       	adc	r19, r19
    25be:	44 1f       	adc	r20, r20
    25c0:	55 1f       	adc	r21, r21
    25c2:	6a 95       	dec	r22
    25c4:	d2 f7       	brpl	.-12     	; 0x25ba <_fpadd_parts+0x140>
    25c6:	21 50       	subi	r18, 0x01	; 1
    25c8:	30 40       	sbci	r19, 0x00	; 0
    25ca:	40 40       	sbci	r20, 0x00	; 0
    25cc:	50 40       	sbci	r21, 0x00	; 0
    25ce:	2a 21       	and	r18, r10
    25d0:	3b 21       	and	r19, r11
    25d2:	4c 21       	and	r20, r12
    25d4:	5d 21       	and	r21, r13
    25d6:	21 15       	cp	r18, r1
    25d8:	31 05       	cpc	r19, r1
    25da:	41 05       	cpc	r20, r1
    25dc:	51 05       	cpc	r21, r1
    25de:	21 f0       	breq	.+8      	; 0x25e8 <_fpadd_parts+0x16e>
    25e0:	21 e0       	ldi	r18, 0x01	; 1
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	40 e0       	ldi	r20, 0x00	; 0
    25e6:	50 e0       	ldi	r21, 0x00	; 0
    25e8:	59 01       	movw	r10, r18
    25ea:	6a 01       	movw	r12, r20
    25ec:	a6 28       	or	r10, r6
    25ee:	b7 28       	or	r11, r7
    25f0:	c8 28       	or	r12, r8
    25f2:	d9 28       	or	r13, r9
    25f4:	0b c0       	rjmp	.+22     	; 0x260c <_fpadd_parts+0x192>
    25f6:	82 15       	cp	r24, r2
    25f8:	93 05       	cpc	r25, r3
    25fa:	2c f0       	brlt	.+10     	; 0x2606 <_fpadd_parts+0x18c>
    25fc:	1c 01       	movw	r2, r24
    25fe:	aa 24       	eor	r10, r10
    2600:	bb 24       	eor	r11, r11
    2602:	65 01       	movw	r12, r10
    2604:	03 c0       	rjmp	.+6      	; 0x260c <_fpadd_parts+0x192>
    2606:	ee 24       	eor	r14, r14
    2608:	ff 24       	eor	r15, r15
    260a:	87 01       	movw	r16, r14
    260c:	11 96       	adiw	r26, 0x01	; 1
    260e:	9c 91       	ld	r25, X
    2610:	d2 01       	movw	r26, r4
    2612:	11 96       	adiw	r26, 0x01	; 1
    2614:	8c 91       	ld	r24, X
    2616:	98 17       	cp	r25, r24
    2618:	09 f4       	brne	.+2      	; 0x261c <_fpadd_parts+0x1a2>
    261a:	45 c0       	rjmp	.+138    	; 0x26a6 <_fpadd_parts+0x22c>
    261c:	99 23       	and	r25, r25
    261e:	39 f0       	breq	.+14     	; 0x262e <_fpadd_parts+0x1b4>
    2620:	a8 01       	movw	r20, r16
    2622:	97 01       	movw	r18, r14
    2624:	2a 19       	sub	r18, r10
    2626:	3b 09       	sbc	r19, r11
    2628:	4c 09       	sbc	r20, r12
    262a:	5d 09       	sbc	r21, r13
    262c:	06 c0       	rjmp	.+12     	; 0x263a <_fpadd_parts+0x1c0>
    262e:	a6 01       	movw	r20, r12
    2630:	95 01       	movw	r18, r10
    2632:	2e 19       	sub	r18, r14
    2634:	3f 09       	sbc	r19, r15
    2636:	40 0b       	sbc	r20, r16
    2638:	51 0b       	sbc	r21, r17
    263a:	57 fd       	sbrc	r21, 7
    263c:	08 c0       	rjmp	.+16     	; 0x264e <_fpadd_parts+0x1d4>
    263e:	11 82       	std	Z+1, r1	; 0x01
    2640:	33 82       	std	Z+3, r3	; 0x03
    2642:	22 82       	std	Z+2, r2	; 0x02
    2644:	24 83       	std	Z+4, r18	; 0x04
    2646:	35 83       	std	Z+5, r19	; 0x05
    2648:	46 83       	std	Z+6, r20	; 0x06
    264a:	57 83       	std	Z+7, r21	; 0x07
    264c:	1d c0       	rjmp	.+58     	; 0x2688 <_fpadd_parts+0x20e>
    264e:	81 e0       	ldi	r24, 0x01	; 1
    2650:	81 83       	std	Z+1, r24	; 0x01
    2652:	33 82       	std	Z+3, r3	; 0x03
    2654:	22 82       	std	Z+2, r2	; 0x02
    2656:	88 27       	eor	r24, r24
    2658:	99 27       	eor	r25, r25
    265a:	dc 01       	movw	r26, r24
    265c:	82 1b       	sub	r24, r18
    265e:	93 0b       	sbc	r25, r19
    2660:	a4 0b       	sbc	r26, r20
    2662:	b5 0b       	sbc	r27, r21
    2664:	84 83       	std	Z+4, r24	; 0x04
    2666:	95 83       	std	Z+5, r25	; 0x05
    2668:	a6 83       	std	Z+6, r26	; 0x06
    266a:	b7 83       	std	Z+7, r27	; 0x07
    266c:	0d c0       	rjmp	.+26     	; 0x2688 <_fpadd_parts+0x20e>
    266e:	22 0f       	add	r18, r18
    2670:	33 1f       	adc	r19, r19
    2672:	44 1f       	adc	r20, r20
    2674:	55 1f       	adc	r21, r21
    2676:	24 83       	std	Z+4, r18	; 0x04
    2678:	35 83       	std	Z+5, r19	; 0x05
    267a:	46 83       	std	Z+6, r20	; 0x06
    267c:	57 83       	std	Z+7, r21	; 0x07
    267e:	82 81       	ldd	r24, Z+2	; 0x02
    2680:	93 81       	ldd	r25, Z+3	; 0x03
    2682:	01 97       	sbiw	r24, 0x01	; 1
    2684:	93 83       	std	Z+3, r25	; 0x03
    2686:	82 83       	std	Z+2, r24	; 0x02
    2688:	24 81       	ldd	r18, Z+4	; 0x04
    268a:	35 81       	ldd	r19, Z+5	; 0x05
    268c:	46 81       	ldd	r20, Z+6	; 0x06
    268e:	57 81       	ldd	r21, Z+7	; 0x07
    2690:	da 01       	movw	r26, r20
    2692:	c9 01       	movw	r24, r18
    2694:	01 97       	sbiw	r24, 0x01	; 1
    2696:	a1 09       	sbc	r26, r1
    2698:	b1 09       	sbc	r27, r1
    269a:	8f 5f       	subi	r24, 0xFF	; 255
    269c:	9f 4f       	sbci	r25, 0xFF	; 255
    269e:	af 4f       	sbci	r26, 0xFF	; 255
    26a0:	bf 43       	sbci	r27, 0x3F	; 63
    26a2:	28 f3       	brcs	.-54     	; 0x266e <_fpadd_parts+0x1f4>
    26a4:	0b c0       	rjmp	.+22     	; 0x26bc <_fpadd_parts+0x242>
    26a6:	91 83       	std	Z+1, r25	; 0x01
    26a8:	33 82       	std	Z+3, r3	; 0x03
    26aa:	22 82       	std	Z+2, r2	; 0x02
    26ac:	ea 0c       	add	r14, r10
    26ae:	fb 1c       	adc	r15, r11
    26b0:	0c 1d       	adc	r16, r12
    26b2:	1d 1d       	adc	r17, r13
    26b4:	e4 82       	std	Z+4, r14	; 0x04
    26b6:	f5 82       	std	Z+5, r15	; 0x05
    26b8:	06 83       	std	Z+6, r16	; 0x06
    26ba:	17 83       	std	Z+7, r17	; 0x07
    26bc:	83 e0       	ldi	r24, 0x03	; 3
    26be:	80 83       	st	Z, r24
    26c0:	24 81       	ldd	r18, Z+4	; 0x04
    26c2:	35 81       	ldd	r19, Z+5	; 0x05
    26c4:	46 81       	ldd	r20, Z+6	; 0x06
    26c6:	57 81       	ldd	r21, Z+7	; 0x07
    26c8:	57 ff       	sbrs	r21, 7
    26ca:	1a c0       	rjmp	.+52     	; 0x2700 <_fpadd_parts+0x286>
    26cc:	c9 01       	movw	r24, r18
    26ce:	aa 27       	eor	r26, r26
    26d0:	97 fd       	sbrc	r25, 7
    26d2:	a0 95       	com	r26
    26d4:	ba 2f       	mov	r27, r26
    26d6:	81 70       	andi	r24, 0x01	; 1
    26d8:	90 70       	andi	r25, 0x00	; 0
    26da:	a0 70       	andi	r26, 0x00	; 0
    26dc:	b0 70       	andi	r27, 0x00	; 0
    26de:	56 95       	lsr	r21
    26e0:	47 95       	ror	r20
    26e2:	37 95       	ror	r19
    26e4:	27 95       	ror	r18
    26e6:	82 2b       	or	r24, r18
    26e8:	93 2b       	or	r25, r19
    26ea:	a4 2b       	or	r26, r20
    26ec:	b5 2b       	or	r27, r21
    26ee:	84 83       	std	Z+4, r24	; 0x04
    26f0:	95 83       	std	Z+5, r25	; 0x05
    26f2:	a6 83       	std	Z+6, r26	; 0x06
    26f4:	b7 83       	std	Z+7, r27	; 0x07
    26f6:	82 81       	ldd	r24, Z+2	; 0x02
    26f8:	93 81       	ldd	r25, Z+3	; 0x03
    26fa:	01 96       	adiw	r24, 0x01	; 1
    26fc:	93 83       	std	Z+3, r25	; 0x03
    26fe:	82 83       	std	Z+2, r24	; 0x02
    2700:	df 01       	movw	r26, r30
    2702:	01 c0       	rjmp	.+2      	; 0x2706 <_fpadd_parts+0x28c>
    2704:	d2 01       	movw	r26, r4
    2706:	cd 01       	movw	r24, r26
    2708:	cd b7       	in	r28, 0x3d	; 61
    270a:	de b7       	in	r29, 0x3e	; 62
    270c:	e2 e1       	ldi	r30, 0x12	; 18
    270e:	0c 94 6f 19 	jmp	0x32de	; 0x32de <__epilogue_restores__>

00002712 <__subsf3>:
    2712:	a0 e2       	ldi	r26, 0x20	; 32
    2714:	b0 e0       	ldi	r27, 0x00	; 0
    2716:	ef e8       	ldi	r30, 0x8F	; 143
    2718:	f3 e1       	ldi	r31, 0x13	; 19
    271a:	0c 94 5f 19 	jmp	0x32be	; 0x32be <__prologue_saves__+0x18>
    271e:	69 83       	std	Y+1, r22	; 0x01
    2720:	7a 83       	std	Y+2, r23	; 0x02
    2722:	8b 83       	std	Y+3, r24	; 0x03
    2724:	9c 83       	std	Y+4, r25	; 0x04
    2726:	2d 83       	std	Y+5, r18	; 0x05
    2728:	3e 83       	std	Y+6, r19	; 0x06
    272a:	4f 83       	std	Y+7, r20	; 0x07
    272c:	58 87       	std	Y+8, r21	; 0x08
    272e:	e9 e0       	ldi	r30, 0x09	; 9
    2730:	ee 2e       	mov	r14, r30
    2732:	f1 2c       	mov	r15, r1
    2734:	ec 0e       	add	r14, r28
    2736:	fd 1e       	adc	r15, r29
    2738:	ce 01       	movw	r24, r28
    273a:	01 96       	adiw	r24, 0x01	; 1
    273c:	b7 01       	movw	r22, r14
    273e:	0e 94 3c 18 	call	0x3078	; 0x3078 <__unpack_f>
    2742:	8e 01       	movw	r16, r28
    2744:	0f 5e       	subi	r16, 0xEF	; 239
    2746:	1f 4f       	sbci	r17, 0xFF	; 255
    2748:	ce 01       	movw	r24, r28
    274a:	05 96       	adiw	r24, 0x05	; 5
    274c:	b8 01       	movw	r22, r16
    274e:	0e 94 3c 18 	call	0x3078	; 0x3078 <__unpack_f>
    2752:	8a 89       	ldd	r24, Y+18	; 0x12
    2754:	91 e0       	ldi	r25, 0x01	; 1
    2756:	89 27       	eor	r24, r25
    2758:	8a 8b       	std	Y+18, r24	; 0x12
    275a:	c7 01       	movw	r24, r14
    275c:	b8 01       	movw	r22, r16
    275e:	ae 01       	movw	r20, r28
    2760:	47 5e       	subi	r20, 0xE7	; 231
    2762:	5f 4f       	sbci	r21, 0xFF	; 255
    2764:	0e 94 3d 12 	call	0x247a	; 0x247a <_fpadd_parts>
    2768:	0e 94 67 17 	call	0x2ece	; 0x2ece <__pack_f>
    276c:	a0 96       	adiw	r28, 0x20	; 32
    276e:	e6 e0       	ldi	r30, 0x06	; 6
    2770:	0c 94 7b 19 	jmp	0x32f6	; 0x32f6 <__epilogue_restores__+0x18>

00002774 <__addsf3>:
    2774:	a0 e2       	ldi	r26, 0x20	; 32
    2776:	b0 e0       	ldi	r27, 0x00	; 0
    2778:	e0 ec       	ldi	r30, 0xC0	; 192
    277a:	f3 e1       	ldi	r31, 0x13	; 19
    277c:	0c 94 5f 19 	jmp	0x32be	; 0x32be <__prologue_saves__+0x18>
    2780:	69 83       	std	Y+1, r22	; 0x01
    2782:	7a 83       	std	Y+2, r23	; 0x02
    2784:	8b 83       	std	Y+3, r24	; 0x03
    2786:	9c 83       	std	Y+4, r25	; 0x04
    2788:	2d 83       	std	Y+5, r18	; 0x05
    278a:	3e 83       	std	Y+6, r19	; 0x06
    278c:	4f 83       	std	Y+7, r20	; 0x07
    278e:	58 87       	std	Y+8, r21	; 0x08
    2790:	f9 e0       	ldi	r31, 0x09	; 9
    2792:	ef 2e       	mov	r14, r31
    2794:	f1 2c       	mov	r15, r1
    2796:	ec 0e       	add	r14, r28
    2798:	fd 1e       	adc	r15, r29
    279a:	ce 01       	movw	r24, r28
    279c:	01 96       	adiw	r24, 0x01	; 1
    279e:	b7 01       	movw	r22, r14
    27a0:	0e 94 3c 18 	call	0x3078	; 0x3078 <__unpack_f>
    27a4:	8e 01       	movw	r16, r28
    27a6:	0f 5e       	subi	r16, 0xEF	; 239
    27a8:	1f 4f       	sbci	r17, 0xFF	; 255
    27aa:	ce 01       	movw	r24, r28
    27ac:	05 96       	adiw	r24, 0x05	; 5
    27ae:	b8 01       	movw	r22, r16
    27b0:	0e 94 3c 18 	call	0x3078	; 0x3078 <__unpack_f>
    27b4:	c7 01       	movw	r24, r14
    27b6:	b8 01       	movw	r22, r16
    27b8:	ae 01       	movw	r20, r28
    27ba:	47 5e       	subi	r20, 0xE7	; 231
    27bc:	5f 4f       	sbci	r21, 0xFF	; 255
    27be:	0e 94 3d 12 	call	0x247a	; 0x247a <_fpadd_parts>
    27c2:	0e 94 67 17 	call	0x2ece	; 0x2ece <__pack_f>
    27c6:	a0 96       	adiw	r28, 0x20	; 32
    27c8:	e6 e0       	ldi	r30, 0x06	; 6
    27ca:	0c 94 7b 19 	jmp	0x32f6	; 0x32f6 <__epilogue_restores__+0x18>

000027ce <__mulsf3>:
    27ce:	a0 e2       	ldi	r26, 0x20	; 32
    27d0:	b0 e0       	ldi	r27, 0x00	; 0
    27d2:	ed ee       	ldi	r30, 0xED	; 237
    27d4:	f3 e1       	ldi	r31, 0x13	; 19
    27d6:	0c 94 53 19 	jmp	0x32a6	; 0x32a6 <__prologue_saves__>
    27da:	69 83       	std	Y+1, r22	; 0x01
    27dc:	7a 83       	std	Y+2, r23	; 0x02
    27de:	8b 83       	std	Y+3, r24	; 0x03
    27e0:	9c 83       	std	Y+4, r25	; 0x04
    27e2:	2d 83       	std	Y+5, r18	; 0x05
    27e4:	3e 83       	std	Y+6, r19	; 0x06
    27e6:	4f 83       	std	Y+7, r20	; 0x07
    27e8:	58 87       	std	Y+8, r21	; 0x08
    27ea:	ce 01       	movw	r24, r28
    27ec:	01 96       	adiw	r24, 0x01	; 1
    27ee:	be 01       	movw	r22, r28
    27f0:	67 5f       	subi	r22, 0xF7	; 247
    27f2:	7f 4f       	sbci	r23, 0xFF	; 255
    27f4:	0e 94 3c 18 	call	0x3078	; 0x3078 <__unpack_f>
    27f8:	ce 01       	movw	r24, r28
    27fa:	05 96       	adiw	r24, 0x05	; 5
    27fc:	be 01       	movw	r22, r28
    27fe:	6f 5e       	subi	r22, 0xEF	; 239
    2800:	7f 4f       	sbci	r23, 0xFF	; 255
    2802:	0e 94 3c 18 	call	0x3078	; 0x3078 <__unpack_f>
    2806:	99 85       	ldd	r25, Y+9	; 0x09
    2808:	92 30       	cpi	r25, 0x02	; 2
    280a:	88 f0       	brcs	.+34     	; 0x282e <__mulsf3+0x60>
    280c:	89 89       	ldd	r24, Y+17	; 0x11
    280e:	82 30       	cpi	r24, 0x02	; 2
    2810:	c8 f0       	brcs	.+50     	; 0x2844 <__mulsf3+0x76>
    2812:	94 30       	cpi	r25, 0x04	; 4
    2814:	19 f4       	brne	.+6      	; 0x281c <__mulsf3+0x4e>
    2816:	82 30       	cpi	r24, 0x02	; 2
    2818:	51 f4       	brne	.+20     	; 0x282e <__mulsf3+0x60>
    281a:	04 c0       	rjmp	.+8      	; 0x2824 <__mulsf3+0x56>
    281c:	84 30       	cpi	r24, 0x04	; 4
    281e:	29 f4       	brne	.+10     	; 0x282a <__mulsf3+0x5c>
    2820:	92 30       	cpi	r25, 0x02	; 2
    2822:	81 f4       	brne	.+32     	; 0x2844 <__mulsf3+0x76>
    2824:	83 e2       	ldi	r24, 0x23	; 35
    2826:	91 e0       	ldi	r25, 0x01	; 1
    2828:	c6 c0       	rjmp	.+396    	; 0x29b6 <__mulsf3+0x1e8>
    282a:	92 30       	cpi	r25, 0x02	; 2
    282c:	49 f4       	brne	.+18     	; 0x2840 <__mulsf3+0x72>
    282e:	20 e0       	ldi	r18, 0x00	; 0
    2830:	9a 85       	ldd	r25, Y+10	; 0x0a
    2832:	8a 89       	ldd	r24, Y+18	; 0x12
    2834:	98 13       	cpse	r25, r24
    2836:	21 e0       	ldi	r18, 0x01	; 1
    2838:	2a 87       	std	Y+10, r18	; 0x0a
    283a:	ce 01       	movw	r24, r28
    283c:	09 96       	adiw	r24, 0x09	; 9
    283e:	bb c0       	rjmp	.+374    	; 0x29b6 <__mulsf3+0x1e8>
    2840:	82 30       	cpi	r24, 0x02	; 2
    2842:	49 f4       	brne	.+18     	; 0x2856 <__mulsf3+0x88>
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	9a 85       	ldd	r25, Y+10	; 0x0a
    2848:	8a 89       	ldd	r24, Y+18	; 0x12
    284a:	98 13       	cpse	r25, r24
    284c:	21 e0       	ldi	r18, 0x01	; 1
    284e:	2a 8b       	std	Y+18, r18	; 0x12
    2850:	ce 01       	movw	r24, r28
    2852:	41 96       	adiw	r24, 0x11	; 17
    2854:	b0 c0       	rjmp	.+352    	; 0x29b6 <__mulsf3+0x1e8>
    2856:	2d 84       	ldd	r2, Y+13	; 0x0d
    2858:	3e 84       	ldd	r3, Y+14	; 0x0e
    285a:	4f 84       	ldd	r4, Y+15	; 0x0f
    285c:	58 88       	ldd	r5, Y+16	; 0x10
    285e:	6d 88       	ldd	r6, Y+21	; 0x15
    2860:	7e 88       	ldd	r7, Y+22	; 0x16
    2862:	8f 88       	ldd	r8, Y+23	; 0x17
    2864:	98 8c       	ldd	r9, Y+24	; 0x18
    2866:	ee 24       	eor	r14, r14
    2868:	ff 24       	eor	r15, r15
    286a:	87 01       	movw	r16, r14
    286c:	aa 24       	eor	r10, r10
    286e:	bb 24       	eor	r11, r11
    2870:	65 01       	movw	r12, r10
    2872:	40 e0       	ldi	r20, 0x00	; 0
    2874:	50 e0       	ldi	r21, 0x00	; 0
    2876:	60 e0       	ldi	r22, 0x00	; 0
    2878:	70 e0       	ldi	r23, 0x00	; 0
    287a:	e0 e0       	ldi	r30, 0x00	; 0
    287c:	f0 e0       	ldi	r31, 0x00	; 0
    287e:	c1 01       	movw	r24, r2
    2880:	81 70       	andi	r24, 0x01	; 1
    2882:	90 70       	andi	r25, 0x00	; 0
    2884:	89 2b       	or	r24, r25
    2886:	e9 f0       	breq	.+58     	; 0x28c2 <__mulsf3+0xf4>
    2888:	e6 0c       	add	r14, r6
    288a:	f7 1c       	adc	r15, r7
    288c:	08 1d       	adc	r16, r8
    288e:	19 1d       	adc	r17, r9
    2890:	9a 01       	movw	r18, r20
    2892:	ab 01       	movw	r20, r22
    2894:	2a 0d       	add	r18, r10
    2896:	3b 1d       	adc	r19, r11
    2898:	4c 1d       	adc	r20, r12
    289a:	5d 1d       	adc	r21, r13
    289c:	80 e0       	ldi	r24, 0x00	; 0
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	a0 e0       	ldi	r26, 0x00	; 0
    28a2:	b0 e0       	ldi	r27, 0x00	; 0
    28a4:	e6 14       	cp	r14, r6
    28a6:	f7 04       	cpc	r15, r7
    28a8:	08 05       	cpc	r16, r8
    28aa:	19 05       	cpc	r17, r9
    28ac:	20 f4       	brcc	.+8      	; 0x28b6 <__mulsf3+0xe8>
    28ae:	81 e0       	ldi	r24, 0x01	; 1
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	a0 e0       	ldi	r26, 0x00	; 0
    28b4:	b0 e0       	ldi	r27, 0x00	; 0
    28b6:	ba 01       	movw	r22, r20
    28b8:	a9 01       	movw	r20, r18
    28ba:	48 0f       	add	r20, r24
    28bc:	59 1f       	adc	r21, r25
    28be:	6a 1f       	adc	r22, r26
    28c0:	7b 1f       	adc	r23, r27
    28c2:	aa 0c       	add	r10, r10
    28c4:	bb 1c       	adc	r11, r11
    28c6:	cc 1c       	adc	r12, r12
    28c8:	dd 1c       	adc	r13, r13
    28ca:	97 fe       	sbrs	r9, 7
    28cc:	08 c0       	rjmp	.+16     	; 0x28de <__mulsf3+0x110>
    28ce:	81 e0       	ldi	r24, 0x01	; 1
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	a0 e0       	ldi	r26, 0x00	; 0
    28d4:	b0 e0       	ldi	r27, 0x00	; 0
    28d6:	a8 2a       	or	r10, r24
    28d8:	b9 2a       	or	r11, r25
    28da:	ca 2a       	or	r12, r26
    28dc:	db 2a       	or	r13, r27
    28de:	31 96       	adiw	r30, 0x01	; 1
    28e0:	e0 32       	cpi	r30, 0x20	; 32
    28e2:	f1 05       	cpc	r31, r1
    28e4:	49 f0       	breq	.+18     	; 0x28f8 <__mulsf3+0x12a>
    28e6:	66 0c       	add	r6, r6
    28e8:	77 1c       	adc	r7, r7
    28ea:	88 1c       	adc	r8, r8
    28ec:	99 1c       	adc	r9, r9
    28ee:	56 94       	lsr	r5
    28f0:	47 94       	ror	r4
    28f2:	37 94       	ror	r3
    28f4:	27 94       	ror	r2
    28f6:	c3 cf       	rjmp	.-122    	; 0x287e <__mulsf3+0xb0>
    28f8:	fa 85       	ldd	r31, Y+10	; 0x0a
    28fa:	ea 89       	ldd	r30, Y+18	; 0x12
    28fc:	2b 89       	ldd	r18, Y+19	; 0x13
    28fe:	3c 89       	ldd	r19, Y+20	; 0x14
    2900:	8b 85       	ldd	r24, Y+11	; 0x0b
    2902:	9c 85       	ldd	r25, Y+12	; 0x0c
    2904:	28 0f       	add	r18, r24
    2906:	39 1f       	adc	r19, r25
    2908:	2e 5f       	subi	r18, 0xFE	; 254
    290a:	3f 4f       	sbci	r19, 0xFF	; 255
    290c:	17 c0       	rjmp	.+46     	; 0x293c <__mulsf3+0x16e>
    290e:	ca 01       	movw	r24, r20
    2910:	81 70       	andi	r24, 0x01	; 1
    2912:	90 70       	andi	r25, 0x00	; 0
    2914:	89 2b       	or	r24, r25
    2916:	61 f0       	breq	.+24     	; 0x2930 <__mulsf3+0x162>
    2918:	16 95       	lsr	r17
    291a:	07 95       	ror	r16
    291c:	f7 94       	ror	r15
    291e:	e7 94       	ror	r14
    2920:	80 e0       	ldi	r24, 0x00	; 0
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	a0 e0       	ldi	r26, 0x00	; 0
    2926:	b0 e8       	ldi	r27, 0x80	; 128
    2928:	e8 2a       	or	r14, r24
    292a:	f9 2a       	or	r15, r25
    292c:	0a 2b       	or	r16, r26
    292e:	1b 2b       	or	r17, r27
    2930:	76 95       	lsr	r23
    2932:	67 95       	ror	r22
    2934:	57 95       	ror	r21
    2936:	47 95       	ror	r20
    2938:	2f 5f       	subi	r18, 0xFF	; 255
    293a:	3f 4f       	sbci	r19, 0xFF	; 255
    293c:	77 fd       	sbrc	r23, 7
    293e:	e7 cf       	rjmp	.-50     	; 0x290e <__mulsf3+0x140>
    2940:	0c c0       	rjmp	.+24     	; 0x295a <__mulsf3+0x18c>
    2942:	44 0f       	add	r20, r20
    2944:	55 1f       	adc	r21, r21
    2946:	66 1f       	adc	r22, r22
    2948:	77 1f       	adc	r23, r23
    294a:	17 fd       	sbrc	r17, 7
    294c:	41 60       	ori	r20, 0x01	; 1
    294e:	ee 0c       	add	r14, r14
    2950:	ff 1c       	adc	r15, r15
    2952:	00 1f       	adc	r16, r16
    2954:	11 1f       	adc	r17, r17
    2956:	21 50       	subi	r18, 0x01	; 1
    2958:	30 40       	sbci	r19, 0x00	; 0
    295a:	40 30       	cpi	r20, 0x00	; 0
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	59 07       	cpc	r21, r25
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	69 07       	cpc	r22, r25
    2964:	90 e4       	ldi	r25, 0x40	; 64
    2966:	79 07       	cpc	r23, r25
    2968:	60 f3       	brcs	.-40     	; 0x2942 <__mulsf3+0x174>
    296a:	2b 8f       	std	Y+27, r18	; 0x1b
    296c:	3c 8f       	std	Y+28, r19	; 0x1c
    296e:	db 01       	movw	r26, r22
    2970:	ca 01       	movw	r24, r20
    2972:	8f 77       	andi	r24, 0x7F	; 127
    2974:	90 70       	andi	r25, 0x00	; 0
    2976:	a0 70       	andi	r26, 0x00	; 0
    2978:	b0 70       	andi	r27, 0x00	; 0
    297a:	80 34       	cpi	r24, 0x40	; 64
    297c:	91 05       	cpc	r25, r1
    297e:	a1 05       	cpc	r26, r1
    2980:	b1 05       	cpc	r27, r1
    2982:	61 f4       	brne	.+24     	; 0x299c <__mulsf3+0x1ce>
    2984:	47 fd       	sbrc	r20, 7
    2986:	0a c0       	rjmp	.+20     	; 0x299c <__mulsf3+0x1ce>
    2988:	e1 14       	cp	r14, r1
    298a:	f1 04       	cpc	r15, r1
    298c:	01 05       	cpc	r16, r1
    298e:	11 05       	cpc	r17, r1
    2990:	29 f0       	breq	.+10     	; 0x299c <__mulsf3+0x1ce>
    2992:	40 5c       	subi	r20, 0xC0	; 192
    2994:	5f 4f       	sbci	r21, 0xFF	; 255
    2996:	6f 4f       	sbci	r22, 0xFF	; 255
    2998:	7f 4f       	sbci	r23, 0xFF	; 255
    299a:	40 78       	andi	r20, 0x80	; 128
    299c:	1a 8e       	std	Y+26, r1	; 0x1a
    299e:	fe 17       	cp	r31, r30
    29a0:	11 f0       	breq	.+4      	; 0x29a6 <__mulsf3+0x1d8>
    29a2:	81 e0       	ldi	r24, 0x01	; 1
    29a4:	8a 8f       	std	Y+26, r24	; 0x1a
    29a6:	4d 8f       	std	Y+29, r20	; 0x1d
    29a8:	5e 8f       	std	Y+30, r21	; 0x1e
    29aa:	6f 8f       	std	Y+31, r22	; 0x1f
    29ac:	78 a3       	std	Y+32, r23	; 0x20
    29ae:	83 e0       	ldi	r24, 0x03	; 3
    29b0:	89 8f       	std	Y+25, r24	; 0x19
    29b2:	ce 01       	movw	r24, r28
    29b4:	49 96       	adiw	r24, 0x19	; 25
    29b6:	0e 94 67 17 	call	0x2ece	; 0x2ece <__pack_f>
    29ba:	a0 96       	adiw	r28, 0x20	; 32
    29bc:	e2 e1       	ldi	r30, 0x12	; 18
    29be:	0c 94 6f 19 	jmp	0x32de	; 0x32de <__epilogue_restores__>

000029c2 <__divsf3>:
    29c2:	a8 e1       	ldi	r26, 0x18	; 24
    29c4:	b0 e0       	ldi	r27, 0x00	; 0
    29c6:	e7 ee       	ldi	r30, 0xE7	; 231
    29c8:	f4 e1       	ldi	r31, 0x14	; 20
    29ca:	0c 94 5b 19 	jmp	0x32b6	; 0x32b6 <__prologue_saves__+0x10>
    29ce:	69 83       	std	Y+1, r22	; 0x01
    29d0:	7a 83       	std	Y+2, r23	; 0x02
    29d2:	8b 83       	std	Y+3, r24	; 0x03
    29d4:	9c 83       	std	Y+4, r25	; 0x04
    29d6:	2d 83       	std	Y+5, r18	; 0x05
    29d8:	3e 83       	std	Y+6, r19	; 0x06
    29da:	4f 83       	std	Y+7, r20	; 0x07
    29dc:	58 87       	std	Y+8, r21	; 0x08
    29de:	b9 e0       	ldi	r27, 0x09	; 9
    29e0:	eb 2e       	mov	r14, r27
    29e2:	f1 2c       	mov	r15, r1
    29e4:	ec 0e       	add	r14, r28
    29e6:	fd 1e       	adc	r15, r29
    29e8:	ce 01       	movw	r24, r28
    29ea:	01 96       	adiw	r24, 0x01	; 1
    29ec:	b7 01       	movw	r22, r14
    29ee:	0e 94 3c 18 	call	0x3078	; 0x3078 <__unpack_f>
    29f2:	8e 01       	movw	r16, r28
    29f4:	0f 5e       	subi	r16, 0xEF	; 239
    29f6:	1f 4f       	sbci	r17, 0xFF	; 255
    29f8:	ce 01       	movw	r24, r28
    29fa:	05 96       	adiw	r24, 0x05	; 5
    29fc:	b8 01       	movw	r22, r16
    29fe:	0e 94 3c 18 	call	0x3078	; 0x3078 <__unpack_f>
    2a02:	29 85       	ldd	r18, Y+9	; 0x09
    2a04:	22 30       	cpi	r18, 0x02	; 2
    2a06:	08 f4       	brcc	.+2      	; 0x2a0a <__divsf3+0x48>
    2a08:	7e c0       	rjmp	.+252    	; 0x2b06 <__divsf3+0x144>
    2a0a:	39 89       	ldd	r19, Y+17	; 0x11
    2a0c:	32 30       	cpi	r19, 0x02	; 2
    2a0e:	10 f4       	brcc	.+4      	; 0x2a14 <__divsf3+0x52>
    2a10:	b8 01       	movw	r22, r16
    2a12:	7c c0       	rjmp	.+248    	; 0x2b0c <__divsf3+0x14a>
    2a14:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a16:	9a 89       	ldd	r25, Y+18	; 0x12
    2a18:	89 27       	eor	r24, r25
    2a1a:	8a 87       	std	Y+10, r24	; 0x0a
    2a1c:	24 30       	cpi	r18, 0x04	; 4
    2a1e:	11 f0       	breq	.+4      	; 0x2a24 <__divsf3+0x62>
    2a20:	22 30       	cpi	r18, 0x02	; 2
    2a22:	31 f4       	brne	.+12     	; 0x2a30 <__divsf3+0x6e>
    2a24:	23 17       	cp	r18, r19
    2a26:	09 f0       	breq	.+2      	; 0x2a2a <__divsf3+0x68>
    2a28:	6e c0       	rjmp	.+220    	; 0x2b06 <__divsf3+0x144>
    2a2a:	63 e2       	ldi	r22, 0x23	; 35
    2a2c:	71 e0       	ldi	r23, 0x01	; 1
    2a2e:	6e c0       	rjmp	.+220    	; 0x2b0c <__divsf3+0x14a>
    2a30:	34 30       	cpi	r19, 0x04	; 4
    2a32:	39 f4       	brne	.+14     	; 0x2a42 <__divsf3+0x80>
    2a34:	1d 86       	std	Y+13, r1	; 0x0d
    2a36:	1e 86       	std	Y+14, r1	; 0x0e
    2a38:	1f 86       	std	Y+15, r1	; 0x0f
    2a3a:	18 8a       	std	Y+16, r1	; 0x10
    2a3c:	1c 86       	std	Y+12, r1	; 0x0c
    2a3e:	1b 86       	std	Y+11, r1	; 0x0b
    2a40:	04 c0       	rjmp	.+8      	; 0x2a4a <__divsf3+0x88>
    2a42:	32 30       	cpi	r19, 0x02	; 2
    2a44:	21 f4       	brne	.+8      	; 0x2a4e <__divsf3+0x8c>
    2a46:	84 e0       	ldi	r24, 0x04	; 4
    2a48:	89 87       	std	Y+9, r24	; 0x09
    2a4a:	b7 01       	movw	r22, r14
    2a4c:	5f c0       	rjmp	.+190    	; 0x2b0c <__divsf3+0x14a>
    2a4e:	2b 85       	ldd	r18, Y+11	; 0x0b
    2a50:	3c 85       	ldd	r19, Y+12	; 0x0c
    2a52:	8b 89       	ldd	r24, Y+19	; 0x13
    2a54:	9c 89       	ldd	r25, Y+20	; 0x14
    2a56:	28 1b       	sub	r18, r24
    2a58:	39 0b       	sbc	r19, r25
    2a5a:	3c 87       	std	Y+12, r19	; 0x0c
    2a5c:	2b 87       	std	Y+11, r18	; 0x0b
    2a5e:	ed 84       	ldd	r14, Y+13	; 0x0d
    2a60:	fe 84       	ldd	r15, Y+14	; 0x0e
    2a62:	0f 85       	ldd	r16, Y+15	; 0x0f
    2a64:	18 89       	ldd	r17, Y+16	; 0x10
    2a66:	ad 88       	ldd	r10, Y+21	; 0x15
    2a68:	be 88       	ldd	r11, Y+22	; 0x16
    2a6a:	cf 88       	ldd	r12, Y+23	; 0x17
    2a6c:	d8 8c       	ldd	r13, Y+24	; 0x18
    2a6e:	ea 14       	cp	r14, r10
    2a70:	fb 04       	cpc	r15, r11
    2a72:	0c 05       	cpc	r16, r12
    2a74:	1d 05       	cpc	r17, r13
    2a76:	40 f4       	brcc	.+16     	; 0x2a88 <__divsf3+0xc6>
    2a78:	ee 0c       	add	r14, r14
    2a7a:	ff 1c       	adc	r15, r15
    2a7c:	00 1f       	adc	r16, r16
    2a7e:	11 1f       	adc	r17, r17
    2a80:	21 50       	subi	r18, 0x01	; 1
    2a82:	30 40       	sbci	r19, 0x00	; 0
    2a84:	3c 87       	std	Y+12, r19	; 0x0c
    2a86:	2b 87       	std	Y+11, r18	; 0x0b
    2a88:	20 e0       	ldi	r18, 0x00	; 0
    2a8a:	30 e0       	ldi	r19, 0x00	; 0
    2a8c:	40 e0       	ldi	r20, 0x00	; 0
    2a8e:	50 e0       	ldi	r21, 0x00	; 0
    2a90:	80 e0       	ldi	r24, 0x00	; 0
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	a0 e0       	ldi	r26, 0x00	; 0
    2a96:	b0 e4       	ldi	r27, 0x40	; 64
    2a98:	60 e0       	ldi	r22, 0x00	; 0
    2a9a:	70 e0       	ldi	r23, 0x00	; 0
    2a9c:	ea 14       	cp	r14, r10
    2a9e:	fb 04       	cpc	r15, r11
    2aa0:	0c 05       	cpc	r16, r12
    2aa2:	1d 05       	cpc	r17, r13
    2aa4:	40 f0       	brcs	.+16     	; 0x2ab6 <__divsf3+0xf4>
    2aa6:	28 2b       	or	r18, r24
    2aa8:	39 2b       	or	r19, r25
    2aaa:	4a 2b       	or	r20, r26
    2aac:	5b 2b       	or	r21, r27
    2aae:	ea 18       	sub	r14, r10
    2ab0:	fb 08       	sbc	r15, r11
    2ab2:	0c 09       	sbc	r16, r12
    2ab4:	1d 09       	sbc	r17, r13
    2ab6:	b6 95       	lsr	r27
    2ab8:	a7 95       	ror	r26
    2aba:	97 95       	ror	r25
    2abc:	87 95       	ror	r24
    2abe:	ee 0c       	add	r14, r14
    2ac0:	ff 1c       	adc	r15, r15
    2ac2:	00 1f       	adc	r16, r16
    2ac4:	11 1f       	adc	r17, r17
    2ac6:	6f 5f       	subi	r22, 0xFF	; 255
    2ac8:	7f 4f       	sbci	r23, 0xFF	; 255
    2aca:	6f 31       	cpi	r22, 0x1F	; 31
    2acc:	71 05       	cpc	r23, r1
    2ace:	31 f7       	brne	.-52     	; 0x2a9c <__divsf3+0xda>
    2ad0:	da 01       	movw	r26, r20
    2ad2:	c9 01       	movw	r24, r18
    2ad4:	8f 77       	andi	r24, 0x7F	; 127
    2ad6:	90 70       	andi	r25, 0x00	; 0
    2ad8:	a0 70       	andi	r26, 0x00	; 0
    2ada:	b0 70       	andi	r27, 0x00	; 0
    2adc:	80 34       	cpi	r24, 0x40	; 64
    2ade:	91 05       	cpc	r25, r1
    2ae0:	a1 05       	cpc	r26, r1
    2ae2:	b1 05       	cpc	r27, r1
    2ae4:	61 f4       	brne	.+24     	; 0x2afe <__divsf3+0x13c>
    2ae6:	27 fd       	sbrc	r18, 7
    2ae8:	0a c0       	rjmp	.+20     	; 0x2afe <__divsf3+0x13c>
    2aea:	e1 14       	cp	r14, r1
    2aec:	f1 04       	cpc	r15, r1
    2aee:	01 05       	cpc	r16, r1
    2af0:	11 05       	cpc	r17, r1
    2af2:	29 f0       	breq	.+10     	; 0x2afe <__divsf3+0x13c>
    2af4:	20 5c       	subi	r18, 0xC0	; 192
    2af6:	3f 4f       	sbci	r19, 0xFF	; 255
    2af8:	4f 4f       	sbci	r20, 0xFF	; 255
    2afa:	5f 4f       	sbci	r21, 0xFF	; 255
    2afc:	20 78       	andi	r18, 0x80	; 128
    2afe:	2d 87       	std	Y+13, r18	; 0x0d
    2b00:	3e 87       	std	Y+14, r19	; 0x0e
    2b02:	4f 87       	std	Y+15, r20	; 0x0f
    2b04:	58 8b       	std	Y+16, r21	; 0x10
    2b06:	be 01       	movw	r22, r28
    2b08:	67 5f       	subi	r22, 0xF7	; 247
    2b0a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b0c:	cb 01       	movw	r24, r22
    2b0e:	0e 94 67 17 	call	0x2ece	; 0x2ece <__pack_f>
    2b12:	68 96       	adiw	r28, 0x18	; 24
    2b14:	ea e0       	ldi	r30, 0x0A	; 10
    2b16:	0c 94 77 19 	jmp	0x32ee	; 0x32ee <__epilogue_restores__+0x10>

00002b1a <__gtsf2>:
    2b1a:	a8 e1       	ldi	r26, 0x18	; 24
    2b1c:	b0 e0       	ldi	r27, 0x00	; 0
    2b1e:	e3 e9       	ldi	r30, 0x93	; 147
    2b20:	f5 e1       	ldi	r31, 0x15	; 21
    2b22:	0c 94 5f 19 	jmp	0x32be	; 0x32be <__prologue_saves__+0x18>
    2b26:	69 83       	std	Y+1, r22	; 0x01
    2b28:	7a 83       	std	Y+2, r23	; 0x02
    2b2a:	8b 83       	std	Y+3, r24	; 0x03
    2b2c:	9c 83       	std	Y+4, r25	; 0x04
    2b2e:	2d 83       	std	Y+5, r18	; 0x05
    2b30:	3e 83       	std	Y+6, r19	; 0x06
    2b32:	4f 83       	std	Y+7, r20	; 0x07
    2b34:	58 87       	std	Y+8, r21	; 0x08
    2b36:	89 e0       	ldi	r24, 0x09	; 9
    2b38:	e8 2e       	mov	r14, r24
    2b3a:	f1 2c       	mov	r15, r1
    2b3c:	ec 0e       	add	r14, r28
    2b3e:	fd 1e       	adc	r15, r29
    2b40:	ce 01       	movw	r24, r28
    2b42:	01 96       	adiw	r24, 0x01	; 1
    2b44:	b7 01       	movw	r22, r14
    2b46:	0e 94 3c 18 	call	0x3078	; 0x3078 <__unpack_f>
    2b4a:	8e 01       	movw	r16, r28
    2b4c:	0f 5e       	subi	r16, 0xEF	; 239
    2b4e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b50:	ce 01       	movw	r24, r28
    2b52:	05 96       	adiw	r24, 0x05	; 5
    2b54:	b8 01       	movw	r22, r16
    2b56:	0e 94 3c 18 	call	0x3078	; 0x3078 <__unpack_f>
    2b5a:	89 85       	ldd	r24, Y+9	; 0x09
    2b5c:	82 30       	cpi	r24, 0x02	; 2
    2b5e:	40 f0       	brcs	.+16     	; 0x2b70 <__gtsf2+0x56>
    2b60:	89 89       	ldd	r24, Y+17	; 0x11
    2b62:	82 30       	cpi	r24, 0x02	; 2
    2b64:	28 f0       	brcs	.+10     	; 0x2b70 <__gtsf2+0x56>
    2b66:	c7 01       	movw	r24, r14
    2b68:	b8 01       	movw	r22, r16
    2b6a:	0e 94 b4 18 	call	0x3168	; 0x3168 <__fpcmp_parts_f>
    2b6e:	01 c0       	rjmp	.+2      	; 0x2b72 <__gtsf2+0x58>
    2b70:	8f ef       	ldi	r24, 0xFF	; 255
    2b72:	68 96       	adiw	r28, 0x18	; 24
    2b74:	e6 e0       	ldi	r30, 0x06	; 6
    2b76:	0c 94 7b 19 	jmp	0x32f6	; 0x32f6 <__epilogue_restores__+0x18>

00002b7a <__gesf2>:
    2b7a:	a8 e1       	ldi	r26, 0x18	; 24
    2b7c:	b0 e0       	ldi	r27, 0x00	; 0
    2b7e:	e3 ec       	ldi	r30, 0xC3	; 195
    2b80:	f5 e1       	ldi	r31, 0x15	; 21
    2b82:	0c 94 5f 19 	jmp	0x32be	; 0x32be <__prologue_saves__+0x18>
    2b86:	69 83       	std	Y+1, r22	; 0x01
    2b88:	7a 83       	std	Y+2, r23	; 0x02
    2b8a:	8b 83       	std	Y+3, r24	; 0x03
    2b8c:	9c 83       	std	Y+4, r25	; 0x04
    2b8e:	2d 83       	std	Y+5, r18	; 0x05
    2b90:	3e 83       	std	Y+6, r19	; 0x06
    2b92:	4f 83       	std	Y+7, r20	; 0x07
    2b94:	58 87       	std	Y+8, r21	; 0x08
    2b96:	89 e0       	ldi	r24, 0x09	; 9
    2b98:	e8 2e       	mov	r14, r24
    2b9a:	f1 2c       	mov	r15, r1
    2b9c:	ec 0e       	add	r14, r28
    2b9e:	fd 1e       	adc	r15, r29
    2ba0:	ce 01       	movw	r24, r28
    2ba2:	01 96       	adiw	r24, 0x01	; 1
    2ba4:	b7 01       	movw	r22, r14
    2ba6:	0e 94 3c 18 	call	0x3078	; 0x3078 <__unpack_f>
    2baa:	8e 01       	movw	r16, r28
    2bac:	0f 5e       	subi	r16, 0xEF	; 239
    2bae:	1f 4f       	sbci	r17, 0xFF	; 255
    2bb0:	ce 01       	movw	r24, r28
    2bb2:	05 96       	adiw	r24, 0x05	; 5
    2bb4:	b8 01       	movw	r22, r16
    2bb6:	0e 94 3c 18 	call	0x3078	; 0x3078 <__unpack_f>
    2bba:	89 85       	ldd	r24, Y+9	; 0x09
    2bbc:	82 30       	cpi	r24, 0x02	; 2
    2bbe:	40 f0       	brcs	.+16     	; 0x2bd0 <__gesf2+0x56>
    2bc0:	89 89       	ldd	r24, Y+17	; 0x11
    2bc2:	82 30       	cpi	r24, 0x02	; 2
    2bc4:	28 f0       	brcs	.+10     	; 0x2bd0 <__gesf2+0x56>
    2bc6:	c7 01       	movw	r24, r14
    2bc8:	b8 01       	movw	r22, r16
    2bca:	0e 94 b4 18 	call	0x3168	; 0x3168 <__fpcmp_parts_f>
    2bce:	01 c0       	rjmp	.+2      	; 0x2bd2 <__gesf2+0x58>
    2bd0:	8f ef       	ldi	r24, 0xFF	; 255
    2bd2:	68 96       	adiw	r28, 0x18	; 24
    2bd4:	e6 e0       	ldi	r30, 0x06	; 6
    2bd6:	0c 94 7b 19 	jmp	0x32f6	; 0x32f6 <__epilogue_restores__+0x18>

00002bda <__floatsisf>:
    2bda:	a8 e0       	ldi	r26, 0x08	; 8
    2bdc:	b0 e0       	ldi	r27, 0x00	; 0
    2bde:	e3 ef       	ldi	r30, 0xF3	; 243
    2be0:	f5 e1       	ldi	r31, 0x15	; 21
    2be2:	0c 94 5c 19 	jmp	0x32b8	; 0x32b8 <__prologue_saves__+0x12>
    2be6:	9b 01       	movw	r18, r22
    2be8:	ac 01       	movw	r20, r24
    2bea:	83 e0       	ldi	r24, 0x03	; 3
    2bec:	89 83       	std	Y+1, r24	; 0x01
    2bee:	da 01       	movw	r26, r20
    2bf0:	c9 01       	movw	r24, r18
    2bf2:	88 27       	eor	r24, r24
    2bf4:	b7 fd       	sbrc	r27, 7
    2bf6:	83 95       	inc	r24
    2bf8:	99 27       	eor	r25, r25
    2bfa:	aa 27       	eor	r26, r26
    2bfc:	bb 27       	eor	r27, r27
    2bfe:	b8 2e       	mov	r11, r24
    2c00:	21 15       	cp	r18, r1
    2c02:	31 05       	cpc	r19, r1
    2c04:	41 05       	cpc	r20, r1
    2c06:	51 05       	cpc	r21, r1
    2c08:	19 f4       	brne	.+6      	; 0x2c10 <__floatsisf+0x36>
    2c0a:	82 e0       	ldi	r24, 0x02	; 2
    2c0c:	89 83       	std	Y+1, r24	; 0x01
    2c0e:	3a c0       	rjmp	.+116    	; 0x2c84 <__floatsisf+0xaa>
    2c10:	88 23       	and	r24, r24
    2c12:	a9 f0       	breq	.+42     	; 0x2c3e <__floatsisf+0x64>
    2c14:	20 30       	cpi	r18, 0x00	; 0
    2c16:	80 e0       	ldi	r24, 0x00	; 0
    2c18:	38 07       	cpc	r19, r24
    2c1a:	80 e0       	ldi	r24, 0x00	; 0
    2c1c:	48 07       	cpc	r20, r24
    2c1e:	80 e8       	ldi	r24, 0x80	; 128
    2c20:	58 07       	cpc	r21, r24
    2c22:	29 f4       	brne	.+10     	; 0x2c2e <__floatsisf+0x54>
    2c24:	60 e0       	ldi	r22, 0x00	; 0
    2c26:	70 e0       	ldi	r23, 0x00	; 0
    2c28:	80 e0       	ldi	r24, 0x00	; 0
    2c2a:	9f ec       	ldi	r25, 0xCF	; 207
    2c2c:	30 c0       	rjmp	.+96     	; 0x2c8e <__floatsisf+0xb4>
    2c2e:	ee 24       	eor	r14, r14
    2c30:	ff 24       	eor	r15, r15
    2c32:	87 01       	movw	r16, r14
    2c34:	e2 1a       	sub	r14, r18
    2c36:	f3 0a       	sbc	r15, r19
    2c38:	04 0b       	sbc	r16, r20
    2c3a:	15 0b       	sbc	r17, r21
    2c3c:	02 c0       	rjmp	.+4      	; 0x2c42 <__floatsisf+0x68>
    2c3e:	79 01       	movw	r14, r18
    2c40:	8a 01       	movw	r16, r20
    2c42:	8e e1       	ldi	r24, 0x1E	; 30
    2c44:	c8 2e       	mov	r12, r24
    2c46:	d1 2c       	mov	r13, r1
    2c48:	dc 82       	std	Y+4, r13	; 0x04
    2c4a:	cb 82       	std	Y+3, r12	; 0x03
    2c4c:	ed 82       	std	Y+5, r14	; 0x05
    2c4e:	fe 82       	std	Y+6, r15	; 0x06
    2c50:	0f 83       	std	Y+7, r16	; 0x07
    2c52:	18 87       	std	Y+8, r17	; 0x08
    2c54:	c8 01       	movw	r24, r16
    2c56:	b7 01       	movw	r22, r14
    2c58:	0e 94 18 17 	call	0x2e30	; 0x2e30 <__clzsi2>
    2c5c:	01 97       	sbiw	r24, 0x01	; 1
    2c5e:	18 16       	cp	r1, r24
    2c60:	19 06       	cpc	r1, r25
    2c62:	84 f4       	brge	.+32     	; 0x2c84 <__floatsisf+0xaa>
    2c64:	08 2e       	mov	r0, r24
    2c66:	04 c0       	rjmp	.+8      	; 0x2c70 <__floatsisf+0x96>
    2c68:	ee 0c       	add	r14, r14
    2c6a:	ff 1c       	adc	r15, r15
    2c6c:	00 1f       	adc	r16, r16
    2c6e:	11 1f       	adc	r17, r17
    2c70:	0a 94       	dec	r0
    2c72:	d2 f7       	brpl	.-12     	; 0x2c68 <__floatsisf+0x8e>
    2c74:	ed 82       	std	Y+5, r14	; 0x05
    2c76:	fe 82       	std	Y+6, r15	; 0x06
    2c78:	0f 83       	std	Y+7, r16	; 0x07
    2c7a:	18 87       	std	Y+8, r17	; 0x08
    2c7c:	c8 1a       	sub	r12, r24
    2c7e:	d9 0a       	sbc	r13, r25
    2c80:	dc 82       	std	Y+4, r13	; 0x04
    2c82:	cb 82       	std	Y+3, r12	; 0x03
    2c84:	ba 82       	std	Y+2, r11	; 0x02
    2c86:	ce 01       	movw	r24, r28
    2c88:	01 96       	adiw	r24, 0x01	; 1
    2c8a:	0e 94 67 17 	call	0x2ece	; 0x2ece <__pack_f>
    2c8e:	28 96       	adiw	r28, 0x08	; 8
    2c90:	e9 e0       	ldi	r30, 0x09	; 9
    2c92:	0c 94 78 19 	jmp	0x32f0	; 0x32f0 <__epilogue_restores__+0x12>

00002c96 <__fixsfsi>:
    2c96:	ac e0       	ldi	r26, 0x0C	; 12
    2c98:	b0 e0       	ldi	r27, 0x00	; 0
    2c9a:	e1 e5       	ldi	r30, 0x51	; 81
    2c9c:	f6 e1       	ldi	r31, 0x16	; 22
    2c9e:	0c 94 63 19 	jmp	0x32c6	; 0x32c6 <__prologue_saves__+0x20>
    2ca2:	69 83       	std	Y+1, r22	; 0x01
    2ca4:	7a 83       	std	Y+2, r23	; 0x02
    2ca6:	8b 83       	std	Y+3, r24	; 0x03
    2ca8:	9c 83       	std	Y+4, r25	; 0x04
    2caa:	ce 01       	movw	r24, r28
    2cac:	01 96       	adiw	r24, 0x01	; 1
    2cae:	be 01       	movw	r22, r28
    2cb0:	6b 5f       	subi	r22, 0xFB	; 251
    2cb2:	7f 4f       	sbci	r23, 0xFF	; 255
    2cb4:	0e 94 3c 18 	call	0x3078	; 0x3078 <__unpack_f>
    2cb8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cba:	82 30       	cpi	r24, 0x02	; 2
    2cbc:	61 f1       	breq	.+88     	; 0x2d16 <__fixsfsi+0x80>
    2cbe:	82 30       	cpi	r24, 0x02	; 2
    2cc0:	50 f1       	brcs	.+84     	; 0x2d16 <__fixsfsi+0x80>
    2cc2:	84 30       	cpi	r24, 0x04	; 4
    2cc4:	21 f4       	brne	.+8      	; 0x2cce <__fixsfsi+0x38>
    2cc6:	8e 81       	ldd	r24, Y+6	; 0x06
    2cc8:	88 23       	and	r24, r24
    2cca:	51 f1       	breq	.+84     	; 0x2d20 <__fixsfsi+0x8a>
    2ccc:	2e c0       	rjmp	.+92     	; 0x2d2a <__fixsfsi+0x94>
    2cce:	2f 81       	ldd	r18, Y+7	; 0x07
    2cd0:	38 85       	ldd	r19, Y+8	; 0x08
    2cd2:	37 fd       	sbrc	r19, 7
    2cd4:	20 c0       	rjmp	.+64     	; 0x2d16 <__fixsfsi+0x80>
    2cd6:	6e 81       	ldd	r22, Y+6	; 0x06
    2cd8:	2f 31       	cpi	r18, 0x1F	; 31
    2cda:	31 05       	cpc	r19, r1
    2cdc:	1c f0       	brlt	.+6      	; 0x2ce4 <__fixsfsi+0x4e>
    2cde:	66 23       	and	r22, r22
    2ce0:	f9 f0       	breq	.+62     	; 0x2d20 <__fixsfsi+0x8a>
    2ce2:	23 c0       	rjmp	.+70     	; 0x2d2a <__fixsfsi+0x94>
    2ce4:	8e e1       	ldi	r24, 0x1E	; 30
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	82 1b       	sub	r24, r18
    2cea:	93 0b       	sbc	r25, r19
    2cec:	29 85       	ldd	r18, Y+9	; 0x09
    2cee:	3a 85       	ldd	r19, Y+10	; 0x0a
    2cf0:	4b 85       	ldd	r20, Y+11	; 0x0b
    2cf2:	5c 85       	ldd	r21, Y+12	; 0x0c
    2cf4:	04 c0       	rjmp	.+8      	; 0x2cfe <__fixsfsi+0x68>
    2cf6:	56 95       	lsr	r21
    2cf8:	47 95       	ror	r20
    2cfa:	37 95       	ror	r19
    2cfc:	27 95       	ror	r18
    2cfe:	8a 95       	dec	r24
    2d00:	d2 f7       	brpl	.-12     	; 0x2cf6 <__fixsfsi+0x60>
    2d02:	66 23       	and	r22, r22
    2d04:	b1 f0       	breq	.+44     	; 0x2d32 <__fixsfsi+0x9c>
    2d06:	50 95       	com	r21
    2d08:	40 95       	com	r20
    2d0a:	30 95       	com	r19
    2d0c:	21 95       	neg	r18
    2d0e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d10:	4f 4f       	sbci	r20, 0xFF	; 255
    2d12:	5f 4f       	sbci	r21, 0xFF	; 255
    2d14:	0e c0       	rjmp	.+28     	; 0x2d32 <__fixsfsi+0x9c>
    2d16:	20 e0       	ldi	r18, 0x00	; 0
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	40 e0       	ldi	r20, 0x00	; 0
    2d1c:	50 e0       	ldi	r21, 0x00	; 0
    2d1e:	09 c0       	rjmp	.+18     	; 0x2d32 <__fixsfsi+0x9c>
    2d20:	2f ef       	ldi	r18, 0xFF	; 255
    2d22:	3f ef       	ldi	r19, 0xFF	; 255
    2d24:	4f ef       	ldi	r20, 0xFF	; 255
    2d26:	5f e7       	ldi	r21, 0x7F	; 127
    2d28:	04 c0       	rjmp	.+8      	; 0x2d32 <__fixsfsi+0x9c>
    2d2a:	20 e0       	ldi	r18, 0x00	; 0
    2d2c:	30 e0       	ldi	r19, 0x00	; 0
    2d2e:	40 e0       	ldi	r20, 0x00	; 0
    2d30:	50 e8       	ldi	r21, 0x80	; 128
    2d32:	b9 01       	movw	r22, r18
    2d34:	ca 01       	movw	r24, r20
    2d36:	2c 96       	adiw	r28, 0x0c	; 12
    2d38:	e2 e0       	ldi	r30, 0x02	; 2
    2d3a:	0c 94 7f 19 	jmp	0x32fe	; 0x32fe <__epilogue_restores__+0x20>

00002d3e <__floatunsisf>:
    2d3e:	a8 e0       	ldi	r26, 0x08	; 8
    2d40:	b0 e0       	ldi	r27, 0x00	; 0
    2d42:	e5 ea       	ldi	r30, 0xA5	; 165
    2d44:	f6 e1       	ldi	r31, 0x16	; 22
    2d46:	0c 94 5b 19 	jmp	0x32b6	; 0x32b6 <__prologue_saves__+0x10>
    2d4a:	7b 01       	movw	r14, r22
    2d4c:	8c 01       	movw	r16, r24
    2d4e:	61 15       	cp	r22, r1
    2d50:	71 05       	cpc	r23, r1
    2d52:	81 05       	cpc	r24, r1
    2d54:	91 05       	cpc	r25, r1
    2d56:	19 f4       	brne	.+6      	; 0x2d5e <__floatunsisf+0x20>
    2d58:	82 e0       	ldi	r24, 0x02	; 2
    2d5a:	89 83       	std	Y+1, r24	; 0x01
    2d5c:	60 c0       	rjmp	.+192    	; 0x2e1e <__floatunsisf+0xe0>
    2d5e:	83 e0       	ldi	r24, 0x03	; 3
    2d60:	89 83       	std	Y+1, r24	; 0x01
    2d62:	8e e1       	ldi	r24, 0x1E	; 30
    2d64:	c8 2e       	mov	r12, r24
    2d66:	d1 2c       	mov	r13, r1
    2d68:	dc 82       	std	Y+4, r13	; 0x04
    2d6a:	cb 82       	std	Y+3, r12	; 0x03
    2d6c:	ed 82       	std	Y+5, r14	; 0x05
    2d6e:	fe 82       	std	Y+6, r15	; 0x06
    2d70:	0f 83       	std	Y+7, r16	; 0x07
    2d72:	18 87       	std	Y+8, r17	; 0x08
    2d74:	c8 01       	movw	r24, r16
    2d76:	b7 01       	movw	r22, r14
    2d78:	0e 94 18 17 	call	0x2e30	; 0x2e30 <__clzsi2>
    2d7c:	fc 01       	movw	r30, r24
    2d7e:	31 97       	sbiw	r30, 0x01	; 1
    2d80:	f7 ff       	sbrs	r31, 7
    2d82:	3b c0       	rjmp	.+118    	; 0x2dfa <__floatunsisf+0xbc>
    2d84:	22 27       	eor	r18, r18
    2d86:	33 27       	eor	r19, r19
    2d88:	2e 1b       	sub	r18, r30
    2d8a:	3f 0b       	sbc	r19, r31
    2d8c:	57 01       	movw	r10, r14
    2d8e:	68 01       	movw	r12, r16
    2d90:	02 2e       	mov	r0, r18
    2d92:	04 c0       	rjmp	.+8      	; 0x2d9c <__floatunsisf+0x5e>
    2d94:	d6 94       	lsr	r13
    2d96:	c7 94       	ror	r12
    2d98:	b7 94       	ror	r11
    2d9a:	a7 94       	ror	r10
    2d9c:	0a 94       	dec	r0
    2d9e:	d2 f7       	brpl	.-12     	; 0x2d94 <__floatunsisf+0x56>
    2da0:	40 e0       	ldi	r20, 0x00	; 0
    2da2:	50 e0       	ldi	r21, 0x00	; 0
    2da4:	60 e0       	ldi	r22, 0x00	; 0
    2da6:	70 e0       	ldi	r23, 0x00	; 0
    2da8:	81 e0       	ldi	r24, 0x01	; 1
    2daa:	90 e0       	ldi	r25, 0x00	; 0
    2dac:	a0 e0       	ldi	r26, 0x00	; 0
    2dae:	b0 e0       	ldi	r27, 0x00	; 0
    2db0:	04 c0       	rjmp	.+8      	; 0x2dba <__floatunsisf+0x7c>
    2db2:	88 0f       	add	r24, r24
    2db4:	99 1f       	adc	r25, r25
    2db6:	aa 1f       	adc	r26, r26
    2db8:	bb 1f       	adc	r27, r27
    2dba:	2a 95       	dec	r18
    2dbc:	d2 f7       	brpl	.-12     	; 0x2db2 <__floatunsisf+0x74>
    2dbe:	01 97       	sbiw	r24, 0x01	; 1
    2dc0:	a1 09       	sbc	r26, r1
    2dc2:	b1 09       	sbc	r27, r1
    2dc4:	8e 21       	and	r24, r14
    2dc6:	9f 21       	and	r25, r15
    2dc8:	a0 23       	and	r26, r16
    2dca:	b1 23       	and	r27, r17
    2dcc:	00 97       	sbiw	r24, 0x00	; 0
    2dce:	a1 05       	cpc	r26, r1
    2dd0:	b1 05       	cpc	r27, r1
    2dd2:	21 f0       	breq	.+8      	; 0x2ddc <__floatunsisf+0x9e>
    2dd4:	41 e0       	ldi	r20, 0x01	; 1
    2dd6:	50 e0       	ldi	r21, 0x00	; 0
    2dd8:	60 e0       	ldi	r22, 0x00	; 0
    2dda:	70 e0       	ldi	r23, 0x00	; 0
    2ddc:	4a 29       	or	r20, r10
    2dde:	5b 29       	or	r21, r11
    2de0:	6c 29       	or	r22, r12
    2de2:	7d 29       	or	r23, r13
    2de4:	4d 83       	std	Y+5, r20	; 0x05
    2de6:	5e 83       	std	Y+6, r21	; 0x06
    2de8:	6f 83       	std	Y+7, r22	; 0x07
    2dea:	78 87       	std	Y+8, r23	; 0x08
    2dec:	8e e1       	ldi	r24, 0x1E	; 30
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	8e 1b       	sub	r24, r30
    2df2:	9f 0b       	sbc	r25, r31
    2df4:	9c 83       	std	Y+4, r25	; 0x04
    2df6:	8b 83       	std	Y+3, r24	; 0x03
    2df8:	12 c0       	rjmp	.+36     	; 0x2e1e <__floatunsisf+0xe0>
    2dfa:	30 97       	sbiw	r30, 0x00	; 0
    2dfc:	81 f0       	breq	.+32     	; 0x2e1e <__floatunsisf+0xe0>
    2dfe:	0e 2e       	mov	r0, r30
    2e00:	04 c0       	rjmp	.+8      	; 0x2e0a <__floatunsisf+0xcc>
    2e02:	ee 0c       	add	r14, r14
    2e04:	ff 1c       	adc	r15, r15
    2e06:	00 1f       	adc	r16, r16
    2e08:	11 1f       	adc	r17, r17
    2e0a:	0a 94       	dec	r0
    2e0c:	d2 f7       	brpl	.-12     	; 0x2e02 <__floatunsisf+0xc4>
    2e0e:	ed 82       	std	Y+5, r14	; 0x05
    2e10:	fe 82       	std	Y+6, r15	; 0x06
    2e12:	0f 83       	std	Y+7, r16	; 0x07
    2e14:	18 87       	std	Y+8, r17	; 0x08
    2e16:	ce 1a       	sub	r12, r30
    2e18:	df 0a       	sbc	r13, r31
    2e1a:	dc 82       	std	Y+4, r13	; 0x04
    2e1c:	cb 82       	std	Y+3, r12	; 0x03
    2e1e:	1a 82       	std	Y+2, r1	; 0x02
    2e20:	ce 01       	movw	r24, r28
    2e22:	01 96       	adiw	r24, 0x01	; 1
    2e24:	0e 94 67 17 	call	0x2ece	; 0x2ece <__pack_f>
    2e28:	28 96       	adiw	r28, 0x08	; 8
    2e2a:	ea e0       	ldi	r30, 0x0A	; 10
    2e2c:	0c 94 77 19 	jmp	0x32ee	; 0x32ee <__epilogue_restores__+0x10>

00002e30 <__clzsi2>:
    2e30:	ef 92       	push	r14
    2e32:	ff 92       	push	r15
    2e34:	0f 93       	push	r16
    2e36:	1f 93       	push	r17
    2e38:	7b 01       	movw	r14, r22
    2e3a:	8c 01       	movw	r16, r24
    2e3c:	80 e0       	ldi	r24, 0x00	; 0
    2e3e:	e8 16       	cp	r14, r24
    2e40:	80 e0       	ldi	r24, 0x00	; 0
    2e42:	f8 06       	cpc	r15, r24
    2e44:	81 e0       	ldi	r24, 0x01	; 1
    2e46:	08 07       	cpc	r16, r24
    2e48:	80 e0       	ldi	r24, 0x00	; 0
    2e4a:	18 07       	cpc	r17, r24
    2e4c:	88 f4       	brcc	.+34     	; 0x2e70 <__clzsi2+0x40>
    2e4e:	8f ef       	ldi	r24, 0xFF	; 255
    2e50:	e8 16       	cp	r14, r24
    2e52:	f1 04       	cpc	r15, r1
    2e54:	01 05       	cpc	r16, r1
    2e56:	11 05       	cpc	r17, r1
    2e58:	31 f0       	breq	.+12     	; 0x2e66 <__clzsi2+0x36>
    2e5a:	28 f0       	brcs	.+10     	; 0x2e66 <__clzsi2+0x36>
    2e5c:	88 e0       	ldi	r24, 0x08	; 8
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	a0 e0       	ldi	r26, 0x00	; 0
    2e62:	b0 e0       	ldi	r27, 0x00	; 0
    2e64:	17 c0       	rjmp	.+46     	; 0x2e94 <__clzsi2+0x64>
    2e66:	80 e0       	ldi	r24, 0x00	; 0
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	a0 e0       	ldi	r26, 0x00	; 0
    2e6c:	b0 e0       	ldi	r27, 0x00	; 0
    2e6e:	12 c0       	rjmp	.+36     	; 0x2e94 <__clzsi2+0x64>
    2e70:	80 e0       	ldi	r24, 0x00	; 0
    2e72:	e8 16       	cp	r14, r24
    2e74:	80 e0       	ldi	r24, 0x00	; 0
    2e76:	f8 06       	cpc	r15, r24
    2e78:	80 e0       	ldi	r24, 0x00	; 0
    2e7a:	08 07       	cpc	r16, r24
    2e7c:	81 e0       	ldi	r24, 0x01	; 1
    2e7e:	18 07       	cpc	r17, r24
    2e80:	28 f0       	brcs	.+10     	; 0x2e8c <__clzsi2+0x5c>
    2e82:	88 e1       	ldi	r24, 0x18	; 24
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	a0 e0       	ldi	r26, 0x00	; 0
    2e88:	b0 e0       	ldi	r27, 0x00	; 0
    2e8a:	04 c0       	rjmp	.+8      	; 0x2e94 <__clzsi2+0x64>
    2e8c:	80 e1       	ldi	r24, 0x10	; 16
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	a0 e0       	ldi	r26, 0x00	; 0
    2e92:	b0 e0       	ldi	r27, 0x00	; 0
    2e94:	20 e2       	ldi	r18, 0x20	; 32
    2e96:	30 e0       	ldi	r19, 0x00	; 0
    2e98:	40 e0       	ldi	r20, 0x00	; 0
    2e9a:	50 e0       	ldi	r21, 0x00	; 0
    2e9c:	28 1b       	sub	r18, r24
    2e9e:	39 0b       	sbc	r19, r25
    2ea0:	4a 0b       	sbc	r20, r26
    2ea2:	5b 0b       	sbc	r21, r27
    2ea4:	04 c0       	rjmp	.+8      	; 0x2eae <__clzsi2+0x7e>
    2ea6:	16 95       	lsr	r17
    2ea8:	07 95       	ror	r16
    2eaa:	f7 94       	ror	r15
    2eac:	e7 94       	ror	r14
    2eae:	8a 95       	dec	r24
    2eb0:	d2 f7       	brpl	.-12     	; 0x2ea6 <__clzsi2+0x76>
    2eb2:	f7 01       	movw	r30, r14
    2eb4:	e5 5d       	subi	r30, 0xD5	; 213
    2eb6:	fe 4f       	sbci	r31, 0xFE	; 254
    2eb8:	80 81       	ld	r24, Z
    2eba:	28 1b       	sub	r18, r24
    2ebc:	31 09       	sbc	r19, r1
    2ebe:	41 09       	sbc	r20, r1
    2ec0:	51 09       	sbc	r21, r1
    2ec2:	c9 01       	movw	r24, r18
    2ec4:	1f 91       	pop	r17
    2ec6:	0f 91       	pop	r16
    2ec8:	ff 90       	pop	r15
    2eca:	ef 90       	pop	r14
    2ecc:	08 95       	ret

00002ece <__pack_f>:
    2ece:	df 92       	push	r13
    2ed0:	ef 92       	push	r14
    2ed2:	ff 92       	push	r15
    2ed4:	0f 93       	push	r16
    2ed6:	1f 93       	push	r17
    2ed8:	fc 01       	movw	r30, r24
    2eda:	e4 80       	ldd	r14, Z+4	; 0x04
    2edc:	f5 80       	ldd	r15, Z+5	; 0x05
    2ede:	06 81       	ldd	r16, Z+6	; 0x06
    2ee0:	17 81       	ldd	r17, Z+7	; 0x07
    2ee2:	d1 80       	ldd	r13, Z+1	; 0x01
    2ee4:	80 81       	ld	r24, Z
    2ee6:	82 30       	cpi	r24, 0x02	; 2
    2ee8:	48 f4       	brcc	.+18     	; 0x2efc <__pack_f+0x2e>
    2eea:	80 e0       	ldi	r24, 0x00	; 0
    2eec:	90 e0       	ldi	r25, 0x00	; 0
    2eee:	a0 e1       	ldi	r26, 0x10	; 16
    2ef0:	b0 e0       	ldi	r27, 0x00	; 0
    2ef2:	e8 2a       	or	r14, r24
    2ef4:	f9 2a       	or	r15, r25
    2ef6:	0a 2b       	or	r16, r26
    2ef8:	1b 2b       	or	r17, r27
    2efa:	a5 c0       	rjmp	.+330    	; 0x3046 <__pack_f+0x178>
    2efc:	84 30       	cpi	r24, 0x04	; 4
    2efe:	09 f4       	brne	.+2      	; 0x2f02 <__pack_f+0x34>
    2f00:	9f c0       	rjmp	.+318    	; 0x3040 <__pack_f+0x172>
    2f02:	82 30       	cpi	r24, 0x02	; 2
    2f04:	21 f4       	brne	.+8      	; 0x2f0e <__pack_f+0x40>
    2f06:	ee 24       	eor	r14, r14
    2f08:	ff 24       	eor	r15, r15
    2f0a:	87 01       	movw	r16, r14
    2f0c:	05 c0       	rjmp	.+10     	; 0x2f18 <__pack_f+0x4a>
    2f0e:	e1 14       	cp	r14, r1
    2f10:	f1 04       	cpc	r15, r1
    2f12:	01 05       	cpc	r16, r1
    2f14:	11 05       	cpc	r17, r1
    2f16:	19 f4       	brne	.+6      	; 0x2f1e <__pack_f+0x50>
    2f18:	e0 e0       	ldi	r30, 0x00	; 0
    2f1a:	f0 e0       	ldi	r31, 0x00	; 0
    2f1c:	96 c0       	rjmp	.+300    	; 0x304a <__pack_f+0x17c>
    2f1e:	62 81       	ldd	r22, Z+2	; 0x02
    2f20:	73 81       	ldd	r23, Z+3	; 0x03
    2f22:	9f ef       	ldi	r25, 0xFF	; 255
    2f24:	62 38       	cpi	r22, 0x82	; 130
    2f26:	79 07       	cpc	r23, r25
    2f28:	0c f0       	brlt	.+2      	; 0x2f2c <__pack_f+0x5e>
    2f2a:	5b c0       	rjmp	.+182    	; 0x2fe2 <__pack_f+0x114>
    2f2c:	22 e8       	ldi	r18, 0x82	; 130
    2f2e:	3f ef       	ldi	r19, 0xFF	; 255
    2f30:	26 1b       	sub	r18, r22
    2f32:	37 0b       	sbc	r19, r23
    2f34:	2a 31       	cpi	r18, 0x1A	; 26
    2f36:	31 05       	cpc	r19, r1
    2f38:	2c f0       	brlt	.+10     	; 0x2f44 <__pack_f+0x76>
    2f3a:	20 e0       	ldi	r18, 0x00	; 0
    2f3c:	30 e0       	ldi	r19, 0x00	; 0
    2f3e:	40 e0       	ldi	r20, 0x00	; 0
    2f40:	50 e0       	ldi	r21, 0x00	; 0
    2f42:	2a c0       	rjmp	.+84     	; 0x2f98 <__pack_f+0xca>
    2f44:	b8 01       	movw	r22, r16
    2f46:	a7 01       	movw	r20, r14
    2f48:	02 2e       	mov	r0, r18
    2f4a:	04 c0       	rjmp	.+8      	; 0x2f54 <__pack_f+0x86>
    2f4c:	76 95       	lsr	r23
    2f4e:	67 95       	ror	r22
    2f50:	57 95       	ror	r21
    2f52:	47 95       	ror	r20
    2f54:	0a 94       	dec	r0
    2f56:	d2 f7       	brpl	.-12     	; 0x2f4c <__pack_f+0x7e>
    2f58:	81 e0       	ldi	r24, 0x01	; 1
    2f5a:	90 e0       	ldi	r25, 0x00	; 0
    2f5c:	a0 e0       	ldi	r26, 0x00	; 0
    2f5e:	b0 e0       	ldi	r27, 0x00	; 0
    2f60:	04 c0       	rjmp	.+8      	; 0x2f6a <__pack_f+0x9c>
    2f62:	88 0f       	add	r24, r24
    2f64:	99 1f       	adc	r25, r25
    2f66:	aa 1f       	adc	r26, r26
    2f68:	bb 1f       	adc	r27, r27
    2f6a:	2a 95       	dec	r18
    2f6c:	d2 f7       	brpl	.-12     	; 0x2f62 <__pack_f+0x94>
    2f6e:	01 97       	sbiw	r24, 0x01	; 1
    2f70:	a1 09       	sbc	r26, r1
    2f72:	b1 09       	sbc	r27, r1
    2f74:	8e 21       	and	r24, r14
    2f76:	9f 21       	and	r25, r15
    2f78:	a0 23       	and	r26, r16
    2f7a:	b1 23       	and	r27, r17
    2f7c:	00 97       	sbiw	r24, 0x00	; 0
    2f7e:	a1 05       	cpc	r26, r1
    2f80:	b1 05       	cpc	r27, r1
    2f82:	21 f0       	breq	.+8      	; 0x2f8c <__pack_f+0xbe>
    2f84:	81 e0       	ldi	r24, 0x01	; 1
    2f86:	90 e0       	ldi	r25, 0x00	; 0
    2f88:	a0 e0       	ldi	r26, 0x00	; 0
    2f8a:	b0 e0       	ldi	r27, 0x00	; 0
    2f8c:	9a 01       	movw	r18, r20
    2f8e:	ab 01       	movw	r20, r22
    2f90:	28 2b       	or	r18, r24
    2f92:	39 2b       	or	r19, r25
    2f94:	4a 2b       	or	r20, r26
    2f96:	5b 2b       	or	r21, r27
    2f98:	da 01       	movw	r26, r20
    2f9a:	c9 01       	movw	r24, r18
    2f9c:	8f 77       	andi	r24, 0x7F	; 127
    2f9e:	90 70       	andi	r25, 0x00	; 0
    2fa0:	a0 70       	andi	r26, 0x00	; 0
    2fa2:	b0 70       	andi	r27, 0x00	; 0
    2fa4:	80 34       	cpi	r24, 0x40	; 64
    2fa6:	91 05       	cpc	r25, r1
    2fa8:	a1 05       	cpc	r26, r1
    2faa:	b1 05       	cpc	r27, r1
    2fac:	39 f4       	brne	.+14     	; 0x2fbc <__pack_f+0xee>
    2fae:	27 ff       	sbrs	r18, 7
    2fb0:	09 c0       	rjmp	.+18     	; 0x2fc4 <__pack_f+0xf6>
    2fb2:	20 5c       	subi	r18, 0xC0	; 192
    2fb4:	3f 4f       	sbci	r19, 0xFF	; 255
    2fb6:	4f 4f       	sbci	r20, 0xFF	; 255
    2fb8:	5f 4f       	sbci	r21, 0xFF	; 255
    2fba:	04 c0       	rjmp	.+8      	; 0x2fc4 <__pack_f+0xf6>
    2fbc:	21 5c       	subi	r18, 0xC1	; 193
    2fbe:	3f 4f       	sbci	r19, 0xFF	; 255
    2fc0:	4f 4f       	sbci	r20, 0xFF	; 255
    2fc2:	5f 4f       	sbci	r21, 0xFF	; 255
    2fc4:	e0 e0       	ldi	r30, 0x00	; 0
    2fc6:	f0 e0       	ldi	r31, 0x00	; 0
    2fc8:	20 30       	cpi	r18, 0x00	; 0
    2fca:	a0 e0       	ldi	r26, 0x00	; 0
    2fcc:	3a 07       	cpc	r19, r26
    2fce:	a0 e0       	ldi	r26, 0x00	; 0
    2fd0:	4a 07       	cpc	r20, r26
    2fd2:	a0 e4       	ldi	r26, 0x40	; 64
    2fd4:	5a 07       	cpc	r21, r26
    2fd6:	10 f0       	brcs	.+4      	; 0x2fdc <__pack_f+0x10e>
    2fd8:	e1 e0       	ldi	r30, 0x01	; 1
    2fda:	f0 e0       	ldi	r31, 0x00	; 0
    2fdc:	79 01       	movw	r14, r18
    2fde:	8a 01       	movw	r16, r20
    2fe0:	27 c0       	rjmp	.+78     	; 0x3030 <__pack_f+0x162>
    2fe2:	60 38       	cpi	r22, 0x80	; 128
    2fe4:	71 05       	cpc	r23, r1
    2fe6:	64 f5       	brge	.+88     	; 0x3040 <__pack_f+0x172>
    2fe8:	fb 01       	movw	r30, r22
    2fea:	e1 58       	subi	r30, 0x81	; 129
    2fec:	ff 4f       	sbci	r31, 0xFF	; 255
    2fee:	d8 01       	movw	r26, r16
    2ff0:	c7 01       	movw	r24, r14
    2ff2:	8f 77       	andi	r24, 0x7F	; 127
    2ff4:	90 70       	andi	r25, 0x00	; 0
    2ff6:	a0 70       	andi	r26, 0x00	; 0
    2ff8:	b0 70       	andi	r27, 0x00	; 0
    2ffa:	80 34       	cpi	r24, 0x40	; 64
    2ffc:	91 05       	cpc	r25, r1
    2ffe:	a1 05       	cpc	r26, r1
    3000:	b1 05       	cpc	r27, r1
    3002:	39 f4       	brne	.+14     	; 0x3012 <__pack_f+0x144>
    3004:	e7 fe       	sbrs	r14, 7
    3006:	0d c0       	rjmp	.+26     	; 0x3022 <__pack_f+0x154>
    3008:	80 e4       	ldi	r24, 0x40	; 64
    300a:	90 e0       	ldi	r25, 0x00	; 0
    300c:	a0 e0       	ldi	r26, 0x00	; 0
    300e:	b0 e0       	ldi	r27, 0x00	; 0
    3010:	04 c0       	rjmp	.+8      	; 0x301a <__pack_f+0x14c>
    3012:	8f e3       	ldi	r24, 0x3F	; 63
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	a0 e0       	ldi	r26, 0x00	; 0
    3018:	b0 e0       	ldi	r27, 0x00	; 0
    301a:	e8 0e       	add	r14, r24
    301c:	f9 1e       	adc	r15, r25
    301e:	0a 1f       	adc	r16, r26
    3020:	1b 1f       	adc	r17, r27
    3022:	17 ff       	sbrs	r17, 7
    3024:	05 c0       	rjmp	.+10     	; 0x3030 <__pack_f+0x162>
    3026:	16 95       	lsr	r17
    3028:	07 95       	ror	r16
    302a:	f7 94       	ror	r15
    302c:	e7 94       	ror	r14
    302e:	31 96       	adiw	r30, 0x01	; 1
    3030:	87 e0       	ldi	r24, 0x07	; 7
    3032:	16 95       	lsr	r17
    3034:	07 95       	ror	r16
    3036:	f7 94       	ror	r15
    3038:	e7 94       	ror	r14
    303a:	8a 95       	dec	r24
    303c:	d1 f7       	brne	.-12     	; 0x3032 <__pack_f+0x164>
    303e:	05 c0       	rjmp	.+10     	; 0x304a <__pack_f+0x17c>
    3040:	ee 24       	eor	r14, r14
    3042:	ff 24       	eor	r15, r15
    3044:	87 01       	movw	r16, r14
    3046:	ef ef       	ldi	r30, 0xFF	; 255
    3048:	f0 e0       	ldi	r31, 0x00	; 0
    304a:	6e 2f       	mov	r22, r30
    304c:	67 95       	ror	r22
    304e:	66 27       	eor	r22, r22
    3050:	67 95       	ror	r22
    3052:	90 2f       	mov	r25, r16
    3054:	9f 77       	andi	r25, 0x7F	; 127
    3056:	d7 94       	ror	r13
    3058:	dd 24       	eor	r13, r13
    305a:	d7 94       	ror	r13
    305c:	8e 2f       	mov	r24, r30
    305e:	86 95       	lsr	r24
    3060:	49 2f       	mov	r20, r25
    3062:	46 2b       	or	r20, r22
    3064:	58 2f       	mov	r21, r24
    3066:	5d 29       	or	r21, r13
    3068:	b7 01       	movw	r22, r14
    306a:	ca 01       	movw	r24, r20
    306c:	1f 91       	pop	r17
    306e:	0f 91       	pop	r16
    3070:	ff 90       	pop	r15
    3072:	ef 90       	pop	r14
    3074:	df 90       	pop	r13
    3076:	08 95       	ret

00003078 <__unpack_f>:
    3078:	fc 01       	movw	r30, r24
    307a:	db 01       	movw	r26, r22
    307c:	40 81       	ld	r20, Z
    307e:	51 81       	ldd	r21, Z+1	; 0x01
    3080:	22 81       	ldd	r18, Z+2	; 0x02
    3082:	62 2f       	mov	r22, r18
    3084:	6f 77       	andi	r22, 0x7F	; 127
    3086:	70 e0       	ldi	r23, 0x00	; 0
    3088:	22 1f       	adc	r18, r18
    308a:	22 27       	eor	r18, r18
    308c:	22 1f       	adc	r18, r18
    308e:	93 81       	ldd	r25, Z+3	; 0x03
    3090:	89 2f       	mov	r24, r25
    3092:	88 0f       	add	r24, r24
    3094:	82 2b       	or	r24, r18
    3096:	28 2f       	mov	r18, r24
    3098:	30 e0       	ldi	r19, 0x00	; 0
    309a:	99 1f       	adc	r25, r25
    309c:	99 27       	eor	r25, r25
    309e:	99 1f       	adc	r25, r25
    30a0:	11 96       	adiw	r26, 0x01	; 1
    30a2:	9c 93       	st	X, r25
    30a4:	11 97       	sbiw	r26, 0x01	; 1
    30a6:	21 15       	cp	r18, r1
    30a8:	31 05       	cpc	r19, r1
    30aa:	a9 f5       	brne	.+106    	; 0x3116 <__unpack_f+0x9e>
    30ac:	41 15       	cp	r20, r1
    30ae:	51 05       	cpc	r21, r1
    30b0:	61 05       	cpc	r22, r1
    30b2:	71 05       	cpc	r23, r1
    30b4:	11 f4       	brne	.+4      	; 0x30ba <__unpack_f+0x42>
    30b6:	82 e0       	ldi	r24, 0x02	; 2
    30b8:	37 c0       	rjmp	.+110    	; 0x3128 <__unpack_f+0xb0>
    30ba:	82 e8       	ldi	r24, 0x82	; 130
    30bc:	9f ef       	ldi	r25, 0xFF	; 255
    30be:	13 96       	adiw	r26, 0x03	; 3
    30c0:	9c 93       	st	X, r25
    30c2:	8e 93       	st	-X, r24
    30c4:	12 97       	sbiw	r26, 0x02	; 2
    30c6:	9a 01       	movw	r18, r20
    30c8:	ab 01       	movw	r20, r22
    30ca:	67 e0       	ldi	r22, 0x07	; 7
    30cc:	22 0f       	add	r18, r18
    30ce:	33 1f       	adc	r19, r19
    30d0:	44 1f       	adc	r20, r20
    30d2:	55 1f       	adc	r21, r21
    30d4:	6a 95       	dec	r22
    30d6:	d1 f7       	brne	.-12     	; 0x30cc <__unpack_f+0x54>
    30d8:	83 e0       	ldi	r24, 0x03	; 3
    30da:	8c 93       	st	X, r24
    30dc:	0d c0       	rjmp	.+26     	; 0x30f8 <__unpack_f+0x80>
    30de:	22 0f       	add	r18, r18
    30e0:	33 1f       	adc	r19, r19
    30e2:	44 1f       	adc	r20, r20
    30e4:	55 1f       	adc	r21, r21
    30e6:	12 96       	adiw	r26, 0x02	; 2
    30e8:	8d 91       	ld	r24, X+
    30ea:	9c 91       	ld	r25, X
    30ec:	13 97       	sbiw	r26, 0x03	; 3
    30ee:	01 97       	sbiw	r24, 0x01	; 1
    30f0:	13 96       	adiw	r26, 0x03	; 3
    30f2:	9c 93       	st	X, r25
    30f4:	8e 93       	st	-X, r24
    30f6:	12 97       	sbiw	r26, 0x02	; 2
    30f8:	20 30       	cpi	r18, 0x00	; 0
    30fa:	80 e0       	ldi	r24, 0x00	; 0
    30fc:	38 07       	cpc	r19, r24
    30fe:	80 e0       	ldi	r24, 0x00	; 0
    3100:	48 07       	cpc	r20, r24
    3102:	80 e4       	ldi	r24, 0x40	; 64
    3104:	58 07       	cpc	r21, r24
    3106:	58 f3       	brcs	.-42     	; 0x30de <__unpack_f+0x66>
    3108:	14 96       	adiw	r26, 0x04	; 4
    310a:	2d 93       	st	X+, r18
    310c:	3d 93       	st	X+, r19
    310e:	4d 93       	st	X+, r20
    3110:	5c 93       	st	X, r21
    3112:	17 97       	sbiw	r26, 0x07	; 7
    3114:	08 95       	ret
    3116:	2f 3f       	cpi	r18, 0xFF	; 255
    3118:	31 05       	cpc	r19, r1
    311a:	79 f4       	brne	.+30     	; 0x313a <__unpack_f+0xc2>
    311c:	41 15       	cp	r20, r1
    311e:	51 05       	cpc	r21, r1
    3120:	61 05       	cpc	r22, r1
    3122:	71 05       	cpc	r23, r1
    3124:	19 f4       	brne	.+6      	; 0x312c <__unpack_f+0xb4>
    3126:	84 e0       	ldi	r24, 0x04	; 4
    3128:	8c 93       	st	X, r24
    312a:	08 95       	ret
    312c:	64 ff       	sbrs	r22, 4
    312e:	03 c0       	rjmp	.+6      	; 0x3136 <__unpack_f+0xbe>
    3130:	81 e0       	ldi	r24, 0x01	; 1
    3132:	8c 93       	st	X, r24
    3134:	12 c0       	rjmp	.+36     	; 0x315a <__unpack_f+0xe2>
    3136:	1c 92       	st	X, r1
    3138:	10 c0       	rjmp	.+32     	; 0x315a <__unpack_f+0xe2>
    313a:	2f 57       	subi	r18, 0x7F	; 127
    313c:	30 40       	sbci	r19, 0x00	; 0
    313e:	13 96       	adiw	r26, 0x03	; 3
    3140:	3c 93       	st	X, r19
    3142:	2e 93       	st	-X, r18
    3144:	12 97       	sbiw	r26, 0x02	; 2
    3146:	83 e0       	ldi	r24, 0x03	; 3
    3148:	8c 93       	st	X, r24
    314a:	87 e0       	ldi	r24, 0x07	; 7
    314c:	44 0f       	add	r20, r20
    314e:	55 1f       	adc	r21, r21
    3150:	66 1f       	adc	r22, r22
    3152:	77 1f       	adc	r23, r23
    3154:	8a 95       	dec	r24
    3156:	d1 f7       	brne	.-12     	; 0x314c <__unpack_f+0xd4>
    3158:	70 64       	ori	r23, 0x40	; 64
    315a:	14 96       	adiw	r26, 0x04	; 4
    315c:	4d 93       	st	X+, r20
    315e:	5d 93       	st	X+, r21
    3160:	6d 93       	st	X+, r22
    3162:	7c 93       	st	X, r23
    3164:	17 97       	sbiw	r26, 0x07	; 7
    3166:	08 95       	ret

00003168 <__fpcmp_parts_f>:
    3168:	1f 93       	push	r17
    316a:	dc 01       	movw	r26, r24
    316c:	fb 01       	movw	r30, r22
    316e:	9c 91       	ld	r25, X
    3170:	92 30       	cpi	r25, 0x02	; 2
    3172:	08 f4       	brcc	.+2      	; 0x3176 <__fpcmp_parts_f+0xe>
    3174:	47 c0       	rjmp	.+142    	; 0x3204 <__fpcmp_parts_f+0x9c>
    3176:	80 81       	ld	r24, Z
    3178:	82 30       	cpi	r24, 0x02	; 2
    317a:	08 f4       	brcc	.+2      	; 0x317e <__fpcmp_parts_f+0x16>
    317c:	43 c0       	rjmp	.+134    	; 0x3204 <__fpcmp_parts_f+0x9c>
    317e:	94 30       	cpi	r25, 0x04	; 4
    3180:	51 f4       	brne	.+20     	; 0x3196 <__fpcmp_parts_f+0x2e>
    3182:	11 96       	adiw	r26, 0x01	; 1
    3184:	1c 91       	ld	r17, X
    3186:	84 30       	cpi	r24, 0x04	; 4
    3188:	99 f5       	brne	.+102    	; 0x31f0 <__fpcmp_parts_f+0x88>
    318a:	81 81       	ldd	r24, Z+1	; 0x01
    318c:	68 2f       	mov	r22, r24
    318e:	70 e0       	ldi	r23, 0x00	; 0
    3190:	61 1b       	sub	r22, r17
    3192:	71 09       	sbc	r23, r1
    3194:	3f c0       	rjmp	.+126    	; 0x3214 <__fpcmp_parts_f+0xac>
    3196:	84 30       	cpi	r24, 0x04	; 4
    3198:	21 f0       	breq	.+8      	; 0x31a2 <__fpcmp_parts_f+0x3a>
    319a:	92 30       	cpi	r25, 0x02	; 2
    319c:	31 f4       	brne	.+12     	; 0x31aa <__fpcmp_parts_f+0x42>
    319e:	82 30       	cpi	r24, 0x02	; 2
    31a0:	b9 f1       	breq	.+110    	; 0x3210 <__fpcmp_parts_f+0xa8>
    31a2:	81 81       	ldd	r24, Z+1	; 0x01
    31a4:	88 23       	and	r24, r24
    31a6:	89 f1       	breq	.+98     	; 0x320a <__fpcmp_parts_f+0xa2>
    31a8:	2d c0       	rjmp	.+90     	; 0x3204 <__fpcmp_parts_f+0x9c>
    31aa:	11 96       	adiw	r26, 0x01	; 1
    31ac:	1c 91       	ld	r17, X
    31ae:	11 97       	sbiw	r26, 0x01	; 1
    31b0:	82 30       	cpi	r24, 0x02	; 2
    31b2:	f1 f0       	breq	.+60     	; 0x31f0 <__fpcmp_parts_f+0x88>
    31b4:	81 81       	ldd	r24, Z+1	; 0x01
    31b6:	18 17       	cp	r17, r24
    31b8:	d9 f4       	brne	.+54     	; 0x31f0 <__fpcmp_parts_f+0x88>
    31ba:	12 96       	adiw	r26, 0x02	; 2
    31bc:	2d 91       	ld	r18, X+
    31be:	3c 91       	ld	r19, X
    31c0:	13 97       	sbiw	r26, 0x03	; 3
    31c2:	82 81       	ldd	r24, Z+2	; 0x02
    31c4:	93 81       	ldd	r25, Z+3	; 0x03
    31c6:	82 17       	cp	r24, r18
    31c8:	93 07       	cpc	r25, r19
    31ca:	94 f0       	brlt	.+36     	; 0x31f0 <__fpcmp_parts_f+0x88>
    31cc:	28 17       	cp	r18, r24
    31ce:	39 07       	cpc	r19, r25
    31d0:	bc f0       	brlt	.+46     	; 0x3200 <__fpcmp_parts_f+0x98>
    31d2:	14 96       	adiw	r26, 0x04	; 4
    31d4:	8d 91       	ld	r24, X+
    31d6:	9d 91       	ld	r25, X+
    31d8:	0d 90       	ld	r0, X+
    31da:	bc 91       	ld	r27, X
    31dc:	a0 2d       	mov	r26, r0
    31de:	24 81       	ldd	r18, Z+4	; 0x04
    31e0:	35 81       	ldd	r19, Z+5	; 0x05
    31e2:	46 81       	ldd	r20, Z+6	; 0x06
    31e4:	57 81       	ldd	r21, Z+7	; 0x07
    31e6:	28 17       	cp	r18, r24
    31e8:	39 07       	cpc	r19, r25
    31ea:	4a 07       	cpc	r20, r26
    31ec:	5b 07       	cpc	r21, r27
    31ee:	18 f4       	brcc	.+6      	; 0x31f6 <__fpcmp_parts_f+0x8e>
    31f0:	11 23       	and	r17, r17
    31f2:	41 f0       	breq	.+16     	; 0x3204 <__fpcmp_parts_f+0x9c>
    31f4:	0a c0       	rjmp	.+20     	; 0x320a <__fpcmp_parts_f+0xa2>
    31f6:	82 17       	cp	r24, r18
    31f8:	93 07       	cpc	r25, r19
    31fa:	a4 07       	cpc	r26, r20
    31fc:	b5 07       	cpc	r27, r21
    31fe:	40 f4       	brcc	.+16     	; 0x3210 <__fpcmp_parts_f+0xa8>
    3200:	11 23       	and	r17, r17
    3202:	19 f0       	breq	.+6      	; 0x320a <__fpcmp_parts_f+0xa2>
    3204:	61 e0       	ldi	r22, 0x01	; 1
    3206:	70 e0       	ldi	r23, 0x00	; 0
    3208:	05 c0       	rjmp	.+10     	; 0x3214 <__fpcmp_parts_f+0xac>
    320a:	6f ef       	ldi	r22, 0xFF	; 255
    320c:	7f ef       	ldi	r23, 0xFF	; 255
    320e:	02 c0       	rjmp	.+4      	; 0x3214 <__fpcmp_parts_f+0xac>
    3210:	60 e0       	ldi	r22, 0x00	; 0
    3212:	70 e0       	ldi	r23, 0x00	; 0
    3214:	cb 01       	movw	r24, r22
    3216:	1f 91       	pop	r17
    3218:	08 95       	ret

0000321a <__mulsi3>:
    321a:	62 9f       	mul	r22, r18
    321c:	d0 01       	movw	r26, r0
    321e:	73 9f       	mul	r23, r19
    3220:	f0 01       	movw	r30, r0
    3222:	82 9f       	mul	r24, r18
    3224:	e0 0d       	add	r30, r0
    3226:	f1 1d       	adc	r31, r1
    3228:	64 9f       	mul	r22, r20
    322a:	e0 0d       	add	r30, r0
    322c:	f1 1d       	adc	r31, r1
    322e:	92 9f       	mul	r25, r18
    3230:	f0 0d       	add	r31, r0
    3232:	83 9f       	mul	r24, r19
    3234:	f0 0d       	add	r31, r0
    3236:	74 9f       	mul	r23, r20
    3238:	f0 0d       	add	r31, r0
    323a:	65 9f       	mul	r22, r21
    323c:	f0 0d       	add	r31, r0
    323e:	99 27       	eor	r25, r25
    3240:	72 9f       	mul	r23, r18
    3242:	b0 0d       	add	r27, r0
    3244:	e1 1d       	adc	r30, r1
    3246:	f9 1f       	adc	r31, r25
    3248:	63 9f       	mul	r22, r19
    324a:	b0 0d       	add	r27, r0
    324c:	e1 1d       	adc	r30, r1
    324e:	f9 1f       	adc	r31, r25
    3250:	bd 01       	movw	r22, r26
    3252:	cf 01       	movw	r24, r30
    3254:	11 24       	eor	r1, r1
    3256:	08 95       	ret

00003258 <__divmodhi4>:
    3258:	97 fb       	bst	r25, 7
    325a:	09 2e       	mov	r0, r25
    325c:	07 26       	eor	r0, r23
    325e:	0a d0       	rcall	.+20     	; 0x3274 <__divmodhi4_neg1>
    3260:	77 fd       	sbrc	r23, 7
    3262:	04 d0       	rcall	.+8      	; 0x326c <__divmodhi4_neg2>
    3264:	0c d0       	rcall	.+24     	; 0x327e <__udivmodhi4>
    3266:	06 d0       	rcall	.+12     	; 0x3274 <__divmodhi4_neg1>
    3268:	00 20       	and	r0, r0
    326a:	1a f4       	brpl	.+6      	; 0x3272 <__divmodhi4_exit>

0000326c <__divmodhi4_neg2>:
    326c:	70 95       	com	r23
    326e:	61 95       	neg	r22
    3270:	7f 4f       	sbci	r23, 0xFF	; 255

00003272 <__divmodhi4_exit>:
    3272:	08 95       	ret

00003274 <__divmodhi4_neg1>:
    3274:	f6 f7       	brtc	.-4      	; 0x3272 <__divmodhi4_exit>
    3276:	90 95       	com	r25
    3278:	81 95       	neg	r24
    327a:	9f 4f       	sbci	r25, 0xFF	; 255
    327c:	08 95       	ret

0000327e <__udivmodhi4>:
    327e:	aa 1b       	sub	r26, r26
    3280:	bb 1b       	sub	r27, r27
    3282:	51 e1       	ldi	r21, 0x11	; 17
    3284:	07 c0       	rjmp	.+14     	; 0x3294 <__udivmodhi4_ep>

00003286 <__udivmodhi4_loop>:
    3286:	aa 1f       	adc	r26, r26
    3288:	bb 1f       	adc	r27, r27
    328a:	a6 17       	cp	r26, r22
    328c:	b7 07       	cpc	r27, r23
    328e:	10 f0       	brcs	.+4      	; 0x3294 <__udivmodhi4_ep>
    3290:	a6 1b       	sub	r26, r22
    3292:	b7 0b       	sbc	r27, r23

00003294 <__udivmodhi4_ep>:
    3294:	88 1f       	adc	r24, r24
    3296:	99 1f       	adc	r25, r25
    3298:	5a 95       	dec	r21
    329a:	a9 f7       	brne	.-22     	; 0x3286 <__udivmodhi4_loop>
    329c:	80 95       	com	r24
    329e:	90 95       	com	r25
    32a0:	bc 01       	movw	r22, r24
    32a2:	cd 01       	movw	r24, r26
    32a4:	08 95       	ret

000032a6 <__prologue_saves__>:
    32a6:	2f 92       	push	r2
    32a8:	3f 92       	push	r3
    32aa:	4f 92       	push	r4
    32ac:	5f 92       	push	r5
    32ae:	6f 92       	push	r6
    32b0:	7f 92       	push	r7
    32b2:	8f 92       	push	r8
    32b4:	9f 92       	push	r9
    32b6:	af 92       	push	r10
    32b8:	bf 92       	push	r11
    32ba:	cf 92       	push	r12
    32bc:	df 92       	push	r13
    32be:	ef 92       	push	r14
    32c0:	ff 92       	push	r15
    32c2:	0f 93       	push	r16
    32c4:	1f 93       	push	r17
    32c6:	cf 93       	push	r28
    32c8:	df 93       	push	r29
    32ca:	cd b7       	in	r28, 0x3d	; 61
    32cc:	de b7       	in	r29, 0x3e	; 62
    32ce:	ca 1b       	sub	r28, r26
    32d0:	db 0b       	sbc	r29, r27
    32d2:	0f b6       	in	r0, 0x3f	; 63
    32d4:	f8 94       	cli
    32d6:	de bf       	out	0x3e, r29	; 62
    32d8:	0f be       	out	0x3f, r0	; 63
    32da:	cd bf       	out	0x3d, r28	; 61
    32dc:	09 94       	ijmp

000032de <__epilogue_restores__>:
    32de:	2a 88       	ldd	r2, Y+18	; 0x12
    32e0:	39 88       	ldd	r3, Y+17	; 0x11
    32e2:	48 88       	ldd	r4, Y+16	; 0x10
    32e4:	5f 84       	ldd	r5, Y+15	; 0x0f
    32e6:	6e 84       	ldd	r6, Y+14	; 0x0e
    32e8:	7d 84       	ldd	r7, Y+13	; 0x0d
    32ea:	8c 84       	ldd	r8, Y+12	; 0x0c
    32ec:	9b 84       	ldd	r9, Y+11	; 0x0b
    32ee:	aa 84       	ldd	r10, Y+10	; 0x0a
    32f0:	b9 84       	ldd	r11, Y+9	; 0x09
    32f2:	c8 84       	ldd	r12, Y+8	; 0x08
    32f4:	df 80       	ldd	r13, Y+7	; 0x07
    32f6:	ee 80       	ldd	r14, Y+6	; 0x06
    32f8:	fd 80       	ldd	r15, Y+5	; 0x05
    32fa:	0c 81       	ldd	r16, Y+4	; 0x04
    32fc:	1b 81       	ldd	r17, Y+3	; 0x03
    32fe:	aa 81       	ldd	r26, Y+2	; 0x02
    3300:	b9 81       	ldd	r27, Y+1	; 0x01
    3302:	ce 0f       	add	r28, r30
    3304:	d1 1d       	adc	r29, r1
    3306:	0f b6       	in	r0, 0x3f	; 63
    3308:	f8 94       	cli
    330a:	de bf       	out	0x3e, r29	; 62
    330c:	0f be       	out	0x3f, r0	; 63
    330e:	cd bf       	out	0x3d, r28	; 61
    3310:	ed 01       	movw	r28, r26
    3312:	08 95       	ret

00003314 <__eerd_byte_m328p>:
    3314:	f9 99       	sbic	0x1f, 1	; 31
    3316:	fe cf       	rjmp	.-4      	; 0x3314 <__eerd_byte_m328p>
    3318:	92 bd       	out	0x22, r25	; 34
    331a:	81 bd       	out	0x21, r24	; 33
    331c:	f8 9a       	sbi	0x1f, 0	; 31
    331e:	99 27       	eor	r25, r25
    3320:	80 b5       	in	r24, 0x20	; 32
    3322:	08 95       	ret

00003324 <__eewr_byte_m328p>:
    3324:	26 2f       	mov	r18, r22

00003326 <__eewr_r18_m328p>:
    3326:	f9 99       	sbic	0x1f, 1	; 31
    3328:	fe cf       	rjmp	.-4      	; 0x3326 <__eewr_r18_m328p>
    332a:	1f ba       	out	0x1f, r1	; 31
    332c:	92 bd       	out	0x22, r25	; 34
    332e:	81 bd       	out	0x21, r24	; 33
    3330:	20 bd       	out	0x20, r18	; 32
    3332:	0f b6       	in	r0, 0x3f	; 63
    3334:	f8 94       	cli
    3336:	fa 9a       	sbi	0x1f, 2	; 31
    3338:	f9 9a       	sbi	0x1f, 1	; 31
    333a:	0f be       	out	0x3f, r0	; 63
    333c:	01 96       	adiw	r24, 0x01	; 1
    333e:	08 95       	ret

00003340 <_exit>:
    3340:	f8 94       	cli

00003342 <__stop_program>:
    3342:	ff cf       	rjmp	.-2      	; 0x3342 <__stop_program>
