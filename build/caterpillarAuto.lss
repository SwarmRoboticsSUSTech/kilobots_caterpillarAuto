
build/caterpillarAuto.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
       8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
       c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      18:	0c 94 9e 05 	jmp	0xb3c	; 0xb3c <__vector_6>
      1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      2c:	0c 94 64 0b 	jmp	0x16c8	; 0x16c8 <__vector_11>
      30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      38:	0c 94 c4 0a 	jmp	0x1588	; 0x1588 <__vector_14>
      3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      5c:	0c 94 86 0b 	jmp	0x170c	; 0x170c <__vector_23>
      60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      68:	01 06       	cpc	r0, r17
      6a:	7d 06       	cpc	r7, r29
      6c:	d5 05       	cpc	r29, r5
      6e:	cb 05       	cpc	r28, r11
      70:	d2 05       	cpc	r29, r2
      72:	5f 06       	cpc	r5, r31
      74:	54 06       	cpc	r5, r20
      76:	e2 0c       	add	r14, r2
      78:	c6 0b       	sbc	r28, r22
      7a:	c6 0b       	sbc	r28, r22
      7c:	df 0c       	add	r13, r15
      7e:	eb 0c       	add	r14, r11
      80:	db 0c       	add	r13, r11
      82:	f2 0c       	add	r15, r2
      84:	ee 0c       	add	r14, r14
      86:	f6 0c       	add	r15, r6
      88:	af 0c       	add	r10, r15
      8a:	81 0c       	add	r8, r1

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
    wdt_disable();
      9a:	88 e1       	ldi	r24, 0x18	; 24
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	80 93 60 00 	sts	0x0060, r24
      a4:	10 92 60 00 	sts	0x0060, r1
      a8:	0f be       	out	0x3f, r0	; 63

000000aa <__do_copy_data>:
      aa:	11 e0       	ldi	r17, 0x01	; 1
      ac:	a0 e0       	ldi	r26, 0x00	; 0
      ae:	b1 e0       	ldi	r27, 0x01	; 1
      b0:	e0 e5       	ldi	r30, 0x50	; 80
      b2:	f1 e2       	ldi	r31, 0x21	; 33
      b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x10>
      b6:	05 90       	lpm	r0, Z+
      b8:	0d 92       	st	X+, r0
      ba:	a6 32       	cpi	r26, 0x26	; 38
      bc:	b1 07       	cpc	r27, r17
      be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0xc>

000000c0 <__do_clear_bss>:
      c0:	21 e0       	ldi	r18, 0x01	; 1
      c2:	a6 e2       	ldi	r26, 0x26	; 38
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
      c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
      ca:	ae 3b       	cpi	r26, 0xBE	; 190
      cc:	b2 07       	cpc	r27, r18
      ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
      d0:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <main>
      d4:	0c 94 a6 10 	jmp	0x214c	; 0x214c <_exit>

000000d8 <__bad_interrupt>:
      d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <setup>:

void setup()
{   
    //If the robot is the seed, its gradient should be 0: overwrite the 
    // previously set value of GRADIENT_MAX.
    if (kilo_uid == SEED_ID)
      dc:	80 91 b9 01 	lds	r24, 0x01B9
      e0:	90 91 ba 01 	lds	r25, 0x01BA
      e4:	89 2b       	or	r24, r25
      e6:	b1 f5       	brne	.+108    	; 0x154 <setup+0x78>
    {   
        own_gradient = 0;
      e8:	10 92 19 01 	sts	0x0119, r1
      ec:	10 92 18 01 	sts	0x0118, r1
		distance_to_motivator = DISTANCE_COLLIDE;
      f0:	88 e2       	ldi	r24, 0x28	; 40
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	90 93 0d 01 	sts	0x010D, r25
      f8:	80 93 0c 01 	sts	0x010C, r24
		update_distance_to_motivator = UPDATE;
      fc:	81 e0       	ldi	r24, 0x01	; 1
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	90 93 39 01 	sts	0x0139, r25
     104:	80 93 38 01 	sts	0x0138, r24
		update_state_motivator = UPDATE;
     108:	90 93 35 01 	sts	0x0135, r25
     10c:	80 93 34 01 	sts	0x0134, r24
		flag_minor = YES;
     110:	90 93 3d 01 	sts	0x013D, r25
     114:	80 93 3c 01 	sts	0x013C, r24
		state_motivator = COMPLETED;
     118:	85 e0       	ldi	r24, 0x05	; 5
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	90 93 2f 01 	sts	0x012F, r25
     120:	80 93 2e 01 	sts	0x012E, r24
     124:	88 e2       	ldi	r24, 0x28	; 40
     126:	95 e0       	ldi	r25, 0x05	; 5
     128:	20 e0       	ldi	r18, 0x00	; 0
    }   
        
    // Set the transmission message.
    message.type = NORMAL;
     12a:	10 92 4d 01 	sts	0x014D, r1
    message.data[0] = own_gradient;
     12e:	20 93 44 01 	sts	0x0144, r18
	// Sequence has not been formed completely.
	message.data[1] = formed_state;
     132:	20 91 26 01 	lds	r18, 0x0126
     136:	20 93 45 01 	sts	0x0145, r18
	message.data[2] = state_motivator;
     13a:	90 93 46 01 	sts	0x0146, r25
	message.data[3] = distance_to_motivator;
     13e:	80 93 47 01 	sts	0x0147, r24
	message.crc = message_crc(&message);
     142:	84 e4       	ldi	r24, 0x44	; 68
     144:	91 e0       	ldi	r25, 0x01	; 1
     146:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <message_crc>
     14a:	90 93 4f 01 	sts	0x014F, r25
     14e:	80 93 4e 01 	sts	0x014E, r24
     152:	08 95       	ret
     154:	20 91 18 01 	lds	r18, 0x0118
     158:	90 91 2e 01 	lds	r25, 0x012E
     15c:	80 91 0c 01 	lds	r24, 0x010C
     160:	e4 cf       	rjmp	.-56     	; 0x12a <setup+0x4e>

00000162 <message_tx>:
}


message_t *message_tx()
{
	message.data[0] = own_gradient;
     162:	80 91 18 01 	lds	r24, 0x0118
     166:	80 93 44 01 	sts	0x0144, r24
	message.data[1] = formed_state;
     16a:	80 91 26 01 	lds	r24, 0x0126
     16e:	80 93 45 01 	sts	0x0145, r24
	message.data[2] = state_myself;
     172:	80 91 2c 01 	lds	r24, 0x012C
     176:	80 93 46 01 	sts	0x0146, r24
	message.data[3] = distance_to_motivator;
     17a:	80 91 0c 01 	lds	r24, 0x010C
     17e:	80 93 47 01 	sts	0x0147, r24
        default:
             set_color(RGB(0, 1, 1));
             break;
    }
*/	
	message.crc = message_crc(&message);
     182:	84 e4       	ldi	r24, 0x44	; 68
     184:	91 e0       	ldi	r25, 0x01	; 1
     186:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <message_crc>
     18a:	90 93 4f 01 	sts	0x014F, r25
     18e:	80 93 4e 01 	sts	0x014E, r24
    return &message;
}
     192:	84 e4       	ldi	r24, 0x44	; 68
     194:	91 e0       	ldi	r25, 0x01	; 1
     196:	08 95       	ret

00000198 <message_rx>:

void message_rx(message_t *m, distance_measurement_t *d)
{
     198:	cf 92       	push	r12
     19a:	df 92       	push	r13
     19c:	ef 92       	push	r14
     19e:	ff 92       	push	r15
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
     1a4:	ec 01       	movw	r28, r24
     1a6:	cb 01       	movw	r24, r22
	//set_color(RGB(0, 0, 0));
	//set_color(RGB(1, 0, 0));
    received_gradient = m->data[0];
     1a8:	28 81       	ld	r18, Y
     1aa:	30 e0       	ldi	r19, 0x00	; 0
     1ac:	30 93 33 01 	sts	0x0133, r19
     1b0:	20 93 32 01 	sts	0x0132, r18
    distance = estimate_distance(d);
     1b4:	0e 94 fd 07 	call	0xffa	; 0xffa <estimate_distance>
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	90 93 0f 01 	sts	0x010F, r25
     1be:	80 93 0e 01 	sts	0x010E, r24
	// In the valid distance.
	if (distance <= DISTANCE_GRADIENT)
     1c2:	85 36       	cpi	r24, 0x65	; 101
     1c4:	91 05       	cpc	r25, r1
     1c6:	0c f0       	brlt	.+2      	; 0x1ca <message_rx+0x32>
     1c8:	6e c0       	rjmp	.+220    	; 0x2a6 <message_rx+0x10e>
	{
		last_gradient_anchored = kilo_ticks;
     1ca:	40 91 83 01 	lds	r20, 0x0183
     1ce:	50 91 84 01 	lds	r21, 0x0184
     1d2:	60 91 85 01 	lds	r22, 0x0185
     1d6:	70 91 86 01 	lds	r23, 0x0186
     1da:	40 93 54 01 	sts	0x0154, r20
     1de:	50 93 55 01 	sts	0x0155, r21
     1e2:	60 93 56 01 	sts	0x0156, r22
     1e6:	70 93 57 01 	sts	0x0157, r23
		// The message was sent by my motivated.
		// I found someone's gradient maxer than mine in the world.
		// My formed state is determined by my maxer.
		if (received_gradient > own_gradient)
     1ea:	20 91 32 01 	lds	r18, 0x0132
     1ee:	30 91 33 01 	lds	r19, 0x0133
     1f2:	e0 91 18 01 	lds	r30, 0x0118
     1f6:	f0 91 19 01 	lds	r31, 0x0119
     1fa:	e2 17       	cp	r30, r18
     1fc:	f3 07       	cpc	r31, r19
     1fe:	0c f0       	brlt	.+2      	; 0x202 <message_rx+0x6a>
     200:	59 c0       	rjmp	.+178    	; 0x2b4 <message_rx+0x11c>
		{
			last_found_maxer = kilo_ticks;
     202:	40 91 83 01 	lds	r20, 0x0183
     206:	50 91 84 01 	lds	r21, 0x0184
     20a:	60 91 85 01 	lds	r22, 0x0185
     20e:	70 91 86 01 	lds	r23, 0x0186
     212:	40 93 58 01 	sts	0x0158, r20
     216:	50 93 59 01 	sts	0x0159, r21
     21a:	60 93 5a 01 	sts	0x015A, r22
     21e:	70 93 5b 01 	sts	0x015B, r23
			flag_maxest = NO;
     222:	10 92 3f 01 	sts	0x013F, r1
     226:	10 92 3e 01 	sts	0x013E, r1
			if (received_gradient == (own_gradient + 1))
     22a:	31 96       	adiw	r30, 0x01	; 1
     22c:	2e 17       	cp	r18, r30
     22e:	3f 07       	cpc	r19, r31
     230:	09 f4       	brne	.+2      	; 0x234 <message_rx+0x9c>
     232:	ba c0       	rjmp	.+372    	; 0x3a8 <message_rx+0x210>
     234:	80 91 b9 01 	lds	r24, 0x01B9
     238:	90 91 ba 01 	lds	r25, 0x01BA
		//flag_maxest = NO;
		
		// I have neighbours whose gradient is minor than mine.
		// Meanwhile long time no find gradient maxer than mine.
		// I am the maxest one in my local world.
		if((kilo_uid != SEED_ID) && (kilo_ticks > (last_found_maxer + TIME_CHECK_MAXER)))
     23c:	89 2b       	or	r24, r25
     23e:	99 f1       	breq	.+102    	; 0x2a6 <message_rx+0x10e>
     240:	40 91 83 01 	lds	r20, 0x0183
     244:	50 91 84 01 	lds	r21, 0x0184
     248:	60 91 85 01 	lds	r22, 0x0185
     24c:	70 91 86 01 	lds	r23, 0x0186
     250:	80 91 58 01 	lds	r24, 0x0158
     254:	90 91 59 01 	lds	r25, 0x0159
     258:	a0 91 5a 01 	lds	r26, 0x015A
     25c:	b0 91 5b 01 	lds	r27, 0x015B
     260:	80 56       	subi	r24, 0x60	; 96
     262:	9f 4f       	sbci	r25, 0xFF	; 255
     264:	af 4f       	sbci	r26, 0xFF	; 255
     266:	bf 4f       	sbci	r27, 0xFF	; 255
     268:	84 17       	cp	r24, r20
     26a:	95 07       	cpc	r25, r21
     26c:	a6 07       	cpc	r26, r22
     26e:	b7 07       	cpc	r27, r23
     270:	d0 f4       	brcc	.+52     	; 0x2a6 <message_rx+0x10e>
		{
			formed_state = FORMED_OK;
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	90 93 27 01 	sts	0x0127, r25
     27a:	80 93 26 01 	sts	0x0126, r24
			state_motivated = COMPLETED;
     27e:	25 e0       	ldi	r18, 0x05	; 5
     280:	30 e0       	ldi	r19, 0x00	; 0
     282:	30 93 31 01 	sts	0x0131, r19
     286:	20 93 30 01 	sts	0x0130, r18
			flag_maxest = YES;
     28a:	90 93 3f 01 	sts	0x013F, r25
     28e:	80 93 3e 01 	sts	0x013E, r24
			distance_to_motivated = DISTANCE_MAX;
     292:	24 e6       	ldi	r18, 0x64	; 100
     294:	30 e0       	ldi	r19, 0x00	; 0
     296:	30 93 07 01 	sts	0x0107, r19
     29a:	20 93 06 01 	sts	0x0106, r18
			update_distance_to_motivated = UPDATE;
     29e:	90 93 3b 01 	sts	0x013B, r25
     2a2:	80 93 3a 01 	sts	0x013A, r24
			update_state_motivator = UPDATE;
			set_color(RGB(1, 0, 1));
		}
		*/
	}	
}
     2a6:	df 91       	pop	r29
     2a8:	cf 91       	pop	r28
     2aa:	ff 90       	pop	r15
     2ac:	ef 90       	pop	r14
     2ae:	df 90       	pop	r13
     2b0:	cf 90       	pop	r12
     2b2:	08 95       	ret
				update_distance_to_motivated = UPDATE;
			}
		}
		// That guy has the same gradient with mine.
		// There needs a comparison between us.
		else if ((received_gradient == own_gradient) && (received_gradient != GRADIENT_MAX))
     2b4:	2e 17       	cp	r18, r30
     2b6:	3f 07       	cpc	r19, r31
     2b8:	b9 f1       	breq	.+110    	; 0x328 <message_rx+0x190>
				update_distance_to_motivator = UPDATE;
			}
		}
		// received_gradient < own_gradient
		// The message was sent by my motivator.
		else if (kilo_uid != SEED_ID)
     2ba:	40 91 b9 01 	lds	r20, 0x01B9
     2be:	50 91 ba 01 	lds	r21, 0x01BA
     2c2:	45 2b       	or	r20, r21
     2c4:	81 f3       	breq	.-32     	; 0x2a6 <message_rx+0x10e>
		{
			if (((own_gradient - received_gradient) == 2) || ((own_gradient - received_gradient) == 3))
     2c6:	e2 1b       	sub	r30, r18
     2c8:	f3 0b       	sbc	r31, r19
     2ca:	32 97       	sbiw	r30, 0x02	; 2
     2cc:	32 97       	sbiw	r30, 0x02	; 2
     2ce:	08 f4       	brcc	.+2      	; 0x2d2 <message_rx+0x13a>
     2d0:	9f c0       	rjmp	.+318    	; 0x410 <message_rx+0x278>
					update_distance_to_motivator = UPDATE;
				}
			}
			else
			{
				last_found_minor = kilo_ticks;
     2d2:	40 91 83 01 	lds	r20, 0x0183
     2d6:	50 91 84 01 	lds	r21, 0x0184
     2da:	60 91 85 01 	lds	r22, 0x0185
     2de:	70 91 86 01 	lds	r23, 0x0186
     2e2:	40 93 5c 01 	sts	0x015C, r20
     2e6:	50 93 5d 01 	sts	0x015D, r21
     2ea:	60 93 5e 01 	sts	0x015E, r22
     2ee:	70 93 5f 01 	sts	0x015F, r23
				own_gradient = received_gradient + 1;
     2f2:	2f 5f       	subi	r18, 0xFF	; 255
     2f4:	3f 4f       	sbci	r19, 0xFF	; 255
     2f6:	30 93 19 01 	sts	0x0119, r19
     2fa:	20 93 18 01 	sts	0x0118, r18
				state_motivator =  m->data[2];
     2fe:	2a 81       	ldd	r18, Y+2	; 0x02
     300:	30 e0       	ldi	r19, 0x00	; 0
     302:	30 93 2f 01 	sts	0x012F, r19
     306:	20 93 2e 01 	sts	0x012E, r18
				update_state_motivator = UPDATE;
     30a:	21 e0       	ldi	r18, 0x01	; 1
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	30 93 35 01 	sts	0x0135, r19
     312:	20 93 34 01 	sts	0x0134, r18
				distance_to_motivator = distance;
     316:	90 93 0d 01 	sts	0x010D, r25
     31a:	80 93 0c 01 	sts	0x010C, r24
				update_distance_to_motivator = UPDATE;
     31e:	30 93 39 01 	sts	0x0139, r19
     322:	20 93 38 01 	sts	0x0138, r18
     326:	8c cf       	rjmp	.-232    	; 0x240 <message_rx+0xa8>
				update_distance_to_motivated = UPDATE;
			}
		}
		// That guy has the same gradient with mine.
		// There needs a comparison between us.
		else if ((received_gradient == own_gradient) && (received_gradient != GRADIENT_MAX))
     328:	2f 3f       	cpi	r18, 0xFF	; 255
     32a:	31 05       	cpc	r19, r1
     32c:	31 f2       	breq	.-116    	; 0x2ba <message_rx+0x122>
		{
			distance_to_motivator_pair = m->data[3];
     32e:	4b 81       	ldd	r20, Y+3	; 0x03
     330:	50 e0       	ldi	r21, 0x00	; 0
     332:	50 93 0b 01 	sts	0x010B, r21
     336:	40 93 0a 01 	sts	0x010A, r20
			if (distance_to_motivator_pair < distance_to_motivator)
     33a:	60 91 0c 01 	lds	r22, 0x010C
     33e:	70 91 0d 01 	lds	r23, 0x010D
     342:	46 17       	cp	r20, r22
     344:	57 07       	cpc	r21, r23
     346:	0c f0       	brlt	.+2      	; 0x34a <message_rx+0x1b2>
     348:	75 cf       	rjmp	.-278    	; 0x234 <message_rx+0x9c>
			{
				last_found_minor = kilo_ticks;
     34a:	40 91 83 01 	lds	r20, 0x0183
     34e:	50 91 84 01 	lds	r21, 0x0184
     352:	60 91 85 01 	lds	r22, 0x0185
     356:	70 91 86 01 	lds	r23, 0x0186
     35a:	40 93 5c 01 	sts	0x015C, r20
     35e:	50 93 5d 01 	sts	0x015D, r21
     362:	60 93 5e 01 	sts	0x015E, r22
     366:	70 93 5f 01 	sts	0x015F, r23
				own_gradient = received_gradient + 1;
     36a:	2f 5f       	subi	r18, 0xFF	; 255
     36c:	3f 4f       	sbci	r19, 0xFF	; 255
     36e:	30 93 19 01 	sts	0x0119, r19
     372:	20 93 18 01 	sts	0x0118, r18
				state_motivator =  m->data[2];
     376:	2a 81       	ldd	r18, Y+2	; 0x02
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	30 93 2f 01 	sts	0x012F, r19
     37e:	20 93 2e 01 	sts	0x012E, r18
				update_state_motivator = UPDATE;
     382:	21 e0       	ldi	r18, 0x01	; 1
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	30 93 35 01 	sts	0x0135, r19
     38a:	20 93 34 01 	sts	0x0134, r18
				distance_to_motivator = distance;
     38e:	90 93 0d 01 	sts	0x010D, r25
     392:	80 93 0c 01 	sts	0x010C, r24
				update_distance_to_motivator = UPDATE;
     396:	30 93 39 01 	sts	0x0139, r19
     39a:	20 93 38 01 	sts	0x0138, r18
     39e:	80 91 b9 01 	lds	r24, 0x01B9
     3a2:	90 91 ba 01 	lds	r25, 0x01BA
     3a6:	4a cf       	rjmp	.-364    	; 0x23c <message_rx+0xa4>
		{
			last_found_maxer = kilo_ticks;
			flag_maxest = NO;
			if (received_gradient == (own_gradient + 1))
			{
				formed_state = m->data[1];
     3a8:	29 81       	ldd	r18, Y+1	; 0x01
     3aa:	30 e0       	ldi	r19, 0x00	; 0
     3ac:	30 93 27 01 	sts	0x0127, r19
     3b0:	20 93 26 01 	sts	0x0126, r18
				state_motivated =  m->data[2];
     3b4:	2a 81       	ldd	r18, Y+2	; 0x02
     3b6:	30 e0       	ldi	r19, 0x00	; 0
     3b8:	30 93 31 01 	sts	0x0131, r19
     3bc:	20 93 30 01 	sts	0x0130, r18
				update_state_motivated = UPDATE;
     3c0:	41 e0       	ldi	r20, 0x01	; 1
     3c2:	50 e0       	ldi	r21, 0x00	; 0
     3c4:	50 93 37 01 	sts	0x0137, r21
     3c8:	40 93 36 01 	sts	0x0136, r20
				if (state_motivated != MOVE) 
     3cc:	24 30       	cpi	r18, 0x04	; 4
     3ce:	31 05       	cpc	r19, r1
     3d0:	09 f4       	brne	.+2      	; 0x3d4 <message_rx+0x23c>
     3d2:	48 c0       	rjmp	.+144    	; 0x464 <message_rx+0x2cc>
				{
					if ((num_stop ++) == 1)
     3d4:	20 91 2a 01 	lds	r18, 0x012A
     3d8:	30 91 2b 01 	lds	r19, 0x012B
     3dc:	a9 01       	movw	r20, r18
     3de:	4f 5f       	subi	r20, 0xFF	; 255
     3e0:	5f 4f       	sbci	r21, 0xFF	; 255
     3e2:	50 93 2b 01 	sts	0x012B, r21
     3e6:	40 93 2a 01 	sts	0x012A, r20
     3ea:	21 30       	cpi	r18, 0x01	; 1
     3ec:	31 05       	cpc	r19, r1
     3ee:	59 f0       	breq	.+22     	; 0x406 <message_rx+0x26e>
				}
				else
				{
					num_stop = 0;
				}
				distance_to_motivated = distance;
     3f0:	90 93 07 01 	sts	0x0107, r25
     3f4:	80 93 06 01 	sts	0x0106, r24
				update_distance_to_motivated = UPDATE;
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	90 93 3b 01 	sts	0x013B, r25
     400:	80 93 3a 01 	sts	0x013A, r24
     404:	17 cf       	rjmp	.-466    	; 0x234 <message_rx+0x9c>
				update_state_motivated = UPDATE;
				if (state_motivated != MOVE) 
				{
					if ((num_stop ++) == 1)
					{
						my_fault = NO;
     406:	10 92 13 01 	sts	0x0113, r1
     40a:	10 92 12 01 	sts	0x0112, r1
     40e:	f0 cf       	rjmp	.-32     	; 0x3f0 <message_rx+0x258>
			if (((own_gradient - received_gradient) == 2) || ((own_gradient - received_gradient) == 3))
			{
				// The message sender is closer, and meanwhile the last 
				// time I found a minor is too long ago (TIME_CHECK_MINOR).
				// Thus I need  to find a new motivator.
				if ((distance < distance_to_motivator) && (kilo_ticks > (last_found_minor + TIME_CHECK_MINOR)))
     410:	40 91 0c 01 	lds	r20, 0x010C
     414:	50 91 0d 01 	lds	r21, 0x010D
     418:	84 17       	cp	r24, r20
     41a:	95 07       	cpc	r25, r21
     41c:	d4 f4       	brge	.+52     	; 0x452 <message_rx+0x2ba>
     41e:	c0 90 83 01 	lds	r12, 0x0183
     422:	d0 90 84 01 	lds	r13, 0x0184
     426:	e0 90 85 01 	lds	r14, 0x0185
     42a:	f0 90 86 01 	lds	r15, 0x0186
     42e:	40 91 5c 01 	lds	r20, 0x015C
     432:	50 91 5d 01 	lds	r21, 0x015D
     436:	60 91 5e 01 	lds	r22, 0x015E
     43a:	70 91 5f 01 	lds	r23, 0x015F
     43e:	40 58       	subi	r20, 0x80	; 128
     440:	5f 4f       	sbci	r21, 0xFF	; 255
     442:	6f 4f       	sbci	r22, 0xFF	; 255
     444:	7f 4f       	sbci	r23, 0xFF	; 255
     446:	4c 15       	cp	r20, r12
     448:	5d 05       	cpc	r21, r13
     44a:	6e 05       	cpc	r22, r14
     44c:	7f 05       	cpc	r23, r15
     44e:	08 f4       	brcc	.+2      	; 0x452 <message_rx+0x2ba>
     450:	40 cf       	rjmp	.-384    	; 0x2d2 <message_rx+0x13a>
					state_motivator =  m->data[2];
					update_state_motivator = UPDATE;
					distance_to_motivator = distance;
					update_distance_to_motivator = UPDATE;
				}
				else if (distance < distance_to_motivator_pair)
     452:	40 91 0a 01 	lds	r20, 0x010A
     456:	50 91 0b 01 	lds	r21, 0x010B
     45a:	84 17       	cp	r24, r20
     45c:	95 07       	cpc	r25, r21
     45e:	0c f4       	brge	.+2      	; 0x462 <message_rx+0x2ca>
     460:	38 cf       	rjmp	.-400    	; 0x2d2 <message_rx+0x13a>
     462:	ee ce       	rjmp	.-548    	; 0x240 <message_rx+0xa8>
						my_fault = NO;
					}
				}
				else
				{
					num_stop = 0;
     464:	10 92 2b 01 	sts	0x012B, r1
     468:	10 92 2a 01 	sts	0x012A, r1
     46c:	c1 cf       	rjmp	.-126    	; 0x3f0 <message_rx+0x258>

0000046e <set_motion.part.0>:
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
        {   
            spinup_motors();
     46e:	0e 94 1a 07 	call	0xe34	; 0xe34 <spinup_motors>
            set_motors(kilo_turn_left, 0);
     472:	60 e0       	ldi	r22, 0x00	; 0
     474:	80 91 bd 01 	lds	r24, 0x01BD
     478:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <set_motors>

0000047c <randBinary>:


// Generate 0 or 1 randomly
int randBinary(){
    // Generate an 8-bit random number (between 0 and 2^8 - 1 = 255).
    int random_number = rand_hard();
     47c:	0e 94 75 07 	call	0xeea	; 0xeea <rand_hard>
    // Compute the remainder of random_number when divided by 2.
    // This gives a new random number in the set {0, 1}.
    int random_direction = (random_number % 2);

    return random_direction;
}
     480:	81 70       	andi	r24, 0x01	; 1
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	08 95       	ret

00000486 <rand>:

// Generate a random number in the closed interval (0, 1).
float rand(){
    // Generate an 8-bit random number (between 0 and 2^8 - 1 = 255).
    int random_number = rand_hard();
     486:	0e 94 75 07 	call	0xeea	; 0xeea <rand_hard>
     48a:	90 e0       	ldi	r25, 0x00	; 0

    float result = random_number / 255;
     48c:	6f ef       	ldi	r22, 0xFF	; 255
     48e:	70 e0       	ldi	r23, 0x00	; 0
     490:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__divmodhi4>
     494:	88 27       	eor	r24, r24
     496:	77 fd       	sbrc	r23, 7
     498:	80 95       	com	r24
     49a:	98 2f       	mov	r25, r24
     49c:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <__floatsisf>

    return result;
}
     4a0:	08 95       	ret

000004a2 <set_led>:

// Function to set led states
void set_led()
{
    // Set the LED color based on the gradient.
    switch (own_gradient) {
     4a2:	80 91 18 01 	lds	r24, 0x0118
     4a6:	90 91 19 01 	lds	r25, 0x0119
     4aa:	82 30       	cpi	r24, 0x02	; 2
     4ac:	91 05       	cpc	r25, r1
     4ae:	c9 f0       	breq	.+50     	; 0x4e2 <set_led+0x40>
     4b0:	3c f4       	brge	.+14     	; 0x4c0 <set_led+0x1e>
     4b2:	00 97       	sbiw	r24, 0x00	; 0
     4b4:	99 f0       	breq	.+38     	; 0x4dc <set_led+0x3a>
     4b6:	01 97       	sbiw	r24, 0x01	; 1
     4b8:	59 f4       	brne	.+22     	; 0x4d0 <set_led+0x2e>
        case 0:
            set_color(RGB(1, 1, 1)); // White
            break;
        case 1:
            set_color(RGB(1, 0, 0)); // Red
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	0c 94 40 0b 	jmp	0x1680	; 0x1680 <set_color>

// Function to set led states
void set_led()
{
    // Set the LED color based on the gradient.
    switch (own_gradient) {
     4c0:	83 30       	cpi	r24, 0x03	; 3
     4c2:	91 05       	cpc	r25, r1
     4c4:	41 f0       	breq	.+16     	; 0x4d6 <set_led+0x34>
     4c6:	04 97       	sbiw	r24, 0x04	; 4
     4c8:	19 f4       	brne	.+6      	; 0x4d0 <set_led+0x2e>
            break;
        case 3:
            set_color(RGB(0, 0, 1)); // Blue
            break;
        case 4:
            set_color(RGB(1, 1, 0)); // Yellow
     4ca:	85 e0       	ldi	r24, 0x05	; 5
     4cc:	0c 94 40 0b 	jmp	0x1680	; 0x1680 <set_color>
            break;
        default:
            set_color(RGB(1, 0, 1)); // Magneta
     4d0:	81 e1       	ldi	r24, 0x11	; 17
     4d2:	0c 94 40 0b 	jmp	0x1680	; 0x1680 <set_color>
            break;
        case 2:
            set_color(RGB(0, 1, 0)); // Green
            break;
        case 3:
            set_color(RGB(0, 0, 1)); // Blue
     4d6:	80 e1       	ldi	r24, 0x10	; 16
     4d8:	0c 94 40 0b 	jmp	0x1680	; 0x1680 <set_color>
void set_led()
{
    // Set the LED color based on the gradient.
    switch (own_gradient) {
        case 0:
            set_color(RGB(1, 1, 1)); // White
     4dc:	85 e1       	ldi	r24, 0x15	; 21
     4de:	0c 94 40 0b 	jmp	0x1680	; 0x1680 <set_color>
            break;
        case 1:
            set_color(RGB(1, 0, 0)); // Red
            break;
        case 2:
            set_color(RGB(0, 1, 0)); // Green
     4e2:	84 e0       	ldi	r24, 0x04	; 4
     4e4:	0c 94 40 0b 	jmp	0x1680	; 0x1680 <set_color>

000004e8 <set_motion>:

// Function to handle motion.
void set_motion(int new_motion)
{   
    // Only take an an action if the motion is being changed.
    if (current_motion != new_motion)
     4e8:	20 91 16 01 	lds	r18, 0x0116
     4ec:	30 91 17 01 	lds	r19, 0x0117
     4f0:	28 17       	cp	r18, r24
     4f2:	39 07       	cpc	r19, r25
     4f4:	71 f0       	breq	.+28     	; 0x512 <set_motion+0x2a>
    {   
        current_motion = new_motion;
     4f6:	90 93 17 01 	sts	0x0117, r25
     4fa:	80 93 16 01 	sts	0x0116, r24
        
        if (current_motion == STOP)
     4fe:	00 97       	sbiw	r24, 0x00	; 0
     500:	81 f0       	breq	.+32     	; 0x522 <set_motion+0x3a>
        {   
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
     502:	81 30       	cpi	r24, 0x01	; 1
     504:	91 05       	cpc	r25, r1
     506:	89 f0       	breq	.+34     	; 0x52a <set_motion+0x42>
        {   
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
     508:	82 30       	cpi	r24, 0x02	; 2
     50a:	91 05       	cpc	r25, r1
     50c:	b1 f0       	breq	.+44     	; 0x53a <set_motion+0x52>
        {   
            spinup_motors();
            set_motors(kilo_turn_left, 0);
        }
        else if (current_motion == RIGHT)
     50e:	03 97       	sbiw	r24, 0x03	; 3
     510:	09 f0       	breq	.+2      	; 0x514 <set_motion+0x2c>
     512:	08 95       	ret
        {   
            spinup_motors();
     514:	0e 94 1a 07 	call	0xe34	; 0xe34 <spinup_motors>
            set_motors(0, kilo_turn_right);
     518:	60 91 a9 01 	lds	r22, 0x01A9
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <set_motors>
    {   
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {   
            set_motors(0, 0);
     522:	60 e0       	ldi	r22, 0x00	; 0
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <set_motors>
        }
        else if (current_motion == FORWARD)
        {   
            spinup_motors();
     52a:	0e 94 1a 07 	call	0xe34	; 0xe34 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     52e:	60 91 bc 01 	lds	r22, 0x01BC
     532:	80 91 bb 01 	lds	r24, 0x01BB
     536:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <set_motors>
        }
        else if (current_motion == LEFT)
        {   
            spinup_motors();
     53a:	0e 94 1a 07 	call	0xe34	; 0xe34 <spinup_motors>
            set_motors(kilo_turn_left, 0);
     53e:	60 e0       	ldi	r22, 0x00	; 0
     540:	80 91 bd 01 	lds	r24, 0x01BD
     544:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <set_motors>

00000548 <check_own_gradient>:
}

void check_own_gradient() {
	// If no neighbors detected within TIME_LAST_GRADIENT seconds
	// then sleep waiting for be activated.
    if ( (kilo_uid != SEED_ID) && (kilo_ticks > (last_found_minor + TIME_LAST_GRADIENT)) && (own_gradient < GRADIENT_MAX))
     548:	80 91 b9 01 	lds	r24, 0x01B9
     54c:	90 91 ba 01 	lds	r25, 0x01BA
     550:	89 2b       	or	r24, r25
     552:	51 f1       	breq	.+84     	; 0x5a8 <check_own_gradient+0x60>
     554:	40 91 83 01 	lds	r20, 0x0183
     558:	50 91 84 01 	lds	r21, 0x0184
     55c:	60 91 85 01 	lds	r22, 0x0185
     560:	70 91 86 01 	lds	r23, 0x0186
     564:	80 91 5c 01 	lds	r24, 0x015C
     568:	90 91 5d 01 	lds	r25, 0x015D
     56c:	a0 91 5e 01 	lds	r26, 0x015E
     570:	b0 91 5f 01 	lds	r27, 0x015F
     574:	80 56       	subi	r24, 0x60	; 96
     576:	9f 4f       	sbci	r25, 0xFF	; 255
     578:	af 4f       	sbci	r26, 0xFF	; 255
     57a:	bf 4f       	sbci	r27, 0xFF	; 255
     57c:	84 17       	cp	r24, r20
     57e:	95 07       	cpc	r25, r21
     580:	a6 07       	cpc	r26, r22
     582:	b7 07       	cpc	r27, r23
     584:	88 f4       	brcc	.+34     	; 0x5a8 <check_own_gradient+0x60>
     586:	80 91 18 01 	lds	r24, 0x0118
     58a:	90 91 19 01 	lds	r25, 0x0119
     58e:	8f 3f       	cpi	r24, 0xFF	; 255
     590:	91 05       	cpc	r25, r1
     592:	54 f4       	brge	.+20     	; 0x5a8 <check_own_gradient+0x60>
    {   
        own_gradient = GRADIENT_MAX;
     594:	8f ef       	ldi	r24, 0xFF	; 255
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	90 93 19 01 	sts	0x0119, r25
     59c:	80 93 18 01 	sts	0x0118, r24
		formed_state = FORMED_NO;
     5a0:	10 92 27 01 	sts	0x0127, r1
     5a4:	10 92 26 01 	sts	0x0126, r1
     5a8:	08 95       	ret

000005aa <opposite_move>:
}

int opposite_move(int offspring)
{
	int next_motion = offspring;
	switch (offspring)
     5aa:	82 30       	cpi	r24, 0x02	; 2
     5ac:	91 05       	cpc	r25, r1
     5ae:	59 f0       	breq	.+22     	; 0x5c6 <opposite_move+0x1c>
     5b0:	83 30       	cpi	r24, 0x03	; 3
     5b2:	91 05       	cpc	r25, r1
     5b4:	59 f0       	breq	.+22     	; 0x5cc <opposite_move+0x22>
     5b6:	81 30       	cpi	r24, 0x01	; 1
     5b8:	91 05       	cpc	r25, r1
     5ba:	09 f0       	breq	.+2      	; 0x5be <opposite_move+0x14>
			break;
		default:
			break;
	}
	return next_motion;
}
     5bc:	08 95       	ret


// Generate 0 or 1 randomly
int randBinary(){
    // Generate an 8-bit random number (between 0 and 2^8 - 1 = 255).
    int random_number = rand_hard();
     5be:	0e 94 75 07 	call	0xeea	; 0xeea <rand_hard>
			break;
		case RIGHT:
			next_motion = LEFT;
			break;
		case FORWARD:
			if (randBinary() == 1) 
     5c2:	80 fd       	sbrc	r24, 0
     5c4:	03 c0       	rjmp	.+6      	; 0x5cc <opposite_move+0x22>
			{
				next_motion = LEFT;
			} 
			else 
			{
				next_motion = RIGHT;
     5c6:	83 e0       	ldi	r24, 0x03	; 3
     5c8:	90 e0       	ldi	r25, 0x00	; 0
			break;
		default:
			break;
	}
	return next_motion;
}
     5ca:	08 95       	ret
			next_motion = LEFT;
			break;
		case FORWARD:
			if (randBinary() == 1) 
			{
				next_motion = LEFT;
     5cc:	82 e0       	ldi	r24, 0x02	; 2
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	08 95       	ret

000005d2 <move>:

void move() {
	int next_motion = offspring;
	//set_color(RGB(0, 0, 0));
	// closer and closer
	if (distance_to_motivated < distance_to_motivated_parent) 
     5d2:	20 91 06 01 	lds	r18, 0x0106
     5d6:	30 91 07 01 	lds	r19, 0x0107
     5da:	80 91 04 01 	lds	r24, 0x0104
     5de:	90 91 05 01 	lds	r25, 0x0105
     5e2:	28 17       	cp	r18, r24
     5e4:	39 07       	cpc	r19, r25
     5e6:	8c f5       	brge	.+98     	; 0x64a <move+0x78>
	{
		// I am keeped in the line formed by my motivator and my motivated.
		if (distance_line <= distance_line_parent)
     5e8:	20 91 02 01 	lds	r18, 0x0102
     5ec:	30 91 03 01 	lds	r19, 0x0103
     5f0:	80 91 00 01 	lds	r24, 0x0100
     5f4:	90 91 01 01 	lds	r25, 0x0101
     5f8:	82 17       	cp	r24, r18
     5fa:	93 07       	cpc	r25, r19
     5fc:	0c f4       	brge	.+2      	; 0x600 <move+0x2e>
     5fe:	67 c0       	rjmp	.+206    	; 0x6ce <move+0xfc>
		{
			set_color(RGB(1, 0, 0));
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	0e 94 40 0b 	call	0x1680	; 0x1680 <set_color>
			next_motion = offspring;
     606:	80 91 10 01 	lds	r24, 0x0110
     60a:	90 91 11 01 	lds	r25, 0x0111
			set_color(RGB(0, 1, 1));
			next_motion = opposite_move(offspring);			
		}
	}
	
	offspring = next_motion;
     60e:	90 93 11 01 	sts	0x0111, r25
     612:	80 93 10 01 	sts	0x0110, r24

// Function to handle motion.
void set_motion(int new_motion)
{   
    // Only take an an action if the motion is being changed.
    if (current_motion != new_motion)
     616:	20 91 16 01 	lds	r18, 0x0116
     61a:	30 91 17 01 	lds	r19, 0x0117
     61e:	82 17       	cp	r24, r18
     620:	93 07       	cpc	r25, r19
     622:	91 f0       	breq	.+36     	; 0x648 <move+0x76>
    {   
        current_motion = new_motion;
     624:	90 93 17 01 	sts	0x0117, r25
     628:	80 93 16 01 	sts	0x0116, r24
        
        if (current_motion == STOP)
     62c:	00 97       	sbiw	r24, 0x00	; 0
     62e:	09 f4       	brne	.+2      	; 0x632 <move+0x60>
     630:	78 c0       	rjmp	.+240    	; 0x722 <move+0x150>
        {   
            set_motors(0, 0);
        }
        else if (current_motion == FORWARD)
     632:	81 30       	cpi	r24, 0x01	; 1
     634:	91 05       	cpc	r25, r1
     636:	09 f4       	brne	.+2      	; 0x63a <move+0x68>
     638:	78 c0       	rjmp	.+240    	; 0x72a <move+0x158>
        {   
            spinup_motors();
            set_motors(kilo_straight_left, kilo_straight_right);
        }
        else if (current_motion == LEFT)
     63a:	82 30       	cpi	r24, 0x02	; 2
     63c:	91 05       	cpc	r25, r1
     63e:	09 f4       	brne	.+2      	; 0x642 <move+0x70>
     640:	7c c0       	rjmp	.+248    	; 0x73a <move+0x168>
        {   
            spinup_motors();
            set_motors(kilo_turn_left, 0);
        }
        else if (current_motion == RIGHT)
     642:	03 97       	sbiw	r24, 0x03	; 3
     644:	09 f4       	brne	.+2      	; 0x648 <move+0x76>
     646:	5e c0       	rjmp	.+188    	; 0x704 <move+0x132>
     648:	08 95       	ret
			next_motion = opposite_move(offspring);			
		}
	}
	// farer and farer
	// If the distance_to_motivated keep unchanged, it is unusual.
	else if (distance_to_motivated > distance_to_motivated_parent)
     64a:	82 17       	cp	r24, r18
     64c:	93 07       	cpc	r25, r19
     64e:	5c f1       	brlt	.+86     	; 0x6a6 <move+0xd4>
		}
	}
	// distance_to_motivated == distance_to_motivated_parent
	else
	{
		if (flag_maxest == YES)
     650:	80 91 3e 01 	lds	r24, 0x013E
     654:	90 91 3f 01 	lds	r25, 0x013F
     658:	01 97       	sbiw	r24, 0x01	; 1
     65a:	09 f4       	brne	.+2      	; 0x65e <move+0x8c>
     65c:	75 c0       	rjmp	.+234    	; 0x748 <move+0x176>
		{
			next_motion = FORWARD;
		}
		else if (distance_line <= distance_line_parent)
     65e:	20 91 02 01 	lds	r18, 0x0102
     662:	30 91 03 01 	lds	r19, 0x0103
     666:	80 91 00 01 	lds	r24, 0x0100
     66a:	90 91 01 01 	lds	r25, 0x0101
     66e:	82 17       	cp	r24, r18
     670:	93 07       	cpc	r25, r19
     672:	0c f0       	brlt	.+2      	; 0x676 <move+0xa4>
     674:	4e c0       	rjmp	.+156    	; 0x712 <move+0x140>
			set_color(RGB(1, 1, 0));
			next_motion = offspring;
		}
		else
		{
			set_color(RGB(0, 1, 1));
     676:	84 e1       	ldi	r24, 0x14	; 20
     678:	0e 94 40 0b 	call	0x1680	; 0x1680 <set_color>
			next_motion = opposite_move(offspring);			
     67c:	80 91 10 01 	lds	r24, 0x0110
     680:	90 91 11 01 	lds	r25, 0x0111
}

int opposite_move(int offspring)
{
	int next_motion = offspring;
	switch (offspring)
     684:	82 30       	cpi	r24, 0x02	; 2
     686:	91 05       	cpc	r25, r1
     688:	59 f0       	breq	.+22     	; 0x6a0 <move+0xce>
     68a:	83 30       	cpi	r24, 0x03	; 3
     68c:	91 05       	cpc	r25, r1
     68e:	61 f1       	breq	.+88     	; 0x6e8 <move+0x116>
     690:	81 30       	cpi	r24, 0x01	; 1
     692:	91 05       	cpc	r25, r1
     694:	09 f0       	breq	.+2      	; 0x698 <move+0xc6>
     696:	bb cf       	rjmp	.-138    	; 0x60e <move+0x3c>


// Generate 0 or 1 randomly
int randBinary(){
    // Generate an 8-bit random number (between 0 and 2^8 - 1 = 255).
    int random_number = rand_hard();
     698:	0e 94 75 07 	call	0xeea	; 0xeea <rand_hard>
			break;
		case RIGHT:
			next_motion = LEFT;
			break;
		case FORWARD:
			if (randBinary() == 1) 
     69c:	80 fd       	sbrc	r24, 0
     69e:	24 c0       	rjmp	.+72     	; 0x6e8 <move+0x116>
			{
				next_motion = LEFT;
			} 
			else 
			{
				next_motion = RIGHT;
     6a0:	83 e0       	ldi	r24, 0x03	; 3
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	b4 cf       	rjmp	.-152    	; 0x60e <move+0x3c>
	// farer and farer
	// If the distance_to_motivated keep unchanged, it is unusual.
	else if (distance_to_motivated > distance_to_motivated_parent)
	{
		// It's not my fault, so I continue my movement as before.
		if (my_fault == NO)
     6a6:	80 91 12 01 	lds	r24, 0x0112
     6aa:	90 91 13 01 	lds	r25, 0x0113
     6ae:	89 2b       	or	r24, r25
     6b0:	f1 f4       	brne	.+60     	; 0x6ee <move+0x11c>
		{
			set_color(RGB(0, 1, 0));
     6b2:	84 e0       	ldi	r24, 0x04	; 4
     6b4:	0e 94 40 0b 	call	0x1680	; 0x1680 <set_color>
			my_fault = YES;
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	90 93 13 01 	sts	0x0113, r25
     6c0:	80 93 12 01 	sts	0x0112, r24
			next_motion = offspring;
     6c4:	80 91 10 01 	lds	r24, 0x0110
     6c8:	90 91 11 01 	lds	r25, 0x0111
     6cc:	a0 cf       	rjmp	.-192    	; 0x60e <move+0x3c>
			set_color(RGB(1, 0, 0));
			next_motion = offspring;
		}
		else
		{
			set_color(RGB(0, 0, 0));
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	0e 94 40 0b 	call	0x1680	; 0x1680 <set_color>
			next_motion = opposite_move(offspring);			
     6d4:	80 91 10 01 	lds	r24, 0x0110
     6d8:	90 91 11 01 	lds	r25, 0x0111
}

int opposite_move(int offspring)
{
	int next_motion = offspring;
	switch (offspring)
     6dc:	82 30       	cpi	r24, 0x02	; 2
     6de:	91 05       	cpc	r25, r1
     6e0:	f9 f2       	breq	.-66     	; 0x6a0 <move+0xce>
     6e2:	83 30       	cpi	r24, 0x03	; 3
     6e4:	91 05       	cpc	r25, r1
     6e6:	a1 f6       	brne	.-88     	; 0x690 <move+0xbe>
			next_motion = LEFT;
			break;
		case FORWARD:
			if (randBinary() == 1) 
			{
				next_motion = LEFT;
     6e8:	82 e0       	ldi	r24, 0x02	; 2
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	90 cf       	rjmp	.-224    	; 0x60e <move+0x3c>
			my_fault = YES;
			next_motion = offspring;
		}
		else
		{
			set_color(RGB(0, 0, 1));
     6ee:	80 e1       	ldi	r24, 0x10	; 16
     6f0:	0e 94 40 0b 	call	0x1680	; 0x1680 <set_color>
			next_motion = opposite_move(offspring);
     6f4:	80 91 10 01 	lds	r24, 0x0110
     6f8:	90 91 11 01 	lds	r25, 0x0111
}

int opposite_move(int offspring)
{
	int next_motion = offspring;
	switch (offspring)
     6fc:	82 30       	cpi	r24, 0x02	; 2
     6fe:	91 05       	cpc	r25, r1
     700:	21 f6       	brne	.-120    	; 0x68a <move+0xb8>
     702:	ce cf       	rjmp	.-100    	; 0x6a0 <move+0xce>
            spinup_motors();
            set_motors(kilo_turn_left, 0);
        }
        else if (current_motion == RIGHT)
        {   
            spinup_motors();
     704:	0e 94 1a 07 	call	0xe34	; 0xe34 <spinup_motors>
            set_motors(0, kilo_turn_right);
     708:	60 91 a9 01 	lds	r22, 0x01A9
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <set_motors>
		{
			next_motion = FORWARD;
		}
		else if (distance_line <= distance_line_parent)
		{
			set_color(RGB(1, 1, 0));
     712:	85 e0       	ldi	r24, 0x05	; 5
     714:	0e 94 40 0b 	call	0x1680	; 0x1680 <set_color>
			next_motion = offspring;
     718:	80 91 10 01 	lds	r24, 0x0110
     71c:	90 91 11 01 	lds	r25, 0x0111
     720:	76 cf       	rjmp	.-276    	; 0x60e <move+0x3c>
    {   
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {   
            set_motors(0, 0);
     722:	60 e0       	ldi	r22, 0x00	; 0
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <set_motors>
        }
        else if (current_motion == FORWARD)
        {   
            spinup_motors();
     72a:	0e 94 1a 07 	call	0xe34	; 0xe34 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     72e:	60 91 bc 01 	lds	r22, 0x01BC
     732:	80 91 bb 01 	lds	r24, 0x01BB
     736:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <set_motors>
        }
        else if (current_motion == LEFT)
        {   
            spinup_motors();
     73a:	0e 94 1a 07 	call	0xe34	; 0xe34 <spinup_motors>
            set_motors(kilo_turn_left, 0);
     73e:	60 e0       	ldi	r22, 0x00	; 0
     740:	80 91 bd 01 	lds	r24, 0x01BD
     744:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <set_motors>
	// distance_to_motivated == distance_to_motivated_parent
	else
	{
		if (flag_maxest == YES)
		{
			next_motion = FORWARD;
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	60 cf       	rjmp	.-320    	; 0x60e <move+0x3c>

0000074e <loop>:
	offspring = next_motion;
	set_motion(offspring);
}


void loop() {
     74e:	cf 92       	push	r12
     750:	df 92       	push	r13
     752:	ef 92       	push	r14
     754:	ff 92       	push	r15
}

void check_own_gradient() {
	// If no neighbors detected within TIME_LAST_GRADIENT seconds
	// then sleep waiting for be activated.
    if ( (kilo_uid != SEED_ID) && (kilo_ticks > (last_found_minor + TIME_LAST_GRADIENT)) && (own_gradient < GRADIENT_MAX))
     756:	80 91 b9 01 	lds	r24, 0x01B9
     75a:	90 91 ba 01 	lds	r25, 0x01BA
     75e:	89 2b       	or	r24, r25
     760:	09 f4       	brne	.+2      	; 0x764 <loop+0x16>
     762:	43 c0       	rjmp	.+134    	; 0x7ea <loop+0x9c>
     764:	40 91 83 01 	lds	r20, 0x0183
     768:	50 91 84 01 	lds	r21, 0x0184
     76c:	60 91 85 01 	lds	r22, 0x0185
     770:	70 91 86 01 	lds	r23, 0x0186
     774:	80 91 5c 01 	lds	r24, 0x015C
     778:	90 91 5d 01 	lds	r25, 0x015D
     77c:	a0 91 5e 01 	lds	r26, 0x015E
     780:	b0 91 5f 01 	lds	r27, 0x015F
     784:	80 56       	subi	r24, 0x60	; 96
     786:	9f 4f       	sbci	r25, 0xFF	; 255
     788:	af 4f       	sbci	r26, 0xFF	; 255
     78a:	bf 4f       	sbci	r27, 0xFF	; 255
     78c:	84 17       	cp	r24, r20
     78e:	95 07       	cpc	r25, r21
     790:	a6 07       	cpc	r26, r22
     792:	b7 07       	cpc	r27, r23
     794:	50 f5       	brcc	.+84     	; 0x7ea <loop+0x9c>
     796:	80 91 18 01 	lds	r24, 0x0118
     79a:	90 91 19 01 	lds	r25, 0x0119
     79e:	8f 3f       	cpi	r24, 0xFF	; 255
     7a0:	91 05       	cpc	r25, r1
     7a2:	1c f5       	brge	.+70     	; 0x7ea <loop+0x9c>
    {   
        own_gradient = GRADIENT_MAX;
     7a4:	8f ef       	ldi	r24, 0xFF	; 255
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	90 93 19 01 	sts	0x0119, r25
     7ac:	80 93 18 01 	sts	0x0118, r24
		formed_state = FORMED_NO;
     7b0:	10 92 27 01 	sts	0x0127, r1
     7b4:	10 92 26 01 	sts	0x0126, r1
    }
	// Stop when the sequence has not formed.
	else
	{
		//set_color(RGB(0, 0, 0));
		state_myself = COMPLETED;
     7b8:	85 e0       	ldi	r24, 0x05	; 5
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	90 93 2d 01 	sts	0x012D, r25
     7c0:	80 93 2c 01 	sts	0x012C, r24

// Function to handle motion.
void set_motion(int new_motion)
{   
    // Only take an an action if the motion is being changed.
    if (current_motion != new_motion)
     7c4:	80 91 16 01 	lds	r24, 0x0116
     7c8:	90 91 17 01 	lds	r25, 0x0117
     7cc:	89 2b       	or	r24, r25
     7ce:	09 f4       	brne	.+2      	; 0x7d2 <loop+0x84>
     7d0:	71 c0       	rjmp	.+226    	; 0x8b4 <loop+0x166>
    {   
        current_motion = new_motion;
     7d2:	10 92 17 01 	sts	0x0117, r1
     7d6:	10 92 16 01 	sts	0x0116, r1
        
        if (current_motion == STOP)
        {   
            set_motors(0, 0);
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	80 e0       	ldi	r24, 0x00	; 0
	{
		//set_color(RGB(0, 0, 0));
		state_myself = COMPLETED;
		set_motion(STOP);
	}
}
     7de:	ff 90       	pop	r15
     7e0:	ef 90       	pop	r14
     7e2:	df 90       	pop	r13
     7e4:	cf 90       	pop	r12
    {   
        current_motion = new_motion;
        
        if (current_motion == STOP)
        {   
            set_motors(0, 0);
     7e6:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <set_motors>
	check_own_gradient();
	// Move only when the sequence has already formed.
	// Move can only occured when the movitvator and motivated member
	// is stationary. This can assure the kilobot make the right
	// decision based on the measured changing distance.
	if ((formed_state == FORMED_OK) && (state_motivator == COMPLETED) && (state_motivated != MOVE))
     7ea:	80 91 26 01 	lds	r24, 0x0126
     7ee:	90 91 27 01 	lds	r25, 0x0127
     7f2:	01 97       	sbiw	r24, 0x01	; 1
     7f4:	09 f7       	brne	.-62     	; 0x7b8 <loop+0x6a>
     7f6:	80 91 2e 01 	lds	r24, 0x012E
     7fa:	90 91 2f 01 	lds	r25, 0x012F
     7fe:	85 30       	cpi	r24, 0x05	; 5
     800:	91 05       	cpc	r25, r1
     802:	d1 f6       	brne	.-76     	; 0x7b8 <loop+0x6a>
     804:	20 91 30 01 	lds	r18, 0x0130
     808:	30 91 31 01 	lds	r19, 0x0131
     80c:	24 30       	cpi	r18, 0x04	; 4
     80e:	31 05       	cpc	r19, r1
     810:	99 f2       	breq	.-90     	; 0x7b8 <loop+0x6a>
	{
		if (flag_maxest == YES)
     812:	20 91 3e 01 	lds	r18, 0x013E
     816:	30 91 3f 01 	lds	r19, 0x013F
     81a:	21 30       	cpi	r18, 0x01	; 1
     81c:	31 05       	cpc	r19, r1
     81e:	09 f4       	brne	.+2      	; 0x822 <loop+0xd4>
     820:	4e c0       	rjmp	.+156    	; 0x8be <loop+0x170>
		// My gradient is not the maxest.
		else
		{
			// When my motivator is closer enough can I move 
			// to assure my motivator is not lost.
			if (distance_to_motivator <= DISTANCE_MOVE)
     822:	80 91 0c 01 	lds	r24, 0x010C
     826:	90 91 0d 01 	lds	r25, 0x010D
     82a:	8b 32       	cpi	r24, 0x2B	; 43
     82c:	91 05       	cpc	r25, r1
     82e:	34 f4       	brge	.+12     	; 0x83c <loop+0xee>
			{
				state_myself = MOVE;
     830:	44 e0       	ldi	r20, 0x04	; 4
     832:	50 e0       	ldi	r21, 0x00	; 0
     834:	50 93 2d 01 	sts	0x012D, r21
     838:	40 93 2c 01 	sts	0x012C, r20
			}

			if (distance_to_motivated <= DISTANCE_COLLIDE)
     83c:	40 91 06 01 	lds	r20, 0x0106
     840:	50 91 07 01 	lds	r21, 0x0107
     844:	49 32       	cpi	r20, 0x29	; 41
     846:	51 05       	cpc	r21, r1
     848:	0c f4       	brge	.+2      	; 0x84c <loop+0xfe>
     84a:	b6 cf       	rjmp	.-148    	; 0x7b8 <loop+0x6a>
			{
				state_myself = COMPLETED;
			}
		}

		if (state_myself == MOVE)
     84c:	40 91 2c 01 	lds	r20, 0x012C
     850:	50 91 2d 01 	lds	r21, 0x012D
     854:	44 30       	cpi	r20, 0x04	; 4
     856:	51 05       	cpc	r21, r1
     858:	09 f0       	breq	.+2      	; 0x85c <loop+0x10e>
     85a:	b4 cf       	rjmp	.-152    	; 0x7c4 <loop+0x76>
			// TIME_LAST_MOTION_UPDATE.
			// This can assure the fixed distance kilobot move 
			// in a fixed speed.
			// If distance is updated, then I can move according to 
			// strategies.
			if ((update_distance_to_motivated == UPDATE) && (update_distance_to_motivator == UPDATE))
     85c:	40 91 3a 01 	lds	r20, 0x013A
     860:	50 91 3b 01 	lds	r21, 0x013B
     864:	41 30       	cpi	r20, 0x01	; 1
     866:	51 05       	cpc	r21, r1
     868:	d1 f1       	breq	.+116    	; 0x8de <loop+0x190>
				move();
				last_motion_update = kilo_ticks;
				distance_to_motivated_parent = distance_to_motivated;
				distance_line_parent = distance_line;
			}
			else if (kilo_ticks > (last_motion_update + TIME_LAST_MOTION_UPDATE))
     86a:	60 91 83 01 	lds	r22, 0x0183
     86e:	70 91 84 01 	lds	r23, 0x0184
     872:	80 91 85 01 	lds	r24, 0x0185
     876:	90 91 86 01 	lds	r25, 0x0186
     87a:	0e 94 77 0f 	call	0x1eee	; 0x1eee <__floatunsisf>
     87e:	6b 01       	movw	r12, r22
     880:	7c 01       	movw	r14, r24
     882:	60 91 50 01 	lds	r22, 0x0150
     886:	70 91 51 01 	lds	r23, 0x0151
     88a:	80 91 52 01 	lds	r24, 0x0152
     88e:	90 91 53 01 	lds	r25, 0x0153
     892:	0e 94 77 0f 	call	0x1eee	; 0x1eee <__floatunsisf>
     896:	2a e9       	ldi	r18, 0x9A	; 154
     898:	39 e9       	ldi	r19, 0x99	; 153
     89a:	49 e1       	ldi	r20, 0x19	; 25
     89c:	51 e4       	ldi	r21, 0x41	; 65
     89e:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__addsf3>
     8a2:	9b 01       	movw	r18, r22
     8a4:	ac 01       	movw	r20, r24
     8a6:	c7 01       	movw	r24, r14
     8a8:	b6 01       	movw	r22, r12
     8aa:	0e 94 05 10 	call	0x200a	; 0x200a <__gesf2>
     8ae:	18 16       	cp	r1, r24
     8b0:	0c f4       	brge	.+2      	; 0x8b4 <loop+0x166>
     8b2:	88 cf       	rjmp	.-240    	; 0x7c4 <loop+0x76>
	{
		//set_color(RGB(0, 0, 0));
		state_myself = COMPLETED;
		set_motion(STOP);
	}
}
     8b4:	ff 90       	pop	r15
     8b6:	ef 90       	pop	r14
     8b8:	df 90       	pop	r13
     8ba:	cf 90       	pop	r12
     8bc:	08 95       	ret
	{
		if (flag_maxest == YES)
		{
			// When my motivator is closer enough can I move 
			// to assure my motivator is not lost.
			if (distance_to_motivator <= DISTANCE_MOVE)
     8be:	40 91 0c 01 	lds	r20, 0x010C
     8c2:	50 91 0d 01 	lds	r21, 0x010D
     8c6:	42 33       	cpi	r20, 0x32	; 50
     8c8:	51 05       	cpc	r21, r1
     8ca:	0c f0       	brlt	.+2      	; 0x8ce <loop+0x180>
     8cc:	77 cf       	rjmp	.-274    	; 0x7bc <loop+0x6e>
			{
				state_myself = MOVE;
     8ce:	84 e0       	ldi	r24, 0x04	; 4
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	90 93 2d 01 	sts	0x012D, r25
     8d6:	80 93 2c 01 	sts	0x012C, r24
     8da:	ca 01       	movw	r24, r20
     8dc:	bf cf       	rjmp	.-130    	; 0x85c <loop+0x10e>
			// TIME_LAST_MOTION_UPDATE.
			// This can assure the fixed distance kilobot move 
			// in a fixed speed.
			// If distance is updated, then I can move according to 
			// strategies.
			if ((update_distance_to_motivated == UPDATE) && (update_distance_to_motivator == UPDATE))
     8de:	40 91 38 01 	lds	r20, 0x0138
     8e2:	50 91 39 01 	lds	r21, 0x0139
     8e6:	41 30       	cpi	r20, 0x01	; 1
     8e8:	51 05       	cpc	r21, r1
     8ea:	09 f0       	breq	.+2      	; 0x8ee <loop+0x1a0>
     8ec:	be cf       	rjmp	.-132    	; 0x86a <loop+0x11c>
			{
				if (flag_minor == NO)
     8ee:	40 91 3c 01 	lds	r20, 0x013C
     8f2:	50 91 3d 01 	lds	r21, 0x013D
     8f6:	45 2b       	or	r20, r21
     8f8:	21 f4       	brne	.+8      	; 0x902 <__stack+0x3>
				{
					update_distance_to_motivator = UNUPDATE;
     8fa:	10 92 39 01 	sts	0x0139, r1
     8fe:	10 92 38 01 	sts	0x0138, r1
				}
				if (flag_maxest == NO)
     902:	23 2b       	or	r18, r19
     904:	21 f4       	brne	.+8      	; 0x90e <__stack+0xf>
				{
					update_distance_to_motivated = UNUPDATE;
     906:	10 92 3b 01 	sts	0x013B, r1
     90a:	10 92 3a 01 	sts	0x013A, r1
				}

				distance_line = distance_to_motivated + distance_to_motivator;
     90e:	20 91 06 01 	lds	r18, 0x0106
     912:	30 91 07 01 	lds	r19, 0x0107
     916:	28 0f       	add	r18, r24
     918:	39 1f       	adc	r19, r25
     91a:	30 93 03 01 	sts	0x0103, r19
     91e:	20 93 02 01 	sts	0x0102, r18
				move();
     922:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <move>
				last_motion_update = kilo_ticks;
     926:	80 91 83 01 	lds	r24, 0x0183
     92a:	90 91 84 01 	lds	r25, 0x0184
     92e:	a0 91 85 01 	lds	r26, 0x0185
     932:	b0 91 86 01 	lds	r27, 0x0186
     936:	80 93 50 01 	sts	0x0150, r24
     93a:	90 93 51 01 	sts	0x0151, r25
     93e:	a0 93 52 01 	sts	0x0152, r26
     942:	b0 93 53 01 	sts	0x0153, r27
				distance_to_motivated_parent = distance_to_motivated;
     946:	80 91 06 01 	lds	r24, 0x0106
     94a:	90 91 07 01 	lds	r25, 0x0107
     94e:	90 93 05 01 	sts	0x0105, r25
     952:	80 93 04 01 	sts	0x0104, r24
				distance_line_parent = distance_line;
     956:	80 91 02 01 	lds	r24, 0x0102
     95a:	90 91 03 01 	lds	r25, 0x0103
     95e:	90 93 01 01 	sts	0x0101, r25
     962:	80 93 00 01 	sts	0x0100, r24
     966:	a6 cf       	rjmp	.-180    	; 0x8b4 <loop+0x166>

00000968 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     968:	08 95       	ret

0000096a <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	08 95       	ret

00000970 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     970:	08 95       	ret

00000972 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     972:	df 92       	push	r13
     974:	ef 92       	push	r14
     976:	ff 92       	push	r15
     978:	0f 93       	push	r16
     97a:	1f 93       	push	r17
     97c:	cf 93       	push	r28
     97e:	df 93       	push	r29
    cli();
     980:	f8 94       	cli

    ports_off();
     982:	14 b8       	out	0x04, r1	; 4
     984:	17 b8       	out	0x07, r1	; 7
     986:	1a b8       	out	0x0a, r1	; 10
     988:	15 b8       	out	0x05, r1	; 5
     98a:	18 b8       	out	0x08, r1	; 8
     98c:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     98e:	52 9a       	sbi	0x0a, 2	; 10
     990:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     992:	14 bc       	out	0x24, r1	; 36
     994:	85 e0       	ldi	r24, 0x05	; 5
     996:	85 bd       	out	0x25, r24	; 37
     998:	8f ef       	ldi	r24, 0xFF	; 255
     99a:	87 bd       	out	0x27, r24	; 39
     99c:	22 e0       	ldi	r18, 0x02	; 2
     99e:	20 93 6e 00 	sts	0x006E, r18
    rx_timer_setup();
     9a2:	10 92 80 00 	sts	0x0080, r1
     9a6:	10 92 81 00 	sts	0x0081, r1
     9aa:	8f e8       	ldi	r24, 0x8F	; 143
     9ac:	9b e0       	ldi	r25, 0x0B	; 11
     9ae:	90 93 89 00 	sts	0x0089, r25
     9b2:	80 93 88 00 	sts	0x0088, r24
     9b6:	20 93 6f 00 	sts	0x006F, r18
    motors_setup();
     9ba:	53 98       	cbi	0x0a, 3	; 10
     9bc:	23 98       	cbi	0x04, 3	; 4
     9be:	81 ea       	ldi	r24, 0xA1	; 161
     9c0:	80 93 b0 00 	sts	0x00B0, r24
     9c4:	20 93 b1 00 	sts	0x00B1, r18
     9c8:	10 92 b4 00 	sts	0x00B4, r1
     9cc:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     9d0:	8b e0       	ldi	r24, 0x0B	; 11
     9d2:	80 bf       	out	0x30, r24	; 48
     9d4:	83 e0       	ldi	r24, 0x03	; 3
     9d6:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     9da:	86 e0       	ldi	r24, 0x06	; 6
     9dc:	80 93 7c 00 	sts	0x007C, r24
     9e0:	83 e8       	ldi	r24, 0x83	; 131
     9e2:	80 93 7a 00 	sts	0x007A, r24
     9e6:	80 91 7a 00 	lds	r24, 0x007A
     9ea:	80 64       	ori	r24, 0x40	; 64
     9ec:	80 93 7a 00 	sts	0x007A, r24
     9f0:	80 91 7a 00 	lds	r24, 0x007A
     9f4:	86 fd       	sbrc	r24, 6
     9f6:	fc cf       	rjmp	.-8      	; 0x9f0 <kilo_init+0x7e>
    adc_trigger_high_gain();
     9f8:	10 92 7c 00 	sts	0x007C, r1
     9fc:	83 ea       	ldi	r24, 0xA3	; 163
     9fe:	80 93 7a 00 	sts	0x007A, r24
     a02:	81 e0       	ldi	r24, 0x01	; 1
     a04:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	0e 94 90 10 	call	0x2120	; 0x2120 <__eerd_byte_m328p>
    if (osccal != 0xFF)
     a10:	8f 3f       	cpi	r24, 0xFF	; 255
     a12:	11 f0       	breq	.+4      	; 0xa18 <kilo_init+0xa6>
        OSCCAL = osccal;
     a14:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     a18:	10 92 87 01 	sts	0x0187, r1
    rx_leadingbit = 1;
     a1c:	c1 e0       	ldi	r28, 0x01	; 1
     a1e:	c0 93 60 01 	sts	0x0160, r28
    rx_leadingbyte = 1;
     a22:	c0 93 a4 01 	sts	0x01A4, r28
    rx_byteindex = 0;
     a26:	10 92 7e 01 	sts	0x017E, r1
    rx_bytevalue = 0;
     a2a:	10 92 b8 01 	sts	0x01B8, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     a2e:	80 e9       	ldi	r24, 0x90	; 144
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	0e 94 90 10 	call	0x2120	; 0x2120 <__eerd_byte_m328p>
     a36:	80 93 7d 01 	sts	0x017D, r24
    if (tx_mask & ~TX_MASK_MAX)
     a3a:	80 91 7d 01 	lds	r24, 0x017D
     a3e:	88 73       	andi	r24, 0x38	; 56
     a40:	11 f0       	breq	.+4      	; 0xa46 <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     a42:	c0 93 7d 01 	sts	0x017D, r28
    tx_clock = 0;
     a46:	10 92 a8 01 	sts	0x01A8, r1
     a4a:	10 92 a7 01 	sts	0x01A7, r1
    tx_increment = 255;
     a4e:	8f ef       	ldi	r24, 0xFF	; 255
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	90 93 a6 01 	sts	0x01A6, r25
     a56:	80 93 a5 01 	sts	0x01A5, r24
    kilo_ticks = 0;
     a5a:	10 92 83 01 	sts	0x0183, r1
     a5e:	10 92 84 01 	sts	0x0184, r1
     a62:	10 92 85 01 	sts	0x0185, r1
     a66:	10 92 86 01 	sts	0x0186, r1
    kilo_state = IDLE;
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	80 93 43 01 	sts	0x0143, r24
    kilo_tx_period = 3906;
     a70:	82 e4       	ldi	r24, 0x42	; 66
     a72:	9f e0       	ldi	r25, 0x0F	; 15
     a74:	90 93 b7 01 	sts	0x01B7, r25
     a78:	80 93 b6 01 	sts	0x01B6, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     a7c:	80 eb       	ldi	r24, 0xB0	; 176
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	0e 94 90 10 	call	0x2120	; 0x2120 <__eerd_byte_m328p>
     a84:	c8 2f       	mov	r28, r24
     a86:	81 eb       	ldi	r24, 0xB1	; 177
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	0e 94 90 10 	call	0x2120	; 0x2120 <__eerd_byte_m328p>
     a8e:	2c 2f       	mov	r18, r28
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	38 2b       	or	r19, r24
     a94:	30 93 ba 01 	sts	0x01BA, r19
     a98:	20 93 b9 01 	sts	0x01B9, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     a9c:	85 e0       	ldi	r24, 0x05	; 5
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	0e 94 90 10 	call	0x2120	; 0x2120 <__eerd_byte_m328p>
     aa4:	80 93 bd 01 	sts	0x01BD, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     aa8:	89 e0       	ldi	r24, 0x09	; 9
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	0e 94 90 10 	call	0x2120	; 0x2120 <__eerd_byte_m328p>
     ab0:	80 93 a9 01 	sts	0x01A9, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     ab4:	8c e0       	ldi	r24, 0x0C	; 12
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	0e 94 90 10 	call	0x2120	; 0x2120 <__eerd_byte_m328p>
     abc:	80 93 bb 01 	sts	0x01BB, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     ac0:	84 e1       	ldi	r24, 0x14	; 20
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	0e 94 90 10 	call	0x2120	; 0x2120 <__eerd_byte_m328p>
     ac8:	80 93 bc 01 	sts	0x01BC, r24
     acc:	58 e8       	ldi	r21, 0x88	; 136
     ace:	e5 2e       	mov	r14, r21
     ad0:	51 e0       	ldi	r21, 0x01	; 1
     ad2:	f5 2e       	mov	r15, r21
     ad4:	01 e6       	ldi	r16, 0x61	; 97
     ad6:	11 e0       	ldi	r17, 0x01	; 1
     ad8:	c0 e2       	ldi	r28, 0x20	; 32
     ada:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     adc:	ce 01       	movw	r24, r28
     ade:	0e 94 90 10 	call	0x2120	; 0x2120 <__eerd_byte_m328p>
     ae2:	d8 2e       	mov	r13, r24
     ae4:	ce 01       	movw	r24, r28
     ae6:	01 96       	adiw	r24, 0x01	; 1
     ae8:	0e 94 90 10 	call	0x2120	; 0x2120 <__eerd_byte_m328p>
     aec:	2d 2d       	mov	r18, r13
     aee:	30 e0       	ldi	r19, 0x00	; 0
     af0:	32 2f       	mov	r19, r18
     af2:	22 27       	eor	r18, r18
     af4:	28 2b       	or	r18, r24
     af6:	f7 01       	movw	r30, r14
     af8:	21 93       	st	Z+, r18
     afa:	31 93       	st	Z+, r19
     afc:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     afe:	ce 01       	movw	r24, r28
     b00:	c0 96       	adiw	r24, 0x30	; 48
     b02:	0e 94 90 10 	call	0x2120	; 0x2120 <__eerd_byte_m328p>
     b06:	d8 2e       	mov	r13, r24
     b08:	ce 01       	movw	r24, r28
     b0a:	c1 96       	adiw	r24, 0x31	; 49
     b0c:	0e 94 90 10 	call	0x2120	; 0x2120 <__eerd_byte_m328p>
     b10:	2d 2d       	mov	r18, r13
     b12:	30 e0       	ldi	r19, 0x00	; 0
     b14:	32 2f       	mov	r19, r18
     b16:	22 27       	eor	r18, r18
     b18:	28 2b       	or	r18, r24
     b1a:	f8 01       	movw	r30, r16
     b1c:	21 93       	st	Z+, r18
     b1e:	31 93       	st	Z+, r19
     b20:	8f 01       	movw	r16, r30
     b22:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     b24:	cc 33       	cpi	r28, 0x3C	; 60
     b26:	d1 05       	cpc	r29, r1
     b28:	c9 f6       	brne	.-78     	; 0xadc <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     b2a:	78 94       	sei
}
     b2c:	df 91       	pop	r29
     b2e:	cf 91       	pop	r28
     b30:	1f 91       	pop	r17
     b32:	0f 91       	pop	r16
     b34:	ff 90       	pop	r15
     b36:	ef 90       	pop	r14
     b38:	df 90       	pop	r13
     b3a:	08 95       	ret

00000b3c <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     b3c:	1f 92       	push	r1
     b3e:	0f 92       	push	r0
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	0f 92       	push	r0
     b44:	11 24       	eor	r1, r1
     b46:	8f 93       	push	r24
    wdt_disable();
     b48:	88 e1       	ldi	r24, 0x18	; 24
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	f8 94       	cli
     b4e:	80 93 60 00 	sts	0x0060, r24
     b52:	10 92 60 00 	sts	0x0060, r1
     b56:	0f be       	out	0x3f, r0	; 63
}
     b58:	8f 91       	pop	r24
     b5a:	0f 90       	pop	r0
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	0f 90       	pop	r0
     b60:	1f 90       	pop	r1
     b62:	18 95       	reti

00000b64 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     b64:	7c 01       	movw	r14, r24
     b66:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     b68:	d1 2c       	mov	r13, r1
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     b6a:	88 24       	eor	r8, r8
     b6c:	8a 94       	dec	r8
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     b6e:	64 e0       	ldi	r22, 0x04	; 4
     b70:	b6 2e       	mov	r11, r22

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     b72:	76 e0       	ldi	r23, 0x06	; 6
     b74:	97 2e       	mov	r9, r23
     b76:	e3 e8       	ldi	r30, 0x83	; 131
     b78:	ae 2e       	mov	r10, r30
            case SLEEPING:
                cli();
                acomp_off();
                adc_off();
                ports_off();
                wdt_enable(WDTO_8S);
     b7a:	08 e1       	ldi	r16, 0x18	; 24
     b7c:	10 e0       	ldi	r17, 0x00	; 0
     b7e:	f9 e2       	ldi	r31, 0x29	; 41
     b80:	cf 2e       	mov	r12, r31

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     b82:	e0 91 43 01 	lds	r30, 0x0143
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	e7 30       	cpi	r30, 0x07	; 7
     b8a:	f1 05       	cpc	r31, r1
     b8c:	d0 f7       	brcc	.-12     	; 0xb82 <kilo_start+0x1e>
     b8e:	ec 5c       	subi	r30, 0xCC	; 204
     b90:	ff 4f       	sbci	r31, 0xFF	; 255
     b92:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     b96:	dd 20       	and	r13, r13
     b98:	09 f4       	brne	.+2      	; 0xb9c <kilo_start+0x38>
     b9a:	fd c0       	rjmp	.+506    	; 0xd96 <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     b9c:	b0 92 43 01 	sts	0x0143, r11
     ba0:	dd 24       	eor	r13, r13
     ba2:	d3 94       	inc	r13
            case RUNNING:
                loop();
     ba4:	fe 01       	movw	r30, r28
     ba6:	09 95       	icall
                break;
     ba8:	ec cf       	rjmp	.-40     	; 0xb82 <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     baa:	80 91 87 01 	lds	r24, 0x0187
     bae:	81 11       	cpse	r24, r1
     bb0:	eb c0       	rjmp	.+470    	; 0xd88 <kilo_start+0x224>
        cli();                                    // disable interrupts
     bb2:	f8 94       	cli
        adc_setup_conversion(6);
     bb4:	90 92 7c 00 	sts	0x007C, r9
     bb8:	a0 92 7a 00 	sts	0x007A, r10
        adc_start_conversion();
     bbc:	80 91 7a 00 	lds	r24, 0x007A
     bc0:	80 64       	ori	r24, 0x40	; 64
     bc2:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     bc6:	80 91 7a 00 	lds	r24, 0x007A
     bca:	86 fd       	sbrc	r24, 6
     bcc:	fc cf       	rjmp	.-8      	; 0xbc6 <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     bce:	20 91 78 00 	lds	r18, 0x0078
     bd2:	30 91 79 00 	lds	r19, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     bd6:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     bd8:	2b 3a       	cpi	r18, 0xAB	; 171
     bda:	92 e0       	ldi	r25, 0x02	; 2
     bdc:	39 07       	cpc	r19, r25
     bde:	0c f0       	brlt	.+2      	; 0xbe2 <kilo_start+0x7e>
     be0:	ed c0       	rjmp	.+474    	; 0xdbc <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     be2:	29 38       	cpi	r18, 0x89	; 137
     be4:	e2 e0       	ldi	r30, 0x02	; 2
     be6:	3e 07       	cpc	r19, r30
     be8:	0c f0       	brlt	.+2      	; 0xbec <kilo_start+0x88>
     bea:	ef c0       	rjmp	.+478    	; 0xdca <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     bec:	27 36       	cpi	r18, 0x67	; 103
     bee:	32 40       	sbci	r19, 0x02	; 2
     bf0:	0c f4       	brge	.+2      	; 0xbf4 <kilo_start+0x90>
     bf2:	ca c0       	rjmp	.+404    	; 0xd88 <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     bf4:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     bf6:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     bf8:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     bfa:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     bfc:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     bfe:	3c 98       	cbi	0x07, 4	; 7
     c00:	c0 cf       	rjmp	.-128    	; 0xb82 <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     c02:	f8 94       	cli
                acomp_off();
     c04:	80 b7       	in	r24, 0x30	; 48
     c06:	87 7f       	andi	r24, 0xF7	; 247
     c08:	80 bf       	out	0x30, r24	; 48
                adc_off();
     c0a:	80 91 7a 00 	lds	r24, 0x007A
     c0e:	8f 77       	andi	r24, 0x7F	; 127
     c10:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     c14:	14 b8       	out	0x04, r1	; 4
     c16:	17 b8       	out	0x07, r1	; 7
     c18:	1a b8       	out	0x0a, r1	; 10
     c1a:	15 b8       	out	0x05, r1	; 5
     c1c:	18 b8       	out	0x08, r1	; 8
     c1e:	1b b8       	out	0x0b, r1	; 11
                wdt_enable(WDTO_8S);
     c20:	0f b6       	in	r0, 0x3f	; 63
     c22:	f8 94       	cli
     c24:	a8 95       	wdr
     c26:	00 93 60 00 	sts	0x0060, r16
     c2a:	0f be       	out	0x3f, r0	; 63
     c2c:	c0 92 60 00 	sts	0x0060, r12
                WDTCSR |= (1<<WDIE);
     c30:	80 91 60 00 	lds	r24, 0x0060
     c34:	80 64       	ori	r24, 0x40	; 64
     c36:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     c3a:	83 b7       	in	r24, 0x33	; 51
     c3c:	81 7f       	andi	r24, 0xF1	; 241
     c3e:	84 60       	ori	r24, 0x04	; 4
     c40:	83 bf       	out	0x33, r24	; 51
                cli();
     c42:	f8 94       	cli
                sleep_enable();
     c44:	83 b7       	in	r24, 0x33	; 51
     c46:	81 60       	ori	r24, 0x01	; 1
     c48:	83 bf       	out	0x33, r24	; 51
                sei();
     c4a:	78 94       	sei
                sleep_cpu();
     c4c:	88 95       	sleep
                sleep_disable();
     c4e:	83 b7       	in	r24, 0x33	; 51
     c50:	8e 7f       	andi	r24, 0xFE	; 254
     c52:	83 bf       	out	0x33, r24	; 51
                sei();
     c54:	78 94       	sei
                rx_busy = 0;
     c56:	10 92 87 01 	sts	0x0187, r1
                ports_on();
     c5a:	52 9a       	sbi	0x0a, 2	; 10
     c5c:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     c5e:	80 91 7a 00 	lds	r24, 0x007A
     c62:	80 68       	ori	r24, 0x80	; 128
     c64:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c68:	87 e5       	ldi	r24, 0x57	; 87
     c6a:	92 e0       	ldi	r25, 0x02	; 2
     c6c:	01 97       	sbiw	r24, 0x01	; 1
     c6e:	f1 f7       	brne	.-4      	; 0xc6c <kilo_start+0x108>
     c70:	00 c0       	rjmp	.+0      	; 0xc72 <kilo_start+0x10e>
     c72:	00 00       	nop
                _delay_us(300);
                acomp_on();
     c74:	80 b7       	in	r24, 0x30	; 48
     c76:	88 61       	ori	r24, 0x18	; 24
     c78:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     c7a:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     c7c:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     c7e:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     c80:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     c82:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     c84:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c86:	ef e1       	ldi	r30, 0x1F	; 31
     c88:	fe e4       	ldi	r31, 0x4E	; 78
     c8a:	31 97       	sbiw	r30, 0x01	; 1
     c8c:	f1 f7       	brne	.-4      	; 0xc8a <kilo_start+0x126>
     c8e:	00 c0       	rjmp	.+0      	; 0xc90 <kilo_start+0x12c>
     c90:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     c92:	80 91 87 01 	lds	r24, 0x0187
     c96:	81 11       	cpse	r24, r1
     c98:	81 c0       	rjmp	.+258    	; 0xd9c <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     c9a:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     c9c:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     c9e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     ca0:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     ca2:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     ca4:	3c 98       	cbi	0x07, 4	; 7
     ca6:	6d cf       	rjmp	.-294    	; 0xb82 <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     ca8:	80 91 41 01 	lds	r24, 0x0141
     cac:	81 11       	cpse	r24, r1
     cae:	41 c0       	rjmp	.+130    	; 0xd32 <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     cb0:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     cb4:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     cb8:	10 92 42 01 	sts	0x0142, r1
     cbc:	62 cf       	rjmp	.-316    	; 0xb82 <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     cbe:	48 99       	sbic	0x09, 0	; 9
     cc0:	ec cf       	rjmp	.-40     	; 0xc9a <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     cc2:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     cc4:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     cc6:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     cc8:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     cca:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     ccc:	3c 98       	cbi	0x07, 4	; 7
     cce:	8f ec       	ldi	r24, 0xCF	; 207
     cd0:	97 e0       	ldi	r25, 0x07	; 7
     cd2:	01 97       	sbiw	r24, 0x01	; 1
     cd4:	f1 f7       	brne	.-4      	; 0xcd2 <kilo_start+0x16e>
     cd6:	00 c0       	rjmp	.+0      	; 0xcd8 <kilo_start+0x174>
     cd8:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     cda:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     cdc:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     cde:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     ce0:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     ce2:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     ce4:	3c 98       	cbi	0x07, 4	; 7
     ce6:	9f ef       	ldi	r25, 0xFF	; 255
     ce8:	e1 ee       	ldi	r30, 0xE1	; 225
     cea:	f4 e0       	ldi	r31, 0x04	; 4
     cec:	91 50       	subi	r25, 0x01	; 1
     cee:	e0 40       	sbci	r30, 0x00	; 0
     cf0:	f0 40       	sbci	r31, 0x00	; 0
     cf2:	e1 f7       	brne	.-8      	; 0xcec <kilo_start+0x188>
     cf4:	00 c0       	rjmp	.+0      	; 0xcf6 <kilo_start+0x192>
     cf6:	00 00       	nop
     cf8:	44 cf       	rjmp	.-376    	; 0xb82 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     cfa:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     cfc:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     cfe:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     d00:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     d02:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     d04:	3c 98       	cbi	0x07, 4	; 7
     d06:	ef ec       	ldi	r30, 0xCF	; 207
     d08:	f7 e0       	ldi	r31, 0x07	; 7
     d0a:	31 97       	sbiw	r30, 0x01	; 1
     d0c:	f1 f7       	brne	.-4      	; 0xd0a <kilo_start+0x1a6>
     d0e:	00 c0       	rjmp	.+0      	; 0xd10 <kilo_start+0x1ac>
     d10:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     d12:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     d14:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     d16:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     d18:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     d1a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     d1c:	3c 98       	cbi	0x07, 4	; 7
     d1e:	ff ef       	ldi	r31, 0xFF	; 255
     d20:	21 ee       	ldi	r18, 0xE1	; 225
     d22:	84 e0       	ldi	r24, 0x04	; 4
     d24:	f1 50       	subi	r31, 0x01	; 1
     d26:	20 40       	sbci	r18, 0x00	; 0
     d28:	80 40       	sbci	r24, 0x00	; 0
     d2a:	e1 f7       	brne	.-8      	; 0xd24 <kilo_start+0x1c0>
     d2c:	00 c0       	rjmp	.+0      	; 0xd2e <kilo_start+0x1ca>
     d2e:	00 00       	nop
     d30:	28 cf       	rjmp	.-432    	; 0xb82 <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     d32:	90 91 41 01 	lds	r25, 0x0141
     d36:	80 91 42 01 	lds	r24, 0x0142
     d3a:	98 17       	cp	r25, r24
     d3c:	09 f4       	brne	.+2      	; 0xd40 <kilo_start+0x1dc>
     d3e:	21 cf       	rjmp	.-446    	; 0xb82 <kilo_start+0x1e>
                        prev_motion = cur_motion;
     d40:	80 91 41 01 	lds	r24, 0x0141
     d44:	80 93 42 01 	sts	0x0142, r24
                        if (cur_motion == MOVE_LEFT) {
     d48:	80 91 41 01 	lds	r24, 0x0141
     d4c:	81 30       	cpi	r24, 0x01	; 1
     d4e:	09 f4       	brne	.+2      	; 0xd52 <kilo_start+0x1ee>
     d50:	50 c0       	rjmp	.+160    	; 0xdf2 <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     d52:	80 91 41 01 	lds	r24, 0x0141
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     d56:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     d5a:	80 92 b4 00 	sts	0x00B4, r8
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     d5e:	82 30       	cpi	r24, 0x02	; 2
     d60:	d9 f1       	breq	.+118    	; 0xdd8 <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     d62:	80 92 b3 00 	sts	0x00B3, r8
    OCR2B = cw;
     d66:	80 92 b4 00 	sts	0x00B4, r8
     d6a:	8f e2       	ldi	r24, 0x2F	; 47
     d6c:	95 e7       	ldi	r25, 0x75	; 117
     d6e:	01 97       	sbiw	r24, 0x01	; 1
     d70:	f1 f7       	brne	.-4      	; 0xd6e <kilo_start+0x20a>
     d72:	00 c0       	rjmp	.+0      	; 0xd74 <kilo_start+0x210>
     d74:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     d76:	80 91 bc 01 	lds	r24, 0x01BC
     d7a:	90 91 bb 01 	lds	r25, 0x01BB
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     d7e:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     d82:	80 93 b4 00 	sts	0x00B4, r24
     d86:	fd ce       	rjmp	.-518    	; 0xb82 <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     d88:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     d8a:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     d8c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     d8e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     d90:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     d92:	3c 98       	cbi	0x07, 4	; 7
     d94:	f6 ce       	rjmp	.-532    	; 0xb82 <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     d96:	f7 01       	movw	r30, r14
     d98:	09 95       	icall
     d9a:	00 cf       	rjmp	.-512    	; 0xb9c <kilo_start+0x38>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     d9c:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     d9e:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     da0:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     da2:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     da4:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     da6:	3c 98       	cbi	0x07, 4	; 7
     da8:	ff ef       	ldi	r31, 0xFF	; 255
     daa:	20 e7       	ldi	r18, 0x70	; 112
     dac:	82 e0       	ldi	r24, 0x02	; 2
     dae:	f1 50       	subi	r31, 0x01	; 1
     db0:	20 40       	sbci	r18, 0x00	; 0
     db2:	80 40       	sbci	r24, 0x00	; 0
     db4:	e1 f7       	brne	.-8      	; 0xdae <kilo_start+0x24a>
     db6:	00 c0       	rjmp	.+0      	; 0xdb8 <kilo_start+0x254>
     db8:	00 00       	nop
     dba:	6f cf       	rjmp	.-290    	; 0xc9a <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     dbc:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     dbe:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     dc0:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     dc2:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     dc4:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     dc6:	3c 98       	cbi	0x07, 4	; 7
     dc8:	dc ce       	rjmp	.-584    	; 0xb82 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     dca:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     dcc:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     dce:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     dd0:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     dd2:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     dd4:	3c 9a       	sbi	0x07, 4	; 7
     dd6:	d5 ce       	rjmp	.-598    	; 0xb82 <kilo_start+0x1e>
     dd8:	ef e2       	ldi	r30, 0x2F	; 47
     dda:	f5 e7       	ldi	r31, 0x75	; 117
     ddc:	31 97       	sbiw	r30, 0x01	; 1
     dde:	f1 f7       	brne	.-4      	; 0xddc <kilo_start+0x278>
     de0:	00 c0       	rjmp	.+0      	; 0xde2 <kilo_start+0x27e>
     de2:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     de4:	80 91 a9 01 	lds	r24, 0x01A9
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     de8:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     dec:	80 93 b4 00 	sts	0x00B4, r24
     df0:	c8 ce       	rjmp	.-624    	; 0xb82 <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     df2:	80 92 b3 00 	sts	0x00B3, r8
    OCR2B = cw;
     df6:	10 92 b4 00 	sts	0x00B4, r1
     dfa:	8f e2       	ldi	r24, 0x2F	; 47
     dfc:	95 e7       	ldi	r25, 0x75	; 117
     dfe:	01 97       	sbiw	r24, 0x01	; 1
     e00:	f1 f7       	brne	.-4      	; 0xdfe <kilo_start+0x29a>
     e02:	00 c0       	rjmp	.+0      	; 0xe04 <kilo_start+0x2a0>
     e04:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     e06:	80 91 bd 01 	lds	r24, 0x01BD
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     e0a:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     e0e:	10 92 b4 00 	sts	0x00B4, r1
     e12:	b7 ce       	rjmp	.-658    	; 0xb82 <kilo_start+0x1e>

00000e14 <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     e14:	07 c0       	rjmp	.+14     	; 0xe24 <delay+0x10>
     e16:	ef ec       	ldi	r30, 0xCF	; 207
     e18:	f7 e0       	ldi	r31, 0x07	; 7
     e1a:	31 97       	sbiw	r30, 0x01	; 1
     e1c:	f1 f7       	brne	.-4      	; 0xe1a <delay+0x6>
     e1e:	00 c0       	rjmp	.+0      	; 0xe20 <delay+0xc>
     e20:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     e22:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     e24:	00 97       	sbiw	r24, 0x00	; 0
     e26:	b9 f7       	brne	.-18     	; 0xe16 <delay+0x2>
     e28:	08 95       	ret

00000e2a <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     e2a:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     e2e:	60 93 b4 00 	sts	0x00B4, r22
     e32:	08 95       	ret

00000e34 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     e34:	8f ef       	ldi	r24, 0xFF	; 255
     e36:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     e3a:	80 93 b4 00 	sts	0x00B4, r24
     e3e:	8f e0       	ldi	r24, 0x0F	; 15
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	ef ec       	ldi	r30, 0xCF	; 207
     e44:	f7 e0       	ldi	r31, 0x07	; 7
     e46:	31 97       	sbiw	r30, 0x01	; 1
     e48:	f1 f7       	brne	.-4      	; 0xe46 <spinup_motors+0x12>
     e4a:	00 c0       	rjmp	.+0      	; 0xe4c <spinup_motors+0x18>
     e4c:	00 00       	nop
     e4e:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     e50:	00 97       	sbiw	r24, 0x00	; 0
     e52:	b9 f7       	brne	.-18     	; 0xe42 <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     e54:	08 95       	ret

00000e56 <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     e56:	80 91 87 01 	lds	r24, 0x0187
     e5a:	81 11       	cpse	r24, r1
     e5c:	1e c0       	rjmp	.+60     	; 0xe9a <get_ambientlight+0x44>
        cli();
     e5e:	f8 94       	cli
        adc_setup_conversion(7);
     e60:	87 e0       	ldi	r24, 0x07	; 7
     e62:	80 93 7c 00 	sts	0x007C, r24
     e66:	83 e8       	ldi	r24, 0x83	; 131
     e68:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     e6c:	80 91 7a 00 	lds	r24, 0x007A
     e70:	80 64       	ori	r24, 0x40	; 64
     e72:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     e76:	80 91 7a 00 	lds	r24, 0x007A
     e7a:	86 fd       	sbrc	r24, 6
     e7c:	fc cf       	rjmp	.-8      	; 0xe76 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     e7e:	80 91 78 00 	lds	r24, 0x0078
     e82:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     e86:	10 92 7c 00 	sts	0x007C, r1
     e8a:	23 ea       	ldi	r18, 0xA3	; 163
     e8c:	20 93 7a 00 	sts	0x007A, r18
     e90:	21 e0       	ldi	r18, 0x01	; 1
     e92:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     e96:	78 94       	sei
     e98:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     e9a:	8f ef       	ldi	r24, 0xFF	; 255
     e9c:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     e9e:	08 95       	ret

00000ea0 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     ea0:	80 91 87 01 	lds	r24, 0x0187
     ea4:	81 11       	cpse	r24, r1
     ea6:	1e c0       	rjmp	.+60     	; 0xee4 <get_temperature+0x44>
        cli();
     ea8:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     eaa:	88 ec       	ldi	r24, 0xC8	; 200
     eac:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     eb0:	87 e8       	ldi	r24, 0x87	; 135
     eb2:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     eb6:	80 91 7a 00 	lds	r24, 0x007A
     eba:	80 64       	ori	r24, 0x40	; 64
     ebc:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     ec0:	80 91 7a 00 	lds	r24, 0x007A
     ec4:	86 fd       	sbrc	r24, 6
     ec6:	fc cf       	rjmp	.-8      	; 0xec0 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     ec8:	80 91 78 00 	lds	r24, 0x0078
     ecc:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     ed0:	10 92 7c 00 	sts	0x007C, r1
     ed4:	23 ea       	ldi	r18, 0xA3	; 163
     ed6:	20 93 7a 00 	sts	0x007A, r18
     eda:	21 e0       	ldi	r18, 0x01	; 1
     edc:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     ee0:	78 94       	sei
     ee2:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     ee4:	8f ef       	ldi	r24, 0xFF	; 255
     ee6:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     ee8:	08 95       	ret

00000eea <rand_hard>:

uint8_t rand_hard() {
     eea:	1f 93       	push	r17
     eec:	cf 93       	push	r28
     eee:	df 93       	push	r29
     ef0:	60 e0       	ldi	r22, 0x00	; 0
     ef2:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t num = 0;
     ef4:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     ef6:	13 ea       	ldi	r17, 0xA3	; 163
     ef8:	d1 e0       	ldi	r29, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     efa:	c6 e0       	ldi	r28, 0x06	; 6
     efc:	b3 e8       	ldi	r27, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     efe:	e1 e0       	ldi	r30, 0x01	; 1
     f00:	f0 e0       	ldi	r31, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     f02:	20 e8       	ldi	r18, 0x80	; 128
     f04:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     f06:	f8 94       	cli
            adc_setup_conversion(6);
     f08:	c0 93 7c 00 	sts	0x007C, r28
     f0c:	b0 93 7a 00 	sts	0x007A, r27
            adc_start_conversion();
     f10:	90 91 7a 00 	lds	r25, 0x007A
     f14:	90 64       	ori	r25, 0x40	; 64
     f16:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     f1a:	90 91 7a 00 	lds	r25, 0x007A
     f1e:	96 fd       	sbrc	r25, 6
     f20:	fc cf       	rjmp	.-8      	; 0xf1a <rand_hard+0x30>
            a = ADCW&0x1;
     f22:	40 91 78 00 	lds	r20, 0x0078
     f26:	50 91 79 00 	lds	r21, 0x0079
     f2a:	a4 2f       	mov	r26, r20
     f2c:	a1 70       	andi	r26, 0x01	; 1
            adc_start_conversion();
     f2e:	90 91 7a 00 	lds	r25, 0x007A
     f32:	90 64       	ori	r25, 0x40	; 64
     f34:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     f38:	90 91 7a 00 	lds	r25, 0x007A
     f3c:	96 fd       	sbrc	r25, 6
     f3e:	fc cf       	rjmp	.-8      	; 0xf38 <rand_hard+0x4e>
            b = ADCW&0x1;
     f40:	40 91 78 00 	lds	r20, 0x0078
     f44:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     f48:	10 92 7c 00 	sts	0x007C, r1
     f4c:	10 93 7a 00 	sts	0x007A, r17
     f50:	d0 93 7b 00 	sts	0x007B, r29
            sei();
     f54:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     f56:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     f58:	a4 13       	cpse	r26, r20
     f5a:	05 c0       	rjmp	.+10     	; 0xf66 <rand_hard+0x7c>
     f5c:	21 50       	subi	r18, 0x01	; 1
     f5e:	31 09       	sbc	r19, r1
     f60:	21 15       	cp	r18, r1
     f62:	31 05       	cpc	r19, r1
     f64:	81 f6       	brne	.-96     	; 0xf06 <rand_hard+0x1c>
        if (a)
     f66:	aa 23       	and	r26, r26
     f68:	39 f0       	breq	.+14     	; 0xf78 <rand_hard+0x8e>
            num |= (1<<i);
     f6a:	9f 01       	movw	r18, r30
     f6c:	06 2e       	mov	r0, r22
     f6e:	01 c0       	rjmp	.+2      	; 0xf72 <rand_hard+0x88>
     f70:	22 0f       	add	r18, r18
     f72:	0a 94       	dec	r0
     f74:	ea f7       	brpl	.-6      	; 0xf70 <rand_hard+0x86>
     f76:	82 2b       	or	r24, r18
     f78:	6f 5f       	subi	r22, 0xFF	; 255
     f7a:	7f 4f       	sbci	r23, 0xFF	; 255
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     f7c:	68 30       	cpi	r22, 0x08	; 8
     f7e:	71 05       	cpc	r23, r1
     f80:	09 f0       	breq	.+2      	; 0xf84 <rand_hard+0x9a>
     f82:	bf cf       	rjmp	.-130    	; 0xf02 <rand_hard+0x18>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     f84:	df 91       	pop	r29
     f86:	cf 91       	pop	r28
     f88:	1f 91       	pop	r17
     f8a:	08 95       	ret

00000f8c <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     f8c:	80 91 1e 01 	lds	r24, 0x011E
     f90:	98 2f       	mov	r25, r24
     f92:	99 0f       	add	r25, r25
     f94:	99 0f       	add	r25, r25
     f96:	99 0f       	add	r25, r25
     f98:	98 27       	eor	r25, r24
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     f9a:	80 91 40 01 	lds	r24, 0x0140
     f9e:	21 e0       	ldi	r18, 0x01	; 1
     fa0:	28 0f       	add	r18, r24
     fa2:	20 93 40 01 	sts	0x0140, r18
     fa6:	86 95       	lsr	r24
     fa8:	86 95       	lsr	r24

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     faa:	89 27       	eor	r24, r25
     fac:	92 95       	swap	r25
     fae:	96 95       	lsr	r25
     fb0:	97 70       	andi	r25, 0x07	; 7
    seed ^= accumulator++>>2;
     fb2:	89 27       	eor	r24, r25
     fb4:	80 93 1e 01 	sts	0x011E, r24
    return seed;
}
     fb8:	08 95       	ret

00000fba <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     fba:	80 93 1e 01 	sts	0x011E, r24
     fbe:	08 95       	ret

00000fc0 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     fc0:	80 91 87 01 	lds	r24, 0x0187
     fc4:	81 11       	cpse	r24, r1
     fc6:	16 c0       	rjmp	.+44     	; 0xff4 <get_voltage+0x34>
        cli();                                    // disable interrupts
     fc8:	f8 94       	cli
        adc_setup_conversion(6);
     fca:	86 e0       	ldi	r24, 0x06	; 6
     fcc:	80 93 7c 00 	sts	0x007C, r24
     fd0:	83 e8       	ldi	r24, 0x83	; 131
     fd2:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     fd6:	80 91 7a 00 	lds	r24, 0x007A
     fda:	80 64       	ori	r24, 0x40	; 64
     fdc:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     fe0:	80 91 7a 00 	lds	r24, 0x007A
     fe4:	86 fd       	sbrc	r24, 6
     fe6:	fc cf       	rjmp	.-8      	; 0xfe0 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     fe8:	80 91 78 00 	lds	r24, 0x0078
     fec:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     ff0:	78 94       	sei
     ff2:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     ff4:	8f ef       	ldi	r24, 0xFF	; 255
     ff6:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     ff8:	08 95       	ret

00000ffa <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     ffa:	2f 92       	push	r2
     ffc:	3f 92       	push	r3
     ffe:	4f 92       	push	r4
    1000:	5f 92       	push	r5
    1002:	6f 92       	push	r6
    1004:	7f 92       	push	r7
    1006:	8f 92       	push	r8
    1008:	9f 92       	push	r9
    100a:	af 92       	push	r10
    100c:	bf 92       	push	r11
    100e:	cf 92       	push	r12
    1010:	df 92       	push	r13
    1012:	ef 92       	push	r14
    1014:	ff 92       	push	r15
    1016:	0f 93       	push	r16
    1018:	1f 93       	push	r17
    101a:	cf 93       	push	r28
    101c:	df 93       	push	r29
    101e:	00 d0       	rcall	.+0      	; 0x1020 <estimate_distance+0x26>
    1020:	00 d0       	rcall	.+0      	; 0x1022 <estimate_distance+0x28>
    1022:	00 d0       	rcall	.+0      	; 0x1024 <estimate_distance+0x2a>
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
    1028:	8c 01       	movw	r16, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
    102a:	dc 01       	movw	r26, r24
    102c:	12 96       	adiw	r26, 0x02	; 2
    102e:	0d 90       	ld	r0, X+
    1030:	bc 91       	ld	r27, X
    1032:	a0 2d       	mov	r26, r0
    1034:	be 83       	std	Y+6, r27	; 0x06
    1036:	ad 83       	std	Y+5, r26	; 0x05
    1038:	a4 38       	cpi	r26, 0x84	; 132
    103a:	e3 e0       	ldi	r30, 0x03	; 3
    103c:	be 07       	cpc	r27, r30
    103e:	0c f0       	brlt	.+2      	; 0x1042 <estimate_distance+0x48>
    1040:	ca c0       	rjmp	.+404    	; 0x11d6 <estimate_distance+0x1dc>
        if (dist->high_gain > kilo_irhigh[0]) {
    1042:	80 91 61 01 	lds	r24, 0x0161
    1046:	90 91 62 01 	lds	r25, 0x0162
    104a:	8a 17       	cp	r24, r26
    104c:	9b 07       	cpc	r25, r27
    104e:	08 f4       	brcc	.+2      	; 0x1052 <estimate_distance+0x58>
    1050:	a9 c1       	rjmp	.+850    	; 0x13a4 <estimate_distance+0x3aa>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
    1052:	60 90 63 01 	lds	r6, 0x0163
    1056:	70 90 64 01 	lds	r7, 0x0164
    105a:	6a 16       	cp	r6, r26
    105c:	7b 06       	cpc	r7, r27
    105e:	08 f4       	brcc	.+2      	; 0x1062 <estimate_distance+0x68>
    1060:	27 c2       	rjmp	.+1102   	; 0x14b0 <estimate_distance+0x4b6>
    1062:	60 90 65 01 	lds	r6, 0x0165
    1066:	70 90 66 01 	lds	r7, 0x0166
    106a:	6a 16       	cp	r6, r26
    106c:	7b 06       	cpc	r7, r27
    106e:	08 f4       	brcc	.+2      	; 0x1072 <estimate_distance+0x78>
    1070:	28 c2       	rjmp	.+1104   	; 0x14c2 <estimate_distance+0x4c8>
    1072:	60 90 67 01 	lds	r6, 0x0167
    1076:	70 90 68 01 	lds	r7, 0x0168
    107a:	6a 16       	cp	r6, r26
    107c:	7b 06       	cpc	r7, r27
    107e:	08 f4       	brcc	.+2      	; 0x1082 <estimate_distance+0x88>
    1080:	29 c2       	rjmp	.+1106   	; 0x14d4 <estimate_distance+0x4da>
    1082:	60 90 69 01 	lds	r6, 0x0169
    1086:	70 90 6a 01 	lds	r7, 0x016A
    108a:	6a 16       	cp	r6, r26
    108c:	7b 06       	cpc	r7, r27
    108e:	08 f4       	brcc	.+2      	; 0x1092 <estimate_distance+0x98>
    1090:	2a c2       	rjmp	.+1108   	; 0x14e6 <estimate_distance+0x4ec>
    1092:	60 90 6b 01 	lds	r6, 0x016B
    1096:	70 90 6c 01 	lds	r7, 0x016C
    109a:	6a 16       	cp	r6, r26
    109c:	7b 06       	cpc	r7, r27
    109e:	08 f4       	brcc	.+2      	; 0x10a2 <estimate_distance+0xa8>
    10a0:	8b c1       	rjmp	.+790    	; 0x13b8 <estimate_distance+0x3be>
    10a2:	60 90 6d 01 	lds	r6, 0x016D
    10a6:	70 90 6e 01 	lds	r7, 0x016E
    10aa:	6a 16       	cp	r6, r26
    10ac:	7b 06       	cpc	r7, r27
    10ae:	08 f4       	brcc	.+2      	; 0x10b2 <estimate_distance+0xb8>
    10b0:	23 c2       	rjmp	.+1094   	; 0x14f8 <estimate_distance+0x4fe>
    10b2:	60 90 6f 01 	lds	r6, 0x016F
    10b6:	70 90 70 01 	lds	r7, 0x0170
    10ba:	6a 16       	cp	r6, r26
    10bc:	7b 06       	cpc	r7, r27
    10be:	08 f4       	brcc	.+2      	; 0x10c2 <estimate_distance+0xc8>
    10c0:	24 c2       	rjmp	.+1096   	; 0x150a <estimate_distance+0x510>
    10c2:	60 90 71 01 	lds	r6, 0x0171
    10c6:	70 90 72 01 	lds	r7, 0x0172
    10ca:	6a 16       	cp	r6, r26
    10cc:	7b 06       	cpc	r7, r27
    10ce:	08 f4       	brcc	.+2      	; 0x10d2 <estimate_distance+0xd8>
    10d0:	25 c2       	rjmp	.+1098   	; 0x151c <estimate_distance+0x522>
    10d2:	60 90 73 01 	lds	r6, 0x0173
    10d6:	70 90 74 01 	lds	r7, 0x0174
    10da:	6a 16       	cp	r6, r26
    10dc:	7b 06       	cpc	r7, r27
    10de:	08 f4       	brcc	.+2      	; 0x10e2 <estimate_distance+0xe8>
    10e0:	26 c2       	rjmp	.+1100   	; 0x152e <estimate_distance+0x534>
    10e2:	60 90 75 01 	lds	r6, 0x0175
    10e6:	70 90 76 01 	lds	r7, 0x0176
    10ea:	6a 16       	cp	r6, r26
    10ec:	7b 06       	cpc	r7, r27
    10ee:	08 f4       	brcc	.+2      	; 0x10f2 <estimate_distance+0xf8>
    10f0:	27 c2       	rjmp	.+1102   	; 0x1540 <estimate_distance+0x546>
    10f2:	60 90 77 01 	lds	r6, 0x0177
    10f6:	70 90 78 01 	lds	r7, 0x0178
    10fa:	6a 16       	cp	r6, r26
    10fc:	7b 06       	cpc	r7, r27
    10fe:	08 f4       	brcc	.+2      	; 0x1102 <estimate_distance+0x108>
    1100:	2d c2       	rjmp	.+1114   	; 0x155c <estimate_distance+0x562>
    1102:	60 90 79 01 	lds	r6, 0x0179
    1106:	70 90 7a 01 	lds	r7, 0x017A
    110a:	6a 16       	cp	r6, r26
    110c:	7b 06       	cpc	r7, r27
    110e:	08 f4       	brcc	.+2      	; 0x1112 <estimate_distance+0x118>
    1110:	2e c2       	rjmp	.+1116   	; 0x156e <estimate_distance+0x574>
    1112:	60 90 7b 01 	lds	r6, 0x017B
    1116:	70 90 7c 01 	lds	r7, 0x017C
    111a:	6a 16       	cp	r6, r26
    111c:	7b 06       	cpc	r7, r27
    111e:	08 f4       	brcc	.+2      	; 0x1122 <estimate_distance+0x128>
    1120:	2f c2       	rjmp	.+1118   	; 0x1580 <estimate_distance+0x586>
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	a0 ed       	ldi	r26, 0xD0	; 208
    1128:	b0 e4       	ldi	r27, 0x40	; 64
    112a:	89 83       	std	Y+1, r24	; 0x01
    112c:	9a 83       	std	Y+2, r25	; 0x02
    112e:	ab 83       	std	Y+3, r26	; 0x03
    1130:	bc 83       	std	Y+4, r27	; 0x04
    1132:	8c e0       	ldi	r24, 0x0C	; 12
    1134:	e8 2e       	mov	r14, r24
    1136:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
    1138:	f7 01       	movw	r30, r14
    113a:	ee 0f       	add	r30, r30
    113c:	ff 1f       	adc	r31, r31
    113e:	ef 59       	subi	r30, 0x9F	; 159
    1140:	fe 4f       	sbci	r31, 0xFE	; 254
    1142:	80 81       	ld	r24, Z
    1144:	91 81       	ldd	r25, Z+1	; 0x01
    1146:	b3 01       	movw	r22, r6
    1148:	68 1b       	sub	r22, r24
    114a:	79 0b       	sbc	r23, r25
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	0e 94 77 0f 	call	0x1eee	; 0x1eee <__floatunsisf>
    1154:	9b 01       	movw	r18, r22
    1156:	ac 01       	movw	r20, r24
    1158:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__addsf3>
    115c:	6b 01       	movw	r12, r22
    115e:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
    1160:	ad 81       	ldd	r26, Y+5	; 0x05
    1162:	be 81       	ldd	r27, Y+6	; 0x06
    1164:	bd 01       	movw	r22, r26
    1166:	88 27       	eor	r24, r24
    1168:	77 fd       	sbrc	r23, 7
    116a:	80 95       	com	r24
    116c:	98 2f       	mov	r25, r24
    116e:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <__floatsisf>
    1172:	4b 01       	movw	r8, r22
    1174:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
    1176:	b3 01       	movw	r22, r6
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	0e 94 77 0f 	call	0x1eee	; 0x1eee <__floatunsisf>
    1180:	2b 01       	movw	r4, r22
    1182:	3c 01       	movw	r6, r24
    1184:	29 81       	ldd	r18, Y+1	; 0x01
    1186:	3a 81       	ldd	r19, Y+2	; 0x02
    1188:	4b 81       	ldd	r20, Y+3	; 0x03
    118a:	5c 81       	ldd	r21, Y+4	; 0x04
    118c:	c7 01       	movw	r24, r14
    118e:	b6 01       	movw	r22, r12
    1190:	0e 94 09 10 	call	0x2012	; 0x2012 <__mulsf3>
    1194:	9b 01       	movw	r18, r22
    1196:	ac 01       	movw	r20, r24
    1198:	c3 01       	movw	r24, r6
    119a:	b2 01       	movw	r22, r4
    119c:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__subsf3>
    11a0:	9b 01       	movw	r18, r22
    11a2:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
    11a4:	c5 01       	movw	r24, r10
    11a6:	b4 01       	movw	r22, r8
    11a8:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__subsf3>
    11ac:	20 e0       	ldi	r18, 0x00	; 0
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	40 e2       	ldi	r20, 0x20	; 32
    11b2:	51 e4       	ldi	r21, 0x41	; 65
    11b4:	0e 94 09 10 	call	0x2012	; 0x2012 <__mulsf3>
            b=((int)((int)b/(int)slope));
    11b8:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__fixsfsi>
    11bc:	5b 01       	movw	r10, r22
    11be:	c7 01       	movw	r24, r14
    11c0:	b6 01       	movw	r22, r12
    11c2:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__fixsfsi>
    11c6:	ab 01       	movw	r20, r22
    11c8:	bc 01       	movw	r22, r24
    11ca:	c5 01       	movw	r24, r10
    11cc:	ba 01       	movw	r22, r20
    11ce:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__divmodhi4>
            dist_high=b;
    11d2:	76 2e       	mov	r7, r22
    11d4:	e8 c0       	rjmp	.+464    	; 0x13a6 <estimate_distance+0x3ac>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    11d6:	77 24       	eor	r7, r7
    11d8:	7a 94       	dec	r7
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
    11da:	d8 01       	movw	r26, r16
    11dc:	ad 90       	ld	r10, X+
    11de:	bc 90       	ld	r11, X
    11e0:	80 91 88 01 	lds	r24, 0x0188
    11e4:	90 91 89 01 	lds	r25, 0x0189
    11e8:	8a 15       	cp	r24, r10
    11ea:	9b 05       	cpc	r25, r11
    11ec:	08 f4       	brcc	.+2      	; 0x11f0 <estimate_distance+0x1f6>
    11ee:	6f c0       	rjmp	.+222    	; 0x12ce <estimate_distance+0x2d4>
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
    11f0:	00 91 8a 01 	lds	r16, 0x018A
    11f4:	10 91 8b 01 	lds	r17, 0x018B
    11f8:	0a 15       	cp	r16, r10
    11fa:	1b 05       	cpc	r17, r11
    11fc:	08 f4       	brcc	.+2      	; 0x1200 <estimate_distance+0x206>
    11fe:	5c c1       	rjmp	.+696    	; 0x14b8 <estimate_distance+0x4be>
    1200:	00 91 8c 01 	lds	r16, 0x018C
    1204:	10 91 8d 01 	lds	r17, 0x018D
    1208:	0a 15       	cp	r16, r10
    120a:	1b 05       	cpc	r17, r11
    120c:	08 f4       	brcc	.+2      	; 0x1210 <estimate_distance+0x216>
    120e:	5d c1       	rjmp	.+698    	; 0x14ca <estimate_distance+0x4d0>
    1210:	00 91 8e 01 	lds	r16, 0x018E
    1214:	10 91 8f 01 	lds	r17, 0x018F
    1218:	0a 15       	cp	r16, r10
    121a:	1b 05       	cpc	r17, r11
    121c:	08 f4       	brcc	.+2      	; 0x1220 <estimate_distance+0x226>
    121e:	5e c1       	rjmp	.+700    	; 0x14dc <estimate_distance+0x4e2>
    1220:	00 91 90 01 	lds	r16, 0x0190
    1224:	10 91 91 01 	lds	r17, 0x0191
    1228:	0a 15       	cp	r16, r10
    122a:	1b 05       	cpc	r17, r11
    122c:	08 f4       	brcc	.+2      	; 0x1230 <estimate_distance+0x236>
    122e:	5f c1       	rjmp	.+702    	; 0x14ee <estimate_distance+0x4f4>
    1230:	00 91 92 01 	lds	r16, 0x0192
    1234:	10 91 93 01 	lds	r17, 0x0193
    1238:	0a 15       	cp	r16, r10
    123a:	1b 05       	cpc	r17, r11
    123c:	08 f4       	brcc	.+2      	; 0x1240 <estimate_distance+0x246>
    123e:	d8 c0       	rjmp	.+432    	; 0x13f0 <estimate_distance+0x3f6>
    1240:	00 91 94 01 	lds	r16, 0x0194
    1244:	10 91 95 01 	lds	r17, 0x0195
    1248:	0a 15       	cp	r16, r10
    124a:	1b 05       	cpc	r17, r11
    124c:	08 f4       	brcc	.+2      	; 0x1250 <estimate_distance+0x256>
    124e:	58 c1       	rjmp	.+688    	; 0x1500 <estimate_distance+0x506>
    1250:	00 91 96 01 	lds	r16, 0x0196
    1254:	10 91 97 01 	lds	r17, 0x0197
    1258:	0a 15       	cp	r16, r10
    125a:	1b 05       	cpc	r17, r11
    125c:	08 f4       	brcc	.+2      	; 0x1260 <estimate_distance+0x266>
    125e:	59 c1       	rjmp	.+690    	; 0x1512 <estimate_distance+0x518>
    1260:	00 91 98 01 	lds	r16, 0x0198
    1264:	10 91 99 01 	lds	r17, 0x0199
    1268:	0a 15       	cp	r16, r10
    126a:	1b 05       	cpc	r17, r11
    126c:	08 f4       	brcc	.+2      	; 0x1270 <estimate_distance+0x276>
    126e:	5a c1       	rjmp	.+692    	; 0x1524 <estimate_distance+0x52a>
    1270:	00 91 9a 01 	lds	r16, 0x019A
    1274:	10 91 9b 01 	lds	r17, 0x019B
    1278:	0a 15       	cp	r16, r10
    127a:	1b 05       	cpc	r17, r11
    127c:	08 f4       	brcc	.+2      	; 0x1280 <estimate_distance+0x286>
    127e:	5b c1       	rjmp	.+694    	; 0x1536 <estimate_distance+0x53c>
    1280:	00 91 9c 01 	lds	r16, 0x019C
    1284:	10 91 9d 01 	lds	r17, 0x019D
    1288:	0a 15       	cp	r16, r10
    128a:	1b 05       	cpc	r17, r11
    128c:	08 f4       	brcc	.+2      	; 0x1290 <estimate_distance+0x296>
    128e:	5c c1       	rjmp	.+696    	; 0x1548 <estimate_distance+0x54e>
    1290:	00 91 9e 01 	lds	r16, 0x019E
    1294:	10 91 9f 01 	lds	r17, 0x019F
    1298:	0a 15       	cp	r16, r10
    129a:	1b 05       	cpc	r17, r11
    129c:	08 f4       	brcc	.+2      	; 0x12a0 <estimate_distance+0x2a6>
    129e:	59 c1       	rjmp	.+690    	; 0x1552 <estimate_distance+0x558>
    12a0:	00 91 a0 01 	lds	r16, 0x01A0
    12a4:	10 91 a1 01 	lds	r17, 0x01A1
    12a8:	0a 15       	cp	r16, r10
    12aa:	1b 05       	cpc	r17, r11
    12ac:	08 f4       	brcc	.+2      	; 0x12b0 <estimate_distance+0x2b6>
    12ae:	5a c1       	rjmp	.+692    	; 0x1564 <estimate_distance+0x56a>
    12b0:	00 91 a2 01 	lds	r16, 0x01A2
    12b4:	10 91 a3 01 	lds	r17, 0x01A3
    12b8:	0a 15       	cp	r16, r10
    12ba:	1b 05       	cpc	r17, r11
    12bc:	08 f4       	brcc	.+2      	; 0x12c0 <estimate_distance+0x2c6>
    12be:	5b c1       	rjmp	.+694    	; 0x1576 <estimate_distance+0x57c>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
    12c0:	1a e5       	ldi	r17, 0x5A	; 90
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
    12c2:	bf ef       	ldi	r27, 0xFF	; 255
    12c4:	7b 12       	cpse	r7, r27
    12c6:	07 c0       	rjmp	.+14     	; 0x12d6 <estimate_distance+0x2dc>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
    12c8:	81 e2       	ldi	r24, 0x21	; 33
    12ca:	81 0f       	add	r24, r17
    12cc:	52 c0       	rjmp	.+164    	; 0x1372 <estimate_distance+0x378>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
    12ce:	10 e0       	ldi	r17, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
    12d0:	bf ef       	ldi	r27, 0xFF	; 255
    12d2:	7b 16       	cp	r7, r27
    12d4:	c9 f3       	breq	.-14     	; 0x12c8 <estimate_distance+0x2ce>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
    12d6:	ed 81       	ldd	r30, Y+5	; 0x05
    12d8:	fe 81       	ldd	r31, Y+6	; 0x06
    12da:	bf 01       	movw	r22, r30
    12dc:	88 27       	eor	r24, r24
    12de:	77 fd       	sbrc	r23, 7
    12e0:	80 95       	com	r24
    12e2:	98 2f       	mov	r25, r24
    12e4:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <__floatsisf>
    12e8:	6b 01       	movw	r12, r22
    12ea:	7c 01       	movw	r14, r24
    12ec:	67 2d       	mov	r22, r7
    12ee:	70 e0       	ldi	r23, 0x00	; 0
    12f0:	80 e0       	ldi	r24, 0x00	; 0
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	0e 94 77 0f 	call	0x1eee	; 0x1eee <__floatunsisf>
    12f8:	4b 01       	movw	r8, r22
    12fa:	5c 01       	movw	r10, r24
    12fc:	a7 01       	movw	r20, r14
    12fe:	96 01       	movw	r18, r12
    1300:	60 e0       	ldi	r22, 0x00	; 0
    1302:	70 e0       	ldi	r23, 0x00	; 0
    1304:	81 e6       	ldi	r24, 0x61	; 97
    1306:	94 e4       	ldi	r25, 0x44	; 68
    1308:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__subsf3>
    130c:	9b 01       	movw	r18, r22
    130e:	ac 01       	movw	r20, r24
    1310:	c5 01       	movw	r24, r10
    1312:	b4 01       	movw	r22, r8
    1314:	0e 94 09 10 	call	0x2012	; 0x2012 <__mulsf3>
    1318:	4b 01       	movw	r8, r22
    131a:	5c 01       	movw	r10, r24
    131c:	61 2f       	mov	r22, r17
    131e:	70 e0       	ldi	r23, 0x00	; 0
    1320:	80 e0       	ldi	r24, 0x00	; 0
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	0e 94 77 0f 	call	0x1eee	; 0x1eee <__floatunsisf>
    1328:	2b 01       	movw	r4, r22
    132a:	3c 01       	movw	r6, r24
    132c:	20 e0       	ldi	r18, 0x00	; 0
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	4f e2       	ldi	r20, 0x2F	; 47
    1332:	54 e4       	ldi	r21, 0x44	; 68
    1334:	c7 01       	movw	r24, r14
    1336:	b6 01       	movw	r22, r12
    1338:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__subsf3>
    133c:	9b 01       	movw	r18, r22
    133e:	ac 01       	movw	r20, r24
    1340:	c3 01       	movw	r24, r6
    1342:	b2 01       	movw	r22, r4
    1344:	0e 94 09 10 	call	0x2012	; 0x2012 <__mulsf3>
    1348:	9b 01       	movw	r18, r22
    134a:	ac 01       	movw	r20, r24
    134c:	c5 01       	movw	r24, r10
    134e:	b4 01       	movw	r22, r8
    1350:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__addsf3>
    1354:	20 e0       	ldi	r18, 0x00	; 0
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	48 e4       	ldi	r20, 0x48	; 72
    135a:	53 e4       	ldi	r21, 0x43	; 67
    135c:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <__divsf3>
    1360:	20 e0       	ldi	r18, 0x00	; 0
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	44 e0       	ldi	r20, 0x04	; 4
    1366:	52 e4       	ldi	r21, 0x42	; 66
    1368:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__addsf3>
    136c:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <__fixunssfsi>
    1370:	86 2f       	mov	r24, r22
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
    }
}
    1372:	26 96       	adiw	r28, 0x06	; 6
    1374:	0f b6       	in	r0, 0x3f	; 63
    1376:	f8 94       	cli
    1378:	de bf       	out	0x3e, r29	; 62
    137a:	0f be       	out	0x3f, r0	; 63
    137c:	cd bf       	out	0x3d, r28	; 61
    137e:	df 91       	pop	r29
    1380:	cf 91       	pop	r28
    1382:	1f 91       	pop	r17
    1384:	0f 91       	pop	r16
    1386:	ff 90       	pop	r15
    1388:	ef 90       	pop	r14
    138a:	df 90       	pop	r13
    138c:	cf 90       	pop	r12
    138e:	bf 90       	pop	r11
    1390:	af 90       	pop	r10
    1392:	9f 90       	pop	r9
    1394:	8f 90       	pop	r8
    1396:	7f 90       	pop	r7
    1398:	6f 90       	pop	r6
    139a:	5f 90       	pop	r5
    139c:	4f 90       	pop	r4
    139e:	3f 90       	pop	r3
    13a0:	2f 90       	pop	r2
    13a2:	08 95       	ret
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
    13a4:	71 2c       	mov	r7, r1
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
    13a6:	ed 81       	ldd	r30, Y+5	; 0x05
    13a8:	fe 81       	ldd	r31, Y+6	; 0x06
    13aa:	ed 3b       	cpi	r30, 0xBD	; 189
    13ac:	f2 40       	sbci	r31, 0x02	; 2
    13ae:	0c f0       	brlt	.+2      	; 0x13b2 <estimate_distance+0x3b8>
    13b0:	14 cf       	rjmp	.-472    	; 0x11da <estimate_distance+0x1e0>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
    13b2:	81 e2       	ldi	r24, 0x21	; 33
    13b4:	87 0d       	add	r24, r7
    13b6:	dd cf       	rjmp	.-70     	; 0x1372 <estimate_distance+0x378>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    13b8:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
    13ba:	85 e0       	ldi	r24, 0x05	; 5
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	7c 01       	movw	r14, r24
    13c0:	f1 e0       	ldi	r31, 0x01	; 1
    13c2:	ef 1a       	sub	r14, r31
    13c4:	f1 08       	sbc	r15, r1
    13c6:	70 e0       	ldi	r23, 0x00	; 0
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	0e 94 77 0f 	call	0x1eee	; 0x1eee <__floatunsisf>
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	40 e0       	ldi	r20, 0x00	; 0
    13d6:	5f e3       	ldi	r21, 0x3F	; 63
    13d8:	0e 94 09 10 	call	0x2012	; 0x2012 <__mulsf3>
    13dc:	20 e0       	ldi	r18, 0x00	; 0
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	a9 01       	movw	r20, r18
    13e2:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__addsf3>
    13e6:	69 83       	std	Y+1, r22	; 0x01
    13e8:	7a 83       	std	Y+2, r23	; 0x02
    13ea:	8b 83       	std	Y+3, r24	; 0x03
    13ec:	9c 83       	std	Y+4, r25	; 0x04
    13ee:	a4 ce       	rjmp	.-696    	; 0x1138 <estimate_distance+0x13e>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    13f0:	75 e0       	ldi	r23, 0x05	; 5
    13f2:	67 2e       	mov	r6, r23
                if(dist->low_gain > kilo_irlow[i]) {
    13f4:	e5 e0       	ldi	r30, 0x05	; 5
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
    13f8:	ee 0f       	add	r30, r30
    13fa:	ff 1f       	adc	r31, r31
    13fc:	ea 57       	subi	r30, 0x7A	; 122
    13fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1400:	80 81       	ld	r24, Z
    1402:	91 81       	ldd	r25, Z+1	; 0x01
    1404:	b8 01       	movw	r22, r16
    1406:	68 1b       	sub	r22, r24
    1408:	79 0b       	sbc	r23, r25
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	0e 94 77 0f 	call	0x1eee	; 0x1eee <__floatunsisf>
    1412:	9b 01       	movw	r18, r22
    1414:	ac 01       	movw	r20, r24
    1416:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__addsf3>
    141a:	6b 01       	movw	r12, r22
    141c:	7c 01       	movw	r14, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
    141e:	b5 01       	movw	r22, r10
    1420:	88 27       	eor	r24, r24
    1422:	77 fd       	sbrc	r23, 7
    1424:	80 95       	com	r24
    1426:	98 2f       	mov	r25, r24
    1428:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <__floatsisf>
    142c:	4b 01       	movw	r8, r22
    142e:	5c 01       	movw	r10, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
    1430:	b8 01       	movw	r22, r16
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	0e 94 77 0f 	call	0x1eee	; 0x1eee <__floatunsisf>
    143a:	1b 01       	movw	r2, r22
    143c:	2c 01       	movw	r4, r24
    143e:	66 2d       	mov	r22, r6
    1440:	70 e0       	ldi	r23, 0x00	; 0
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	0e 94 77 0f 	call	0x1eee	; 0x1eee <__floatunsisf>
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	40 e0       	ldi	r20, 0x00	; 0
    1450:	5f e3       	ldi	r21, 0x3F	; 63
    1452:	0e 94 09 10 	call	0x2012	; 0x2012 <__mulsf3>
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	a9 01       	movw	r20, r18
    145c:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__addsf3>
    1460:	a7 01       	movw	r20, r14
    1462:	96 01       	movw	r18, r12
    1464:	0e 94 09 10 	call	0x2012	; 0x2012 <__mulsf3>
    1468:	9b 01       	movw	r18, r22
    146a:	ac 01       	movw	r20, r24
    146c:	c2 01       	movw	r24, r4
    146e:	b1 01       	movw	r22, r2
    1470:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__subsf3>
    1474:	9b 01       	movw	r18, r22
    1476:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
    1478:	c5 01       	movw	r24, r10
    147a:	b4 01       	movw	r22, r8
    147c:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__subsf3>
    1480:	20 e0       	ldi	r18, 0x00	; 0
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	40 e2       	ldi	r20, 0x20	; 32
    1486:	51 e4       	ldi	r21, 0x41	; 65
    1488:	0e 94 09 10 	call	0x2012	; 0x2012 <__mulsf3>
                b=((int)((int)b/(int)slope));
    148c:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__fixsfsi>
    1490:	8b 01       	movw	r16, r22
    1492:	c7 01       	movw	r24, r14
    1494:	b6 01       	movw	r22, r12
    1496:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__fixsfsi>
    149a:	ab 01       	movw	r20, r22
    149c:	bc 01       	movw	r22, r24
    149e:	c8 01       	movw	r24, r16
    14a0:	ba 01       	movw	r22, r20
    14a2:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__divmodhi4>
                dist_low=b;
    14a6:	16 2f       	mov	r17, r22
            }
        }
    }

    if (dist_low != 255) {
    14a8:	6f 3f       	cpi	r22, 0xFF	; 255
    14aa:	09 f0       	breq	.+2      	; 0x14ae <estimate_distance+0x4b4>
    14ac:	11 cf       	rjmp	.-478    	; 0x12d0 <estimate_distance+0x2d6>
    14ae:	81 cf       	rjmp	.-254    	; 0x13b2 <estimate_distance+0x3b8>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
    14b0:	61 e0       	ldi	r22, 0x01	; 1
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	83 cf       	rjmp	.-250    	; 0x13be <estimate_distance+0x3c4>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
    14b8:	66 24       	eor	r6, r6
    14ba:	63 94       	inc	r6
    14bc:	e1 e0       	ldi	r30, 0x01	; 1
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	9b cf       	rjmp	.-202    	; 0x13f8 <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    14c2:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
    14c4:	82 e0       	ldi	r24, 0x02	; 2
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	7a cf       	rjmp	.-268    	; 0x13be <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    14ca:	a2 e0       	ldi	r26, 0x02	; 2
    14cc:	6a 2e       	mov	r6, r26
                if(dist->low_gain > kilo_irlow[i]) {
    14ce:	e2 e0       	ldi	r30, 0x02	; 2
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	92 cf       	rjmp	.-220    	; 0x13f8 <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    14d4:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
    14d6:	83 e0       	ldi	r24, 0x03	; 3
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	71 cf       	rjmp	.-286    	; 0x13be <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    14dc:	f3 e0       	ldi	r31, 0x03	; 3
    14de:	6f 2e       	mov	r6, r31
                if(dist->low_gain > kilo_irlow[i]) {
    14e0:	e3 e0       	ldi	r30, 0x03	; 3
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	89 cf       	rjmp	.-238    	; 0x13f8 <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    14e6:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
    14e8:	84 e0       	ldi	r24, 0x04	; 4
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	68 cf       	rjmp	.-304    	; 0x13be <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    14ee:	e4 e0       	ldi	r30, 0x04	; 4
    14f0:	6e 2e       	mov	r6, r30
                if(dist->low_gain > kilo_irlow[i]) {
    14f2:	e4 e0       	ldi	r30, 0x04	; 4
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 cf       	rjmp	.-256    	; 0x13f8 <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    14f8:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
    14fa:	86 e0       	ldi	r24, 0x06	; 6
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	5f cf       	rjmp	.-322    	; 0x13be <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1500:	66 e0       	ldi	r22, 0x06	; 6
    1502:	66 2e       	mov	r6, r22
                if(dist->low_gain > kilo_irlow[i]) {
    1504:	e6 e0       	ldi	r30, 0x06	; 6
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	77 cf       	rjmp	.-274    	; 0x13f8 <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    150a:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
    150c:	87 e0       	ldi	r24, 0x07	; 7
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	56 cf       	rjmp	.-340    	; 0x13be <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1512:	57 e0       	ldi	r21, 0x07	; 7
    1514:	65 2e       	mov	r6, r21
                if(dist->low_gain > kilo_irlow[i]) {
    1516:	e7 e0       	ldi	r30, 0x07	; 7
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	6e cf       	rjmp	.-292    	; 0x13f8 <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    151c:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
    151e:	88 e0       	ldi	r24, 0x08	; 8
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	4d cf       	rjmp	.-358    	; 0x13be <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1524:	48 e0       	ldi	r20, 0x08	; 8
    1526:	64 2e       	mov	r6, r20
                if(dist->low_gain > kilo_irlow[i]) {
    1528:	e8 e0       	ldi	r30, 0x08	; 8
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	65 cf       	rjmp	.-310    	; 0x13f8 <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    152e:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
    1530:	89 e0       	ldi	r24, 0x09	; 9
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	44 cf       	rjmp	.-376    	; 0x13be <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1536:	39 e0       	ldi	r19, 0x09	; 9
    1538:	63 2e       	mov	r6, r19
                if(dist->low_gain > kilo_irlow[i]) {
    153a:	e9 e0       	ldi	r30, 0x09	; 9
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	5c cf       	rjmp	.-328    	; 0x13f8 <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1540:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
    1542:	8a e0       	ldi	r24, 0x0A	; 10
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	3b cf       	rjmp	.-394    	; 0x13be <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1548:	2a e0       	ldi	r18, 0x0A	; 10
    154a:	62 2e       	mov	r6, r18
                if(dist->low_gain > kilo_irlow[i]) {
    154c:	ea e0       	ldi	r30, 0x0A	; 10
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	53 cf       	rjmp	.-346    	; 0x13f8 <estimate_distance+0x3fe>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1552:	9b e0       	ldi	r25, 0x0B	; 11
    1554:	69 2e       	mov	r6, r25
                if(dist->low_gain > kilo_irlow[i]) {
    1556:	eb e0       	ldi	r30, 0x0B	; 11
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	4e cf       	rjmp	.-356    	; 0x13f8 <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    155c:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
    155e:	8b e0       	ldi	r24, 0x0B	; 11
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	2d cf       	rjmp	.-422    	; 0x13be <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1564:	8c e0       	ldi	r24, 0x0C	; 12
    1566:	68 2e       	mov	r6, r24
                if(dist->low_gain > kilo_irlow[i]) {
    1568:	ec e0       	ldi	r30, 0x0C	; 12
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	45 cf       	rjmp	.-374    	; 0x13f8 <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    156e:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
    1570:	8c e0       	ldi	r24, 0x0C	; 12
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	24 cf       	rjmp	.-440    	; 0x13be <estimate_distance+0x3c4>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1576:	bd e0       	ldi	r27, 0x0D	; 13
    1578:	6b 2e       	mov	r6, r27
                if(dist->low_gain > kilo_irlow[i]) {
    157a:	ed e0       	ldi	r30, 0x0D	; 13
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	3c cf       	rjmp	.-392    	; 0x13f8 <estimate_distance+0x3fe>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1580:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
    1582:	8d e0       	ldi	r24, 0x0D	; 13
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	1b cf       	rjmp	.-458    	; 0x13be <estimate_distance+0x3c4>

00001588 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
    1588:	1f 92       	push	r1
    158a:	0f 92       	push	r0
    158c:	0f b6       	in	r0, 0x3f	; 63
    158e:	0f 92       	push	r0
    1590:	11 24       	eor	r1, r1
    1592:	2f 93       	push	r18
    1594:	3f 93       	push	r19
    1596:	4f 93       	push	r20
    1598:	5f 93       	push	r21
    159a:	6f 93       	push	r22
    159c:	7f 93       	push	r23
    159e:	8f 93       	push	r24
    15a0:	9f 93       	push	r25
    15a2:	af 93       	push	r26
    15a4:	bf 93       	push	r27
    15a6:	ef 93       	push	r30
    15a8:	ff 93       	push	r31
    tx_clock += tx_increment;
    15aa:	80 91 a7 01 	lds	r24, 0x01A7
    15ae:	90 91 a8 01 	lds	r25, 0x01A8
    15b2:	20 91 a5 01 	lds	r18, 0x01A5
    15b6:	30 91 a6 01 	lds	r19, 0x01A6
    15ba:	82 0f       	add	r24, r18
    15bc:	93 1f       	adc	r25, r19
    15be:	90 93 a8 01 	sts	0x01A8, r25
    15c2:	80 93 a7 01 	sts	0x01A7, r24
    tx_increment = 0xFF;
    15c6:	8f ef       	ldi	r24, 0xFF	; 255
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	90 93 a6 01 	sts	0x01A6, r25
    15ce:	80 93 a5 01 	sts	0x01A5, r24
    OCR0A = tx_increment;
    15d2:	8f ef       	ldi	r24, 0xFF	; 255
    15d4:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
    15d6:	80 91 83 01 	lds	r24, 0x0183
    15da:	90 91 84 01 	lds	r25, 0x0184
    15de:	a0 91 85 01 	lds	r26, 0x0185
    15e2:	b0 91 86 01 	lds	r27, 0x0186
    15e6:	01 96       	adiw	r24, 0x01	; 1
    15e8:	a1 1d       	adc	r26, r1
    15ea:	b1 1d       	adc	r27, r1
    15ec:	80 93 83 01 	sts	0x0183, r24
    15f0:	90 93 84 01 	sts	0x0184, r25
    15f4:	a0 93 85 01 	sts	0x0185, r26
    15f8:	b0 93 86 01 	sts	0x0186, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
    15fc:	80 91 87 01 	lds	r24, 0x0187
    1600:	81 11       	cpse	r24, r1
    1602:	0f c0       	rjmp	.+30     	; 0x1622 <__vector_14+0x9a>
    1604:	80 91 b6 01 	lds	r24, 0x01B6
    1608:	90 91 b7 01 	lds	r25, 0x01B7
    160c:	20 91 a7 01 	lds	r18, 0x01A7
    1610:	30 91 a8 01 	lds	r19, 0x01A8
    1614:	82 17       	cp	r24, r18
    1616:	93 07       	cpc	r25, r19
    1618:	20 f4       	brcc	.+8      	; 0x1622 <__vector_14+0x9a>
    161a:	80 91 43 01 	lds	r24, 0x0143
    161e:	84 30       	cpi	r24, 0x04	; 4
    1620:	89 f0       	breq	.+34     	; 0x1644 <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
    1622:	ff 91       	pop	r31
    1624:	ef 91       	pop	r30
    1626:	bf 91       	pop	r27
    1628:	af 91       	pop	r26
    162a:	9f 91       	pop	r25
    162c:	8f 91       	pop	r24
    162e:	7f 91       	pop	r23
    1630:	6f 91       	pop	r22
    1632:	5f 91       	pop	r21
    1634:	4f 91       	pop	r20
    1636:	3f 91       	pop	r19
    1638:	2f 91       	pop	r18
    163a:	0f 90       	pop	r0
    163c:	0f be       	out	0x3f, r0	; 63
    163e:	0f 90       	pop	r0
    1640:	1f 90       	pop	r1
    1642:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
    1644:	e0 91 21 01 	lds	r30, 0x0121
    1648:	f0 91 22 01 	lds	r31, 0x0122
    164c:	09 95       	icall
        if (msg) {
    164e:	00 97       	sbiw	r24, 0x00	; 0
    1650:	41 f3       	breq	.-48     	; 0x1622 <__vector_14+0x9a>
            if (message_send(msg)) {
    1652:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <message_send>
    1656:	81 11       	cpse	r24, r1
    1658:	09 c0       	rjmp	.+18     	; 0x166c <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
    165a:	0e 94 43 02 	call	0x486	; 0x486 <rand>
    165e:	99 27       	eor	r25, r25
    1660:	90 93 a6 01 	sts	0x01A6, r25
    1664:	80 93 a5 01 	sts	0x01A5, r24
                OCR0A = tx_increment;
    1668:	87 bd       	out	0x27, r24	; 39
    166a:	db cf       	rjmp	.-74     	; 0x1622 <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
    166c:	e0 91 1f 01 	lds	r30, 0x011F
    1670:	f0 91 20 01 	lds	r31, 0x0120
    1674:	09 95       	icall
                tx_clock = 0;
    1676:	10 92 a8 01 	sts	0x01A8, r1
    167a:	10 92 a7 01 	sts	0x01A7, r1
    167e:	d1 cf       	rjmp	.-94     	; 0x1622 <__vector_14+0x9a>

00001680 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
    1680:	80 ff       	sbrs	r24, 0
    1682:	11 c0       	rjmp	.+34     	; 0x16a6 <set_color+0x26>
        DDRD |= (1<<5);
    1684:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
    1686:	81 ff       	sbrs	r24, 1
    1688:	11 c0       	rjmp	.+34     	; 0x16ac <set_color+0x2c>
        DDRD |= (1<<4);
    168a:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
    168c:	82 ff       	sbrs	r24, 2
    168e:	11 c0       	rjmp	.+34     	; 0x16b2 <set_color+0x32>
        DDRC |= (1<<3);
    1690:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
    1692:	83 ff       	sbrs	r24, 3
    1694:	11 c0       	rjmp	.+34     	; 0x16b8 <set_color+0x38>
        DDRC |= (1<<2);
    1696:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
    1698:	84 ff       	sbrs	r24, 4
    169a:	11 c0       	rjmp	.+34     	; 0x16be <set_color+0x3e>
        DDRC |= (1<<5);
    169c:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
    169e:	85 fd       	sbrc	r24, 5
    16a0:	11 c0       	rjmp	.+34     	; 0x16c4 <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    16a2:	3c 98       	cbi	0x07, 4	; 7
    16a4:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    16a6:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
    16a8:	81 fd       	sbrc	r24, 1
    16aa:	ef cf       	rjmp	.-34     	; 0x168a <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    16ac:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
    16ae:	82 fd       	sbrc	r24, 2
    16b0:	ef cf       	rjmp	.-34     	; 0x1690 <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    16b2:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
    16b4:	83 fd       	sbrc	r24, 3
    16b6:	ef cf       	rjmp	.-34     	; 0x1696 <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    16b8:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
    16ba:	84 fd       	sbrc	r24, 4
    16bc:	ef cf       	rjmp	.-34     	; 0x169c <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    16be:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
    16c0:	85 ff       	sbrs	r24, 5
    16c2:	ef cf       	rjmp	.-34     	; 0x16a2 <set_color+0x22>
        DDRC |= (1<<4);
    16c4:	3c 9a       	sbi	0x07, 4	; 7
    16c6:	08 95       	ret

000016c8 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
    16c8:	1f 92       	push	r1
    16ca:	0f 92       	push	r0
    16cc:	0f b6       	in	r0, 0x3f	; 63
    16ce:	0f 92       	push	r0
    16d0:	11 24       	eor	r1, r1
    16d2:	8f 93       	push	r24
    16d4:	9f 93       	push	r25
    rx_timer_off();
    16d6:	10 92 81 00 	sts	0x0081, r1
    16da:	10 92 85 00 	sts	0x0085, r1
    16de:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	80 93 60 01 	sts	0x0160, r24
    rx_leadingbyte = 1;
    16e8:	80 93 a4 01 	sts	0x01A4, r24
    rx_busy = 0;
    16ec:	10 92 87 01 	sts	0x0187, r1
    adc_trigger_high_gain();
    16f0:	10 92 7c 00 	sts	0x007C, r1
    16f4:	93 ea       	ldi	r25, 0xA3	; 163
    16f6:	90 93 7a 00 	sts	0x007A, r25
    16fa:	80 93 7b 00 	sts	0x007B, r24
}
    16fe:	9f 91       	pop	r25
    1700:	8f 91       	pop	r24
    1702:	0f 90       	pop	r0
    1704:	0f be       	out	0x3f, r0	; 63
    1706:	0f 90       	pop	r0
    1708:	1f 90       	pop	r1
    170a:	18 95       	reti

0000170c <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
    170c:	1f 92       	push	r1
    170e:	0f 92       	push	r0
    1710:	0f b6       	in	r0, 0x3f	; 63
    1712:	0f 92       	push	r0
    1714:	11 24       	eor	r1, r1
    1716:	2f 93       	push	r18
    1718:	3f 93       	push	r19
    171a:	4f 93       	push	r20
    171c:	5f 93       	push	r21
    171e:	6f 93       	push	r22
    1720:	7f 93       	push	r23
    1722:	8f 93       	push	r24
    1724:	9f 93       	push	r25
    1726:	af 93       	push	r26
    1728:	bf 93       	push	r27
    172a:	cf 93       	push	r28
    172c:	df 93       	push	r29
    172e:	ef 93       	push	r30
    1730:	ff 93       	push	r31
    uint16_t timer = TCNT1;
    1732:	20 91 84 00 	lds	r18, 0x0084
    1736:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
    173a:	41 e0       	ldi	r20, 0x01	; 1
    173c:	40 93 87 01 	sts	0x0187, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
    1740:	80 91 60 01 	lds	r24, 0x0160
    1744:	88 23       	and	r24, r24
    1746:	a9 f1       	breq	.+106    	; 0x17b2 <__vector_23+0xa6>
        rx_timer_on();
    1748:	10 92 85 00 	sts	0x0085, r1
    174c:	10 92 84 00 	sts	0x0084, r1
    1750:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
    1754:	10 92 b8 01 	sts	0x01B8, r1
        rx_leadingbit = 0;
    1758:	10 92 60 01 	sts	0x0160, r1
        if (rx_leadingbyte) {
    175c:	80 91 a4 01 	lds	r24, 0x01A4
    1760:	88 23       	and	r24, r24
    1762:	a1 f0       	breq	.+40     	; 0x178c <__vector_23+0x80>
            adc_finish_conversion();
    1764:	80 91 7a 00 	lds	r24, 0x007A
    1768:	86 fd       	sbrc	r24, 6
    176a:	fc cf       	rjmp	.-8      	; 0x1764 <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
    176c:	80 91 78 00 	lds	r24, 0x0078
    1770:	90 91 79 00 	lds	r25, 0x0079
    1774:	90 93 82 01 	sts	0x0182, r25
    1778:	80 93 81 01 	sts	0x0181, r24
            adc_trigger_low_gain();
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	80 93 7c 00 	sts	0x007C, r24
    1782:	93 ea       	ldi	r25, 0xA3	; 163
    1784:	90 93 7a 00 	sts	0x007A, r25
    1788:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
    178c:	ff 91       	pop	r31
    178e:	ef 91       	pop	r30
    1790:	df 91       	pop	r29
    1792:	cf 91       	pop	r28
    1794:	bf 91       	pop	r27
    1796:	af 91       	pop	r26
    1798:	9f 91       	pop	r25
    179a:	8f 91       	pop	r24
    179c:	7f 91       	pop	r23
    179e:	6f 91       	pop	r22
    17a0:	5f 91       	pop	r21
    17a2:	4f 91       	pop	r20
    17a4:	3f 91       	pop	r19
    17a6:	2f 91       	pop	r18
    17a8:	0f 90       	pop	r0
    17aa:	0f be       	out	0x3f, r0	; 63
    17ac:	0f 90       	pop	r0
    17ae:	1f 90       	pop	r1
    17b0:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    17b2:	c9 01       	movw	r24, r18
    17b4:	87 58       	subi	r24, 0x87	; 135
    17b6:	91 09       	sbc	r25, r1
    17b8:	84 37       	cpi	r24, 0x74	; 116
    17ba:	99 40       	sbci	r25, 0x09	; 9
    17bc:	08 f0       	brcs	.+2      	; 0x17c0 <__vector_23+0xb4>
    17be:	4f c0       	rjmp	.+158    	; 0x185e <__vector_23+0x152>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    17c0:	26 58       	subi	r18, 0x86	; 134
    17c2:	31 09       	sbc	r19, r1
    17c4:	a4 ef       	ldi	r26, 0xF4	; 244
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	0e 94 56 0e 	call	0x1cac	; 0x1cac <__umulhisi3>
    17cc:	aa 27       	eor	r26, r26
    17ce:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
    17d0:	88 30       	cpi	r24, 0x08	; 8
    17d2:	08 f4       	brcc	.+2      	; 0x17d6 <__vector_23+0xca>
    17d4:	7b c0       	rjmp	.+246    	; 0x18cc <__vector_23+0x1c0>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    17d6:	40 93 60 01 	sts	0x0160, r20
                if (rx_leadingbyte) {
    17da:	80 91 a4 01 	lds	r24, 0x01A4
    17de:	81 11       	cpse	r24, r1
    17e0:	52 c0       	rjmp	.+164    	; 0x1886 <__vector_23+0x17a>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    17e2:	80 91 7e 01 	lds	r24, 0x017E
    17e6:	e8 2f       	mov	r30, r24
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	e6 55       	subi	r30, 0x56	; 86
    17ec:	fe 4f       	sbci	r31, 0xFE	; 254
    17ee:	90 91 b8 01 	lds	r25, 0x01B8
    17f2:	90 83       	st	Z, r25
                    rx_byteindex++;
    17f4:	8f 5f       	subi	r24, 0xFF	; 255
    17f6:	80 93 7e 01 	sts	0x017E, r24
                    if (rx_byteindex == sizeof(message_t)) {
    17fa:	8c 30       	cpi	r24, 0x0C	; 12
    17fc:	39 f6       	brne	.-114    	; 0x178c <__vector_23+0x80>
                        rx_timer_off();
    17fe:	10 92 81 00 	sts	0x0081, r1
    1802:	10 92 85 00 	sts	0x0085, r1
    1806:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    180a:	40 93 a4 01 	sts	0x01A4, r20
                        rx_busy = 0;
    180e:	10 92 87 01 	sts	0x0187, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    1812:	c0 91 b4 01 	lds	r28, 0x01B4
    1816:	d0 91 b5 01 	lds	r29, 0x01B5
    181a:	8a ea       	ldi	r24, 0xAA	; 170
    181c:	91 e0       	ldi	r25, 0x01	; 1
    181e:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <message_crc>
    1822:	c8 17       	cp	r28, r24
    1824:	d9 07       	cpc	r29, r25
    1826:	09 f0       	breq	.+2      	; 0x182a <__vector_23+0x11e>
    1828:	b1 cf       	rjmp	.-158    	; 0x178c <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    182a:	80 91 b3 01 	lds	r24, 0x01B3
    182e:	87 ff       	sbrs	r24, 7
    1830:	5e c0       	rjmp	.+188    	; 0x18ee <__vector_23+0x1e2>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    1832:	98 e7       	ldi	r25, 0x78	; 120
    1834:	98 0f       	add	r25, r24
    1836:	93 30       	cpi	r25, 0x03	; 3
    1838:	30 f0       	brcs	.+12     	; 0x1846 <__vector_23+0x13a>
        motors_off();
    183a:	53 98       	cbi	0x0a, 3	; 10
    183c:	23 98       	cbi	0x04, 3	; 4
    183e:	10 92 b4 00 	sts	0x00B4, r1
    1842:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	fc 01       	movw	r30, r24
    184a:	e0 58       	subi	r30, 0x80	; 128
    184c:	f1 09       	sbc	r31, r1
    184e:	eb 30       	cpi	r30, 0x0B	; 11
    1850:	f1 05       	cpc	r31, r1
    1852:	08 f0       	brcs	.+2      	; 0x1856 <__vector_23+0x14a>
    1854:	9b cf       	rjmp	.-202    	; 0x178c <__vector_23+0x80>
    1856:	e5 5c       	subi	r30, 0xC5	; 197
    1858:	ff 4f       	sbci	r31, 0xFF	; 255
    185a:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    185e:	10 92 81 00 	sts	0x0081, r1
    1862:	10 92 85 00 	sts	0x0085, r1
    1866:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    186a:	40 93 60 01 	sts	0x0160, r20
            rx_leadingbyte = 1;
    186e:	40 93 a4 01 	sts	0x01A4, r20
            rx_busy = 0;
    1872:	10 92 87 01 	sts	0x0187, r1
            adc_trigger_high_gain();
    1876:	10 92 7c 00 	sts	0x007C, r1
    187a:	83 ea       	ldi	r24, 0xA3	; 163
    187c:	80 93 7a 00 	sts	0x007A, r24
    1880:	40 93 7b 00 	sts	0x007B, r20
    1884:	83 cf       	rjmp	.-250    	; 0x178c <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    1886:	80 91 7a 00 	lds	r24, 0x007A
    188a:	86 fd       	sbrc	r24, 6
    188c:	fc cf       	rjmp	.-8      	; 0x1886 <__vector_23+0x17a>
                    rx_dist.low_gain = ADCW;
    188e:	80 91 78 00 	lds	r24, 0x0078
    1892:	90 91 79 00 	lds	r25, 0x0079
    1896:	90 93 80 01 	sts	0x0180, r25
    189a:	80 93 7f 01 	sts	0x017F, r24
                    adc_trigger_high_gain();
    189e:	10 92 7c 00 	sts	0x007C, r1
    18a2:	83 ea       	ldi	r24, 0xA3	; 163
    18a4:	80 93 7a 00 	sts	0x007A, r24
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    18ae:	90 91 b8 01 	lds	r25, 0x01B8
    18b2:	99 23       	and	r25, r25
    18b4:	b9 f0       	breq	.+46     	; 0x18e4 <__vector_23+0x1d8>
                        rx_timer_off();
    18b6:	10 92 81 00 	sts	0x0081, r1
    18ba:	10 92 85 00 	sts	0x0085, r1
    18be:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    18c2:	80 93 a4 01 	sts	0x01A4, r24
                        rx_busy = 0;
    18c6:	10 92 87 01 	sts	0x0187, r1
    18ca:	60 cf       	rjmp	.-320    	; 0x178c <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    18cc:	21 e0       	ldi	r18, 0x01	; 1
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	01 c0       	rjmp	.+2      	; 0x18d4 <__vector_23+0x1c8>
    18d2:	22 0f       	add	r18, r18
    18d4:	8a 95       	dec	r24
    18d6:	ea f7       	brpl	.-6      	; 0x18d2 <__vector_23+0x1c6>
    18d8:	80 91 b8 01 	lds	r24, 0x01B8
    18dc:	82 2b       	or	r24, r18
    18de:	80 93 b8 01 	sts	0x01B8, r24
    18e2:	54 cf       	rjmp	.-344    	; 0x178c <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    18e4:	10 92 a4 01 	sts	0x01A4, r1
                        rx_byteindex = 0;
    18e8:	10 92 7e 01 	sts	0x017E, r1
    18ec:	4f cf       	rjmp	.-354    	; 0x178c <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    18ee:	e0 91 23 01 	lds	r30, 0x0123
    18f2:	f0 91 24 01 	lds	r31, 0x0124
    18f6:	6f e7       	ldi	r22, 0x7F	; 127
    18f8:	71 e0       	ldi	r23, 0x01	; 1
    18fa:	8a ea       	ldi	r24, 0xAA	; 170
    18fc:	91 e0       	ldi	r25, 0x01	; 1
    18fe:	09 95       	icall
    1900:	45 cf       	rjmp	.-374    	; 0x178c <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1902:	80 91 aa 01 	lds	r24, 0x01AA
    1906:	82 30       	cpi	r24, 0x02	; 2
    1908:	09 f4       	brne	.+2      	; 0x190c <__vector_23+0x200>
    190a:	dc c0       	rjmp	.+440    	; 0x1ac4 <__vector_23+0x3b8>
    190c:	08 f4       	brcc	.+2      	; 0x1910 <__vector_23+0x204>
    190e:	b9 c0       	rjmp	.+370    	; 0x1a82 <__vector_23+0x376>
    1910:	83 30       	cpi	r24, 0x03	; 3
    1912:	09 f4       	brne	.+2      	; 0x1916 <__vector_23+0x20a>
    1914:	c5 c0       	rjmp	.+394    	; 0x1aa0 <__vector_23+0x394>
    1916:	84 30       	cpi	r24, 0x04	; 4
    1918:	09 f0       	breq	.+2      	; 0x191c <__vector_23+0x210>
    191a:	b0 c0       	rjmp	.+352    	; 0x1a7c <__vector_23+0x370>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    191c:	80 91 41 01 	lds	r24, 0x0141
    1920:	90 91 b0 01 	lds	r25, 0x01B0
    1924:	83 30       	cpi	r24, 0x03	; 3
    1926:	09 f4       	brne	.+2      	; 0x192a <__vector_23+0x21e>
    1928:	e2 c0       	rjmp	.+452    	; 0x1aee <__vector_23+0x3e2>
    192a:	80 91 af 01 	lds	r24, 0x01AF
                        prev_motion = MOVE_STOP;
    192e:	10 92 42 01 	sts	0x0142, r1
                        cur_motion = MOVE_STRAIGHT;
    1932:	23 e0       	ldi	r18, 0x03	; 3
    1934:	20 93 41 01 	sts	0x0141, r18
                        kilo_straight_left = calibmsg->straight_left;
    1938:	80 93 bb 01 	sts	0x01BB, r24
                        kilo_straight_right = calibmsg->straight_right;
    193c:	90 93 bc 01 	sts	0x01BC, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1940:	80 91 43 01 	lds	r24, 0x0143
    1944:	86 30       	cpi	r24, 0x06	; 6
    1946:	09 f4       	brne	.+2      	; 0x194a <__vector_23+0x23e>
    1948:	21 cf       	rjmp	.-446    	; 0x178c <__vector_23+0x80>
                motors_on();
    194a:	53 9a       	sbi	0x0a, 3	; 10
    194c:	23 9a       	sbi	0x04, 3	; 4
    194e:	10 92 b4 00 	sts	0x00B4, r1
    1952:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    1956:	86 e0       	ldi	r24, 0x06	; 6
    1958:	80 93 43 01 	sts	0x0143, r24
    195c:	17 cf       	rjmp	.-466    	; 0x178c <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    195e:	80 91 43 01 	lds	r24, 0x0143
    1962:	86 30       	cpi	r24, 0x06	; 6
    1964:	99 f0       	breq	.+38     	; 0x198c <__vector_23+0x280>
                motors_on();
    1966:	53 9a       	sbi	0x0a, 3	; 10
    1968:	23 9a       	sbi	0x04, 3	; 4
    196a:	10 92 b4 00 	sts	0x00B4, r1
    196e:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1972:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1974:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1976:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    1978:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    197a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    197c:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    197e:	10 92 41 01 	sts	0x0141, r1
    1982:	10 92 42 01 	sts	0x0142, r1
                kilo_state = MOVING;
    1986:	86 e0       	ldi	r24, 0x06	; 6
    1988:	80 93 43 01 	sts	0x0143, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	00 90 aa 01 	lds	r0, 0x01AA
    1994:	02 c0       	rjmp	.+4      	; 0x199a <__vector_23+0x28e>
    1996:	88 0f       	add	r24, r24
    1998:	99 1f       	adc	r25, r25
    199a:	0a 94       	dec	r0
    199c:	e2 f7       	brpl	.-8      	; 0x1996 <__vector_23+0x28a>
    199e:	20 91 b9 01 	lds	r18, 0x01B9
    19a2:	30 91 ba 01 	lds	r19, 0x01BA
    19a6:	82 23       	and	r24, r18
    19a8:	93 23       	and	r25, r19
    19aa:	89 2b       	or	r24, r25
    19ac:	09 f0       	breq	.+2      	; 0x19b0 <__vector_23+0x2a4>
    19ae:	86 c0       	rjmp	.+268    	; 0x1abc <__vector_23+0x3b0>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    19b0:	10 92 41 01 	sts	0x0141, r1
    19b4:	eb ce       	rjmp	.-554    	; 0x178c <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	80 93 43 01 	sts	0x0143, r24
    19bc:	e7 ce       	rjmp	.-562    	; 0x178c <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    19be:	e0 e0       	ldi	r30, 0x00	; 0
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    19c4:	80 91 6e 00 	lds	r24, 0x006E
    19c8:	8d 7f       	andi	r24, 0xFD	; 253
    19ca:	80 93 6e 00 	sts	0x006E, r24
    19ce:	16 bc       	out	0x26, r1	; 38
            bootload();
    19d0:	e0 e0       	ldi	r30, 0x00	; 0
    19d2:	f0 e7       	ldi	r31, 0x70	; 112
    19d4:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    19d6:	10 92 43 01 	sts	0x0143, r1
    19da:	d8 ce       	rjmp	.-592    	; 0x178c <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    19dc:	82 e0       	ldi	r24, 0x02	; 2
    19de:	80 93 43 01 	sts	0x0143, r24
    19e2:	d4 ce       	rjmp	.-600    	; 0x178c <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    19e4:	85 e0       	ldi	r24, 0x05	; 5
    19e6:	80 93 43 01 	sts	0x0143, r24
    19ea:	d0 ce       	rjmp	.-608    	; 0x178c <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    19ec:	80 91 43 01 	lds	r24, 0x0143
    19f0:	83 30       	cpi	r24, 0x03	; 3
    19f2:	09 f4       	brne	.+2      	; 0x19f6 <__vector_23+0x2ea>
    19f4:	cb ce       	rjmp	.-618    	; 0x178c <__vector_23+0x80>
    19f6:	80 91 43 01 	lds	r24, 0x0143
    19fa:	84 30       	cpi	r24, 0x04	; 4
    19fc:	09 f4       	brne	.+2      	; 0x1a00 <__vector_23+0x2f4>
    19fe:	c6 ce       	rjmp	.-628    	; 0x178c <__vector_23+0x80>
                motors_on();
    1a00:	53 9a       	sbi	0x0a, 3	; 10
    1a02:	23 9a       	sbi	0x04, 3	; 4
    1a04:	10 92 b4 00 	sts	0x00B4, r1
    1a08:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    1a0c:	83 e0       	ldi	r24, 0x03	; 3
    1a0e:	80 93 43 01 	sts	0x0143, r24
    1a12:	bc ce       	rjmp	.-648    	; 0x178c <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    1a14:	80 91 43 01 	lds	r24, 0x0143
    1a18:	86 30       	cpi	r24, 0x06	; 6
    1a1a:	09 f0       	breq	.+2      	; 0x1a1e <__vector_23+0x312>
    1a1c:	b7 ce       	rjmp	.-658    	; 0x178c <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    1a1e:	60 91 b9 01 	lds	r22, 0x01B9
    1a22:	80 eb       	ldi	r24, 0xB0	; 176
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	0e 94 98 10 	call	0x2130	; 0x2130 <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    1a2a:	60 91 ba 01 	lds	r22, 0x01BA
    1a2e:	81 eb       	ldi	r24, 0xB1	; 177
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	0e 94 98 10 	call	0x2130	; 0x2130 <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    1a36:	60 91 bd 01 	lds	r22, 0x01BD
    1a3a:	85 e0       	ldi	r24, 0x05	; 5
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	0e 94 98 10 	call	0x2130	; 0x2130 <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    1a42:	60 91 a9 01 	lds	r22, 0x01A9
    1a46:	89 e0       	ldi	r24, 0x09	; 9
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	0e 94 98 10 	call	0x2130	; 0x2130 <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    1a4e:	60 91 bb 01 	lds	r22, 0x01BB
    1a52:	8c e0       	ldi	r24, 0x0C	; 12
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	0e 94 98 10 	call	0x2130	; 0x2130 <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    1a5a:	60 91 bc 01 	lds	r22, 0x01BC
    1a5e:	84 e1       	ldi	r24, 0x14	; 20
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	0e 94 98 10 	call	0x2130	; 0x2130 <__eewr_byte_m328p>
                        motors_off();
    1a66:	53 98       	cbi	0x0a, 3	; 10
    1a68:	23 98       	cbi	0x04, 3	; 4
    1a6a:	10 92 b4 00 	sts	0x00B4, r1
    1a6e:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	80 93 43 01 	sts	0x0143, r24
    1a78:	80 91 aa 01 	lds	r24, 0x01AA
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1a7c:	81 11       	cpse	r24, r1
    1a7e:	60 cf       	rjmp	.-320    	; 0x1940 <__vector_23+0x234>
    1a80:	85 ce       	rjmp	.-758    	; 0x178c <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1a82:	88 23       	and	r24, r24
    1a84:	39 f2       	breq	.-114    	; 0x1a14 <__vector_23+0x308>
    1a86:	81 30       	cpi	r24, 0x01	; 1
    1a88:	c9 f7       	brne	.-14     	; 0x1a7c <__vector_23+0x370>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    1a8a:	80 91 ab 01 	lds	r24, 0x01AB
    1a8e:	90 91 ac 01 	lds	r25, 0x01AC
    1a92:	90 93 ba 01 	sts	0x01BA, r25
    1a96:	80 93 b9 01 	sts	0x01B9, r24
                    cur_motion = MOVE_STOP;
    1a9a:	10 92 41 01 	sts	0x0141, r1
    1a9e:	50 cf       	rjmp	.-352    	; 0x1940 <__vector_23+0x234>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1aa0:	80 91 41 01 	lds	r24, 0x0141
    1aa4:	82 30       	cpi	r24, 0x02	; 2
    1aa6:	71 f1       	breq	.+92     	; 0x1b04 <__vector_23+0x3f8>
    1aa8:	80 91 ae 01 	lds	r24, 0x01AE
                        prev_motion = MOVE_STOP;
    1aac:	10 92 42 01 	sts	0x0142, r1
                        cur_motion = MOVE_RIGHT;
    1ab0:	92 e0       	ldi	r25, 0x02	; 2
    1ab2:	90 93 41 01 	sts	0x0141, r25
                        kilo_turn_right = calibmsg->turn_right;
    1ab6:	80 93 a9 01 	sts	0x01A9, r24
    1aba:	42 cf       	rjmp	.-380    	; 0x1940 <__vector_23+0x234>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	80 93 41 01 	sts	0x0141, r24
    1ac2:	64 ce       	rjmp	.-824    	; 0x178c <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1ac4:	80 91 41 01 	lds	r24, 0x0141
    1ac8:	81 30       	cpi	r24, 0x01	; 1
    1aca:	51 f0       	breq	.+20     	; 0x1ae0 <__vector_23+0x3d4>
    1acc:	80 91 ad 01 	lds	r24, 0x01AD
                        prev_motion = MOVE_STOP;
    1ad0:	10 92 42 01 	sts	0x0142, r1
                        cur_motion = MOVE_LEFT;
    1ad4:	91 e0       	ldi	r25, 0x01	; 1
    1ad6:	90 93 41 01 	sts	0x0141, r25
                        kilo_turn_left = calibmsg->turn_left;
    1ada:	80 93 bd 01 	sts	0x01BD, r24
    1ade:	30 cf       	rjmp	.-416    	; 0x1940 <__vector_23+0x234>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1ae0:	80 91 ad 01 	lds	r24, 0x01AD
    1ae4:	90 91 bd 01 	lds	r25, 0x01BD
    1ae8:	89 13       	cpse	r24, r25
    1aea:	f2 cf       	rjmp	.-28     	; 0x1ad0 <__vector_23+0x3c4>
    1aec:	29 cf       	rjmp	.-430    	; 0x1940 <__vector_23+0x234>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1aee:	80 91 bc 01 	lds	r24, 0x01BC
    1af2:	98 13       	cpse	r25, r24
    1af4:	1a cf       	rjmp	.-460    	; 0x192a <__vector_23+0x21e>
    1af6:	80 91 af 01 	lds	r24, 0x01AF
    1afa:	20 91 bb 01 	lds	r18, 0x01BB
    1afe:	82 13       	cpse	r24, r18
    1b00:	16 cf       	rjmp	.-468    	; 0x192e <__vector_23+0x222>
    1b02:	1e cf       	rjmp	.-452    	; 0x1940 <__vector_23+0x234>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1b04:	80 91 ae 01 	lds	r24, 0x01AE
    1b08:	90 91 a9 01 	lds	r25, 0x01A9
    1b0c:	89 13       	cpse	r24, r25
    1b0e:	ce cf       	rjmp	.-100    	; 0x1aac <__vector_23+0x3a0>
    1b10:	17 cf       	rjmp	.-466    	; 0x1940 <__vector_23+0x234>

00001b12 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    1b12:	fc 01       	movw	r30, r24
    1b14:	2a e0       	ldi	r18, 0x0A	; 10
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    1b16:	8f ef       	ldi	r24, 0xFF	; 255
    1b18:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    1b1a:	31 91       	ld	r19, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    1b1c:	83 27       	eor	r24, r19
    1b1e:	08 2e       	mov	r0, r24
    1b20:	82 95       	swap	r24
    1b22:	80 7f       	andi	r24, 0xF0	; 240
    1b24:	80 25       	eor	r24, r0
    1b26:	09 2e       	mov	r0, r25
    1b28:	98 2f       	mov	r25, r24
    1b2a:	82 95       	swap	r24
    1b2c:	8f 70       	andi	r24, 0x0F	; 15
    1b2e:	08 26       	eor	r0, r24
    1b30:	86 95       	lsr	r24
    1b32:	98 27       	eor	r25, r24
    1b34:	89 27       	eor	r24, r25
    1b36:	88 0f       	add	r24, r24
    1b38:	88 0f       	add	r24, r24
    1b3a:	88 0f       	add	r24, r24
    1b3c:	80 25       	eor	r24, r0
    1b3e:	21 50       	subi	r18, 0x01	; 1

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    1b40:	61 f7       	brne	.-40     	; 0x1b1a <message_crc+0x8>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    1b42:	08 95       	ret

00001b44 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    1b44:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    1b46:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    1b48:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    1b4a:	20 91 7d 01 	lds	r18, 0x017D
    or tmpreg1, ddrreg
    1b4e:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    1b50:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    1b52:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1b54:	30 91 7d 01 	lds	r19, 0x017D
    1b58:	20 30       	cpi	r18, 0x00	; 0
    1b5a:	29 f0       	breq	.+10     	; 0x1b66 <message_send+0x22>
    1b5c:	00 00       	nop
    1b5e:	25 b1       	in	r18, 0x05	; 5
    1b60:	23 2b       	or	r18, r19
    1b62:	25 b9       	out	0x05, r18	; 5
    1b64:	04 c0       	rjmp	.+8      	; 0x1b6e <message_send+0x2a>
    1b66:	00 00       	nop
    1b68:	00 00       	nop
    1b6a:	00 00       	nop
    1b6c:	00 c0       	rjmp	.+0      	; 0x1b6e <message_send+0x2a>
    1b6e:	00 00       	nop
    1b70:	00 00       	nop
    1b72:	00 00       	nop
    1b74:	30 95       	com	r19
    1b76:	25 b1       	in	r18, 0x05	; 5
    1b78:	23 23       	and	r18, r19
    1b7a:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    1b7c:	2e ea       	ldi	r18, 0xAE	; 174
    1b7e:	2a 95       	dec	r18
    1b80:	f1 f7       	brne	.-4      	; 0x1b7e <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    1b82:	2b ee       	ldi	r18, 0xEB	; 235

00001b84 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    1b84:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    1b86:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1b88:	0a c0       	rjmp	.+20     	; 0x1b9e <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1b8a:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1b8c:	30 91 7d 01 	lds	r19, 0x017D
    com tmpreg2
    1b90:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1b92:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1b94:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1b96:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1b98:	0f be       	out	0x3f, r0	; 63
    return 0
    1b9a:	80 e0       	ldi	r24, 0x00	; 0
    1b9c:	08 95       	ret

00001b9e <nocollision>:
nocollision:
    nop
    1b9e:	00 00       	nop
    dec tmpreg1
    1ba0:	2a 95       	dec	r18
    brne checkcollision
    1ba2:	81 f7       	brne	.-32     	; 0x1b84 <checkcollision>

    ldi tmpreg1, 0x01
    1ba4:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1ba6:	30 91 7d 01 	lds	r19, 0x017D
    1baa:	20 30       	cpi	r18, 0x00	; 0
    1bac:	29 f0       	breq	.+10     	; 0x1bb8 <nocollision+0x1a>
    1bae:	00 00       	nop
    1bb0:	25 b1       	in	r18, 0x05	; 5
    1bb2:	23 2b       	or	r18, r19
    1bb4:	25 b9       	out	0x05, r18	; 5
    1bb6:	04 c0       	rjmp	.+8      	; 0x1bc0 <nocollision+0x22>
    1bb8:	00 00       	nop
    1bba:	00 00       	nop
    1bbc:	00 00       	nop
    1bbe:	00 c0       	rjmp	.+0      	; 0x1bc0 <nocollision+0x22>
    1bc0:	00 00       	nop
    1bc2:	00 00       	nop
    1bc4:	00 00       	nop
    1bc6:	30 95       	com	r19
    1bc8:	25 b1       	in	r18, 0x05	; 5
    1bca:	23 23       	and	r18, r19
    1bcc:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    1bce:	00 00       	nop
    1bd0:	24 e5       	ldi	r18, 0x54	; 84
    1bd2:	2a 95       	dec	r18
    1bd4:	f1 f7       	brne	.-4      	; 0x1bd2 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    1bd6:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    1bd8:	8c e0       	ldi	r24, 0x0C	; 12

00001bda <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    1bda:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    1bdc:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    1bde:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    1be0:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    1be2:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    1be4:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    1be6:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    1be8:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    1bea:	50 e0       	ldi	r21, 0x00	; 0

00001bec <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    1bec:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    1bee:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    1bf0:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    1bf2:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    1bf4:	30 91 7d 01 	lds	r19, 0x017D
    1bf8:	20 30       	cpi	r18, 0x00	; 0
    1bfa:	29 f0       	breq	.+10     	; 0x1c06 <sendbit+0x1a>
    1bfc:	00 00       	nop
    1bfe:	25 b1       	in	r18, 0x05	; 5
    1c00:	23 2b       	or	r18, r19
    1c02:	25 b9       	out	0x05, r18	; 5
    1c04:	04 c0       	rjmp	.+8      	; 0x1c0e <sendbit+0x22>
    1c06:	00 00       	nop
    1c08:	00 00       	nop
    1c0a:	00 00       	nop
    1c0c:	00 c0       	rjmp	.+0      	; 0x1c0e <sendbit+0x22>
    1c0e:	00 00       	nop
    1c10:	00 00       	nop
    1c12:	00 00       	nop
    1c14:	30 95       	com	r19
    1c16:	25 b1       	in	r18, 0x05	; 5
    1c18:	23 23       	and	r18, r19
    1c1a:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    1c1c:	00 00       	nop
    1c1e:	21 e5       	ldi	r18, 0x51	; 81
    1c20:	2a 95       	dec	r18
    1c22:	f1 f7       	brne	.-4      	; 0x1c20 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    1c24:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    1c26:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    1c28:	9a 95       	dec	r25
    brne sendbit
    1c2a:	01 f7       	brne	.-64     	; 0x1bec <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    1c2c:	8a 95       	dec	r24
    brne sendbyte
    1c2e:	a9 f6       	brne	.-86     	; 0x1bda <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    1c30:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    1c32:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    1c34:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1c36:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1c38:	30 91 7d 01 	lds	r19, 0x017D
    com tmpreg2
    1c3c:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1c3e:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1c40:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1c42:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1c44:	0f be       	out	0x3f, r0	; 63
    return 1
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	08 95       	ret

00001c4a <main>:
}


int main()
{
    kilo_init();
    1c4a:	0e 94 b9 04 	call	0x972	; 0x972 <kilo_init>
    kilo_message_rx = message_rx;
    1c4e:	8c ec       	ldi	r24, 0xCC	; 204
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	90 93 24 01 	sts	0x0124, r25
    1c56:	80 93 23 01 	sts	0x0123, r24
    kilo_message_tx = message_tx;
    1c5a:	81 eb       	ldi	r24, 0xB1	; 177
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	90 93 22 01 	sts	0x0122, r25
    1c62:	80 93 21 01 	sts	0x0121, r24
    kilo_start(setup, loop);
    1c66:	67 ea       	ldi	r22, 0xA7	; 167
    1c68:	73 e0       	ldi	r23, 0x03	; 3
    1c6a:	8e e6       	ldi	r24, 0x6E	; 110
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	0e 94 b2 05 	call	0xb64	; 0xb64 <kilo_start>

    return 0;
}
    1c72:	80 e0       	ldi	r24, 0x00	; 0
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	08 95       	ret

00001c78 <__divmodhi4>:
    1c78:	97 fb       	bst	r25, 7
    1c7a:	07 2e       	mov	r0, r23
    1c7c:	16 f4       	brtc	.+4      	; 0x1c82 <__divmodhi4+0xa>
    1c7e:	00 94       	com	r0
    1c80:	07 d0       	rcall	.+14     	; 0x1c90 <__divmodhi4_neg1>
    1c82:	77 fd       	sbrc	r23, 7
    1c84:	09 d0       	rcall	.+18     	; 0x1c98 <__divmodhi4_neg2>
    1c86:	0e 94 65 0e 	call	0x1cca	; 0x1cca <__udivmodhi4>
    1c8a:	07 fc       	sbrc	r0, 7
    1c8c:	05 d0       	rcall	.+10     	; 0x1c98 <__divmodhi4_neg2>
    1c8e:	3e f4       	brtc	.+14     	; 0x1c9e <__divmodhi4_exit>

00001c90 <__divmodhi4_neg1>:
    1c90:	90 95       	com	r25
    1c92:	81 95       	neg	r24
    1c94:	9f 4f       	sbci	r25, 0xFF	; 255
    1c96:	08 95       	ret

00001c98 <__divmodhi4_neg2>:
    1c98:	70 95       	com	r23
    1c9a:	61 95       	neg	r22
    1c9c:	7f 4f       	sbci	r23, 0xFF	; 255

00001c9e <__divmodhi4_exit>:
    1c9e:	08 95       	ret

00001ca0 <__tablejump2__>:
    1ca0:	ee 0f       	add	r30, r30
    1ca2:	ff 1f       	adc	r31, r31

00001ca4 <__tablejump__>:
    1ca4:	05 90       	lpm	r0, Z+
    1ca6:	f4 91       	lpm	r31, Z
    1ca8:	e0 2d       	mov	r30, r0
    1caa:	09 94       	ijmp

00001cac <__umulhisi3>:
    1cac:	a2 9f       	mul	r26, r18
    1cae:	b0 01       	movw	r22, r0
    1cb0:	b3 9f       	mul	r27, r19
    1cb2:	c0 01       	movw	r24, r0
    1cb4:	a3 9f       	mul	r26, r19
    1cb6:	70 0d       	add	r23, r0
    1cb8:	81 1d       	adc	r24, r1
    1cba:	11 24       	eor	r1, r1
    1cbc:	91 1d       	adc	r25, r1
    1cbe:	b2 9f       	mul	r27, r18
    1cc0:	70 0d       	add	r23, r0
    1cc2:	81 1d       	adc	r24, r1
    1cc4:	11 24       	eor	r1, r1
    1cc6:	91 1d       	adc	r25, r1
    1cc8:	08 95       	ret

00001cca <__udivmodhi4>:
    1cca:	aa 1b       	sub	r26, r26
    1ccc:	bb 1b       	sub	r27, r27
    1cce:	51 e1       	ldi	r21, 0x11	; 17
    1cd0:	07 c0       	rjmp	.+14     	; 0x1ce0 <__udivmodhi4_ep>

00001cd2 <__udivmodhi4_loop>:
    1cd2:	aa 1f       	adc	r26, r26
    1cd4:	bb 1f       	adc	r27, r27
    1cd6:	a6 17       	cp	r26, r22
    1cd8:	b7 07       	cpc	r27, r23
    1cda:	10 f0       	brcs	.+4      	; 0x1ce0 <__udivmodhi4_ep>
    1cdc:	a6 1b       	sub	r26, r22
    1cde:	b7 0b       	sbc	r27, r23

00001ce0 <__udivmodhi4_ep>:
    1ce0:	88 1f       	adc	r24, r24
    1ce2:	99 1f       	adc	r25, r25
    1ce4:	5a 95       	dec	r21
    1ce6:	a9 f7       	brne	.-22     	; 0x1cd2 <__udivmodhi4_loop>
    1ce8:	80 95       	com	r24
    1cea:	90 95       	com	r25
    1cec:	bc 01       	movw	r22, r24
    1cee:	cd 01       	movw	r24, r26
    1cf0:	08 95       	ret

00001cf2 <__subsf3>:
    1cf2:	50 58       	subi	r21, 0x80	; 128

00001cf4 <__addsf3>:
    1cf4:	bb 27       	eor	r27, r27
    1cf6:	aa 27       	eor	r26, r26
    1cf8:	0e d0       	rcall	.+28     	; 0x1d16 <__addsf3x>
    1cfa:	4d c1       	rjmp	.+666    	; 0x1f96 <__fp_round>
    1cfc:	3e d1       	rcall	.+636    	; 0x1f7a <__fp_pscA>
    1cfe:	30 f0       	brcs	.+12     	; 0x1d0c <__addsf3+0x18>
    1d00:	43 d1       	rcall	.+646    	; 0x1f88 <__fp_pscB>
    1d02:	20 f0       	brcs	.+8      	; 0x1d0c <__addsf3+0x18>
    1d04:	31 f4       	brne	.+12     	; 0x1d12 <__addsf3+0x1e>
    1d06:	9f 3f       	cpi	r25, 0xFF	; 255
    1d08:	11 f4       	brne	.+4      	; 0x1d0e <__addsf3+0x1a>
    1d0a:	1e f4       	brtc	.+6      	; 0x1d12 <__addsf3+0x1e>
    1d0c:	33 c1       	rjmp	.+614    	; 0x1f74 <__fp_nan>
    1d0e:	0e f4       	brtc	.+2      	; 0x1d12 <__addsf3+0x1e>
    1d10:	e0 95       	com	r30
    1d12:	e7 fb       	bst	r30, 7
    1d14:	29 c1       	rjmp	.+594    	; 0x1f68 <__fp_inf>

00001d16 <__addsf3x>:
    1d16:	e9 2f       	mov	r30, r25
    1d18:	4f d1       	rcall	.+670    	; 0x1fb8 <__fp_split3>
    1d1a:	80 f3       	brcs	.-32     	; 0x1cfc <__addsf3+0x8>
    1d1c:	ba 17       	cp	r27, r26
    1d1e:	62 07       	cpc	r22, r18
    1d20:	73 07       	cpc	r23, r19
    1d22:	84 07       	cpc	r24, r20
    1d24:	95 07       	cpc	r25, r21
    1d26:	18 f0       	brcs	.+6      	; 0x1d2e <__addsf3x+0x18>
    1d28:	71 f4       	brne	.+28     	; 0x1d46 <__addsf3x+0x30>
    1d2a:	9e f5       	brtc	.+102    	; 0x1d92 <__addsf3x+0x7c>
    1d2c:	67 c1       	rjmp	.+718    	; 0x1ffc <__fp_zero>
    1d2e:	0e f4       	brtc	.+2      	; 0x1d32 <__addsf3x+0x1c>
    1d30:	e0 95       	com	r30
    1d32:	0b 2e       	mov	r0, r27
    1d34:	ba 2f       	mov	r27, r26
    1d36:	a0 2d       	mov	r26, r0
    1d38:	0b 01       	movw	r0, r22
    1d3a:	b9 01       	movw	r22, r18
    1d3c:	90 01       	movw	r18, r0
    1d3e:	0c 01       	movw	r0, r24
    1d40:	ca 01       	movw	r24, r20
    1d42:	a0 01       	movw	r20, r0
    1d44:	11 24       	eor	r1, r1
    1d46:	ff 27       	eor	r31, r31
    1d48:	59 1b       	sub	r21, r25
    1d4a:	99 f0       	breq	.+38     	; 0x1d72 <__addsf3x+0x5c>
    1d4c:	59 3f       	cpi	r21, 0xF9	; 249
    1d4e:	50 f4       	brcc	.+20     	; 0x1d64 <__addsf3x+0x4e>
    1d50:	50 3e       	cpi	r21, 0xE0	; 224
    1d52:	68 f1       	brcs	.+90     	; 0x1dae <__addsf3x+0x98>
    1d54:	1a 16       	cp	r1, r26
    1d56:	f0 40       	sbci	r31, 0x00	; 0
    1d58:	a2 2f       	mov	r26, r18
    1d5a:	23 2f       	mov	r18, r19
    1d5c:	34 2f       	mov	r19, r20
    1d5e:	44 27       	eor	r20, r20
    1d60:	58 5f       	subi	r21, 0xF8	; 248
    1d62:	f3 cf       	rjmp	.-26     	; 0x1d4a <__addsf3x+0x34>
    1d64:	46 95       	lsr	r20
    1d66:	37 95       	ror	r19
    1d68:	27 95       	ror	r18
    1d6a:	a7 95       	ror	r26
    1d6c:	f0 40       	sbci	r31, 0x00	; 0
    1d6e:	53 95       	inc	r21
    1d70:	c9 f7       	brne	.-14     	; 0x1d64 <__addsf3x+0x4e>
    1d72:	7e f4       	brtc	.+30     	; 0x1d92 <__addsf3x+0x7c>
    1d74:	1f 16       	cp	r1, r31
    1d76:	ba 0b       	sbc	r27, r26
    1d78:	62 0b       	sbc	r22, r18
    1d7a:	73 0b       	sbc	r23, r19
    1d7c:	84 0b       	sbc	r24, r20
    1d7e:	ba f0       	brmi	.+46     	; 0x1dae <__addsf3x+0x98>
    1d80:	91 50       	subi	r25, 0x01	; 1
    1d82:	a1 f0       	breq	.+40     	; 0x1dac <__addsf3x+0x96>
    1d84:	ff 0f       	add	r31, r31
    1d86:	bb 1f       	adc	r27, r27
    1d88:	66 1f       	adc	r22, r22
    1d8a:	77 1f       	adc	r23, r23
    1d8c:	88 1f       	adc	r24, r24
    1d8e:	c2 f7       	brpl	.-16     	; 0x1d80 <__addsf3x+0x6a>
    1d90:	0e c0       	rjmp	.+28     	; 0x1dae <__addsf3x+0x98>
    1d92:	ba 0f       	add	r27, r26
    1d94:	62 1f       	adc	r22, r18
    1d96:	73 1f       	adc	r23, r19
    1d98:	84 1f       	adc	r24, r20
    1d9a:	48 f4       	brcc	.+18     	; 0x1dae <__addsf3x+0x98>
    1d9c:	87 95       	ror	r24
    1d9e:	77 95       	ror	r23
    1da0:	67 95       	ror	r22
    1da2:	b7 95       	ror	r27
    1da4:	f7 95       	ror	r31
    1da6:	9e 3f       	cpi	r25, 0xFE	; 254
    1da8:	08 f0       	brcs	.+2      	; 0x1dac <__addsf3x+0x96>
    1daa:	b3 cf       	rjmp	.-154    	; 0x1d12 <__addsf3+0x1e>
    1dac:	93 95       	inc	r25
    1dae:	88 0f       	add	r24, r24
    1db0:	08 f0       	brcs	.+2      	; 0x1db4 <__addsf3x+0x9e>
    1db2:	99 27       	eor	r25, r25
    1db4:	ee 0f       	add	r30, r30
    1db6:	97 95       	ror	r25
    1db8:	87 95       	ror	r24
    1dba:	08 95       	ret

00001dbc <__divsf3>:
    1dbc:	0c d0       	rcall	.+24     	; 0x1dd6 <__divsf3x>
    1dbe:	eb c0       	rjmp	.+470    	; 0x1f96 <__fp_round>
    1dc0:	e3 d0       	rcall	.+454    	; 0x1f88 <__fp_pscB>
    1dc2:	40 f0       	brcs	.+16     	; 0x1dd4 <__divsf3+0x18>
    1dc4:	da d0       	rcall	.+436    	; 0x1f7a <__fp_pscA>
    1dc6:	30 f0       	brcs	.+12     	; 0x1dd4 <__divsf3+0x18>
    1dc8:	21 f4       	brne	.+8      	; 0x1dd2 <__divsf3+0x16>
    1dca:	5f 3f       	cpi	r21, 0xFF	; 255
    1dcc:	19 f0       	breq	.+6      	; 0x1dd4 <__divsf3+0x18>
    1dce:	cc c0       	rjmp	.+408    	; 0x1f68 <__fp_inf>
    1dd0:	51 11       	cpse	r21, r1
    1dd2:	15 c1       	rjmp	.+554    	; 0x1ffe <__fp_szero>
    1dd4:	cf c0       	rjmp	.+414    	; 0x1f74 <__fp_nan>

00001dd6 <__divsf3x>:
    1dd6:	f0 d0       	rcall	.+480    	; 0x1fb8 <__fp_split3>
    1dd8:	98 f3       	brcs	.-26     	; 0x1dc0 <__divsf3+0x4>

00001dda <__divsf3_pse>:
    1dda:	99 23       	and	r25, r25
    1ddc:	c9 f3       	breq	.-14     	; 0x1dd0 <__divsf3+0x14>
    1dde:	55 23       	and	r21, r21
    1de0:	b1 f3       	breq	.-20     	; 0x1dce <__divsf3+0x12>
    1de2:	95 1b       	sub	r25, r21
    1de4:	55 0b       	sbc	r21, r21
    1de6:	bb 27       	eor	r27, r27
    1de8:	aa 27       	eor	r26, r26
    1dea:	62 17       	cp	r22, r18
    1dec:	73 07       	cpc	r23, r19
    1dee:	84 07       	cpc	r24, r20
    1df0:	38 f0       	brcs	.+14     	; 0x1e00 <__divsf3_pse+0x26>
    1df2:	9f 5f       	subi	r25, 0xFF	; 255
    1df4:	5f 4f       	sbci	r21, 0xFF	; 255
    1df6:	22 0f       	add	r18, r18
    1df8:	33 1f       	adc	r19, r19
    1dfa:	44 1f       	adc	r20, r20
    1dfc:	aa 1f       	adc	r26, r26
    1dfe:	a9 f3       	breq	.-22     	; 0x1dea <__divsf3_pse+0x10>
    1e00:	33 d0       	rcall	.+102    	; 0x1e68 <__divsf3_pse+0x8e>
    1e02:	0e 2e       	mov	r0, r30
    1e04:	3a f0       	brmi	.+14     	; 0x1e14 <__divsf3_pse+0x3a>
    1e06:	e0 e8       	ldi	r30, 0x80	; 128
    1e08:	30 d0       	rcall	.+96     	; 0x1e6a <__divsf3_pse+0x90>
    1e0a:	91 50       	subi	r25, 0x01	; 1
    1e0c:	50 40       	sbci	r21, 0x00	; 0
    1e0e:	e6 95       	lsr	r30
    1e10:	00 1c       	adc	r0, r0
    1e12:	ca f7       	brpl	.-14     	; 0x1e06 <__divsf3_pse+0x2c>
    1e14:	29 d0       	rcall	.+82     	; 0x1e68 <__divsf3_pse+0x8e>
    1e16:	fe 2f       	mov	r31, r30
    1e18:	27 d0       	rcall	.+78     	; 0x1e68 <__divsf3_pse+0x8e>
    1e1a:	66 0f       	add	r22, r22
    1e1c:	77 1f       	adc	r23, r23
    1e1e:	88 1f       	adc	r24, r24
    1e20:	bb 1f       	adc	r27, r27
    1e22:	26 17       	cp	r18, r22
    1e24:	37 07       	cpc	r19, r23
    1e26:	48 07       	cpc	r20, r24
    1e28:	ab 07       	cpc	r26, r27
    1e2a:	b0 e8       	ldi	r27, 0x80	; 128
    1e2c:	09 f0       	breq	.+2      	; 0x1e30 <__divsf3_pse+0x56>
    1e2e:	bb 0b       	sbc	r27, r27
    1e30:	80 2d       	mov	r24, r0
    1e32:	bf 01       	movw	r22, r30
    1e34:	ff 27       	eor	r31, r31
    1e36:	93 58       	subi	r25, 0x83	; 131
    1e38:	5f 4f       	sbci	r21, 0xFF	; 255
    1e3a:	2a f0       	brmi	.+10     	; 0x1e46 <__divsf3_pse+0x6c>
    1e3c:	9e 3f       	cpi	r25, 0xFE	; 254
    1e3e:	51 05       	cpc	r21, r1
    1e40:	68 f0       	brcs	.+26     	; 0x1e5c <__divsf3_pse+0x82>
    1e42:	92 c0       	rjmp	.+292    	; 0x1f68 <__fp_inf>
    1e44:	dc c0       	rjmp	.+440    	; 0x1ffe <__fp_szero>
    1e46:	5f 3f       	cpi	r21, 0xFF	; 255
    1e48:	ec f3       	brlt	.-6      	; 0x1e44 <__divsf3_pse+0x6a>
    1e4a:	98 3e       	cpi	r25, 0xE8	; 232
    1e4c:	dc f3       	brlt	.-10     	; 0x1e44 <__divsf3_pse+0x6a>
    1e4e:	86 95       	lsr	r24
    1e50:	77 95       	ror	r23
    1e52:	67 95       	ror	r22
    1e54:	b7 95       	ror	r27
    1e56:	f7 95       	ror	r31
    1e58:	9f 5f       	subi	r25, 0xFF	; 255
    1e5a:	c9 f7       	brne	.-14     	; 0x1e4e <__divsf3_pse+0x74>
    1e5c:	88 0f       	add	r24, r24
    1e5e:	91 1d       	adc	r25, r1
    1e60:	96 95       	lsr	r25
    1e62:	87 95       	ror	r24
    1e64:	97 f9       	bld	r25, 7
    1e66:	08 95       	ret
    1e68:	e1 e0       	ldi	r30, 0x01	; 1
    1e6a:	66 0f       	add	r22, r22
    1e6c:	77 1f       	adc	r23, r23
    1e6e:	88 1f       	adc	r24, r24
    1e70:	bb 1f       	adc	r27, r27
    1e72:	62 17       	cp	r22, r18
    1e74:	73 07       	cpc	r23, r19
    1e76:	84 07       	cpc	r24, r20
    1e78:	ba 07       	cpc	r27, r26
    1e7a:	20 f0       	brcs	.+8      	; 0x1e84 <__divsf3_pse+0xaa>
    1e7c:	62 1b       	sub	r22, r18
    1e7e:	73 0b       	sbc	r23, r19
    1e80:	84 0b       	sbc	r24, r20
    1e82:	ba 0b       	sbc	r27, r26
    1e84:	ee 1f       	adc	r30, r30
    1e86:	88 f7       	brcc	.-30     	; 0x1e6a <__divsf3_pse+0x90>
    1e88:	e0 95       	com	r30
    1e8a:	08 95       	ret

00001e8c <__fixsfsi>:
    1e8c:	04 d0       	rcall	.+8      	; 0x1e96 <__fixunssfsi>
    1e8e:	68 94       	set
    1e90:	b1 11       	cpse	r27, r1
    1e92:	b5 c0       	rjmp	.+362    	; 0x1ffe <__fp_szero>
    1e94:	08 95       	ret

00001e96 <__fixunssfsi>:
    1e96:	98 d0       	rcall	.+304    	; 0x1fc8 <__fp_splitA>
    1e98:	88 f0       	brcs	.+34     	; 0x1ebc <__fixunssfsi+0x26>
    1e9a:	9f 57       	subi	r25, 0x7F	; 127
    1e9c:	90 f0       	brcs	.+36     	; 0x1ec2 <__fixunssfsi+0x2c>
    1e9e:	b9 2f       	mov	r27, r25
    1ea0:	99 27       	eor	r25, r25
    1ea2:	b7 51       	subi	r27, 0x17	; 23
    1ea4:	a0 f0       	brcs	.+40     	; 0x1ece <__fixunssfsi+0x38>
    1ea6:	d1 f0       	breq	.+52     	; 0x1edc <__fixunssfsi+0x46>
    1ea8:	66 0f       	add	r22, r22
    1eaa:	77 1f       	adc	r23, r23
    1eac:	88 1f       	adc	r24, r24
    1eae:	99 1f       	adc	r25, r25
    1eb0:	1a f0       	brmi	.+6      	; 0x1eb8 <__fixunssfsi+0x22>
    1eb2:	ba 95       	dec	r27
    1eb4:	c9 f7       	brne	.-14     	; 0x1ea8 <__fixunssfsi+0x12>
    1eb6:	12 c0       	rjmp	.+36     	; 0x1edc <__fixunssfsi+0x46>
    1eb8:	b1 30       	cpi	r27, 0x01	; 1
    1eba:	81 f0       	breq	.+32     	; 0x1edc <__fixunssfsi+0x46>
    1ebc:	9f d0       	rcall	.+318    	; 0x1ffc <__fp_zero>
    1ebe:	b1 e0       	ldi	r27, 0x01	; 1
    1ec0:	08 95       	ret
    1ec2:	9c c0       	rjmp	.+312    	; 0x1ffc <__fp_zero>
    1ec4:	67 2f       	mov	r22, r23
    1ec6:	78 2f       	mov	r23, r24
    1ec8:	88 27       	eor	r24, r24
    1eca:	b8 5f       	subi	r27, 0xF8	; 248
    1ecc:	39 f0       	breq	.+14     	; 0x1edc <__fixunssfsi+0x46>
    1ece:	b9 3f       	cpi	r27, 0xF9	; 249
    1ed0:	cc f3       	brlt	.-14     	; 0x1ec4 <__fixunssfsi+0x2e>
    1ed2:	86 95       	lsr	r24
    1ed4:	77 95       	ror	r23
    1ed6:	67 95       	ror	r22
    1ed8:	b3 95       	inc	r27
    1eda:	d9 f7       	brne	.-10     	; 0x1ed2 <__fixunssfsi+0x3c>
    1edc:	3e f4       	brtc	.+14     	; 0x1eec <__fixunssfsi+0x56>
    1ede:	90 95       	com	r25
    1ee0:	80 95       	com	r24
    1ee2:	70 95       	com	r23
    1ee4:	61 95       	neg	r22
    1ee6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee8:	8f 4f       	sbci	r24, 0xFF	; 255
    1eea:	9f 4f       	sbci	r25, 0xFF	; 255
    1eec:	08 95       	ret

00001eee <__floatunsisf>:
    1eee:	e8 94       	clt
    1ef0:	09 c0       	rjmp	.+18     	; 0x1f04 <__floatsisf+0x12>

00001ef2 <__floatsisf>:
    1ef2:	97 fb       	bst	r25, 7
    1ef4:	3e f4       	brtc	.+14     	; 0x1f04 <__floatsisf+0x12>
    1ef6:	90 95       	com	r25
    1ef8:	80 95       	com	r24
    1efa:	70 95       	com	r23
    1efc:	61 95       	neg	r22
    1efe:	7f 4f       	sbci	r23, 0xFF	; 255
    1f00:	8f 4f       	sbci	r24, 0xFF	; 255
    1f02:	9f 4f       	sbci	r25, 0xFF	; 255
    1f04:	99 23       	and	r25, r25
    1f06:	a9 f0       	breq	.+42     	; 0x1f32 <__floatsisf+0x40>
    1f08:	f9 2f       	mov	r31, r25
    1f0a:	96 e9       	ldi	r25, 0x96	; 150
    1f0c:	bb 27       	eor	r27, r27
    1f0e:	93 95       	inc	r25
    1f10:	f6 95       	lsr	r31
    1f12:	87 95       	ror	r24
    1f14:	77 95       	ror	r23
    1f16:	67 95       	ror	r22
    1f18:	b7 95       	ror	r27
    1f1a:	f1 11       	cpse	r31, r1
    1f1c:	f8 cf       	rjmp	.-16     	; 0x1f0e <__floatsisf+0x1c>
    1f1e:	fa f4       	brpl	.+62     	; 0x1f5e <__floatsisf+0x6c>
    1f20:	bb 0f       	add	r27, r27
    1f22:	11 f4       	brne	.+4      	; 0x1f28 <__floatsisf+0x36>
    1f24:	60 ff       	sbrs	r22, 0
    1f26:	1b c0       	rjmp	.+54     	; 0x1f5e <__floatsisf+0x6c>
    1f28:	6f 5f       	subi	r22, 0xFF	; 255
    1f2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f2c:	8f 4f       	sbci	r24, 0xFF	; 255
    1f2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f30:	16 c0       	rjmp	.+44     	; 0x1f5e <__floatsisf+0x6c>
    1f32:	88 23       	and	r24, r24
    1f34:	11 f0       	breq	.+4      	; 0x1f3a <__floatsisf+0x48>
    1f36:	96 e9       	ldi	r25, 0x96	; 150
    1f38:	11 c0       	rjmp	.+34     	; 0x1f5c <__floatsisf+0x6a>
    1f3a:	77 23       	and	r23, r23
    1f3c:	21 f0       	breq	.+8      	; 0x1f46 <__floatsisf+0x54>
    1f3e:	9e e8       	ldi	r25, 0x8E	; 142
    1f40:	87 2f       	mov	r24, r23
    1f42:	76 2f       	mov	r23, r22
    1f44:	05 c0       	rjmp	.+10     	; 0x1f50 <__floatsisf+0x5e>
    1f46:	66 23       	and	r22, r22
    1f48:	71 f0       	breq	.+28     	; 0x1f66 <__floatsisf+0x74>
    1f4a:	96 e8       	ldi	r25, 0x86	; 134
    1f4c:	86 2f       	mov	r24, r22
    1f4e:	70 e0       	ldi	r23, 0x00	; 0
    1f50:	60 e0       	ldi	r22, 0x00	; 0
    1f52:	2a f0       	brmi	.+10     	; 0x1f5e <__floatsisf+0x6c>
    1f54:	9a 95       	dec	r25
    1f56:	66 0f       	add	r22, r22
    1f58:	77 1f       	adc	r23, r23
    1f5a:	88 1f       	adc	r24, r24
    1f5c:	da f7       	brpl	.-10     	; 0x1f54 <__floatsisf+0x62>
    1f5e:	88 0f       	add	r24, r24
    1f60:	96 95       	lsr	r25
    1f62:	87 95       	ror	r24
    1f64:	97 f9       	bld	r25, 7
    1f66:	08 95       	ret

00001f68 <__fp_inf>:
    1f68:	97 f9       	bld	r25, 7
    1f6a:	9f 67       	ori	r25, 0x7F	; 127
    1f6c:	80 e8       	ldi	r24, 0x80	; 128
    1f6e:	70 e0       	ldi	r23, 0x00	; 0
    1f70:	60 e0       	ldi	r22, 0x00	; 0
    1f72:	08 95       	ret

00001f74 <__fp_nan>:
    1f74:	9f ef       	ldi	r25, 0xFF	; 255
    1f76:	80 ec       	ldi	r24, 0xC0	; 192
    1f78:	08 95       	ret

00001f7a <__fp_pscA>:
    1f7a:	00 24       	eor	r0, r0
    1f7c:	0a 94       	dec	r0
    1f7e:	16 16       	cp	r1, r22
    1f80:	17 06       	cpc	r1, r23
    1f82:	18 06       	cpc	r1, r24
    1f84:	09 06       	cpc	r0, r25
    1f86:	08 95       	ret

00001f88 <__fp_pscB>:
    1f88:	00 24       	eor	r0, r0
    1f8a:	0a 94       	dec	r0
    1f8c:	12 16       	cp	r1, r18
    1f8e:	13 06       	cpc	r1, r19
    1f90:	14 06       	cpc	r1, r20
    1f92:	05 06       	cpc	r0, r21
    1f94:	08 95       	ret

00001f96 <__fp_round>:
    1f96:	09 2e       	mov	r0, r25
    1f98:	03 94       	inc	r0
    1f9a:	00 0c       	add	r0, r0
    1f9c:	11 f4       	brne	.+4      	; 0x1fa2 <__fp_round+0xc>
    1f9e:	88 23       	and	r24, r24
    1fa0:	52 f0       	brmi	.+20     	; 0x1fb6 <__fp_round+0x20>
    1fa2:	bb 0f       	add	r27, r27
    1fa4:	40 f4       	brcc	.+16     	; 0x1fb6 <__fp_round+0x20>
    1fa6:	bf 2b       	or	r27, r31
    1fa8:	11 f4       	brne	.+4      	; 0x1fae <__fp_round+0x18>
    1faa:	60 ff       	sbrs	r22, 0
    1fac:	04 c0       	rjmp	.+8      	; 0x1fb6 <__fp_round+0x20>
    1fae:	6f 5f       	subi	r22, 0xFF	; 255
    1fb0:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb2:	8f 4f       	sbci	r24, 0xFF	; 255
    1fb4:	9f 4f       	sbci	r25, 0xFF	; 255
    1fb6:	08 95       	ret

00001fb8 <__fp_split3>:
    1fb8:	57 fd       	sbrc	r21, 7
    1fba:	90 58       	subi	r25, 0x80	; 128
    1fbc:	44 0f       	add	r20, r20
    1fbe:	55 1f       	adc	r21, r21
    1fc0:	59 f0       	breq	.+22     	; 0x1fd8 <__fp_splitA+0x10>
    1fc2:	5f 3f       	cpi	r21, 0xFF	; 255
    1fc4:	71 f0       	breq	.+28     	; 0x1fe2 <__fp_splitA+0x1a>
    1fc6:	47 95       	ror	r20

00001fc8 <__fp_splitA>:
    1fc8:	88 0f       	add	r24, r24
    1fca:	97 fb       	bst	r25, 7
    1fcc:	99 1f       	adc	r25, r25
    1fce:	61 f0       	breq	.+24     	; 0x1fe8 <__fp_splitA+0x20>
    1fd0:	9f 3f       	cpi	r25, 0xFF	; 255
    1fd2:	79 f0       	breq	.+30     	; 0x1ff2 <__fp_splitA+0x2a>
    1fd4:	87 95       	ror	r24
    1fd6:	08 95       	ret
    1fd8:	12 16       	cp	r1, r18
    1fda:	13 06       	cpc	r1, r19
    1fdc:	14 06       	cpc	r1, r20
    1fde:	55 1f       	adc	r21, r21
    1fe0:	f2 cf       	rjmp	.-28     	; 0x1fc6 <__fp_split3+0xe>
    1fe2:	46 95       	lsr	r20
    1fe4:	f1 df       	rcall	.-30     	; 0x1fc8 <__fp_splitA>
    1fe6:	08 c0       	rjmp	.+16     	; 0x1ff8 <__fp_splitA+0x30>
    1fe8:	16 16       	cp	r1, r22
    1fea:	17 06       	cpc	r1, r23
    1fec:	18 06       	cpc	r1, r24
    1fee:	99 1f       	adc	r25, r25
    1ff0:	f1 cf       	rjmp	.-30     	; 0x1fd4 <__fp_splitA+0xc>
    1ff2:	86 95       	lsr	r24
    1ff4:	71 05       	cpc	r23, r1
    1ff6:	61 05       	cpc	r22, r1
    1ff8:	08 94       	sec
    1ffa:	08 95       	ret

00001ffc <__fp_zero>:
    1ffc:	e8 94       	clt

00001ffe <__fp_szero>:
    1ffe:	bb 27       	eor	r27, r27
    2000:	66 27       	eor	r22, r22
    2002:	77 27       	eor	r23, r23
    2004:	cb 01       	movw	r24, r22
    2006:	97 f9       	bld	r25, 7
    2008:	08 95       	ret

0000200a <__gesf2>:
    200a:	66 d0       	rcall	.+204    	; 0x20d8 <__fp_cmp>
    200c:	08 f4       	brcc	.+2      	; 0x2010 <__gesf2+0x6>
    200e:	8f ef       	ldi	r24, 0xFF	; 255
    2010:	08 95       	ret

00002012 <__mulsf3>:
    2012:	0b d0       	rcall	.+22     	; 0x202a <__mulsf3x>
    2014:	c0 cf       	rjmp	.-128    	; 0x1f96 <__fp_round>
    2016:	b1 df       	rcall	.-158    	; 0x1f7a <__fp_pscA>
    2018:	28 f0       	brcs	.+10     	; 0x2024 <__mulsf3+0x12>
    201a:	b6 df       	rcall	.-148    	; 0x1f88 <__fp_pscB>
    201c:	18 f0       	brcs	.+6      	; 0x2024 <__mulsf3+0x12>
    201e:	95 23       	and	r25, r21
    2020:	09 f0       	breq	.+2      	; 0x2024 <__mulsf3+0x12>
    2022:	a2 cf       	rjmp	.-188    	; 0x1f68 <__fp_inf>
    2024:	a7 cf       	rjmp	.-178    	; 0x1f74 <__fp_nan>
    2026:	11 24       	eor	r1, r1
    2028:	ea cf       	rjmp	.-44     	; 0x1ffe <__fp_szero>

0000202a <__mulsf3x>:
    202a:	c6 df       	rcall	.-116    	; 0x1fb8 <__fp_split3>
    202c:	a0 f3       	brcs	.-24     	; 0x2016 <__mulsf3+0x4>

0000202e <__mulsf3_pse>:
    202e:	95 9f       	mul	r25, r21
    2030:	d1 f3       	breq	.-12     	; 0x2026 <__mulsf3+0x14>
    2032:	95 0f       	add	r25, r21
    2034:	50 e0       	ldi	r21, 0x00	; 0
    2036:	55 1f       	adc	r21, r21
    2038:	62 9f       	mul	r22, r18
    203a:	f0 01       	movw	r30, r0
    203c:	72 9f       	mul	r23, r18
    203e:	bb 27       	eor	r27, r27
    2040:	f0 0d       	add	r31, r0
    2042:	b1 1d       	adc	r27, r1
    2044:	63 9f       	mul	r22, r19
    2046:	aa 27       	eor	r26, r26
    2048:	f0 0d       	add	r31, r0
    204a:	b1 1d       	adc	r27, r1
    204c:	aa 1f       	adc	r26, r26
    204e:	64 9f       	mul	r22, r20
    2050:	66 27       	eor	r22, r22
    2052:	b0 0d       	add	r27, r0
    2054:	a1 1d       	adc	r26, r1
    2056:	66 1f       	adc	r22, r22
    2058:	82 9f       	mul	r24, r18
    205a:	22 27       	eor	r18, r18
    205c:	b0 0d       	add	r27, r0
    205e:	a1 1d       	adc	r26, r1
    2060:	62 1f       	adc	r22, r18
    2062:	73 9f       	mul	r23, r19
    2064:	b0 0d       	add	r27, r0
    2066:	a1 1d       	adc	r26, r1
    2068:	62 1f       	adc	r22, r18
    206a:	83 9f       	mul	r24, r19
    206c:	a0 0d       	add	r26, r0
    206e:	61 1d       	adc	r22, r1
    2070:	22 1f       	adc	r18, r18
    2072:	74 9f       	mul	r23, r20
    2074:	33 27       	eor	r19, r19
    2076:	a0 0d       	add	r26, r0
    2078:	61 1d       	adc	r22, r1
    207a:	23 1f       	adc	r18, r19
    207c:	84 9f       	mul	r24, r20
    207e:	60 0d       	add	r22, r0
    2080:	21 1d       	adc	r18, r1
    2082:	82 2f       	mov	r24, r18
    2084:	76 2f       	mov	r23, r22
    2086:	6a 2f       	mov	r22, r26
    2088:	11 24       	eor	r1, r1
    208a:	9f 57       	subi	r25, 0x7F	; 127
    208c:	50 40       	sbci	r21, 0x00	; 0
    208e:	8a f0       	brmi	.+34     	; 0x20b2 <__mulsf3_pse+0x84>
    2090:	e1 f0       	breq	.+56     	; 0x20ca <__mulsf3_pse+0x9c>
    2092:	88 23       	and	r24, r24
    2094:	4a f0       	brmi	.+18     	; 0x20a8 <__mulsf3_pse+0x7a>
    2096:	ee 0f       	add	r30, r30
    2098:	ff 1f       	adc	r31, r31
    209a:	bb 1f       	adc	r27, r27
    209c:	66 1f       	adc	r22, r22
    209e:	77 1f       	adc	r23, r23
    20a0:	88 1f       	adc	r24, r24
    20a2:	91 50       	subi	r25, 0x01	; 1
    20a4:	50 40       	sbci	r21, 0x00	; 0
    20a6:	a9 f7       	brne	.-22     	; 0x2092 <__mulsf3_pse+0x64>
    20a8:	9e 3f       	cpi	r25, 0xFE	; 254
    20aa:	51 05       	cpc	r21, r1
    20ac:	70 f0       	brcs	.+28     	; 0x20ca <__mulsf3_pse+0x9c>
    20ae:	5c cf       	rjmp	.-328    	; 0x1f68 <__fp_inf>
    20b0:	a6 cf       	rjmp	.-180    	; 0x1ffe <__fp_szero>
    20b2:	5f 3f       	cpi	r21, 0xFF	; 255
    20b4:	ec f3       	brlt	.-6      	; 0x20b0 <__mulsf3_pse+0x82>
    20b6:	98 3e       	cpi	r25, 0xE8	; 232
    20b8:	dc f3       	brlt	.-10     	; 0x20b0 <__mulsf3_pse+0x82>
    20ba:	86 95       	lsr	r24
    20bc:	77 95       	ror	r23
    20be:	67 95       	ror	r22
    20c0:	b7 95       	ror	r27
    20c2:	f7 95       	ror	r31
    20c4:	e7 95       	ror	r30
    20c6:	9f 5f       	subi	r25, 0xFF	; 255
    20c8:	c1 f7       	brne	.-16     	; 0x20ba <__mulsf3_pse+0x8c>
    20ca:	fe 2b       	or	r31, r30
    20cc:	88 0f       	add	r24, r24
    20ce:	91 1d       	adc	r25, r1
    20d0:	96 95       	lsr	r25
    20d2:	87 95       	ror	r24
    20d4:	97 f9       	bld	r25, 7
    20d6:	08 95       	ret

000020d8 <__fp_cmp>:
    20d8:	99 0f       	add	r25, r25
    20da:	00 08       	sbc	r0, r0
    20dc:	55 0f       	add	r21, r21
    20de:	aa 0b       	sbc	r26, r26
    20e0:	e0 e8       	ldi	r30, 0x80	; 128
    20e2:	fe ef       	ldi	r31, 0xFE	; 254
    20e4:	16 16       	cp	r1, r22
    20e6:	17 06       	cpc	r1, r23
    20e8:	e8 07       	cpc	r30, r24
    20ea:	f9 07       	cpc	r31, r25
    20ec:	c0 f0       	brcs	.+48     	; 0x211e <__fp_cmp+0x46>
    20ee:	12 16       	cp	r1, r18
    20f0:	13 06       	cpc	r1, r19
    20f2:	e4 07       	cpc	r30, r20
    20f4:	f5 07       	cpc	r31, r21
    20f6:	98 f0       	brcs	.+38     	; 0x211e <__fp_cmp+0x46>
    20f8:	62 1b       	sub	r22, r18
    20fa:	73 0b       	sbc	r23, r19
    20fc:	84 0b       	sbc	r24, r20
    20fe:	95 0b       	sbc	r25, r21
    2100:	39 f4       	brne	.+14     	; 0x2110 <__fp_cmp+0x38>
    2102:	0a 26       	eor	r0, r26
    2104:	61 f0       	breq	.+24     	; 0x211e <__fp_cmp+0x46>
    2106:	23 2b       	or	r18, r19
    2108:	24 2b       	or	r18, r20
    210a:	25 2b       	or	r18, r21
    210c:	21 f4       	brne	.+8      	; 0x2116 <__fp_cmp+0x3e>
    210e:	08 95       	ret
    2110:	0a 26       	eor	r0, r26
    2112:	09 f4       	brne	.+2      	; 0x2116 <__fp_cmp+0x3e>
    2114:	a1 40       	sbci	r26, 0x01	; 1
    2116:	a6 95       	lsr	r26
    2118:	8f ef       	ldi	r24, 0xFF	; 255
    211a:	81 1d       	adc	r24, r1
    211c:	81 1d       	adc	r24, r1
    211e:	08 95       	ret

00002120 <__eerd_byte_m328p>:
    2120:	f9 99       	sbic	0x1f, 1	; 31
    2122:	fe cf       	rjmp	.-4      	; 0x2120 <__eerd_byte_m328p>
    2124:	92 bd       	out	0x22, r25	; 34
    2126:	81 bd       	out	0x21, r24	; 33
    2128:	f8 9a       	sbi	0x1f, 0	; 31
    212a:	99 27       	eor	r25, r25
    212c:	80 b5       	in	r24, 0x20	; 32
    212e:	08 95       	ret

00002130 <__eewr_byte_m328p>:
    2130:	26 2f       	mov	r18, r22

00002132 <__eewr_r18_m328p>:
    2132:	f9 99       	sbic	0x1f, 1	; 31
    2134:	fe cf       	rjmp	.-4      	; 0x2132 <__eewr_r18_m328p>
    2136:	1f ba       	out	0x1f, r1	; 31
    2138:	92 bd       	out	0x22, r25	; 34
    213a:	81 bd       	out	0x21, r24	; 33
    213c:	20 bd       	out	0x20, r18	; 32
    213e:	0f b6       	in	r0, 0x3f	; 63
    2140:	f8 94       	cli
    2142:	fa 9a       	sbi	0x1f, 2	; 31
    2144:	f9 9a       	sbi	0x1f, 1	; 31
    2146:	0f be       	out	0x3f, r0	; 63
    2148:	01 96       	adiw	r24, 0x01	; 1
    214a:	08 95       	ret

0000214c <_exit>:
    214c:	f8 94       	cli

0000214e <__stop_program>:
    214e:	ff cf       	rjmp	.-2      	; 0x214e <__stop_program>
